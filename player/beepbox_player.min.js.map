{"version":3,"names":["TypePresets","sampleLoadingState","constructor","this","statusTable","urlTable","totalSamples","samplesLoaded","SampleLoadedEvent","Event","super","SampleLoadEvents","EventTarget","sampleLoadEvents","startLoadingSample","url","chipWaveIndex","presetSettings","rawLoopOptions","customSampleRate","sampleLoaderAudioContext","AudioContext","sampleRate","closedSampleLoaderAudioContext","chipWave","Config","chipWaves","rawChipWave","rawChipWaves","rawRawChipWave","rawRawChipWaves","fetch","then","response","ok","arrayBuffer","Promise","reject","Error","decodeAudioData","audioBuffer","samples","centerWave","Array","from","getChannelData","integratedSamples","performIntegral","length","dispatchEvent","close","catch","error","alert","loadScript","resolve","willReloadForCustomSamples","script","document","createElement","src","head","appendChild","addEventListener","event","loadBuiltInSamples","set","defaultIntegratedSamples","defaultSamples","name","expression","isSampled","isPercussion","extraSampleDetune","startIndex","index","integratedChipWave","dictionary","chipWaveSamples","kicksample","snaresample","pianosample","WOWsample","overdrivesample","trumpetsample","saxophonesample","orchhitsample","detatchedviolinsample","synthsample","sonic3snaresample","comeonsample","choirsample","overdrivensample","flutesample","legatoviolinsample","tremoloviolinsample","amenbreaksample","pizzicatoviolinsample","timallengruntsample","tubasample","loopingcymbalsample","kickdrumsample","snaredrumsample","closedhihatsample","foothihatsample","openhihatsample","crashsample","pianoC4sample","liverpadsample","marimbasample","susdotwavsample","wackyboxttssample","peppersteak1","peppersteak2","vinyl","slapbass","hdeboverdrive","sunsoftbass","masculinechoir","femininechoir","southtololoche","harp","panflute","krumhorn","timpani","crowdhey","warioland4brass","warioland4organ","warioland4daow","warioland4hourchime","warioland4tick","kirbykick","kirbysnare","kirbybongo","kirbyclick","funkkick","funksnare","funksnareleft","funksnareright","funktomhigh","funktomlow","funkhihatclosed","funkhihathalfopen","funkhihatopen","funkhihatopentip","funkhihatfoot","funkcrash","funkcrashtip","funkride","chipWaveIndexOffset","chipWaveSample","chronoperc1finalsample","synthkickfmsample","woodclicksample","acousticsnaresample","catpaintboxsample","gameboypaintboxsample","mariopaintboxsample","drumpaintboxsample","yoshipaintboxsample","starpaintboxsample","fireflowerpaintboxsample","dogpaintbox","oinkpaintbox","swanpaintboxsample","facepaintboxsample","console","log","wave","sum","i","average","push","Float32Array","centerAndNormalizeWave","magn","Math","abs","magnAvg","cumulative","newWave","getPulseWidthRatio","pulseWidth","pulseWidthRange","getDrumWave","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","round","ultraboxnewchipnoiserand","pow","clz32","b3","b4","b5","b6","b0","b1","b2","white","lastOut","waveLength","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","highIndex","min","retroWave","combinedAmplitude","lerped","log2","amplitude","radians","PI","cos","sin","generateSquareWave","phaseWidth","sineWaveLength","centerPoint","generateSawWave","inverse","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","value","result","effectsIncludeTransition","effects","effectsIncludeChord","effectsIncludePitchShift","effectsIncludeDetune","effectsIncludeVibrato","effectsIncludeNoteFilter","effectsIncludeDistortion","effectsIncludeBitcrusher","effectsIncludePanning","effectsIncludeChorus","effectsIncludeEcho","effectsIncludeReverb","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","jsonFormat","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","octaveMin","octaveMax","echoDelayRange","echoDelayStepTicks","echoSustainRange","echoShelfHz","echoShelfGain","reverbShelfHz","reverbShelfGain","reverbRange","reverbDelayBufferSize","reverbDelayBufferMask","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","instrumentCountMin","layeredInstrumentCountMax","patternInstrumentCountMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipBaseExpression","fmBaseExpression","noiseBaseExpression","spectrumBaseExpression","drumsetBaseExpression","harmonicsBaseExpression","pwmBaseExpression","supersawBaseExpression","pickedStringBaseExpression","distortionBaseVolume","bitcrusherBaseVolume","raw","newArray","Object","assign","key","rawChipToIntegrated","firstIndexForSamplesInChipWaveList","pitchFilterMult","isSoft","filterFreqStep","filterFreqRange","filterFreqReferenceSetting","filterFreqReferenceHz","filterFreqMaxHz","filterFreqMinHz","filterGainRange","filterGainCenter","filterGainStep","filterMaxPoints","filterTypeNames","filterMorphCount","filterSimpleCutRange","filterSimplePeakRange","fadeInRange","fadeOutTicks","fadeOutNeutral","drumsetFadeOutTicks","transitions","isSeamless","continues","slides","slideTicks","includeAdjacentPatterns","vibratos","type","delayTicks","vibratoTypes","periodsSeconds","period","arpSpeedScale","unisons","voices","spread","offset","sign","effectNames","effectOrder","noteSizeMax","volumeRange","volumeLogScale","panCenter","panMax","panDelaySecondsMax","chorusRange","chorusPeriodSeconds","chorusDelayRange","chorusDelayOffsets","chorusPhaseOffsets","chorusMaxDelay","concat","reduce","x","y","max","chords","customInterval","arpeggiates","strumParts","singleTone","maxChordSize","operatorCount","maxPitchOrOperatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","algorithms6Op","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","feedbacks","indices","feedbacks6Op","spectrumNoiseLength","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","spectrumMax","harmonicsControlPoints","harmonicsRendered","harmonicsRenderedForPickedString","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthStepPower","supersawVoiceCount","supersawDynamismMax","supersawSpreadMax","supersawShapeMax","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","pitchesPerOctave","drumCount","pitchOctaves","modCount","maxPitch","maximumTonesPerChannel","justIntonationSemitones","map","pitchShiftRange","pitchShiftCenter","detuneCenter","detuneMax","detuneMin","songDetuneMin","songDetuneMax","unisonVoicesMin","unisonVoicesMax","unisonSpreadMin","unisonSpreadMax","unisonOffsetMin","unisonOffsetMax","unisonExpressionMin","unisonExpressionMax","unisonSignMin","unisonSignMax","sineWaveMask","sineWave","generateSineWave","pickedStringDispersionCenterFreq","pickedStringDispersionFreqScale","pickedStringDispersionFreqMult","pickedStringShelfHz","distortionRange","stringSustainRange","stringDecayRate","enableAcousticSustain","sustainTypeNames","bitcrusherFreqRange","bitcrusherOctaveStep","bitcrusherQuantizationRange","maxEnvelopeCount","defaultAutomationRange","instrumentAutomationTargets","computeIndex","displayName","interleave","isFilter","maxCount","effect","compatibleInstruments","operatorWaves","asin","generateTriWave","drive","generateTrapezoidWave","generateQuasiSineWave","pwmOperatorWaves","barEditorHeight","modulators","pianoName","maxRawVol","newNoteVol","forSong","convertRealFactor","associatedEffect","promptName","promptDesc","ceil","invertSliderIndicator","applyElementArgs","element","args","args_1","__values","args_1_1","next","done","arg","Node","createTextNode","isArray","Symbol","iterator","__spread","Element","_d","e_2","_e","setAttribute","join","warn","tagName","_f","e_3","_g","styleKey","style","setProperty","removeAttribute","svgNS","HTML","_i","arguments","createRange","createContextualFragment","SVG","fragment","createDocumentFragment","svgParser","DOMParser","parseFromString","documentElement","firstChild","importNode","name_1","_c","split","name_2","createElementNS","test","snakeCaseName","replace","ColorConfig","resetColors","colorLookup","clear","getArbitaryChannelColor","channel","usesColorFormula","base","noiseChannels","getComputed","modChannels","pitchChannels","regex","secondaryChannel","exec","primaryChannel","secondaryNote","primaryNote","colorFormulaPitchLimit","colorFormulaNoiseLimit","colorFormulaModLimit","c_noiseSecondaryChannelHue","c_noiseSecondaryChannelHueScale","c_noiseChannelCountOverride","c_noiseSecondaryChannelSat","c_noiseSecondaryChannelSatScale","c_noiseSecondaryChannelLum","c_noiseSecondaryChannelLumScale","c_noisePrimaryChannelHue","c_noisePrimaryChannelHueScale","c_noisePrimaryChannelSat","c_noisePrimaryChannelSatScale","c_noisePrimaryChannelLum","c_noisePrimaryChannelLumScale","c_noiseSecondaryNoteHue","c_noiseSecondaryNoteHueScale","c_noiseSecondaryNoteSat","c_noiseSecondaryNoteSatScale","c_noiseSecondaryNoteLum","c_noiseSecondaryNoteLumScale","c_noisePrimaryNoteHue","c_noisePrimaryNoteHueScale","c_noisePrimaryNoteSat","c_noisePrimaryNoteSatScale","c_noisePrimaryNoteLum","c_noisePrimaryNoteLumScale","c_modSecondaryChannelHue","c_modSecondaryChannelHueScale","c_modChannelCountOverride","c_modSecondaryChannelSat","c_modSecondaryChannelSatScale","c_modSecondaryChannelLum","c_modSecondaryChannelLumScale","c_modPrimaryChannelHue","c_modPrimaryChannelHueScale","c_modPrimaryChannelSat","c_modPrimaryChannelSatScale","c_modPrimaryChannelLum","c_modPrimaryChannelLumScale","c_modSecondaryNoteHue","c_modSecondaryNoteHueScale","c_modSecondaryNoteSat","c_modSecondaryNoteSatScale","c_modSecondaryNoteLum","c_modSecondaryNoteLumScale","c_modPrimaryNoteHue","c_modPrimaryNoteHueScale","c_modPrimaryNoteSat","c_modPrimaryNoteSatScale","c_modPrimaryNoteLum","c_modPrimaryNoteLumScale","c_pitchSecondaryChannelHue","c_pitchSecondaryChannelHueScale","c_pitchChannelCountOverride","c_pitchSecondaryChannelSat","c_pitchSecondaryChannelSatScale","floor","c_pitchSecondaryChannelLum","c_pitchSecondaryChannelLumScale","c_pitchPrimaryChannelHue","c_pitchPrimaryChannelHueScale","c_pitchPrimaryChannelSat","c_pitchPrimaryChannelSatScale","c_pitchPrimaryChannelLum","c_pitchPrimaryChannelLumScale","c_pitchSecondaryNoteHue","c_pitchSecondaryNoteHueScale","c_pitchSecondaryNoteSat","c_pitchSecondaryNoteSatScale","c_pitchSecondaryNoteLum","c_pitchSecondaryNoteLumScale","c_pitchPrimaryNoteHue","c_pitchPrimaryNoteHueScale","c_pitchPrimaryNoteSat","c_pitchPrimaryNoteSatScale","c_pitchPrimaryNoteLum","c_pitchPrimaryNoteLumScale","getComputedChannelColor","song","getChannelColor","has","get","pitchChannelCount","newChannelColors","noiseChannelCount","setTheme","theme","themes","undefined","defaultTheme","_styleElement","textContent","valuesToAdd","getComputedStyle","getPropertyValue","themeColor","querySelector","trim","c_invertedText","c_trackEditorBgNoiseDim","c_trackEditorBgNoise","c_trackEditorBgModDim","c_trackEditorBgMod","c_trackEditorBgPitchDim","c_trackEditorBgPitch","Map","forest","canyon","midnight","beachcombing","roe","moonlight","autumn","fruit","sunset","toxic","portal","fusion","nebula","energized","neapolitan","poly","blutonium","slushie","zefbox","harrybox","brucebox","nerdbox","nepbox","foxbox","wackybox","microbox","paandorasbox","midbox","dogebox2","slarmoosbox","custom","localStorage","getItem","pageMargin","editorBackground","hoverPreview","playhead","primaryText","secondaryText","invertedText","textSelection","boxSelectionFill","loopAccent","linkAccent","uiWidgetBackground","uiWidgetFocus","pitchBackground","tonic","fifthNote","whitePianoKey","blackPianoKey","whitePianoKeyText","blackPianoKeyText","useColorFormula","pitchSecondaryChannelHue","pitchSecondaryChannelHueScale","pitchSecondaryChannelSat","pitchSecondaryChannelSatScale","pitchSecondaryChannelLum","pitchSecondaryChannelLumScale","pitchPrimaryChannelHue","pitchPrimaryChannelHueScale","pitchPrimaryChannelSat","pitchPrimaryChannelSatScale","pitchPrimaryChannelLum","pitchPrimaryChannelLumScale","pitchSecondaryNoteHue","pitchSecondaryNoteHueScale","pitchSecondaryNoteSat","pitchSecondaryNoteSatScale","pitchSecondaryNoteLum","pitchSecondaryNoteLumScale","pitchPrimaryNoteHue","pitchPrimaryNoteHueScale","pitchPrimaryNoteSat","pitchPrimaryNoteSatScale","pitchPrimaryNoteLum","pitchPrimaryNoteLumScale","modSecondaryChannelHue","modSecondaryChannelHueScale","modSecondaryChannelSat","modSecondaryChannelSatScale","modSecondaryChannelLum","modSecondaryChannelLumScale","modPrimaryChannelHue","modPrimaryChannelHueScale","modPrimaryChannelSat","modPrimaryChannelSatScale","modPrimaryChannelLum","modPrimaryChannelLumScale","modSecondaryNoteHue","modSecondaryNoteHueScale","modSecondaryNoteSat","modSecondaryNoteSatScale","modSecondaryNoteLum","modSecondaryNoteLumScale","modPrimaryNoteHue","modPrimaryNoteHueScale","modPrimaryNoteSat","modPrimaryNoteSatScale","modPrimaryNoteLum","modPrimaryNoteLumScale","noiseSecondaryChannelHue","noiseSecondaryChannelHueScale","noiseSecondaryChannelSat","noiseSecondaryChannelSatScale","noiseSecondaryChannelLum","noiseSecondaryChannelLumScale","noisePrimaryChannelHue","noisePrimaryChannelHueScale","noisePrimaryChannelSat","noisePrimaryChannelSatScale","noisePrimaryChannelLum","noisePrimaryChannelLumScale","noiseSecondaryNoteHue","noiseSecondaryNoteHueScale","noiseSecondaryNoteSat","noiseSecondaryNoteSatScale","noiseSecondaryNoteLum","noiseSecondaryNoteLumScale","noisePrimaryNoteHue","noisePrimaryNoteHueScale","noisePrimaryNoteSat","noisePrimaryNoteSatScale","noisePrimaryNoteLum","noisePrimaryNoteLumScale","trackEditorBgPitch","trackEditorBgPitchDim","trackEditorBgNoise","trackEditorBgNoiseDim","trackEditorBgMod","trackEditorBgModDim","multiplicativeModSlider","overwritingModSlider","indicatorPrimary","indicatorSecondary","select2OptGroup","inputBoxOutline","muteButtonNormal","muteButtonMod","modLabelPrimary","modLabelSecondaryText","modLabelPrimaryText","disabledNotePrimary","disabledNoteSecondary","navigator","userAgent","EditorConfig","valueToPreset","presetValue","categoryIndex","presetIndex","_a","presetCategories","presets","midiProgramToPresetValue","program","category","preset","generalMidi","midiProgram","nameToPresetValue","presetName","instrumentToPreset","instrument","factor","countBits","n","isPowerOf2","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","version","versionDisplayName","releaseNotesURL","isOnMac","platform","ctrlSymbol","ctrlName","customType","settings","eqFilter","transition","fadeInSeconds","chord","unison","cutoffHz","linearGain","vibrato","isNoise","filterCutoffHz","filterResonance","filterEnvelope","reverb","dynamism","shape","algorithm","feedbackType","feedbackAmplitude","operators","frequency","target","envelope","eqFilterType","eqSimpleCut","eqSimplePeak","envelopeSpeed","discreteEnvelope","panDelay","waveform","customChipWave","noteFilter","harmonics","stringSustain","stringSustainType","feedbackEnvelope","midiSubharmonicOctaves","interval","bitcrusherOctave","bitcrusherQuantization","distortion","eqSubFilters0","noteFilterType","noteSimpleCut","noteSimplePeak","noteSubFilters0","chorus","spectrum","pulseEnvelope","drums","pitchShiftSemitones","eqSubFilters1","pan","clicklessTransition","vibratoDepth","vibratoDelay","vibratoSpeed","vibratoType","echoSustain","echoDelayBeats","fastTwoNoteArp","arpeggioSpeed","noteSubFilters1","customChipWaveIntegral","Deque","_capacity","_buffer","_mask","_offset","_count","pushFront","_expandCapacity","pushBack","popFront","popBack","peakFront","peakBack","count","remove","oldBuffer","size","events","activeEvents","listeners","raise","eventType","eventData","extraEventData","pop","listen","callback","unlisten","lisen","indexOf","splice","unlistenAll","FilterCoefficients","a","b","order","linearGain0thOrder","lowPass1stOrderButterworth","cornerRadiansPerSample","g","tan","a0","lowPass1stOrderSimplified","highPass1stOrderButterworth","highShelf1stOrder","shelfLinearGain","sqrtGain","allPass1stOrderInvertPhaseAbove","allPass1stOrderFractionalDelay","delay","lowPass2ndOrderButterworth","peakLinearGain","alpha","lowPass2ndOrderSimplified","feedback","highPass2ndOrderButterworth","highShelf2ndOrder","slope","A","Aplus","Aminus","sqrtA2Alpha","peak2ndOrder","bandWidthScale","bandWidth","FrequencyResponse","real","imag","denom","analyze","filter","radiansPerSample","analyzeComplex","realZ1","imagZ1","realNum","imagNum","realDenom","imagDenom","realZ","imagZ","imagTemp","magnitude","angle","atan2","DynamicBiquadFilter","a1","a2","a1Delta","a2Delta","b0Delta","b1Delta","b2Delta","output1","output2","useMultiplicativeInputCoefficients","resetOutput","loadCoefficientsWithGradient","start","end","deltaRate","warpInfinityToNyquist","atan","epsilon","clamp","val","validateRange","parseFloatWithDefault","defaultValue","parseFloat","Number","isNaN","parseIntWithDefault","parseInt","encode32BitNumber","buffer","base64IntToCharCode","decode32BitNumber","compressed","charIndex","base64CharCodeToInt","charCodeAt","encodeUnisonSettings","v","o","e","cleanS","cleanSDivided","cleanO","cleanODivided","cleanE","cleanI","convertLegacyKeyToKeyAndOctave","rawKeyIndex","octave","BitFieldReader","source","_bits","_readIndex","read","readLongTail","minValue","minBits","numBits","readPartDuration","readLegacyPartDuration","readPinCount","readPitchInterval","BitFieldWriter","_index","write","writeLongTail","writePartDuration","writePinCount","writePitchInterval","other","encodeBase64","lengthBase64","makeNotePin","time","Note","pitch","fadeout","pitches","pins","continuesLastPattern","pickMainInterval","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestSize","pin","clone","newNote","getEndPinIndex","part","endPinIndex","Pattern","notes","instruments","cloneNotes","note","reset","toJsonObject","isModChannel","noteArray","mod","volumeCap","getVolumeCapForSetting","modFilterTypes","pointArray","useVol","tick","rhythm","pitchBend","volume","forMod","noteObject","points","patternObject","patternInstruments","fromJsonObject","importedPartsPerBeat","isNoiseChannel","format","toLowerCase","instrumentCount","getMaxInstrumentsPerPatternForChannel","maxNoteCount","beatsPerBar","k","startInterval","pointObject","lowestPitch","highestPitch","oldMin","newMin","old","Operator","copy","CustomAlgorithm","fromPreset","carriers","modulation","CustomFeedBack","inIndices","SpectrumWave","hash","isHarmonic","markCustomWaveDirty","hashMult","Synth","fittingPowerOfTwo","point","SpectrumWaveState","_hash","getCustomWave","lowestOctave","pitchTweak","controlPointToOctave","value1","value2","octave1","octave2","HarmonicsWave","HarmonicsWaveState","instrumentType","_generatedForType","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","performIntegralOld","FilterControlPoint","freq","gain","freqSetting","gainSetting","getHz","getHzFromSettingValue","getSettingValueFromHz","hz","getRoundedSettingValueFromHz","getLinearGain","peakMult","power","neutral","interpolatedPower","getRoundedSettingValueFromLinearGain","toCoefficients","freqMult","getVolumeCompensationMult","gainPow","freqRelativeTo8khz","warpedFreq","warpedOctave","distanceFromCenter","freqLoudness","FilterSettings","controlPoints","controlPointCount","addPoint","controlPoint","filterArray","filterObject","filtersCanMorph","filterA","filterB","lerpFilters","pos","lerpedFilter","convertLegacySettings","legacyCutoffSetting","legacyResonanceSetting","legacyEnv","legacyFilterMaxRadians","legacyFilterMax","resonant","firstOrder","cutoffAtMax","legacyFilterCutoffRange","envDecays","standardSampleRate","legacyHz","legacyRadians","extraOctaves","targetRadians","curvedHz","finalHz","finalRadians","legacyFilter","legacyFilterGainAtNewRadians","logGain","convertedGain","intendedGain","invertedGain","curvedRadians","legacyFilterGain","convertLegacySettingsForSynth","allowFirstOrder","EnvelopeSettings","envelopeObject","Instrument","isUsingAdvancedLoopControls","chipWaveLoopStart","chipWaveLoopEnd","chipWaveLoopMode","chipWavePlayBackwards","chipWaveStartOffset","chipNoise","eqFilterSimpleCut","eqFilterSimplePeak","noteFilterSimpleCut","noteFilterSimplePeak","eqSubFilters","noteSubFilters","fadeIn","fadeOut","envelopeCount","pitchShift","detune","unisonVoices","unisonSpread","unisonOffset","unisonExpression","unisonSign","legacyTieOver","aliases","decimalOffset","supersawDynamism","supersawSpread","supersawShape","bitcrusherFreq","echoDelay","algorithm6Op","feedbackType6Op","customAlgorithm","customFeedbackType","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modInstruments","invalidModulators","spectrumWave","wavePrev","setTypeAndReset","legacySettings","forceSimpleFilter","filterCutoff","legacyFilterEnv","legacyPulseEnv","legacyOperatorEnvelopes","operatorEnvelopes","legacyFeedbackEnv","noCarriersControlledByNoteSize","allCarriersControlledByNoteSize","noteSizeControlsSomethingElse","addEnvelope","instrumentObject","getChord","detuneToCents","fadeInSettingToSeconds","fadeOutSettingToTicks","getDrumsetEnvelope","operatorArray","operator","customFeedback","Float64Array","useSlowerRhythm","legacyGlobalReverb","legacyEffectsNames","transitionProperty","binary","seamless","sudden","hard","smooth","soft","slide","secondsToFadeInSetting","ticksToFadeOutSetting","chordProperty","legacyChordNames","harmony","unisonProperty","legacyChorusNames","union","fifths","octaves","potentialPitchShift","centsToDetune","vibratoProperty","legacyVibratoNames","findIndex","legacyEnvelopeNames","steady","getEnvelope","drum","legacyWaveNames","triangle","square","sawtooth","spiky","plateau","modboxWaveNames","sax","guitar","viola","brass","lyre","piccolo","squaretooth","flatline","sandboxWaveNames","euphonium","recorder","contrabass","zefboxWaveNames","squaretal","sawtal","pulse","miscWaveNames","test1","intense","paandorasboxWaveNames","kick","snare","piano1","WOW","overdrive","trumpet","saxophone","orchestrahit","synth","sonic3snare","choir","overdriveguitar","flute","tuba","loopingcymbal","standardkick","standardsnare","closedhihat","foothihat","openhihat","crashcymbal","pianoC4","marimba","susdotwav","wackyboxtts","rawName","table","potentialChipWaveIndex","feedback6Op","synthboxLegacyFeedbacks","synthboxFeedbackType","operatorObject","filterCutoffMaxHz","filterCutoffRange","filterResonanceRange","LN2","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","envelopeArray","tempEnvelope","getLargestControlPointCount","forNoteFilter","largest","frequencyFromPitch","makeEmpty","supportsEnvelopeTarget","envelopeSettings","automationTarget","useControlPointCount","clearInvalidEnvelopeTargets","envelopeIndex","getTransition","getFadeInSeconds","getFadeOutTicks","Channel","patterns","bars","muted","Song","string","scaleCustom","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","getNewNoteVolume","isMod","modChannel","modInstrument","vol","tempoIndex","tempo","getVolumeCap","modulator","cap","modSetting","filterType","fromBase64String","initToDefault","getChannelCount","modChannelCount","getMaxInstrumentsPerChannel","layeredInstruments","getMaxInstrumentsPerPattern","channelIndex","getChannelIsNoise","getChannelIsMod","andResetChannels","scale","loopStart","loopLength","barCount","patternsPerChannel","title","pattern","bar","toBase64String","bits","_variant","_latestUltraBoxVersion","encodedSongTitle","encodeURIComponent","encodedChannelName","usingSubFilterBitfield","harmonicsBits","encodedLoopMode","encodedReleaseMode","spectrumBits","neededBits","shapeBits","bitsPerNoteSize","getNeededBits","maxInstrumentsPerPattern","neededInstrumentCountBits","neededInstrumentIndexBits","neededModInstrumentIndexBits","instrumentIndex","modFilter","status","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","apply","shapeIndex","unshift","allPitches","pitchIndex","pitchIter","stringLength","digits","prototype","maxApplyArgs","customSamplesStr","customSamples","slice","_envelopeFromLegacyIndex","legacyIndex","_clearSamples","JSON","parse","substring","variantTest","fromBeepBox","fromJummBox","fromGoldBox","fromUltraBox","_latestBeepboxVersion","_oldestBeepboxVersion","_latestJummBoxVersion","_oldestJummBoxVersion","_latestGoldBoxVersion","_oldestGoldBoxVersion","_oldestUltraBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","beforeNine","willLoadLegacySamplesForOldSongs","compressed_array","replaceAll","shift","_restoreChipWaveListToDefault","willLoadLegacySamples","willLoadNintariboxSamples","willLoadMarioPaintboxSamples","customSampleUrls","customSamplePresets","parseOldSyntax","_parseAndConfigureCustomSample","customSamplePresetsMap","legacySettingsCache","command","instrumentChannelIterator","instrumentIndexIterator","useSlowerArpSpeed","songNameLength","decodeURIComponent","channelCount","instrumentsPerChannel","instrumentsFlagBits","newRhythm","legacyWaves","chipWaveReal","chipWaveCounter","typeCheck","originalControlPointCount","originalSubfilterControlPointCount","sampleLoopInfoEncodedLength","sampleLoopInfoEncoded","sampleLoopInfo","atob","entry","info","Boolean","URL","pregoldToEnvelope","aa","sustainValue","legacyEffects","legacyEnvelopes","originalValue","unisonSpreadNegative","unisonOffsetNegative","unisonExpressionNegative","unisonSignNegative","nextValue","restoreLimiterDefaults","channelNameLength","carrierCountTemp","tempModArray","chipWaveForCompat","freqToGold3","freqToUltraBox","jummToUltraEnvelope","pre3To3g","jummToG","byteCount","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","songReverbChannel","songReverbInstrument","songReverbIndex","shouldCorrectTempoMods","jummboxTempoMin","jumfive","detuneScaleNotes","newPattern","newNotes","noteCount","useOldShape","pinCount","initialSize","bendCount","pinObj","intervalIter","noteIsForTempoMod","tempoOffset","isBackwards","restLength","patternIndex","lowestPart","chn","window","location","setTimeout","reload","_isProperUrl","customSampleUrlIndex","urlSliced","isCustomPercussive","customRootKey","presetIsUsingAdvancedLoopControls","presetChipWaveLoopStart","presetChipWaveLoopEnd","presetChipWaveStartOffset","presetChipWaveLoopMode","presetChipWavePlayBackwards","parsedSampleOptions","optionsStartIndex","optionsEndIndex","rawOptions","rawOption","optionCode","charAt","optionData","parsedUrl","sliceForSampleRate","sliceForRootKey","urlWithNamedOptions","namedOptions","pathname","isCustomSampled","rootKey","customSamplePresetSettings","customSamplePreset","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","patternArray","sequenceArray","l","channelObject","sequence","_format","customScale","keyOctave","introBars","loopBars","ticksPerBeat","beatsPerMinute","jsonObject","shouldLoadLegacySamples","instrumentObjects","waveName","names","oldNames","veryOldNames","includes","oldScaleNames","enigma","scaleName","letter","toUpperCase","symbol","C","D","E","F","G","B","maxInstruments","maxPatterns","maxBars","newPitchChannels","newNoiseChannels","newModChannels","getPattern","getBeatsPerMinute","maxValue","PickedString","delayLine","allPassG","allPassGDelta","sustainFilterA1","sustainFilterA1Delta","sustainFilterA2","sustainFilterA2Delta","sustainFilterB0","sustainFilterB0Delta","sustainFilterB1","sustainFilterB1Delta","sustainFilterB2","sustainFilterB2Delta","delayIndex","allPassSample","allPassPrevInput","sustainFilterSample","sustainFilterPrevOutput2","sustainFilterPrevInput1","sustainFilterPrevInput2","fractionalDelaySample","prevDelayLength","delayResetOffset","update","instrumentState","tone","stringIndex","roundedSamplesPerTick","stringDecayStart","stringDecayEnd","sustainType","allPassCenter","samplesPerSecond","phaseDeltaStart","phaseDeltas","phaseDeltaScale","phaseDeltaScales","phaseDeltaEnd","radiansPerSampleStart","radiansPerSampleEnd","centerHarmonicStart","centerHarmonicEnd","allPassRadiansStart","allPassRadiansEnd","shelfRadians","decayCurveStart","decayCurveEnd","register","registerShelfCenter","registerLowpassCenter","decayRateStart","decayRateEnd","expressionDecayStart","expressionDecayEnd","tempFilterStartCoefficients","tempFrequencyResponse","allPassGStart","allPassPhaseDelayStart","tempFilterEndCoefficients","allPassGEnd","allPassPhaseDelayEnd","brightnessType","shelfGainStart","shelfGainEnd","cornerHardness","lowpass1stOrderCutoffRadiansStart","lowpass1stOrderCutoffRadiansEnd","lowpass2ndOrderCutoffRadiansStart","lowpass2ndOrderCutoffRadiansEnd","lowpass2ndOrderGainStart","lowpass2ndOrderGainEnd","sustainFilterA1Start","sustainFilterA2Start","sustainFilterB0Start","sustainFilterB1Start","sustainFilterB2Start","sustainFilterPhaseDelayStart","sustainFilterA1End","sustainFilterA2End","sustainFilterB0End","sustainFilterB1End","sustainFilterB2End","sustainFilterPhaseDelayEnd","periodLengthStart","periodLengthEnd","minBufferLength","delayLength","delayLengthEnd","delayLengthDelta","pitchChanged","reinitializeImpulse","likelyMaximumLength","newDelayLine","oldDelayBufferMask","startCopyingFromIndex","delayBufferMask","startImpulseFrom","startZerosFrom","stopZerosAt","impulseWave","impulseWaveLength","impulsePhaseDelta","fadeDuration","startImpulseFromSample","stopImpulseAt","stopImpulseAtSample","impulsePhase","prevWaveIntegral","impulsePhaseInt","nextWaveIntegral","phaseRatio","sample","combinedFade","curvedFade","EnvelopeComputer","noteSecondsStart","noteSecondsStartUnscaled","noteSecondsEnd","noteSecondsEndUnscaled","noteTicksStart","noteTicksEnd","noteSizeStart","noteSizeEnd","prevNoteSize","nextNoteSize","_noteSizeFinal","prevNoteSecondsStart","prevNoteSecondsStartUnscaled","prevNoteSecondsEnd","prevNoteSecondsEndUnscaled","prevNoteTicksStart","prevNoteTicksEnd","_prevNoteSizeFinal","prevSlideStart","prevSlideEnd","nextSlideStart","nextSlideEnd","prevSlideRatioStart","prevSlideRatioEnd","nextSlideRatioStart","nextSlideRatioEnd","envelopeStarts","envelopeEnds","_modifiedEnvelopeIndices","_modifiedEnvelopeCount","lowpassCutoffDecayVolumeCompensation","computeEnvelopes","currentPart","tickTimeStart","tickTimeStartReal","secondsPerTick","timeScale","secondsPerTickUnscaled","atNoteStart","forceContinueAtStart","tickTimeEnd","tickTimeEndReal","beatsPerTick","beatTimeStart","beatTimeEnd","passedEndOfNote","startPin","endPin","startPinTick","endPinTick","ratioStart","ratioEnd","noteStartTick","noteStartPart","noteEndTick","noteEndPart","maximumSlideTicks","prevNote","nextNote","forceContinueAtEnd","usedNoteSize","targetIndex","envelopeStart","computeEnvelope","envelopeEnd","filterSettings","tmpNoteFilterStart","getLowpassCutoffDecayVolumeCompensation","clearEnvelopes","beats","noteSize","noteSizeToVolumeMult","attack","lin","Tone","fill","chordSize","drumsetPitch","prevNotePitchIndex","nextNotePitchIndex","freshlyAllocated","isOnLastTick","ticksSinceReleased","liveInputSamplesHeld","lastInterval","noiseSample","noiseSampleA","noiseSampleB","stringSustainStart","stringSustainEnd","phases","directions","chipWaveCompletions","chipWavePrevWaves","chipWaveCompletionsLastWave","expressionDelta","operatorExpressions","operatorExpressionDeltas","prevPitchExpressions","prevVibrato","prevStringDecay","pulseWidthDelta","supersawDynamismDelta","supersawUnisonDetunes","supersawShapeDelta","supersawDelayLength","supersawDelayLengthDelta","supersawDelayLine","supersawDelayIndex","supersawPrevPhaseDelta","pickedStrings","noteFilters","noteFilterCount","initialNoteFilterInput1","initialNoteFilterInput2","specialIntervalExpressionMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","envelopeComputer","pickedString","InstrumentState","awake","computed","tonesAddedInThisTick","flushingDelayLines","deactivateAfterThisTick","attentuationProgress","flushedSamples","activeTones","activeModTones","releasedTones","liveInputTones","synthesizer","noisePitchFilterMult","volumeScale","arpTime","vibratoTime","nextVibratoTime","envelopeTime","eqFilterVolume","eqFilterVolumeDelta","mixVolume","mixVolumeDelta","delayInputMult","delayInputMultDelta","distortionDelta","distortionDrive","distortionDriveDelta","distortionFractionalInput1","distortionFractionalInput2","distortionFractionalInput3","distortionPrevInput","distortionNextOutput","bitcrusherPrevInput","bitcrusherCurrentOutput","bitcrusherPhase","bitcrusherPhaseDelta","bitcrusherPhaseDeltaScale","bitcrusherScale","bitcrusherScaleScale","bitcrusherFoldLevel","bitcrusherFoldLevelScale","eqFilters","eqFilterCount","initialEqFilterInput1","initialEqFilterInput2","panningDelayLine","panningDelayPos","panningVolumeL","panningVolumeR","panningVolumeDeltaL","panningVolumeDeltaR","panningOffsetL","panningOffsetR","panningOffsetDeltaL","panningOffsetDeltaR","chorusDelayLineL","chorusDelayLineR","chorusDelayLineDirty","chorusDelayPos","chorusPhase","chorusVoiceMult","chorusVoiceMultDelta","chorusCombinedMult","chorusCombinedMultDelta","echoDelayLineL","echoDelayLineR","echoDelayLineDirty","echoDelayPos","echoDelayOffsetStart","echoDelayOffsetEnd","echoDelayOffsetRatio","echoDelayOffsetRatioDelta","echoMult","echoMultDelta","echoShelfA1","echoShelfB0","echoShelfB1","echoShelfSampleL","echoShelfSampleR","echoShelfPrevInputL","echoShelfPrevInputR","reverbDelayLine","reverbDelayLineDirty","reverbDelayPos","reverbMult","reverbMultDelta","reverbShelfA1","reverbShelfB0","reverbShelfB1","reverbShelfSample0","reverbShelfSample1","reverbShelfSample2","reverbShelfSample3","reverbShelfPrevInput0","reverbShelfPrevInput1","reverbShelfPrevInput2","reverbShelfPrevInput3","allocateNecessaryBuffers","samplesPerTick","panningDelayBufferSize","chorusDelayBufferSize","safeEchoDelaySteps","safeEchoDelayBufferSize","newDelayLineL","newDelayLineR","oldMask","deactivate","resetAllEffects","compute","getInstrumentSynthFunction","updateWaves","usesDistortion","usesBitcrusher","usesPanning","usesChorus","usesEcho","usesReverb","useDistortionStart","useDistortionEnd","isModActive","getModValue","distortionSliderStart","distortionSliderEnd","distortionStart","distortionEnd","distortionDriveStart","distortionDriveEnd","freqSettingStart","freqSettingEnd","quantizationSettingStart","quantizationSettingEnd","freqStart","freqEnd","scaleStart","scaleEnd","foldLevelStart","foldLevelEnd","eqFilterSettingsStart","eqFilterSettingsEnd","startPoint","startSimpleFreq","startSimpleGain","endSimpleFreq","endSimpleGain","filterChanges","endPoint","eqFilterSettings","tmpEqFilterStart","tmpEqFilterEnd","mainInstrumentVolume","instrumentVolumeToVolumeMult","mixVolumeEnd","startVal","endVal","eqFilterVolumeStart","eqFilterVolumeEnd","delayInputMultStart","delayInputMultEnd","usePanStart","usePanEnd","panStart","panEnd","volumeStartL","volumeStartR","volumeEndL","volumeEndR","maxDelaySamples","usePanDelayStart","usePanDelayEnd","delayStart","delayEnd","delayStartL","delayStartR","delayEndL","delayEndR","useChorusStart","useChorusEnd","chorusStart","chorusEnd","chorusCombinedMultStart","chorusCombinedMultEnd","maxEchoMult","averageEchoDelaySeconds","useEchoSustainStart","useEchoSustainEnd","echoMultStart","echoMultEnd","useEchoDelayStart","useEchoDelayEnd","ignoreTicks","tmpEchoDelayOffsetStart","tmpEchoDelayOffsetEnd","maxReverbMult","useReverbStart","useReverbEnd","reverbStart","reverbEnd","totalDelaySamples","attenuationThreshold","halfLifeMult","delayDuration","attenuationPerSecond","averageMult","averageReverbDelaySeconds","progressInTick","progressAtEndOfTick","_drumsetIndexToSpectrumOctave","getDrumsetWave","drumsetIndexReferenceDelta","ChannelState","singleSeamlessInstrument","syncSongState","channelState","initModFilters","tmpNoteFilterEnd","warmUpSynthesizer","getSamplesPerTick","dummyArray","isPlayingSong","synthesize","computeLatestModValues","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","heldMods","beat","currentBar","instrumentIdx","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","setModValue","usedInstruments","tgtPattern","eqFilterParam","noteFilterParam","modulatorAdjust","tgtInstrument","determineInvalidModulators","tgtInstrumentList","str","operatorAmplitudeCurve","playing","recording","isRecording","playheadInternal","remainder","tickSampleCountdown","isAtStartOfTick","prevBar","getSamplesPerBar","getTicksIntoBar","getCurrentPart","getTotalSamples","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","ended","foundMod","find","sort","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getTotalBars","useLoopCount","loopRepeatCount","preferLowerLatency","anticipatePoorPerformance","liveInputDuration","liveBassInputDuration","liveInputStarted","liveBassInputStarted","liveInputPitches","liveBassInputPitches","liveInputChannel","liveBassInputChannel","liveInputInstruments","liveBassInputInstruments","oscRefreshEventTimer","oscEnabled","enableMetronome","countInMetronome","renderingSong","wantToSkip","nextBar","isAtEndOfTick","liveInputEndTime","browserAutomaticallyClearsAudioBuffer","tempDrumSetControlPoint","loopBarStart","loopBarEnd","tonePool","tempMatchedPitchTones","startedMetronome","metronomeSamplesRemaining","metronomeAmplitude","metronomePrevAmplitude","metronomeFilter","limit","tempMonoInstrumentSampleBuffer","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","outputDataR","performance","now","deactivateAudio","computeDelayBufferSizes","setSong","panningDelayBufferMask","chorusDelayBufferMask","activateAudio","bufferSize","latencyHint","webkitAudioContext","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","maintainLiveInput","play","pause","startRecording","resetEffects","freeAllTones","volumeStart","volumeEnd","setting","nextVal","isAnyModActive","unsetMod","isFilterModActive","channelIdx","forceHoldMods","found","holdFor","snapToStart","snapToBar","goToBar","jumpIntoLoop","oldBar","goToNextBar","goToPrevBar","getNextBar","skipBar","outputBufferLength","playSong","skippedBars","firstSkippedBufferIndex","bufferIndex","samplesLeftInBuffer","samplesLeftInTick","runLength","runEnd","determineCurrentActiveTones","playModTone","barVisited","determineLiveInputTones","tonesPlayedInThisInstrument","freeReleasedTone","shouldFadeOutFast","computeTone","playTone","effectsSynth","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","partTimeStart","partTimeEnd","useVibratoSpeed","midBeat","periods","samplesPerPeriod","tempAmplitude","sampleL","sampleR","absL","absR","limitRange","limitTarget","limitedVolume","useArpeggioSpeed","isInteger","useEnvelopeSpeed","isFinite","freeTone","newTone","releaseTone","toneIndex","bassPitches","toneList","toneCount","moveTonesIntoOrderedTempMatchedList","clearTempMatchedPitchTones","adjacentPatternHasCompatibleInstrumentTransition","otherPattern","otherNote","forceContinue","otherInstrument","otherTransition","adjacentNotesHaveMatchingPitches","firstNote","secondNote","firstNoteInterval","notePitches","currentTick","prevNotes","nextNotes","fillCount","modToneCount","newInstrumentIndex","sourceInstrumentState","destInstrumentState","prevNoteForThisInstrument","nextNoteForThisInstrument","oldTone","partsPerBar","tonesInPrevNote","tonesInNextNote","prevPattern","lastNote","patternForcesContinueAtStart","chordOfCompatibleInstrument","nextPattern","nextPatternForcesContinueAtStart","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","modSynth","computeChordExpression","chordExpression","intervalScale","secondsPerPart","sampleTime","beatsPerPart","specialIntervalMult","toneIsOnLastTick","intervalStart","intervalEnd","fadeExpressionStart","fadeExpressionEnd","chordExpressionStart","chordExpressionEnd","expressionReferencePitch","baseExpression","pitchDamping","chipWaveLength","firstOffset","lastOffset","getOperatorWave","startTicksSinceReleased","endTicksSinceReleased","pinStart","pinEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","noteLengthTicks","tmpNoteFilter","noteFilterSettingsStart","noteFilterSettingsEnd","intervalDiff","chordSizeDiff","pitchShiftScalarStart","pitchShiftScalarEnd","modDetuneStart","modDetuneEnd","vibratoAmplitudeStart","vibratoAmplitudeEnd","vibratoStart","POSITIVE_INFINITY","getLFOAmplitude","ticksUntilVibratoStart","vibratoLfoEnd","vibratoDepthEnvelopeEnd","vibratoEnd","ticksUntilVibratoEnd","noteFilterExpression","noteAllFreqsEnvelopeStart","noteAllFreqsEnvelopeEnd","noteFreqEnvelopeStart","noteFreqEnvelopeEnd","notePeakEnvelopeStart","notePeakEnvelopeEnd","noteFilterSettings","drumsetFilterEnvelope","drumsetFilterEnvelopeStart","drumsetFilterEnvelopeEnd","sineExpressionBoost","totalCarrierExpression","arpeggioInterval","associatedCarrierIndex","pitchStart","pitchEnd","baseFreqStart","baseFreqEnd","targetFreqStart","targetFreqEnd","freqEnvelopeStart","freqEnvelopeEnd","amplitudeStart","amplitudeEnd","amplitudeCurveStart","amplitudeCurveEnd","expressionStart","expressionEnd","pitchExpressionStart","pitchExpressionEnd","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","freqEndRatio","basePhaseDeltaScale","intervalOffset","endPitch","settingsExpressionMult","basePulseWidth","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","decimalOffsetModStart","decimalOffsetStart","useSustainStart","useSustainEnd","startFreq","unisonEnvelopeStart","unisonEnvelopeEnd","unisonAStart","unisonAEnd","unisonBStart","unisonBEnd","supersawExpressionStart","supersawExpressionEnd","minFirstVoiceAmplitude","useDynamismStart","useDynamismEnd","curvedDynamismStart","curvedDynamismEnd","firstVoiceAmplitudeStart","firstVoiceAmplitudeEnd","dynamismStart","dynamismEnd","initializeSupersaw","accumulator","normalizedPhase","zeroCrossingPhase","prevDrop","nextDrop","phaseDelta","distanceToZeroCrossing","swappedIndex","baseSpreadSlider","useSpreadStart","useSpreadEnd","averageSpreadSlider","curvedSpread","baseShape","useShapeStart","useShapeEnd","shapeStart","shapeEnd","delayLengthStart","pulseExpressionRatio","sustainEnvelopeStart","sustainEnvelopeEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","operatorLine","operatorSourceTemplate","modulatorNumber","feedbackIndices","wrappedFmSynth","Function","loopableChipSynth","chipSynth","harmonicsSynth","pulseWidthSynth","supersawSynth","pickedStringSynth","noiseSynth","spectrumSynth","drumsetSynth","fm6SynthFunctionCache","wrappedFm6Synth","wrap","data","chipWaveLoopLength","phaseDeltaA","phaseDeltaB","directionA","directionB","chipWaveCompletionA","chipWaveCompletionB","lastWaveA","lastWaveB","chipWaveCompletionFadeLength","phaseDeltaScaleA","phaseDeltaScaleB","phaseA","phaseB","prevWaveIntegralA","prevWaveIntegralB","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","filters","filterCount","initialFilterInput1","initialFilterInput2","applyFilters","prevWaveA","prevWaveB","sampleIndex","wrapped","waveA","waveB","inputSample","completionFadeA","completionFadeB","nextWaveIntegralA","nextWaveIntegralB","pwia","pwib","phaseA_","phaseB_","output","sanitizeFilters","voiceCount","pickedStringFunction","pickedStringFunctionCache","pickedStringSource","sampleList","voice","lines","usesEqFilter","signature","effectsFunction","effectsFunctionCache","effectsSource","usesDelays","sawPhaseA","sawPhaseB","sawPhaseC","sawPhaseD","pulseWaveA","pulseWaveB","t","dynamismDelta","unisonDetunes","shapeDelta","phase","supersawSample","detunedPhaseDelta","delaySampleTime","lowerIndex","upperIndex","delayRatio","prevDelaySample","phaseMask","pitchRelativefilterA","pitchRelativefilterB","samplesInPeriod","findRandomZeroCrossing","waveSampleA","waveSampleB","referenceDelta","phaseInt","stereoBufferIndex","dotTarget","lerpEndRatio","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","instrumentVolume","volumeMultToInstrumentVolume","volumeMult","volumeMultToNoteSize","seconds","ticks","lower","upper","cents","beatsPerSecond","partsPerSecond","tickPerSecond","sanitizeDelayLine","lastIndex","mask","input1","input2","button","div","h1","input","canvas","svg","circle","rect","path","isMobile","colorTheme","getLocalStorage","animationRequest","prevHash","id","toString","pauseButtonDisplayed","zoomEnabled","timelineWidth","outVolumeHistoricTimer","outVolumeHistoricCap","oscilloscope","_EventUpdateCanvas","directlinkL","directlinkR","ctx","getContext","fillStyle","fillRect","width","height","yl","yr","display","titleText","editLink","copyLink","href","shareLink","fullscreenLink","draggingPlayhead","playButton","playButtonContainer","loopIcon","d","loopButton","viewBox","volumeIcon","volumeSlider","step","zoomIcon","cx","cy","r","stroke","zoomButton","timeline","timelineContainer","visualizationContainer","noteFlashElementsPerBar","currentNoteFlashElements","currentNoteFlashBar","notesFlashWhenPlayed","outVolumeBarBg","outVolumeBar","stop1","stop","stop2","stop3","gradient","linearGradient","gradientUnits","defs","volumeBarContainer","preserveAspectRatio","setLocalStorage","setItem","removeFromUnorderedArray","lastElement","loadSong","songString","reuseParams","updatedSongString","hashUpdatedExternally","myHash","parameter","equalsIndex","paramName","renderLoopIcon","renderTimeline","body","pauseIfAnotherPlayerStartsHandle","pauseIfAnotherPlayerStarts","clearInterval","storedPlayerId","onTogglePlay","renderPlayhead","animate","requestAnimationFrame","volumeUpdate","renderPlayButton","useOutVolumeCap","historicOutCap","cancelAnimationFrame","setInterval","onTimelineMouseMove","preventDefault","onTimelineCursorMove","clientX","pageX","onTimelineTouchMove","touches","mouseX","boundingRect","getBoundingClientRect","left","right","onTimelineCursorUp","setSynthVolume","scrollLeft","playheadBar","modPlayhead","noteFlashElementsForThisBar","outsideOfCurrentBar","getAttribute","isInvisible","opacity","noteStart","noteEnd","noteBar","dist","innerHTML","timelineHeight","windowOctaves","windowPitchCount","semitoneHeight","targetBeatWidth","targetSemitoneHeight","barWidth","partWidth","wavePitchHeight","drumPitchHeight","color","noteFlashColor","noteFlashColorSecondary","pitchHeight","configuredOctaveScroll","offsetY","offsetX","drawNote","noteElement","dflash","noteFlashElement","radius","classList","add","renderZoomIcon","top","self","keyCode","shiftKey","nav","clipboard","writeText","prompt","textField","select","succeeded","execCommand","share"],"sources":["../../synth/SynthConfig.ts","../../node_modules/imperative-html/src/elements-base.ts","../../node_modules/imperative-html/src/elements-strict.ts","../../editor/ColorConfig.ts","../../editor/EditorConfig.ts","../../synth/FFT.ts","../../synth/Deque.ts","../../global/Events.ts","../../synth/filtering.ts","../../synth/synth.ts","../../player/main.ts","../../global/Oscilloscope.ts"],"sourcesContent":["/*!\r\nCopyright (c) 2012-2022 John Nesky and contributing authors\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\nexport interface Dictionary<T> {\r\n    [K: string]: T;\r\n}\r\n\r\n// @TODO: Not ideal to make this writable like this.\r\n// export interface DictionaryArray<T> extends ReadonlyArray<T> {\r\nexport interface DictionaryArray<T> extends Array<T> {\r\n    dictionary: Dictionary<T>;\r\n}\r\n\r\nexport const enum FilterType {\r\n    lowPass,\r\n    highPass,\r\n    peak,\r\n    length,\r\n}\r\n\r\nexport const enum SustainType {\r\n\tbright,\r\n\tacoustic,\r\n\tlength,\r\n}\r\n\r\nexport const enum EnvelopeType {\r\n\tnoteSize,\r\n    none,\r\n\tpunch,\r\n\tflare,\r\n\ttwang,\r\n\tswell,\r\n\ttremolo,\r\n\ttremolo2,\r\n    decay,\r\n    wibble,\r\n    hard,\r\n    linear,\r\n    rise,\r\n    blip\r\n}\r\n\r\nexport const enum InstrumentType {\r\n    chip,\r\n    fm,\r\n    noise,\r\n    spectrum,\r\n    drumset,\r\n    harmonics,\r\n    pwm,\r\n    pickedString,\r\n    supersaw,\r\n    customChipWave,\r\n    mod,\r\n\tfm6op,\r\n    length,\r\n}\r\n\r\nexport const TypePresets: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"pulse width\", \"picked string\", \"supersaw\", \"chip (custom)\", \"mod\", \"FM (6-op)\"];\r\n\r\nexport const enum DropdownID {\r\n    Vibrato = 0,\r\n    Pan = 1,\r\n    Chord = 2,\r\n    Transition = 3,\r\n    FM = 4,\r\n    PulseWidth = 5,\r\n    Unison = 6,\r\n    Envelope = 7,\r\n\r\n}\r\n\r\nexport const enum EffectType {\r\n    reverb,\r\n    chorus,\r\n    panning,\r\n    distortion,\r\n    bitcrusher,\r\n    noteFilter,\r\n    echo,\r\n    pitchShift,\r\n    detune,\r\n    vibrato,\r\n    transition,\r\n    chord,\r\n    // If you add more, you'll also have to extend the bitfield used in Base64 which currently uses two six-bit characters.\r\n    length,\r\n}\r\n\r\nexport const enum EnvelopeComputeIndex {\r\n    noteVolume,\r\n    noteFilterAllFreqs,\r\n    pulseWidth,\r\n    stringSustain,\r\n    unison,\r\n    operatorFrequency0, operatorFrequency1, operatorFrequency2, operatorFrequency3, operatorFrequency4, operatorFrequency5,\r\n    operatorAmplitude0, operatorAmplitude1, operatorAmplitude2, operatorAmplitude3, operatorAmplitude4, operatorAmplitude5,\r\n    feedbackAmplitude,\r\n    pitchShift,\r\n    detune,\r\n    vibratoDepth,\r\n    noteFilterFreq0, noteFilterFreq1, noteFilterFreq2, noteFilterFreq3, noteFilterFreq4, noteFilterFreq5, noteFilterFreq6, noteFilterFreq7,\r\n    noteFilterGain0, noteFilterGain1, noteFilterGain2, noteFilterGain3, noteFilterGain4, noteFilterGain5, noteFilterGain6, noteFilterGain7,\r\n    decimalOffset,\r\n    supersawDynamism,\r\n\tsupersawSpread,\r\n\tsupersawShape,\r\n    length,\r\n}\r\n\r\n/*\r\nexport const enum InstrumentAutomationIndex {\r\n    mixVolume,\r\n    eqFilterAllFreqs,\r\n    eqFilterFreq0, eqFilterFreq1, eqFilterFreq2, eqFilterFreq3, eqFilterFreq4, eqFilterFreq5, eqFilterFreq6, eqFilterFreq7,\r\n    eqFilterGain0, eqFilterGain1, eqFilterGain2, eqFilterGain3, eqFilterGain4, eqFilterGain5, eqFilterGain6, eqFilterGain7,\r\n    distortion,\r\n    bitcrusherQuantization,\r\n    bitcrusherFrequency,\r\n    panning,\r\n    chorus,\r\n    echoSustain,\r\n    //echoDelay, // Wait until tick settings can be computed once for multiple run lengths.\r\n    reverb,\r\n    length,\r\n}\r\n*/\r\n\r\nexport interface BeepBoxOption {\r\n    readonly index: number;\r\n    readonly name: string;\r\n}\r\n\r\nexport interface Scale extends BeepBoxOption {\r\n    readonly flags: ReadonlyArray<boolean>;\r\n    readonly realName: string;\r\n}\r\n\r\nexport interface Key extends BeepBoxOption {\r\n    readonly isWhiteKey: boolean;\r\n    readonly basePitch: number;\r\n}\r\n\r\nexport interface Rhythm extends BeepBoxOption {\r\n    readonly stepsPerBeat: number;\r\n    readonly roundUpThresholds: number[] | null;\r\n}\r\n\r\nexport interface ChipWave extends BeepBoxOption {\r\n    readonly expression: number;\r\n    samples: Float32Array;\r\n    isPercussion?: boolean;\r\n    isCustomSampled?: boolean;\r\n    isSampled?: boolean;\r\n    extraSampleDetune?: number;\r\n    rootKey?: number;\r\n    sampleRate?: number;\r\n}\r\n\r\nexport interface OperatorWave extends BeepBoxOption {\r\n    samples: Float32Array;\r\n}\r\n\r\nexport interface ChipNoise extends BeepBoxOption {\r\n    readonly expression: number;\r\n    readonly basePitch: number;\r\n    readonly pitchFilterMult: number;\r\n    readonly isSoft: boolean;\r\n    samples: Float32Array | null;\r\n}\r\n\r\nexport interface Transition extends BeepBoxOption {\r\n    readonly isSeamless: boolean;\r\n    readonly continues: boolean;\r\n    readonly slides: boolean;\r\n    readonly slideTicks: number;\r\n    readonly includeAdjacentPatterns: boolean;\r\n}\r\n\r\nexport interface Vibrato extends BeepBoxOption {\r\n    readonly amplitude: number;\r\n    readonly type: number;\r\n    readonly delayTicks: number;\r\n}\r\n\r\nexport interface VibratoType extends BeepBoxOption {\r\n    readonly periodsSeconds: number[];\r\n    readonly period: number;\r\n}\r\n\r\nexport interface Unison extends BeepBoxOption {\r\n    readonly voices: number;\r\n    readonly spread: number;\r\n    readonly offset: number;\r\n    readonly expression: number;\r\n    readonly sign: number;\r\n}\r\n\r\nexport interface Modulator extends BeepBoxOption {\r\n    readonly name: string; // name that shows up in song editor UI\r\n    readonly pianoName: string; // short name that shows up in mod piano UI\r\n    readonly maxRawVol: number; // raw\r\n    readonly newNoteVol: number; // raw\r\n    readonly forSong: boolean; // true - setting is song scope\r\n    convertRealFactor: number; // offset that needs to be applied to get a \"real\" number display of value, for UI purposes\r\n    readonly associatedEffect: EffectType; // effect that should be enabled for this modulator to work properly. If unused, set to EffectType.length.\r\n    readonly promptName: string; // long-as-needed name that shows up in tip prompt\r\n    readonly promptDesc: string[]; // paragraph(s) describing how to use this mod\r\n    invertSliderIndicator?: boolean; // for whether or not you want to invert the slider indicator\r\n\r\n}\r\n\r\nexport interface Chord extends BeepBoxOption {\r\n    readonly customInterval: boolean;\r\n    readonly arpeggiates: boolean;\r\n    readonly strumParts: number;\r\n    readonly singleTone: boolean;\r\n}\r\n\r\nexport interface Algorithm extends BeepBoxOption {\r\n    readonly carrierCount: number;\r\n    readonly associatedCarrier: ReadonlyArray<number>;\r\n    readonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport interface OperatorFrequency extends BeepBoxOption {\r\n    readonly mult: number;\r\n    readonly hzOffset: number;\r\n    readonly amplitudeSign: number;\r\n}\r\n\r\nexport interface Feedback extends BeepBoxOption {\r\n    readonly indices: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport interface Envelope extends BeepBoxOption {\r\n    readonly type: EnvelopeType;\r\n    readonly speed: number;\r\n}\r\n\r\nexport interface AutomationTarget extends BeepBoxOption {\r\n    readonly computeIndex: EnvelopeComputeIndex /*| InstrumentAutomationIndex*/ | null;\r\n    readonly displayName: string;\r\n    //readonly perNote: boolean; // Whether to compute envelopes on a per-note basis.\r\n    readonly interleave: boolean; // Whether to interleave this target with the next one in the menu (e.g. filter frequency and gain).\r\n\treadonly isFilter: boolean; // Filters are special because the maxCount depends on other instrument settings.\r\n\t//readonly range: number | null; // set if automation is allowed.\r\n    readonly maxCount: number;\r\n    readonly effect: EffectType | null;\r\n    readonly compatibleInstruments: InstrumentType[] | null;\r\n}\r\n\r\nexport const enum SampleLoadingStatus {\r\n    loading,\r\n    loaded,\r\n    error,\r\n}\r\n\r\nexport function getSampleLoadingStatusName(status: SampleLoadingStatus): string {\r\n    switch (status) {\r\n\tcase SampleLoadingStatus.loading: return \"loading\";\r\n\tcase SampleLoadingStatus.loaded: return \"loaded\";\r\n\tcase SampleLoadingStatus.error: return \"error\";\r\n    }\r\n}\r\n\r\nexport class SampleLoadingState {\r\n    public statusTable: Dictionary<SampleLoadingStatus>;\r\n    public urlTable: Dictionary<string>;\r\n    public totalSamples: number;\r\n    public samplesLoaded: number;\r\n\r\n    constructor() {\r\n\tthis.statusTable = {};\r\n\tthis.urlTable = {};\r\n\tthis.totalSamples = 0;\r\n\tthis.samplesLoaded = 0;\r\n    }\r\n}\r\n\r\nexport const sampleLoadingState: SampleLoadingState = new SampleLoadingState();\r\n\r\nexport class SampleLoadedEvent extends Event {\r\n    public readonly totalSamples: number;\r\n    public readonly samplesLoaded: number;\r\n\r\n    constructor(totalSamples: number, samplesLoaded: number) {\r\n\tsuper(\"sampleloaded\");\r\n\tthis.totalSamples = totalSamples;\r\n\tthis.samplesLoaded = samplesLoaded;\r\n    }\r\n}\r\n\r\nexport interface SampleLoadEventMap {\r\n    \"sampleloaded\": SampleLoadedEvent;\r\n}\r\n\r\nexport class SampleLoadEvents extends EventTarget {\r\n    constructor() {\r\n\tsuper();\r\n    }\r\n}\r\n\r\nexport const sampleLoadEvents: SampleLoadEvents = new SampleLoadEvents();\r\n\r\nexport async function startLoadingSample(url: string, chipWaveIndex: number, presetSettings: Dictionary<any>, rawLoopOptions: any, customSampleRate: number): Promise<void> {\r\n    // @TODO: Make parts of the code that expect everything to already be\r\n    // in memory work correctly.\r\n    // It would be easy to only instantiate `SongEditor` and company after\r\n    // everything is loaded, but if dynamic sample loading without a reload\r\n    // is deemed necessary, anything that involves chip waves has to be\r\n    // revisited so as to be able to work with a changing list of chip\r\n    // waves that may or may not be ready to be used.\r\n    const sampleLoaderAudioContext = new AudioContext({ sampleRate: customSampleRate });\r\n    let closedSampleLoaderAudioContext: boolean = false;\r\n    const chipWave = Config.chipWaves[chipWaveIndex];\r\n    const rawChipWave = Config.rawChipWaves[chipWaveIndex];\r\n    const rawRawChipWave = Config.rawRawChipWaves[chipWaveIndex];\r\n    if (OFFLINE) {\r\n        if (url.slice(0, 5) === \"file:\") {\r\n            const dirname = await getDirname();\r\n            const joined = await pathJoin(dirname, url.slice(5));\r\n            url = joined;\r\n        }\r\n    }\r\n    fetch(url).then((response) => {\r\n\tif (!response.ok) {\r\n\t    // @TODO: Be specific with the error handling.\r\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.error;\r\n\t    return Promise.reject(new Error(\"Couldn't load sample\"));\r\n\t}\r\n\treturn response.arrayBuffer();\r\n    }).then((arrayBuffer) => {\r\n\treturn sampleLoaderAudioContext.decodeAudioData(arrayBuffer);\r\n    }).then((audioBuffer) => {\r\n\t// @TODO: Downmix.\r\n\tconst samples = centerWave(Array.from(audioBuffer.getChannelData(0)));\r\n\tconst integratedSamples = performIntegral(samples);\r\n\tchipWave.samples = integratedSamples;\r\n\trawChipWave.samples = samples;\r\n\trawRawChipWave.samples = samples;\r\n\tif (rawLoopOptions[\"isUsingAdvancedLoopControls\"]) {\r\n\t    presetSettings[\"chipWaveLoopStart\"] = rawLoopOptions[\"chipWaveLoopStart\"] != null ? rawLoopOptions[\"chipWaveLoopStart\"] : 0;\r\n\t    presetSettings[\"chipWaveLoopEnd\"] = rawLoopOptions[\"chipWaveLoopEnd\"] != null ? rawLoopOptions[\"chipWaveLoopEnd\"] : samples.length - 1;\r\n\t    presetSettings[\"chipWaveLoopMode\"] = rawLoopOptions[\"chipWaveLoopMode\"] != null ? rawLoopOptions[\"chipWaveLoopMode\"] : 0;\r\n\t    presetSettings[\"chipWavePlayBackwards\"] = rawLoopOptions[\"chipWavePlayBackwards\"];\r\n\t    presetSettings[\"chipWaveStartOffset\"] = rawLoopOptions[\"chipWaveStartOffset\"] != null ? rawLoopOptions[\"chipWaveStartOffset\"] : 0;\r\n\t}\r\n\tsampleLoadingState.samplesLoaded++;\r\n\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\r\n\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\r\n\t    sampleLoadingState.totalSamples,\r\n\t    sampleLoadingState.samplesLoaded\r\n\t));\r\n\tif (!closedSampleLoaderAudioContext) {\r\n\t    closedSampleLoaderAudioContext = true;\r\n\t    sampleLoaderAudioContext.close();\r\n\t}\r\n    }).catch((error) => {\r\n\t//console.error(error);\r\n\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.error;\r\n\talert(\"Failed to load \" + url + \":\\n\" + error);\r\n\tif (!closedSampleLoaderAudioContext) {\r\n\t    closedSampleLoaderAudioContext = true;\r\n\t    sampleLoaderAudioContext.close();\r\n\t}\r\n    });\r\n}\r\n\r\nexport function getLocalStorageItem<T>(key: string, defaultValue: T): T | string {\r\n    let value: T | string | null = localStorage.getItem(key);\r\n    if (value == null || value === \"null\" || value === \"undefined\") {\r\n        value = defaultValue;\r\n    }\r\n    return value;\r\n}\r\n\r\n// @HACK: This just assumes these exist, regardless of whether they actually do\r\n// or not.\r\ndeclare global {\r\n    const OFFLINE: boolean; // for UB offline\r\n    const getDirname: () => Promise<string>; // for UB offline\r\n    const pathJoin: (...parts: string[]) => Promise<string>; // for UB offline\r\n    const kicksample: number[];\r\n    const snaresample: number[];\r\n    const pianosample: number[];\r\n    const WOWsample: number[];\r\n    const overdrivesample: number[];\r\n    const trumpetsample: number[];\r\n    const saxophonesample: number[];\r\n    const orchhitsample: number[];\r\n    const detatchedviolinsample: number[];\r\n    const synthsample: number[];\r\n    const sonic3snaresample: number[];\r\n    const comeonsample: number[];\r\n    const choirsample: number[];\r\n    const overdrivensample: number[];\r\n    const flutesample: number[];\r\n    const legatoviolinsample: number[];\r\n    const tremoloviolinsample: number[];\r\n    const amenbreaksample: number[];\r\n    const pizzicatoviolinsample: number[];\r\n    const timallengruntsample: number[];\r\n    const tubasample: number[];\r\n    const loopingcymbalsample: number[];\r\n    const kickdrumsample: number[];\r\n    const snaredrumsample: number[];\r\n    const closedhihatsample: number[];\r\n    const foothihatsample: number[];\r\n    const openhihatsample: number[];\r\n    const crashsample: number[];\r\n    const pianoC4sample: number[];\r\n    const liverpadsample: number[];\r\n    const marimbasample: number[];\r\n    const susdotwavsample: number[];\r\n    const wackyboxttssample: number[];\r\n    const peppersteak1: number[];\r\n    const peppersteak2: number[];\r\n    const vinyl: number[];\r\n    const slapbass: number[];\r\n    const hdeboverdrive: number[];\r\n    const sunsoftbass: number[];\r\n    const masculinechoir: number[];\r\n    const femininechoir: number[];\r\n    const southtololoche: number[];\r\n    const harp: number[];\r\n    const panflute: number[];\r\n    const krumhorn: number[];\r\n    const timpani: number[];\r\n    const crowdhey: number[];\r\n    const warioland4brass: number[];\r\n    const warioland4organ: number[];\r\n    const warioland4daow: number[];\r\n    const warioland4hourchime: number[];\r\n    const warioland4tick: number[];\r\n    const kirbykick: number[];\r\n    const kirbysnare: number[];\r\n    const kirbybongo: number[];\r\n    const kirbyclick: number[];\r\n    const funkkick: number[];\r\n    const funksnare: number[];\r\n    const funksnareleft: number[];\r\n    const funksnareright: number[];\r\n    const funktomhigh: number[];\r\n    const funktomlow: number[];\r\n    const funkhihatclosed: number[];\r\n    const funkhihathalfopen: number[];\r\n    const funkhihatopen: number[];\r\n    const funkhihatopentip: number[];\r\n    const funkhihatfoot: number[];\r\n    const funkcrash: number[];\r\n    const funkcrashtip: number[];\r\n    const funkride: number[];\r\n    const chronoperc1finalsample: number[];\r\n    const synthkickfmsample: number[];\r\n    const woodclicksample: number[];\r\n    const acousticsnaresample: number[];\r\n    const catpaintboxsample: number[];\r\n    const gameboypaintboxsample: number[];\r\n    const mariopaintboxsample: number[];\r\n    const drumpaintboxsample: number[];\r\n    const yoshipaintboxsample: number[];\r\n    const starpaintboxsample: number[];\r\n    const fireflowerpaintboxsample: number[];\r\n    const dogpaintbox: number[];\r\n    const oinkpaintbox: number[];\r\n    const swanpaintboxsample: number[];\r\n    const facepaintboxsample: number[];\r\n}\r\n\r\nfunction loadScript(url: string): Promise<void> {\r\n    const result: Promise<void> = new Promise((resolve, reject) => {\r\n\tif (!Config.willReloadForCustomSamples) {\r\n\t    const script = document.createElement(\"script\");\r\n\t    script.src = url;\r\n\t    document.head.appendChild(script);\r\n\t    script.addEventListener(\"load\", (event) => {\r\n\t\tresolve();\r\n\t    });\r\n\t} else {\r\n\t    // There's not really any errors that show up if the loading for\r\n\t    // this script is stopped early, but it won't really do anything\r\n\t    // particularly useful either in that case.\r\n\t}\r\n    });\r\n    return result;\r\n}\r\n\r\nexport function loadBuiltInSamples(set: number): void {\r\n    const defaultIndex: number = 0;\r\n    const defaultIntegratedSamples: Float32Array = Config.chipWaves[defaultIndex].samples;\r\n    const defaultSamples: Float32Array = Config.rawRawChipWaves[defaultIndex].samples;\r\n\r\n    if (set == 0) {\r\n\t// Create chip waves with the wrong sound.\r\n\tconst chipWaves = [\r\n\t    { name: \"paandorasbox kick\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"paandorasbox snare\", expression: 3.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"paandorasbox piano1\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 2 },\r\n\t    { name: \"paandorasbox WOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\r\n\t    { name: \"paandorasbox overdrive\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -2 },\r\n\t    { name: \"paandorasbox trumpet\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 1.2 },\r\n\t    { name: \"paandorasbox saxophone\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -5 },\r\n\t    { name: \"paandorasbox orchestrahit\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\r\n\t    { name: \"paandorasbox detatched violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\r\n\t    { name: \"paandorasbox synth\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -0.8 },\r\n\t    { name: \"paandorasbox sonic3snare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"paandorasbox come on\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\r\n\t    { name: \"paandorasbox choir\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\r\n\t    { name: \"paandorasbox overdriveguitar\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6.2 },\r\n\t    { name: \"paandorasbox flute\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6 },\r\n\t    { name: \"paandorasbox legato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -28 },\r\n\t    { name: \"paandorasbox tremolo violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -33 },\r\n\t    { name: \"paandorasbox amen break\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -55 },\r\n\t    { name: \"paandorasbox pizzicato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -11 },\r\n\t    { name: \"paandorasbox tim allen grunt\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -20 },\r\n\t    { name: \"paandorasbox tuba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 44 },\r\n\t    { name: \"paandorasbox loopingcymbal\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17 },\r\n\t    { name: \"paandorasbox standardkick\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -7 },\r\n\t    { name: \"paandorasbox standardsnare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"paandorasbox closedhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 5 },\r\n\t    { name: \"paandorasbox foothihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 4 },\r\n\t    { name: \"paandorasbox openhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -31 },\r\n\t    { name: \"paandorasbox crashcymbal\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -43 },\r\n\t    { name: \"paandorasbox pianoC4\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.5 },\r\n\t    { name: \"paandorasbox liver pad\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -22.5 },\r\n\t    { name: \"paandorasbox marimba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -15.5 },\r\n\t    { name: \"paandorasbox susdotwav\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -24.5 },\r\n\t    { name: \"paandorasbox wackyboxtts\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17.5 },\r\n\t    { name: \"paandorasbox peppersteak_1\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.2 },\r\n\t    { name: \"paandorasbox peppersteak_2\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -47 },\r\n\t    { name: \"paandorasbox vinyl_noise\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -50 },\r\n\t    { name: \"paandorasbeta slap bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -56 },\r\n\t    { name: \"paandorasbeta HD EB overdrive guitar\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60 },\r\n\t    { name: \"paandorasbeta sunsoft bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -18.5 },\r\n\t    { name: \"paandorasbeta masculine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\r\n\t    { name: \"paandorasbeta feminine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60.5 },\r\n\t    { name: \"paandorasbeta tololoche\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -29.5 },\r\n\t    { name: \"paandorasbeta harp\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -54 },\r\n\t    { name: \"paandorasbeta pan flute\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -58 },\r\n\t    { name: \"paandorasbeta krumhorn\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -46 },\r\n\t    { name: \"paandorasbeta timpani\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\r\n\t    { name: \"paandorasbeta crowd hey\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -29 },\r\n\t    { name: \"paandorasbeta wario land 4 brass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -68 },\r\n\t    { name: \"paandorasbeta wario land 4 rock organ\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -63 },\r\n\t    { name: \"paandorasbeta wario land 4 DAOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -35 },\r\n\t    { name: \"paandorasbeta wario land 4 hour chime\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -47.5 },\r\n\t    { name: \"paandorasbeta wario land 4 tick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -12.5 },\r\n\t    { name: \"paandorasbeta kirby kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\r\n\t    { name: \"paandorasbeta kirby snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\r\n\t    { name: \"paandorasbeta kirby bongo\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\r\n\t    { name: \"paandorasbeta kirby click\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\r\n\t    { name: \"paandorasbeta sonor kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\r\n\t    { name: \"paandorasbeta sonor snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\r\n\t    { name: \"paandorasbeta sonor snare (left hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\r\n\t    { name: \"paandorasbeta sonor snare (right hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\r\n\t    { name: \"paandorasbeta sonor high tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\r\n\t    { name: \"paandorasbeta sonor low tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\r\n\t    { name: \"paandorasbeta sonor hihat (closed)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -17 },\r\n\t    { name: \"paandorasbeta sonor hihat (half opened)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -21 },\r\n\t    { name: \"paandorasbeta sonor hihat (open)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -54.5 },\r\n\t    { name: \"paandorasbeta sonor hihat (open tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -43.5 },\r\n\t    { name: \"paandorasbeta sonor hihat (pedal)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28 },\r\n\t    { name: \"paandorasbeta sonor crash\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -51 },\r\n\t    { name: \"paandorasbeta sonor crash (tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -50.5 },\r\n\t    { name: \"paandorasbeta sonor ride\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46 }\r\n\t];\r\n\r\n\tsampleLoadingState.totalSamples += chipWaves.length;\r\n\r\n\t// This assumes that Config.rawRawChipWaves and Config.chipWaves have\r\n\t// the same number of elements.\r\n\tconst startIndex: number = Config.rawRawChipWaves.length;\r\n\tfor (const chipWave of chipWaves) {\r\n\t    const chipWaveIndex: number = Config.rawRawChipWaves.length;\r\n\t    const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\r\n\t    const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\r\n\t    const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\r\n\t    Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\r\n\t    Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\r\n\t    Config.rawChipWaves[chipWaveIndex] = rawChipWave;\r\n\t    Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\r\n\t    Config.chipWaves[chipWaveIndex] = integratedChipWave;\r\n\t    Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\r\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\r\n\t    sampleLoadingState.urlTable[chipWaveIndex] = \"legacySamples\";\r\n\t}\r\n\r\n\tloadScript(\"samples.js\")\r\n\t.then(() => loadScript(\"samples2.js\"))\r\n\t.then(() => loadScript(\"samples3.js\"))\r\n\t.then(() => loadScript(\"drumsamples.js\"))\r\n\t.then(() => loadScript(\"wario_samples.js\"))\r\n\t.then(() => loadScript(\"kirby_samples.js\"))\r\n\t.then(() => {\r\n\t    // Now put the right sounds in there after everything\r\n\t    // got loaded.\r\n\t    const chipWaveSamples: Float32Array[] = [\r\n\t\tcenterWave(kicksample),\r\n\t\tcenterWave(snaresample),\r\n\t\tcenterWave(pianosample),\r\n\t\tcenterWave(WOWsample),\r\n\t\tcenterWave(overdrivesample),\r\n\t\tcenterWave(trumpetsample),\r\n\t\tcenterWave(saxophonesample),\r\n\t\tcenterWave(orchhitsample),\r\n\t\tcenterWave(detatchedviolinsample),\r\n\t\tcenterWave(synthsample),\r\n\t\tcenterWave(sonic3snaresample),\r\n\t\tcenterWave(comeonsample),\r\n\t\tcenterWave(choirsample),\r\n\t\tcenterWave(overdrivensample),\r\n\t\tcenterWave(flutesample),\r\n\t\tcenterWave(legatoviolinsample),\r\n\t\tcenterWave(tremoloviolinsample),\r\n\t\tcenterWave(amenbreaksample),\r\n\t\tcenterWave(pizzicatoviolinsample),\r\n\t\tcenterWave(timallengruntsample),\r\n\t\tcenterWave(tubasample),\r\n\t\tcenterWave(loopingcymbalsample),\r\n\t\tcenterWave(kickdrumsample),\r\n\t\tcenterWave(snaredrumsample),\r\n\t\tcenterWave(closedhihatsample),\r\n\t\tcenterWave(foothihatsample),\r\n\t\tcenterWave(openhihatsample),\r\n\t\tcenterWave(crashsample),\r\n\t\tcenterWave(pianoC4sample),\r\n\t\tcenterWave(liverpadsample),\r\n\t\tcenterWave(marimbasample),\r\n\t\tcenterWave(susdotwavsample),\r\n\t\tcenterWave(wackyboxttssample),\r\n\t\tcenterWave(peppersteak1),\r\n\t\tcenterWave(peppersteak2),\r\n\t\tcenterWave(vinyl),\r\n\t\tcenterWave(slapbass),\r\n\t\tcenterWave(hdeboverdrive),\r\n\t\tcenterWave(sunsoftbass),\r\n\t\tcenterWave(masculinechoir),\r\n\t\tcenterWave(femininechoir),\r\n\t\tcenterWave(southtololoche),\r\n\t\tcenterWave(harp),\r\n\t\tcenterWave(panflute),\r\n\t\tcenterWave(krumhorn),\r\n\t\tcenterWave(timpani),\r\n\t\tcenterWave(crowdhey),\r\n\t\tcenterWave(warioland4brass),\r\n\t\tcenterWave(warioland4organ),\r\n\t\tcenterWave(warioland4daow),\r\n\t\tcenterWave(warioland4hourchime),\r\n\t\tcenterWave(warioland4tick),\r\n\t\tcenterWave(kirbykick),\r\n\t\tcenterWave(kirbysnare),\r\n\t\tcenterWave(kirbybongo),\r\n\t\tcenterWave(kirbyclick),\r\n\t\tcenterWave(funkkick),\r\n\t\tcenterWave(funksnare),\r\n\t\tcenterWave(funksnareleft),\r\n\t\tcenterWave(funksnareright),\r\n\t\tcenterWave(funktomhigh),\r\n\t\tcenterWave(funktomlow),\r\n\t\tcenterWave(funkhihatclosed),\r\n\t\tcenterWave(funkhihathalfopen),\r\n\t\tcenterWave(funkhihatopen),\r\n\t\tcenterWave(funkhihatopentip),\r\n\t\tcenterWave(funkhihatfoot),\r\n\t\tcenterWave(funkcrash),\r\n\t\tcenterWave(funkcrashtip),\r\n\t\tcenterWave(funkride)\r\n\t    ];\r\n\t    let chipWaveIndexOffset: number = 0;\r\n\t    for (const chipWaveSample of chipWaveSamples) {\r\n\t\tconst chipWaveIndex: number = startIndex + chipWaveIndexOffset;\r\n\t\tConfig.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\r\n\t\tConfig.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\r\n\t\tConfig.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\r\n\t\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\r\n\t\tsampleLoadingState.samplesLoaded++;\r\n\t\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\r\n\t\t    sampleLoadingState.totalSamples,\r\n\t\t    sampleLoadingState.samplesLoaded\r\n\t\t));\r\n\t\tchipWaveIndexOffset++;\r\n\t    }\r\n\t});\r\n\t//EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {name: \"Legacy Sample Presets\", presets:  { name: \"Earthbound O. Guitar\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"paandorasbox overdrive\", \"unison\": \"none\", \"envelopes\": [] } }, index: EditorConfig.presetCategories.length,};\r\n    }\r\n    else if (set == 1) {\r\n\t// Create chip waves with the wrong sound.\r\n\tconst chipWaves = [\r\n\t    { name: \"chronoperc1final\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"synthkickfm\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"mcwoodclick1\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\r\n\t    { name: \"acoustic snare\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 }\r\n\t];\r\n\r\n\tsampleLoadingState.totalSamples += chipWaves.length;\r\n\r\n\t// This assumes that Config.rawRawChipWaves and Config.chipWaves have\r\n\t// the same number of elements.\r\n\tconst startIndex: number = Config.rawRawChipWaves.length;\r\n\tfor (const chipWave of chipWaves) {\r\n\t    const chipWaveIndex: number = Config.rawRawChipWaves.length;\r\n\t    const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\r\n\t    const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\r\n\t    const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\r\n\t    Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\r\n\t    Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\r\n\t    Config.rawChipWaves[chipWaveIndex] = rawChipWave;\r\n\t    Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\r\n\t    Config.chipWaves[chipWaveIndex] = integratedChipWave;\r\n\t    Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\r\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\r\n\t    sampleLoadingState.urlTable[chipWaveIndex] = \"nintariboxSamples\";\r\n\t}\r\n\r\n\tloadScript(\"nintaribox_samples.js\")\r\n\t.then(() => {\r\n\t    // Now put the right sounds in there after everything\r\n\t    // got loaded.\r\n\t    const chipWaveSamples: Float32Array[] = [\r\n\t\tcenterWave(chronoperc1finalsample),\r\n\t\tcenterWave(synthkickfmsample),\r\n\t\tcenterWave(woodclicksample),\r\n\t\tcenterWave(acousticsnaresample)\r\n\t    ];\r\n\t    let chipWaveIndexOffset: number = 0;\r\n\t    for (const chipWaveSample of chipWaveSamples) {\r\n\t\tconst chipWaveIndex: number = startIndex + chipWaveIndexOffset;\r\n\t\tConfig.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\r\n\t\tConfig.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\r\n\t\tConfig.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\r\n\t\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\r\n\t\tsampleLoadingState.samplesLoaded++;\r\n\t\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\r\n\t\t    sampleLoadingState.totalSamples,\r\n\t\t    sampleLoadingState.samplesLoaded\r\n\t\t));\r\n\t\tchipWaveIndexOffset++;\r\n\t    }\r\n\t});\r\n    }\r\n    else if (set == 2) {\r\n\t// Create chip waves with the wrong sound.\r\n\tconst chipWaves = [\r\n\t    { name: \"cat\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\r\n\t    { name: \"gameboy\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 7 },\r\n\t    { name: \"mario\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\r\n\t    { name: \"drum\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 4 },\r\n\t    { name: \"yoshi\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\r\n\t    { name: \"star\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\r\n\t    { name: \"fire flower\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\r\n\t    { name: \"dog\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\r\n\t    { name: \"oink\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 3 },\r\n\t    { name: \"swan\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 1 },\r\n\t    { name: \"face\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -12 }\r\n\t];\r\n\r\n\tsampleLoadingState.totalSamples += chipWaves.length;\r\n\r\n\t// This assumes that Config.rawRawChipWaves and Config.chipWaves have\r\n\t// the same number of elements.\r\n\tconst startIndex: number = Config.rawRawChipWaves.length;\r\n\tfor (const chipWave of chipWaves) {\r\n\t    const chipWaveIndex: number = Config.rawRawChipWaves.length;\r\n\t    const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\r\n\t    const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\r\n\t    const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\r\n\t    Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\r\n\t    Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\r\n\t    Config.rawChipWaves[chipWaveIndex] = rawChipWave;\r\n\t    Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\r\n\t    Config.chipWaves[chipWaveIndex] = integratedChipWave;\r\n\t    Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\r\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\r\n\t    sampleLoadingState.urlTable[chipWaveIndex] = \"marioPaintboxSamples\";\r\n\t}\r\n\r\n\tloadScript(\"mario_paintbox_samples.js\")\r\n\t.then(() => {\r\n\t    // Now put the right sounds in there after everything\r\n\t    // got loaded.\r\n\t    const chipWaveSamples: Float32Array[] = [\r\n\t\tcenterWave(catpaintboxsample),\r\n\t\tcenterWave(gameboypaintboxsample),\r\n\t\tcenterWave(mariopaintboxsample),\r\n\t\tcenterWave(drumpaintboxsample),\r\n\t\tcenterWave(yoshipaintboxsample),\r\n\t\tcenterWave(starpaintboxsample),\r\n\t\tcenterWave(fireflowerpaintboxsample),\r\n\t\tcenterWave(dogpaintbox),\r\n\t\tcenterWave(oinkpaintbox),\r\n\t\tcenterWave(swanpaintboxsample),\r\n\t\tcenterWave(facepaintboxsample)\r\n\t    ];\r\n\t    let chipWaveIndexOffset: number = 0;\r\n\t    for (const chipWaveSample of chipWaveSamples) {\r\n\t\tconst chipWaveIndex: number = startIndex + chipWaveIndexOffset;\r\n\t\tConfig.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\r\n\t\tConfig.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\r\n\t\tConfig.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\r\n\t\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\r\n\t\tsampleLoadingState.samplesLoaded++;\r\n\t\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\r\n\t\t    sampleLoadingState.totalSamples,\r\n\t\t    sampleLoadingState.samplesLoaded\r\n\t\t));\r\n\t\tchipWaveIndexOffset++;\r\n\t    }\r\n\t});\r\n    }\r\n    else {\r\n        console.log(\"invalid set of built-in samples\");\r\n    }\r\n}\r\n\r\nexport class Config {\r\n    // Params for post-processing compressor\r\n    public static thresholdVal: number = -10;\r\n    public static kneeVal: number = 40;\r\n    public static ratioVal: number = 12;\r\n    public static attackVal: number = 0;\r\n    public static releaseVal: number = 0.25;\r\n\r\n    public static willReloadForCustomSamples: boolean = false;\r\n\r\n    public static jsonFormat: string = \"UltraBox\";\r\n    // public static thurmboxImportUrl: string = \"https://file.garden/ZMQ0Om5nmTe-x2hq/PandoraArchive%20Samples/\";\r\n\r\n    public static readonly scales: DictionaryArray<Scale> = toNameMap([\r\n\r\n\t\t//   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\r\n\t\t{ name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\r\n        { name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\r\n        { name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\r\n        { name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\r\n        { name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\r\n        { name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\r\n        { name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\r\n        { name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\r\n        { name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\r\n        { name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\r\n        { name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\r\n        { name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\r\n        { name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\r\n        { name: \"Blues Major\", realName: \"blues major\", flags: [true, false, true, true, true,false, false, true, false, true, false, false] }, // Blues Major\r\n        { name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\r\n        { name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\r\n        { name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\r\n        { name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\r\n        { name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\r\n        { name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\r\n        { name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\r\n        // TODO: remove these with 2.3\r\n        // modbox\r\n        { name: \"No Dabbing (MB)\", realName: \"no dabbing\", flags:[true, true, false, true, true, true, true, true, true, false, true, false] },\r\n        // todbox\r\n        { name: \"Jacked Toad (TB)\", realName: \"jacked toad\", flags: [true, false, true, true, false, true, true, true, true, false, true, true] },\r\n        { name: \"Test Scale (TB)\", realName: \"**t\", flags: [true, true, false, false, false, true, true, false, false, true, true, false] },\r\n        { name: \"Custom\", realName: \"custom\", flags: [true, false, true, true, false, false, false, true, true, false, true, true] }, // Custom? considering allowing this one to be be completely configurable\r\n\t]);\r\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\r\n\t\t{ name: \"C\", isWhiteKey: true, basePitch: 12 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\r\n\t\t{ name: \"C♯\", isWhiteKey: false, basePitch: 13 },\r\n\t\t{ name: \"D\", isWhiteKey: true, basePitch: 14 },\r\n\t\t{ name: \"D♯\", isWhiteKey: false, basePitch: 15 },\r\n\t\t{ name: \"E\", isWhiteKey: true, basePitch: 16 },\r\n\t\t{ name: \"F\", isWhiteKey: true, basePitch: 17 },\r\n\t\t{ name: \"F♯\", isWhiteKey: false, basePitch: 18 },\r\n\t\t{ name: \"G\", isWhiteKey: true, basePitch: 19 },\r\n\t\t{ name: \"G♯\", isWhiteKey: false, basePitch: 20 },\r\n\t\t{ name: \"A\", isWhiteKey: true, basePitch: 21 },\r\n\t\t{ name: \"A♯\", isWhiteKey: false, basePitch: 22 },\r\n        { name: \"B\", isWhiteKey: true, basePitch: 23 },\r\n\t\t\t\t// { name: \"C+\", isWhiteKey: false, basePitch: 24 },\r\n\t\t//taken from todbox, called \"B#\" for some reason lol\r\n\t\t// { name: \"G- (actually F#-)\", isWhiteKey: false, basePitch: 6 },\r\n        // { name: \"C-\", isWhiteKey: true, basePitch: 0 },\r\n\t    //brucebox\r\n\t\t//g- isn't actually g-???\r\n\t\t// { name: \"oh no (F-)\", isWhiteKey: true, basePitch: 5 },\r\n\t\t//shitbox\r\n\t]);\r\n\tpublic static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\r\n\tpublic static readonly tempoMin: number = 1;\r\n\tpublic static readonly tempoMax: number = 500;\r\n\tpublic static readonly octaveMin: number = -2;\r\n\tpublic static readonly octaveMax: number = 2;\r\n    public static readonly echoDelayRange: number = 24;\r\n    public static readonly echoDelayStepTicks: number = 4;\r\n    public static readonly echoSustainRange: number = 8;\r\n    public static readonly echoShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay echoes.\r\n    public static readonly echoShelfGain: number = Math.pow(2.0, -0.5);\r\n    public static readonly reverbShelfHz: number = 8000.0; // The cutoff freq of the shelf filter that is used to decay reverb.\r\n    public static readonly reverbShelfGain: number = Math.pow(2.0, -1.5);\r\n\tpublic static readonly reverbRange: number = 32;\r\n    public static readonly reverbDelayBufferSize: number = 16384; // TODO: Compute a buffer size based on sample rate.\r\n    public static readonly reverbDelayBufferMask: number = Config.reverbDelayBufferSize - 1; // TODO: Compute a buffer size based on sample rate.\r\n    public static readonly beatsPerBarMin: number = 1;\r\n\tpublic static readonly beatsPerBarMax: number = 64;\r\n\tpublic static readonly barCountMin: number = 1;\r\n\tpublic static readonly barCountMax: number = 1024;\r\n    public static readonly instrumentCountMin: number = 1;\r\n    public static readonly layeredInstrumentCountMax: number = 10;\r\n    public static readonly patternInstrumentCountMax: number = 10;\r\n\tpublic static readonly partsPerBeat: number = 24;\r\n\tpublic static readonly ticksPerPart: number = 2;\r\n\tpublic static readonly ticksPerArpeggio: number = 3;\r\n\tpublic static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7] ];\r\n\tpublic static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\r\n\t\t{ name: \"÷3 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷4 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\r\n\t\t{ name: \"÷6\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷8\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n        { name: \"÷12\", stepsPerBeat: 12, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"freehand\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t]);\r\n\r\n    public static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"Picked String\", \"supersaw\", \"custom chip\", \"mod\", \"FM6op\"];\r\n\tpublic static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, false, false, false, false];\r\n    public static readonly chipBaseExpression: number = 0.03375; // Doubled by unison feature, but affected by expression adjustments per unison setting and wave shape.\r\n    public static readonly fmBaseExpression: number = 0.03;\r\n    public static readonly noiseBaseExpression: number = 0.19;\r\n    public static readonly spectrumBaseExpression: number = 0.3; // Spectrum can be in pitch or noise channels, the expression is doubled for noise.\r\n    public static readonly drumsetBaseExpression: number = 0.45; // Drums tend to be loud but brief!\r\n    public static readonly harmonicsBaseExpression: number = 0.025;\r\n    public static readonly pwmBaseExpression: number = 0.04725; // It's actually closer to half of this, the synthesized pulse amplitude range is only .5 to -.5, but also note that the fundamental sine partial amplitude of a square wave is 4/π times the measured square wave amplitude.\r\n    public static readonly supersawBaseExpression:  number = 0.061425; // It's actually closer to half of this, the synthesized sawtooth amplitude range is only .5 to -.5.\r\n    public static readonly pickedStringBaseExpression: number = 0.025; // Same as harmonics.\r\n    public static readonly distortionBaseVolume: number = 0.011; // Distortion is not affected by pitchDamping, which otherwise approximately halves expression for notes around the middle of the range.\r\n    public static readonly bitcrusherBaseVolume: number = 0.010; // Also not affected by pitchDamping, used when bit crushing is maxed out (aka \"1-bit\" output).\r\n\tpublic static rawChipWaves: DictionaryArray<ChipWave> = toNameMap([\r\n        { name: \"rounded\", expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\r\n        { name: \"triangle\", expression: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\r\n        { name: \"square\", expression: 0.5, samples: centerWave([1.0, -1.0]) },\r\n        { name: \"1/4 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"1/8 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"sawtooth\", expression: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\r\n        { name: \"double saw\", expression: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\r\n        { name: \"double pulse\", expression: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"spiky\", expression: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\r\n        { name: \"sine\", expression: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\r\n        { name: \"flute\", expression: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\r\n        { name: \"harp\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\r\n        { name: \"sharp clarinet\", expression: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\r\n        { name: \"soft clarinet\", expression: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\r\n        { name: \"alto sax\", expression: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\r\n        { name: \"bassoon\", expression: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\r\n        { name: \"trumpet\", expression: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\r\n        { name: \"electric guitar\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\r\n        { name: \"organ\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\r\n        { name: \"pan flute\", expression: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\r\n        { name: \"glitch\", expression: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\r\n        { name: \"trapezoid\", expression: 1.0, samples: centerWave([1.0 / 15.0, 6.0 / 15.0, 10.0 / 15.0, 14.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 14.0 / 15.0, 10.0 / 15.0, 6.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -6.0 / 15.0, -10.0 / 15.0, -14.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -14.0 / 15.0, -10.0 / 15.0, -6.0 / 15.0, -1.0 / 15.0,])},\r\n        // modbox\r\n        { name: \"modbox 10% pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"modbox sunsoft bass\", expression: 1.0, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\r\n        { name: \"modbox loud pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]) },\r\n        { name: \"modbox sax\", expression: 0.5, samples: centerAndNormalizeWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]) },\r\n        { name: \"modbox guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]) },\r\n        { name: \"modbox sine\", expression: 0.5, samples: centerAndNormalizeWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]) },\r\n        { name: \"modbox atari bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]) },\r\n        { name: \"modbox atari pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\r\n        { name: \"modbox 1% pulse\", expression: 0.5, samples: centerAndNormalizeWave},\r\n        { name: \"modbox curved sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]) },\r\n        { name: \"modbox viola\", expression: 0.45, samples: centerAndNormalizeWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]) },\r\n        { name: \"modbox brass\", expression: 0.45, samples: centerAndNormalizeWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]) },\r\n        { name: \"modbox acoustic bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -1.0]) },\r\n        { name: \"modbox lyre\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, 4.0, 2.15, 4.13, 5.15, 0.0, -0.05, 1.0]) },\r\n        { name: \"modbox ramp pulse\", expression: 0.5, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },  \r\n        { name: \"modbox piccolo\", expression: 0.5, samples: centerAndNormalizeWave([1, 4, 2, 1, -0.1, -1, -0.12]) },\r\n        { name: \"modbox squaretooth\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },\r\n        { name: \"modbox flatline\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) },\r\n        { name: \"modbox pnryshk a (u5)\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]) },\r\n        { name: \"modbox pnryshk b (riff)\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, 1.0]) },\r\n        // sandbox\r\n        { name: \"sandbox shrill lute\", expression: 0.94, samples: centerAndNormalizeWave([1.0, 1.5, 1.25, 1.2, 1.3, 1.5]) },\r\n        { name: \"sandbox bassoon\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]) },\r\n        { name: \"sandbox shrill bass\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 0, 0, 1, 0, 1, 0, 0, 0]) },\r\n        { name: \"sandbox nes pulse\", expression: 0.4, samples: centerAndNormalizeWave([2.1, -2.2, 1.2, 3]) },\r\n        { name: \"sandbox saw bass\", expression: 0.25, samples: centerAndNormalizeWave([1, 1, 1, 1, 0, 2, 1, 2, 3, 1, -2, 1, 4, 1, 4, 2, 1, 6, -3, 4, 2, 1, 5, 1, 4, 1, 5, 6, 7, 1, 6, 1, 4, 1, 9]) },\r\n        { name: \"sandbox euphonium\", expression: 0.3, samples: centerAndNormalizeWave([0, 1, 2, 1, 2, 1, 4, 2, 5, 0, -2, 1, 5, 1, 2, 1, 2, 4, 5, 1, 5, -2, 5, 10, 1]) },\r\n        { name: \"sandbox shrill pulse\", expression: 0.3, samples: centerAndNormalizeWave([4 -2, 0, 4, 1, 4, 6, 7, 3]) },\r\n        { name: \"sandbox r-sawtooth\", expression: 0.2, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\r\n        { name: \"sandbox recorder\", expression: 0.2, samples: centerAndNormalizeWave([5.0, -5.1, 4.0, -4.1, 3.0, -3.1, 2.0, -2.1, 1.0, -1.1, 6.0]) },\r\n        { name: \"sandbox narrow saw\", expression: 1.2, samples: centerAndNormalizeWave([0.1, 0.13 / -0.1 ,0.13 / -0.3 ,0.13 / -0.5 ,0.13 / -0.7 ,0.13 / -0.9 ,0.13 / -0.11 ,0.13 / -0.31 ,0.13 / -0.51 ,0.13 / -0.71 ,0.13 / -0.91 ,0.13 / -0.12 ,0.13 / -0.32 ,0.13 / -0.52 ,0.13 / -0.72 ,0.13 / -0.92 ,0.13 / -0.13 ,0.13 / 0.13 ,0.13 / 0.92 ,0.13 / 0.72 ,0.13 / 0.52 ,0.13 / 0.32 ,0.13 / 0.12 ,0.13 / 0.91 ,0.13 / 0.71 ,0.13 / 0.51 ,0.13 / 0.31 ,0.13 / 0.11 ,0.13 / 0.9 ,0.13 / 0.7 ,0.13 / 0.5 ,0.13 / 0.3 ,0.13]) },\r\n        { name: \"sandbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\r\n        { name: \"sandbox ring pulse\", expression: 1.0, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"sandbox double sine\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.0, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0]) },\r\n        { name: \"sandbox contrabass\", expression: 0.5, samples: centerAndNormalizeWave([4.20, 6.9, 1.337, 6.66]) },\r\n        { name: \"sandbox double bass\", expression: 0.4, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, -1.0, -0.6875, -0.5, -0.625, -0.625, -0.5, -0.375, -0.5625, -0.4375, -0.5625, -0.4375, -0.4375, -0.3125, -0.1875, 0.1875, 0.375, 0.5625, -0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\r\n        // haileybox\r\n        { name: \"haileybox test1\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.5, -1.0]) },\r\n        //brucebox\r\n        { name: \"brucebox pokey 4bit lfsr\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0]) },\r\n        { name: \"brucebox pokey 5step bass\", expression: 0.5,samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0]) },\r\n        { name: \"brucebox isolated spiky\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0, -1.0]) },\r\n        // nerdbox\r\n        { name: \"nerdbox unnamed 1\", expression: 0.5, samples: centerAndNormalizeWave([0.2 , 0.8 / 0.2, 0.7, -0.4, -1.0, 0.5, -0.5 / 0.6]) },\r\n        { name: \"nerdbox unnamed 2\", expression: 0.5, samples: centerAndNormalizeWave([2.0 , 5.0 / 55.0 , -9.0 , 6.5 / 6.5 , -55.0, 18.5 / -26.0]) },\r\n        // zefbox\r\n        { name: \"zefbox semi-square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.5, 2.0, 2.5, 2.5, 2.5, 2.0, 1.5, 1.0]) },\r\n        { name: \"zefbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\r\n        { name: \"zefbox squaretal\", expression: 0.7, samples: centerAndNormalizeWave([1.5, 1.0, 1.5, -1.5, -1.0, -1.5]) },\r\n        { name: \"zefbox saw wide\", expression: 0.65, samples: centerAndNormalizeWave([0.0, -0.4, -0.8, -1.2, -1.6 , -2.0, 0.0, -0.4, -0.8, -1.2, -1.6]) },\r\n        { name: \"zefbox saw narrow\", expression: 0.65,samples: centerAndNormalizeWave([1, 0.5, 1, 0.5, 1, 0.5, 1, 2, 1, 2 ,1]) },\r\n        { name: \"zefbox deep sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([0, 2, 3, 4, 4.5, 5, 5.5, 6, 6.25, 6.5, 6.75, 7, 6.75, 6.5, 6.25, 6, 5.5, 5, 4.5, 4, 3, 2, 1]) },\r\n        { name: \"zefbox sawtal\", expression: 0.3, samples: centerAndNormalizeWave([1.5, 1.0, 1.25, -0.5, 1.5, -0.5, 0.0, -1.5, 1.5, 0.0, 0.5, -1.5, 0.5, 1.25, -1.0, -1.5]) },\r\n        { name: \"zefbox deep sawtal\", expression: 0.7, samples: centerAndNormalizeWave([0.75, 0.25, 0.5, -0.5, 0.5, -0.5, -0.25, -0.75]) },\r\n        { name: \"zefbox pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -2.0, -2.0, -1.5, -1.5, -1.25, -1.25, -1.0, -1.0]) },\r\n        { name: \"zefbox triple pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },\r\n        { name: \"zefbox high pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, -2, 2, -3, 3, -4, 5, -4, 3, -3, 2, -2, 1]) },\r\n        { name: \"zefbox deep pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, 2, 2, -2, -2, -3, -4, -4, -5, -5, -5, -5, 0, -1, -2]) },\r\n        // wackybox\r\n        { name: \"wackybox guitar string\", expression: 0.6, samples: centerAndNormalizeWave([0, 63, 63, 63, 63, 19, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 27, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 34, 63, 63, 63, 63]) },\r\n        { name: \"wackybox intense\", expression: 0.6, samples: centerAndNormalizeWave([36, 25, 33, 35, 18, 51, 22, 40, 27, 37, 31, 33, 25, 29, 41, 23, 31, 31, 45, 20, 37, 23, 29, 26, 42, 29, 33, 26, 31, 27, 40, 25, 40, 26, 37, 24, 41, 32, 0, 32, 33, 29, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]) },\r\n        { name: \"wackybox buzz wave\", expression: 0.6, samples: centerAndNormalizeWave([0, 1, 1, 2, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 11, 15, 23, 62, 61, 60, 58, 56, 56, 54, 53, 52, 50, 49, 48, 47, 47, 45, 45, 45, 44, 44, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 53]) },\r\n        // todbox\r\n        { name: \"todbox 1/3 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0]) },\r\n        { name: \"todbox 1/5 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"todbox slap bass\", expression: 0.5, samples: centerAndNormalizeWave([1, 0.5, 0, 0.5, 1.25, 0.5, -0.25, 0.1, -0.1, 0.1, 1.1, 2.1, 3, 3.5, 2.9, 3.3, 2.7, 2.9, 2.3, 2, 1.9, 1.8, 1, 0.7, 0.9, 0.8, 0.4, 0.1, 0.0, 0.2, 0.4, 0.6, 0.5, 0.8]) },\r\n        { name: \"todbox harsh wave\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 0.5, 0.5, 0.5, 0.7, 0.39, 1.3, 0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n        { name: \"todbox accordian\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 1, 2, 2, 1.5, 1.5, 0.8, 0, -2, -3.25, -4, -4.5, -5.5, -6, -5.75, -5.5, -5, -5, -5, -6, -6, -6, -5, -4, -3, -2, -1, 0.75, 1, 2, 3, 4, 5, 6, 6.5, 7.5, 8, 7.75, 6, 5.25, 5, 5, 5, 5, 5, 4.25, 3.75, 3.25, 2.75, 1.25, -0.75, -2, -0.75, 1.25, 1.25, 2, 2, 2, 2, 1.5, -1, -2, -1, 1.5, 2,  2.75, 2.75, 2.75, 3, 2.75, -1, -2, -2.5, -2, -1, -2.25, -2.75, -2, -3, -1.75, 1, 2, 3.5, 4, 5.25, 6, 8, 9.75, 10, 9.5, 9, 8.5, 7.5, 6.5, 5.25, 5, 4.5, 4, 4, 4, 3.25, 2.5, 2, 1, -0.5, -2, -3.5, -4, -4, -4, -3.75, -3, -2, -1]) },\r\n        // todbox beta\r\n        { name: \"todbox beta banana wave\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0]) },\r\n        { name: \"todbox beta test wave\", expression: 0.5, samples: centerAndNormalizeWave([56, 0, -52, 16, 3, 3, 2, -35, 20, 147, -53, 0, 0, 5, -6]) },\r\n        { name: \"todbox beta real snare\", expression: 1.0, samples: centerAndNormalizeWave([0.00000,-0.01208,-0.02997,-0.04382,-0.06042,-0.07529,-0.09116,-0.10654,-0.12189,-0.13751,-0.15289,-0.16849,-0.18387,-0.19974,-0.21484,-0.23071,-0.24557,-0.26144,-0.27731,-0.29141,-0.30350,-0.32416,-0.34406,-0.32947,-0.31158,-0.33725,-0.37579,-0.39746,-0.40201,-0.40906,-0.44180,-0.47229,-0.47379,-0.47733,-0.45239,-0.33954,-0.22894,-0.22443,-0.32138,-0.46371,-0.57178,-0.61081,-0.59998,-0.61459,-0.62189,-0.43979,-0.19217,-0.12643,-0.17252,-0.20956,-0.20981,-0.19217,-0.22845,-0.34332,-0.50629,-0.64307,-0.72922,-0.81384,-0.87857,-0.90149,-0.88687,-0.86169,-0.87781,-0.80478,-0.52493,-0.31308,-0.33249,-0.39395,-0.39017,-0.30301,-0.19949,-0.13071,-0.02493,0.14307,0.34961,0.52542,0.63223,0.68613,0.74710,0.87305,0.98184,0.98889,0.97052,0.99066,0.99747,0.99344,0.99469,0.99393,0.99570,0.99393,0.99521,0.99469,0.99420,0.99521,0.99420,0.99521,0.99469,0.99469,0.99521,0.99420,0.99545,0.99445,0.99469,0.99493,0.99420,0.99521,0.99393,0.99493,0.99469,0.99445,0.99570,0.99445,0.99521,0.99469,0.99469,0.99521,0.99420,0.99545,0.99445,0.99445,0.99493,0.99420,0.99545,0.99420,0.99493,0.99493,0.99420,0.99545,0.99445,0.99521,0.99469,0.99445,0.99545,0.99368,0.99393,0.99445,0.99268,0.97983,0.97229,0.95944,0.88486,0.76773,0.64481,0.53098,0.39847,0.19318,-0.03827,-0.20325,-0.39319,-0.68765,-0.88461,-0.93448,-0.96069,-0.97681,-0.98715,-0.99042,-0.99142,-0.99091,-0.99142,-0.99219,-0.99091,-0.99219,-0.99066,-0.99142,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99142,-0.99142,-0.99191,-0.99091,-0.99219,-0.99118,-0.99142,-0.99167,-0.99091,-0.99219,-0.99091,-0.99167,-0.99142,-0.99091,-0.99191,-0.99091,-0.99191,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99118,-0.99142,-0.99191,-0.99066,-0.99191,-0.99091,-0.99167,-0.99191,-0.99118,-0.99219,-0.99091,-0.99191,-0.99142,-0.99142,-0.99243,-0.98865,-0.98764,-0.99219,-0.98083,-0.92517,-0.92770,-0.91486,-0.59042,-0.15189,0.02945,0.05667,0.06195,0.00629,-0.18008,-0.56497,-0.88010,-0.92770,-0.92871,-0.97705,-0.99167,-0.98663,-0.99118,-0.99042,-0.99219,-0.99142,-0.99118,-0.98941,-0.99219,-1.00000,-0.97580,-0.95993,-0.99948,-0.98236,-0.84659,-0.74860,-0.70679,-0.59747,-0.48035,-0.41687,-0.36826,-0.29745,-0.18185,-0.06219,0.02164,0.07907,0.13123,0.18033,0.19620,0.15692,0.14053,0.20251,0.27530,0.30905,0.29092,0.27252,0.30402,0.32416,0.32214,0.35239,0.39670,0.43198,0.49420,0.58487,0.64154,0.65967,0.67050,0.67026,0.66522,0.65540,0.66119,0.70627,0.75842,0.78738,0.78940,0.78763,0.80402,0.85944,0.94559,0.98990,0.98160,0.98007,0.99368,0.99393,0.98538,0.97580,0.97101,0.93802,0.81812,0.64633,0.46649,0.28613,0.14685,0.08966,0.12543,0.20325,0.24557,0.18866,0.02795,-0.20175,-0.44205,-0.58713,-0.57629,-0.41385,-0.14255,0.18033,0.47882,0.68311,0.72314,0.62064,0.48309,0.43073,0.53577,0.72794,0.90250,0.97354,0.97000,0.98083,0.99191,0.99319,0.99493,0.99393,0.99521,0.99393,0.99545,0.99420,0.99493,0.99493,0.99445,0.99545,0.99420,0.99545,0.99243,0.98917,0.98386,0.97781,0.95844,0.89066,0.81561,0.78134,0.77277,0.75995,0.73022,0.67126,0.57178,0.47000,0.38361,0.29419,0.20703,0.14734,0.15866,0.25162,0.35818,0.45062,0.56750,0.69748,0.81232,0.89697,0.95062,0.97656,0.98615,0.99191,0.99219,0.99243,0.99368,0.99368,0.97028,0.95566,0.94559,0.82617,0.59973,0.38361,0.23901,0.15338,0.12921,0.11206,0.04382,-0.12946,-0.43552,-0.72644,-0.89847,-0.95465,-0.95541,-0.97229,-0.99268,-0.99319,-0.98840,-0.99142,-0.99167,-0.99091,-0.98840,-0.98965,-0.99368,-0.97455,-0.95010,-0.94684,-0.96219,-0.98514,-0.99243,-0.98889,-0.98917,-0.99142,-0.99219,-0.99091,-0.99191,-0.99142,-0.99142,-0.99191,-0.99066,-0.99167,-0.99091,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99167,-0.99091,-0.99219,-0.99091,-0.99191,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99091,-0.99118,-0.99243,-0.98941,-0.98462,-0.96976,-0.96320,-0.96194,-0.87305,-0.66196,-0.44809,-0.29495,-0.18085,-0.11813,-0.11334,-0.18564,-0.34885,-0.58237,-0.80450,-0.93726,-0.97806,-0.97354,-0.97531,-0.98990,-0.99368,-0.98941,-0.99219,-0.99091,-0.99142,-0.99167,-0.99091,-0.99191,-0.99118,-0.99219,-0.98236,-0.97781,-0.97656,-0.95135,-0.87204,-0.71335,-0.52139,-0.34232,-0.17783,-0.00906,0.14886,0.30450,0.48889,0.67404,0.84030,0.94128,0.97681,0.98462,0.98337,0.99142,0.99521,0.99493,0.99420,0.99445,0.99521,0.99393,0.99545,0.99445,0.99521,0.99521,0.99445,0.99570,0.99445,0.99521,0.99469,0.99445,0.99521,0.99420,0.99521,0.99445,0.99445,0.99521,0.99445,0.99545,0.99445,0.99469,0.99493,0.99393,0.99493,0.99445,0.99393,0.98285,0.97781,0.97479,0.92844,0.82114,0.66095,0.52417,0.46826,0.46722,0.47934,0.47379,0.47076,0.48209,0.42014,0.25439,0.10074,-0.00302,-0.08966,-0.16068,-0.21436,-0.22040,-0.15137,-0.00476,0.18536,0.37631,0.52292,0.62164,0.70425,0.74835,0.72366,0.63928,0.52567,0.40805,0.35666,0.42896,0.60175,0.80200,0.92743,0.96548,0.97632,0.98337,0.99066,0.99521,0.99420,0.99368,0.99292,0.98840,0.98083,0.96774,0.93323,0.85440,0.69470,0.47202,0.20425,-0.08890,-0.36423,-0.60025,-0.77481,-0.90173,-0.96017,-0.97028,-0.98108,-0.98840,-0.99219,-0.98990,-0.99219,-0.99142,-0.99142,-0.99219,-0.99091,-0.99243,-0.99066,-0.99142,-0.99142,-0.99118,-0.99191,-0.99066,-0.99167,-0.99142,-0.99142,-0.99219,-0.99091,-0.99191,-0.99118,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99191,-0.99118,-0.99219,-0.99091,-0.99167,-0.99142,-0.99142,-0.99219,-0.99091,-0.99191,-0.99142,-0.99118,-0.98917,-0.99042,-0.99445,-0.97330,-0.95590,-0.96219,-0.89670,-0.72241,-0.55112,-0.44809,-0.39319,-0.37833,-0.35641,-0.26270,-0.14230,-0.11282,-0.13525,-0.11536,-0.09671,-0.11511,-0.18060,-0.26874,-0.33374,-0.42215,-0.51358,-0.44785,-0.30450,-0.28613,-0.30527,-0.25037,-0.15390,-0.08286,-0.11157,-0.12592,-0.00327,0.13803,0.19141,0.12820,0.01788,-0.03952,-0.12592,-0.26773,-0.34634,-0.31384,-0.18060,-0.01080,0.13574,0.26120,0.36975,0.46573,0.55087,0.63626,0.73022,0.83072,0.92014,0.97177,0.98587,0.98413,0.99167,0.99445,0.99292,0.99219,0.98740,0.98007,0.96472,0.92239,0.82166,0.69067,0.57959,0.54962,0.59695,0.64255,0.64633,0.60629,0.55942,0.54910,0.58966,0.61887,0.56952,0.54181,0.59518,0.63248,0.63876,0.65463,0.73398,0.88312,0.96927,0.97101,0.97958,0.99344,0.99420,0.99268,0.99493,0.99469,0.99445,0.99521,0.99445,0.99545,0.99420,0.99493,0.99493,0.99420,0.99545,0.99420,0.99493,0.99420,0.99393,0.99420,0.98840,0.98309,0.98309,0.96069,0.88461,0.79370,0.72064,0.65765,0.59998,0.53247,0.49268,0.48615,0.44205,0.38034,0.36447,0.38715,0.39294,0.32645,0.19595,0.07782,-0.05893,-0.27832,-0.48309,-0.62619,-0.72995,-0.79999,-0.84583,-0.82166,-0.73575,-0.67227,-0.65491,-0.64960,-0.66397,-0.70175,-0.72894,-0.74658,-0.76724,-0.79520,-0.82846,-0.86523,-0.90527,-0.94382,-0.89948,-0.69849,-0.47479,-0.31662,-0.15414,-0.00729,0.07077,0.08237,0.04431,-0.02292,-0.11761,-0.24307,-0.36926,-0.45087,-0.46170,-0.40250,-0.30679,-0.17529,0.00000,0.14331,0.24179,0.36774,0.49545,0.56522,0.57907,0.56775,0.53851,0.51132,0.48688,0.41913,0.26044,0.00955,-0.26297,-0.46396,-0.62341,-0.82214,-0.94684,-0.96774,-0.97531,-0.98413,-0.99017,-0.98990,-0.99219,-0.99066,-0.99142,-0.99167,-0.99118,-0.99219,-0.98990,-0.99118,-0.99368,-0.99142,-0.97757,-0.97403,-0.98007,-0.96170,-0.86826,-0.67783,-0.52719,-0.48788,-0.45490,-0.43146,-0.47681,-0.54105,-0.57983,-0.60904,-0.62317,-0.59949,-0.55566,-0.52063,-0.52115,-0.55112,-0.56244,-0.58337,-0.65540,-0.73373,-0.77228,-0.74759,-0.68890,-0.64609,-0.61887,-0.58060,-0.50351,-0.40729,-0.33929,-0.35110,-0.42944,-0.47028,-0.42267,-0.32718,-0.20224,-0.05640,0.04556,0.10529,0.17630,0.26169,0.33197,0.32138,0.23776,0.20956,0.23148,0.20352,0.23325,0.39267,0.52719,0.58438,0.62289,0.66345,0.70023,0.66296,0.54330,0.42618,0.33475,0.24533,0.14105,0.03851,0.01358,0.09143,0.22845,0.34961,0.41711,0.48740,0.58914,0.69519,0.78186,0.84357,0.89822,0.95389,0.98135,0.98615,0.99167,0.99243,0.99445,0.99420,0.99469,0.99493,0.99393,0.99545,0.99445,0.99521,0.99469,0.99445,0.99521,0.99420,0.99469,0.98965,0.98715,0.98563,0.96295,0.91736,0.86624,0.82367,0.77554,0.68411,0.53549,0.38916,0.26120,0.11435,-0.04053,-0.18161,-0.23172,-0.19394,-0.15237,-0.10730,-0.02997,0.08588,0.22620,0.34305,0.44104,0.55740,0.65765,0.71259,0.69217,0.65363,0.69748,0.79572,0.89368,0.95514,0.97733,0.98413,0.98816,0.99243,0.99445,0.99243,0.97302,0.96674,0.97983,0.90378,0.71005,0.51056,0.40451,0.40982,0.41559,0.32996,0.24356,0.18866,0.11411,0.05365,0.01157,-0.03247,-0.09216,-0.16095,-0.23248,-0.31662,-0.39771,-0.48663,-0.59647,-0.71536,-0.82013,-0.85287,-0.82947,-0.84937,-0.92215,-0.97177,-0.98663,-0.98816,-0.98438,-0.99091,-0.99219,-0.99091,-0.99191,-0.99042,-0.99191,-0.99091,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99142]) },\r\n        // based off an old mp3 in #modded-beepbox where someone tried to shorten the overdrive guitar into the size of other chip waves \r\n        // search \"normie alert\" in beepcord\r\n        { name: \"ultrabox shortened od guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.82785,-0.67621,-0.40268,-0.43817,-0.45468,-0.22531,-0.18329,0.24750,0.71246,0.52155,0.56082,0.48395,0.33990,0.46957,0.27744,0.42313,0.47104,0.18796,0.12930,-0.13901,-0.07431,-0.16348,-0.74857,-0.73206,-0.35181,-0.26227,-0.41882,-0.27786,-0.19806,-0.19867,0.18643,0.24808,0.08847,-0.06964,0.06912,0.20474,-0.05304,0.29416,0.31967,0.14243,0.27521,-0.23932,-0.14752,0.12360,-0.26123,-0.26111,0.06616,0.26520,0.08090,0.15240,0.16254,-0.12061,0.04562,0.00131,0.04050,0.08182,-0.21729,-0.17041,-0.16312,-0.08563,0.06390,0.05099,0.05627,0.02728,0.00726,-0.13028,-0.05673,-0.14969,-0.17645,0.35492,0.16766,-0.00897,0.24326,-0.00461,-0.04456,0.01776,-0.04950,-0.01221,0.02039,0.07684,0.13397,0.39850,0.35962,0.13754,0.42310,0.27161,-0.17609,0.03659,0.10635,-0.21909,-0.22046,-0.20258,-0.40973,-0.40280,-0.40521,-0.66284]) },\r\n]);\r\n\tpublic static chipWaves: DictionaryArray<ChipWave> = rawChipToIntegrated(Config.rawChipWaves);\r\n\tpublic static rawRawChipWaves: DictionaryArray<ChipWave> = Config.rawChipWaves;\r\n\r\n\tpublic static firstIndexForSamplesInChipWaveList: number = Config.chipWaves.length;\r\n  \r\n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\r\n\tpublic static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\r\n\t\t{ name: \"retro\", expression: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"white\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n\t\t// The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\r\n\t\t{ name: \"clang\", expression: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"buzz\", expression: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"hollow\", expression: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\r\n\t\t{ name: \"shine\", expression: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null }, // Identical to buzz but louder. For now we're keeping it...\r\n\t\t{ name: \"deep\", expression: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\r\n\t\t{ name: \"cutter\", expression: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n        { name: \"metallic\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n        { name: \"static\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t// technically these are from the pandorasbox beta but whatever\r\n\t\t{ name: \"1-bit white\", expression: 0.5, basePitch: 74.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"1-bit metallic\", expression: 0.5, basePitch: 86.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t// ultrabox noises\r\n\t\t{ name: \"crackling\", expression: 0.9, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"pink\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n\t\t{ name: \"brownian\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n\t]);\r\n\t\r\n    public static readonly filterFreqStep: number = 1.0 / 4.0;\r\n    public static readonly filterFreqRange: number = 34;\r\n    public static readonly filterFreqReferenceSetting: number = 28;\r\n    public static readonly filterFreqReferenceHz: number = 8000.0;\r\n    public static readonly filterFreqMaxHz: number = Config.filterFreqReferenceHz * Math.pow(2.0, Config.filterFreqStep * (Config.filterFreqRange - 1 - Config.filterFreqReferenceSetting)); // ~19khz\r\n    public static readonly filterFreqMinHz: number = 8.0;\r\n    public static readonly filterGainRange: number = 15;\r\n    public static readonly filterGainCenter: number = 7;\r\n    public static readonly filterGainStep: number = 1.0 / 2.0;\r\n    public static readonly filterMaxPoints: number = 8;\r\n    public static readonly filterTypeNames: ReadonlyArray<string> = [\"low-pass\", \"high-pass\", \"peak\"]; // See FilterType enum above.\r\n    public static readonly filterMorphCount: number = 10; // Number of filter shapes allowed for modulating between. Counts the 0/default position.\r\n\r\n    public static readonly filterSimpleCutRange: number = 11;\r\n    public static readonly filterSimplePeakRange: number = 8;\r\n\r\n    public static readonly fadeInRange: number = 10;\r\n    public static readonly fadeOutTicks: ReadonlyArray<number> = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];\r\n    public static readonly fadeOutNeutral: number = 4;\r\n    public static readonly drumsetFadeOutTicks: number = 48;\r\n\tpublic static readonly transitions: DictionaryArray<Transition> = toNameMap([\r\n        { name: \"normal\", isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false },\r\n        { name: \"interrupt\", isSeamless: true, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\r\n        { name: \"continue\", isSeamless: true, continues: true, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\r\n        { name: \"slide\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: true },\r\n        { name: \"slide in pattern\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: false }\r\n\t]);\r\n\tpublic static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\r\n        { name: \"none\", amplitude: 0.0, type: 0, delayTicks: 0 },\r\n        { name: \"light\", amplitude: 0.15, type: 0, delayTicks: 0 },\r\n        { name: \"delayed\", amplitude: 0.3, type: 0, delayTicks: 37 }, // It will fade in over the previous two ticks.\r\n        { name: \"heavy\", amplitude: 0.45, type: 0, delayTicks: 0 },\r\n        { name: \"shaky\", amplitude: 0.1, type: 1, delayTicks: 0 },\r\n\t\t\t//    { name: \"very shaky\", amplitude: 1, type: 0, delayTicks: 0 },\r\n\t//{ name: \"insane\", amplitude: 10, type: 1, delayTicks: 0 },\r\n\t    //todbox vibratos\r\n\t//\t{ name: \"super insane\", amplitude: 30, type: 1, delayTicks: 1 },\r\n\t\t//wackybox\r\n\t//\t { name: \"quiver\", amplitude: 0.001, type: 0, delayTicks: 0 },\r\n      //  { name: \"wub-wub\", amplitude: 10.0, type: 0, delayTicks: 0 },\r\n   //     { name: \"quiver delayed\", amplitude: 0.001, type: 0, delayTicks: 18 },\r\n      //  { name: \"vibrate\", amplitude: 0.08, type: 0, delayTicks: 0 },\r\n    //    { name: \"too much wub\", amplitude: 30.0, type: 0, delayTicks: 18 },\r\n\t //too much wub breaks things just a little bit at it's original amplitude\r\n\t\t//sandbox\r\n\t]);\r\n\tpublic static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\r\n\t\t{ name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\r\n\t\t{ name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\r\n\t]);\r\n\t// This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\r\n\t//                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\r\n\tpublic static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\r\n\tpublic static readonly unisons: DictionaryArray<Unison> = toNameMap([\r\n        { name: \"none\", voices: 1, spread: 0.0, offset: 0.0, expression: 1.4, sign: 1.0 },\r\n        { name: \"shimmer\", voices: 2, spread: 0.018, offset: 0.0, expression: 0.8, sign: 1.0 },\r\n        { name: \"hum\", voices: 2, spread: 0.045, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n        { name: \"honky tonk\", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n        { name: \"dissonant\", voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0 },\r\n        { name: \"fifth\", voices: 2, spread: 3.5, offset: 3.5, expression: 0.9, sign: 1.0 },\r\n        { name: \"octave\", voices: 2, spread: 6.0, offset: 6.0, expression: 0.8, sign: 1.0 },\r\n        { name: \"bowed\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: -1.0 },\r\n        { name: \"piano\", voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7 },\r\n        { name: \"warbled\", voices: 2, spread: 0.25, offset: 0.05, expression: 0.9, sign: -0.8 },\r\n        { name: \"hecking gosh\", voices: 2, spread: 6.25, offset: -6.0, expression: 0.8, sign: -0.7 },\r\n\t\t{ name: \"spinner\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"detune\", voices: 1, spread: 0.0, offset: 0.25, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"rising\", voices: 2, spread: 1.0, offset: 0.7, expression: 0.95, sign: 1.0 },\r\n\t\t{ name: \"vibrate\", voices: 2, spread: 3.5, offset: 7, expression: 0.975, sign: 1.0 },\r\n\t\t{ name: \"fourths\", voices: 2, spread: 4, offset: 4, expression: 0.95, sign: 1.0 },\r\n\t\t{ name: \"bass\", voices: 1, spread: 0, offset: -7, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"dirty\", voices: 2, spread: 0, offset: 0.1, expression: 0.975, sign: 1.0 },\r\n\t\t{ name: \"stationary\", voices: 2, spread: 3.5, offset: 0.0, expression: 0.9, sign: 1.0 },\r\n\t\t{ name: \"recurve\", voices: 2, spread: 0.005, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"voiced\", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"fluctuate\", voices: 2, spread: 12, offset: 0.0, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"thin\", voices: 1, spread: 0.0, offset: 50.0, expression: 1.0, sign: 1.0 },\r\n\t\t{ name: \"inject\", voices: 2, spread: 6.0, offset: 0.4, expression: 1.0, sign: 1.0 },\r\n\t    { name: \"askewed\", voices: 2, spread: 0.0, offset: 0.42, expression: 0.7, sign: 1.0 },\r\n        { name: \"resonance\", voices: 2, spread: 0.0025, offset: 0.1, expression: 0.8, sign: -1.5 },\r\n\t\t{ name: \"FART\", voices: 2, spread: 13, offset: -5, expression: 1.0, sign: -3 },\r\n\t\t\r\n\t //for modbox; voices = riffapp, spread = intervals, offset = offsets, expression = volume, and sign = signs\r\n\t]);\r\n    public static readonly effectNames: ReadonlyArray<string> = [\"reverb\", \"chorus\", \"panning\", \"distortion\", \"bitcrusher\", \"note filter\", \"echo\", \"pitch shift\", \"detune\", \"vibrato\", \"transition type\", \"chord type\"];\r\n    public static readonly effectOrder: ReadonlyArray<EffectType> = [EffectType.panning, EffectType.transition, EffectType.chord, EffectType.pitchShift, EffectType.detune, EffectType.vibrato, EffectType.noteFilter, EffectType.distortion, EffectType.bitcrusher, EffectType.chorus, EffectType.echo, EffectType.reverb];\r\n    public static readonly noteSizeMax: number = 6;\r\n\tpublic static readonly volumeRange: number = 50;\r\n\t// Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\r\n\t// given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\r\n\tpublic static readonly volumeLogScale: number = 0.1428;\r\n\tpublic static readonly panCenter: number = 50;\r\n\tpublic static readonly panMax: number = Config.panCenter * 2;\r\n\tpublic static readonly panDelaySecondsMax: number = 0.001;\r\n    public static readonly chorusRange: number = 8;\r\n    public static readonly chorusPeriodSeconds: number = 2.0;\r\n    public static readonly chorusDelayRange: number = 0.0034;\r\n    public static readonly chorusDelayOffsets: ReadonlyArray<ReadonlyArray<number>> = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];\r\n    public static readonly chorusPhaseOffsets: ReadonlyArray<ReadonlyArray<number>> = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];\r\n    public static readonly chorusMaxDelay: number = Config.chorusDelayRange * (1.0 + Config.chorusDelayOffsets[0].concat(Config.chorusDelayOffsets[1]).reduce((x, y) => Math.max(x, y)));\r\n\tpublic static readonly chords: DictionaryArray<Chord> = toNameMap([\r\n        { name: \"simultaneous\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false },\r\n        { name: \"strum\", customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false },\r\n        { name: \"arpeggio\", customInterval: false, arpeggiates: true, strumParts: 0, singleTone: true },\r\n        { name: \"custom interval\", customInterval: true, arpeggiates: false, strumParts: 0, singleTone: true },\r\n    ]);\r\n    public static readonly maxChordSize: number = 9;\r\n    public static readonly operatorCount: number = 4;\r\n\tpublic static readonly maxPitchOrOperatorCount: number = Math.max(Config.maxChordSize, Config.operatorCount+2);\r\n    public static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\r\n        { name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\r\n        { name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\r\n        { name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\r\n        { name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\r\n        { name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\r\n        { name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\r\n        { name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\r\n        { name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\r\n        { name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\r\n        { name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\r\n        { name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\r\n        { name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\r\n        { name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\r\n        { name: \"1←(2 3) 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[2, 3], [4], [], []] },\r\n        { name: \"1←(2 (3 (4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[2, 3, 4], [3, 4], [4], []] },\r\n    ]);\r\n    public static readonly algorithms6Op: DictionaryArray<Algorithm> = toNameMap([\r\n        //placeholder makes life easier for later\r\n        { name: \"Custom\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\r\n        //yoinked from SynthBox\r\n        //algortihm Section 1\r\n        { name: \"1←2←3←4←5←6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2], [3], [4], [5], [6], []] },\r\n        { name: \"1←3 2←4←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5], [6], []] },\r\n        { name: \"1←3←4 2←5←6\", carrierCount: 2, associatedCarrier: [1, 1, 1, 2, 2, 2], modulatedBy: [[3], [5], [4], [], [6], []] },\r\n        { name: \"1←4 2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [5], [6], [], [], []] },\r\n        //Algorithm Section 2\r\n        { name: \"1←3 2←(4 5←6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [], [6], []] },\r\n        { name: \"1←(3 4) 2←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [5], [], [], [6], []] },\r\n        { name: \"1←3 2←(4 5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5, 6], [], [], [], []] },\r\n        { name: \"1←3 2←(4 5)←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [6], [6], []] },\r\n        { name: \"1←3 2←4←(5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5, 6], [], []] },\r\n        { name: \"1←(2 3 4 5 6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\r\n        { name: \"1←(2 3←5 4←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [5], [6], [], []] },\r\n        { name: \"1←(2 3 4←5←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], [5], [6], []] },\r\n        //Algorithm Section 3\r\n        { name: \"1←4←5 (2 3)←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [6], [6], [5], [], []] },\r\n        { name: \"1←(3 4)←5 2←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [6], [5], [5], [], []] },\r\n        { name: \"(1 2)←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [4], [5, 6], [], [], []] },\r\n        { name: \"(1 2)←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [5], [6], [6], [], []] },\r\n        { name: \"(1 2 3)←(4 5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4, 5, 6], [4, 5, 6], [4, 5, 6], [], [], []] },\r\n        { name: \"1←5 (2 3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [6], [6], [6], [], []] },\r\n        { name: \"1 2←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [5], [6], [6], [], []] },\r\n        { name: \"1 2 (3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [6], [6], [6], []] },\r\n        { name: \"1 2 3 (4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [6], [6], []] },\r\n        //Algorithm Section 3\r\n        { name: \"1 2←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3], modulatedBy: [[], [4], [5, 6], [], [], []] },\r\n        { name: \"1←4 2←(5 6) 3\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3,], modulatedBy: [[4], [5, 6], [], [], [], []] },\r\n        { name: \"1 2 3←5 4←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5], [6], [], []] },\r\n        { name: \"1 (2 3)←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4,], modulatedBy: [[], [5], [5], [], [6], []] },\r\n        { name: \"1 2 3←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5, 6], [], [], []] },\r\n        { name: \"(1 2 3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[6], [6], [6], [6], [6], []] },\r\n        { name: \"1 2 3 4 5←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [], [6], []] },\r\n        { name: \"1 2 3 4 5 6\", carrierCount: 6, associatedCarrier: [1, 2, 3, 4, 5, 6], modulatedBy: [[], [], [], [], [], []] },\r\n        //Section 4 where we take our own previous ones for 4op and it gets weird\r\n        { name: \"1←(2 (3 (4 (5 (6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\r\n        { name: \"1←(2(3(4(5(6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\r\n        { name: \"1←4(2←5(3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [3, 5], [6], [], [], []] },\r\n        { name: \"1←4(2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] },\r\n    ]);\r\n    public static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091, 0.061, 0.024];\r\n\tpublic static readonly operatorAmplitudeMax: number = 15;\r\n    public static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\r\n        { name: \"0.12×\", mult: 0.125, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"0.25×\", mult: 0.25, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"0.5×\", mult: 0.5, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"0.75×\", mult: 0.75, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\r\n        { name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\r\n        { name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"3.5×\", mult: 3.5, hzOffset: -0.05, amplitudeSign: 1.0 },\r\n        { name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"~4×\", mult: 4.0, hzOffset: -2.4, amplitudeSign: -1.0 },\r\n        { name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"10×\", mult: 10.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"12×\", mult: 12.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n        { name: \"14×\", mult: 14.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t    \t\t{ name: \"15×\", mult: 15.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t//ultrabox\r\n        { name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t    \t\t{ name: \"17×\", mult: 17.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t//ultrabox\r\n        { name: \"18×\", mult: 18.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t    \t\t{ name: \"19×\", mult: 19.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t//ultrabox\r\n        { name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t    \t{ name: \"~20×\", mult: 20.0, hzOffset: -5.0, amplitudeSign: -1.0 },\r\n\t    // dogebox (maybe another mod also adds this? I got it from dogebox)\r\n\t\t{ name: \"25×\", mult: 25.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t{ name: \"50×\", mult: 50.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t{ name: \"75×\", mult: 75.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t{ name: \"100×\", mult: 100.0, hzOffset: 0.0, amplitudeSign: 1.0 }\r\n\t    //50 and 100 are from dogebox\r\n    ]);\r\n\r\n    public static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\r\n        { name: \"none\", type: EnvelopeType.none, speed: 0.0 },\r\n        { name: \"note size\", type: EnvelopeType.noteSize, speed: 0.0 },\r\n        { name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\r\n        { name: \"flare -1\", type: EnvelopeType.flare, speed: 128.0 },\r\n        { name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\r\n        { name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\r\n        { name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\r\n        { name: \"twang -1\", type: EnvelopeType.twang, speed: 128.0 },\r\n        { name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\r\n        { name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\r\n        { name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\r\n        { name: \"swell -1\", type: EnvelopeType.swell, speed: 128.0 },\r\n        { name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\r\n        { name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\r\n        { name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\r\n        { name: \"tremolo0\", type: EnvelopeType.tremolo, speed: 8.0 },\r\n        { name: \"tremolo1\", type: EnvelopeType.tremolo, speed: 4.0 },\r\n        { name: \"tremolo2\", type: EnvelopeType.tremolo, speed: 2.0 },\r\n        { name: \"tremolo3\", type: EnvelopeType.tremolo, speed: 1.0 },\r\n        { name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\r\n        { name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\r\n        { name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\r\n        { name: \"decay -1\", type: EnvelopeType.decay, speed: 40.0 },\r\n        { name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\r\n        { name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\r\n        { name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\r\n        { name: \"wibble-1\", type: EnvelopeType.wibble, speed: 96.0 },\r\n        { name: \"wibble 1\", type: EnvelopeType.wibble, speed: 24.0 },\r\n        { name: \"wibble 2\", type: EnvelopeType.wibble, speed: 12.0 },\r\n        { name: \"wibble 3\", type: EnvelopeType.wibble, speed: 4.0 },\r\n        { name: \"linear-2\", type: EnvelopeType.linear, speed: 256.0 },\r\n        { name: \"linear-1\", type: EnvelopeType.linear, speed: 128.0 },\r\n        { name: \"linear 1\", type: EnvelopeType.linear, speed: 32.0 },\r\n        { name: \"linear 2\", type: EnvelopeType.linear, speed: 8.0 },\r\n        { name: \"linear 3\", type: EnvelopeType.linear, speed: 2.0 },\r\n        { name: \"rise -2\", type: EnvelopeType.rise, speed: 256.0 },\r\n        { name: \"rise -1\", type: EnvelopeType.rise, speed: 128.0 },\r\n        { name: \"rise 1\", type: EnvelopeType.rise, speed: 32.0 },\r\n        { name: \"rise 2\", type: EnvelopeType.rise, speed: 8.0 },\r\n        { name: \"rise 3\", type: EnvelopeType.rise, speed: 2.0 },\r\n\t    \t\t//modbox\r\n        { name: \"flute 1\", type: 9, speed: 16.0 },\r\n\t\t{ name: \"flute 2\", type: 9, speed: 8.0 },\r\n\t\t{ name: \"flute 3\", type: 9, speed: 4.0 },\r\n        // sandbox\r\n\t\t{ name: \"tripolo1\", type: 6, speed: 9.0 },\r\n        { name: \"tripolo2\", type: 6, speed: 6.0 },\r\n        { name: \"tripolo3\", type: 6, speed: 3.0 },\r\n        { name: \"tripolo4\", type: 7, speed: 9.0 },\r\n        { name: \"tripolo5\", type: 7, speed: 6.0 },\r\n        { name: \"tripolo6\", type: 7, speed: 3.0 },\r\n        { name: \"pentolo1\", type: 6, speed: 10.0 },\r\n        { name: \"pentolo2\", type: 6, speed: 5.0 },\r\n        { name: \"pentolo3\", type: 6, speed: 2.5 },\r\n        { name: \"pentolo4\", type: 7, speed: 10.0 },\r\n        { name: \"pentolo5\", type: 7, speed: 5.0 },\r\n        { name: \"pentolo6\", type: 7, speed: 2.5 },\t\r\n        // todbox\r\n\t    { name: \"flutter 1\", type: 6, speed: 14.0 },\r\n        { name: \"flutter 2\", type: 7, speed: 11.0 },\r\n        { name: \"water-y flutter\", type: 6, speed: 9.0 },\r\n\t    // new jummbox\r\n        { name: \"blip 1\", type: EnvelopeType.blip, speed: 6.0 },\r\n        { name: \"blip 2\", type: EnvelopeType.blip, speed: 16.0 },\r\n        { name: \"blip 3\", type: EnvelopeType.blip, speed: 32.0 },\r\n    ]);\r\n\tpublic static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\r\n\t\t{ name: \"1⟲\", indices: [[1], [], [], []] },\r\n\t\t{ name: \"2⟲\", indices: [[], [2], [], []] },\r\n\t\t{ name: \"3⟲\", indices: [[], [], [3], []] },\r\n\t\t{ name: \"4⟲\", indices: [[], [], [], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\r\n\t\t{ name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\r\n\t\t{ name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\r\n\t\t{ name: \"1→2\", indices: [[], [1], [], []] },\r\n\t\t{ name: \"1→3\", indices: [[], [], [1], []] },\r\n\t\t{ name: \"1→4\", indices: [[], [], [], [1]] },\r\n\t\t{ name: \"2→3\", indices: [[], [], [2], []] },\r\n\t\t{ name: \"2→4\", indices: [[], [], [], [2]] },\r\n\t\t{ name: \"3→4\", indices: [[], [], [], [3]] },\r\n\t\t{ name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\r\n\t\t{ name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\r\n        { name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\r\n        { name: \"1↔2 3↔4\", indices: [[2], [1], [4], [3]] },\r\n        { name: \"1↔4 2↔3\", indices: [[4], [3], [2], [1]] },\r\n        { name: \"2→1→4→3→2\", indices: [[2], [3], [4], [1]] },\r\n        { name: \"1→2→3→4→1\", indices: [[4], [1], [2], [3]] },\r\n        { name: \"(1 2 3)→4\", indices: [[], [], [], [1, 2, 3]] },\r\n        { name: \"ALL\", indices: [[1,2,3,4], [1,2,3,4], [1,2,3,4], [1, 2, 3,4]] },\r\n    ]);\r\n    public static readonly feedbacks6Op: DictionaryArray<Feedback> = toNameMap([\r\n        //placeholder makes life easier for later\r\n        { name: \"Custom\", indices: [[2, 3, 4, 5, 6], [], [], [], [], []] },\r\n\r\n        { name: \"1⟲\", indices: [[1], [], [], [], [], []] },\r\n        { name: \"2⟲\", indices: [[], [2], [], [], [], []] },\r\n        { name: \"3⟲\", indices: [[], [], [3], [], [], []] },\r\n        { name: \"4⟲\", indices: [[], [], [], [4], [], []] },\r\n        { name: \"5⟲\", indices: [[], [], [], [], [5], []] },\r\n        { name: \"6⟲\", indices: [[], [], [], [], [], [6]] },\r\n        { name: \"1⟲ 2⟲\", indices: [[1], [2], [], [], [], []] },\r\n        { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4], [], []] },\r\n        { name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], [], [], []] },\r\n        { name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4], [], []] },\r\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4], [], []] },\r\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲\", indices: [[1], [2], [3], [4], [5], []] },\r\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲\", indices: [[1], [2], [3], [4], [5], [6]] },\r\n        { name: \"1→2\", indices: [[], [1], [], [], [], []] },\r\n        { name: \"1→3\", indices: [[], [], [1], [], [], []] },\r\n        { name: \"1→4\", indices: [[], [], [], [1], [], []] },\r\n        { name: \"1→5\", indices: [[], [], [], [], [1], []] },\r\n        { name: \"1→6\", indices: [[], [], [], [], [], [1]] },\r\n        { name: \"2→3\", indices: [[], [], [2], [], [], []] },\r\n        { name: \"2→4\", indices: [[], [], [], [2], [], []] },\r\n        { name: \"3→4\", indices: [[], [], [], [3], [], []] },\r\n        { name: \"4→5\", indices: [[], [], [], [], [4], []] },\r\n        { name: \"1→4 2→5 3→6\", indices: [[], [], [], [1], [2], [3]] },\r\n        { name: \"1→5 2→6 3→4\", indices: [[], [], [], [3], [1], [2]] },\r\n        { name: \"1→2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\r\n        { name: \"2→1→6→5→4→3→2\", indices: [[2], [3], [4], [5], [6], [1]] },\r\n        { name: \"1→2→3→4→5→6→1\", indices: [[6], [1], [2], [3], [4], [5]] },\r\n        { name: \"1↔2 3↔4 5↔6\", indices: [[2], [1], [4], [3], [6], [5]] },\r\n        { name: \"1↔4 2↔5 3↔6\", indices: [[4], [5], [6], [1], [2], [3]] },\r\n        { name: \"(1,2,3,4,5)→6\", indices: [[], [], [], [], [], [1, 2, 3, 4, 5]] },\r\n        { name: \"ALL\", indices: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]] },\r\n    ]);\r\n    public static readonly chipNoiseLength: number = 1 << 15; // 32768\r\n    public static readonly spectrumNoiseLength: number = 1 << 15; // 32768\r\n    public static readonly spectrumBasePitch: number = 24;\r\n    public static readonly spectrumControlPoints: number = 30;\r\n    public static readonly spectrumControlPointsPerOctave: number = 7;\r\n    public static readonly spectrumControlPointBits: number = 3;\r\n    public static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\r\n    public static readonly harmonicsControlPoints: number = 28;\r\n    public static readonly harmonicsRendered: number = 64;\r\n    public static readonly harmonicsRenderedForPickedString: number = 1 << 8; // 256\r\n    public static readonly harmonicsControlPointBits: number = 3;\r\n    public static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\r\n    public static readonly harmonicsWavelength: number = 1 << 11; // 2048\r\n    public static readonly pulseWidthRange: number = 50;\r\n    public static readonly pulseWidthStepPower: number = 0.5;\r\n    public static readonly supersawVoiceCount: number = 7;\r\n\tpublic static readonly supersawDynamismMax: number = 6;\r\n\tpublic static readonly supersawSpreadMax: number = 12;\r\n\tpublic static readonly supersawShapeMax: number = 6;\r\n    public static readonly pitchChannelCountMin: number = 1;\r\n    public static readonly pitchChannelCountMax: number = 60;\r\n    public static readonly noiseChannelCountMin: number = 0;\r\n    public static readonly noiseChannelCountMax: number = 60;\r\n    public static readonly modChannelCountMin: number = 0;\r\n    public static readonly modChannelCountMax: number = 60;\r\n    public static readonly noiseInterval: number = 6;\r\n    public static readonly pitchesPerOctave: number = 12; // TODO: Use this for converting pitch to frequency.\r\n    public static readonly drumCount: number = 12;\r\n    public static readonly pitchOctaves: number = 8;\r\n    public static readonly modCount: number = 6;\r\n    public static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\r\n    public static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\r\n    public static readonly justIntonationSemitones: number[] = [1.0 / 2.0, 8.0 / 15.0, 9.0 / 16.0, 3.0 / 5.0, 5.0 / 8.0, 2.0 / 3.0, 32.0 / 45.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0, 8.0 / 9.0, 15.0 / 16.0, 1.0, 16.0 / 15.0, 9.0 / 8.0, 6.0 / 5.0, 5.0 / 4.0, 4.0 / 3.0, 45.0 / 32.0, 3.0 / 2.0, 8.0 / 5.0, 5.0 / 3.0, 16.0 / 9.0, 15.0 / 8.0, 2.0].map(x => Math.log2(x) * Config.pitchesPerOctave);\r\n    public static readonly pitchShiftRange: number = Config.justIntonationSemitones.length;\r\n    public static readonly pitchShiftCenter: number = Config.pitchShiftRange >> 1;\r\n    public static readonly detuneCenter: number = 200;\r\n    public static readonly detuneMax: number = 400;\r\n    public static readonly detuneMin: number = 0;\r\n    public static readonly songDetuneMin: number = 0;\r\n    public static readonly songDetuneMax: number = 500;\r\n    public static readonly unisonVoicesMin: number = 1;\r\n    public static readonly unisonVoicesMax: number = 2;\r\n    public static readonly unisonSpreadMin: number = -96;\r\n    public static readonly unisonSpreadMax: number = 96; \r\n    public static readonly unisonOffsetMin: number = -96;\r\n    public static readonly unisonOffsetMax: number = 96; \r\n    public static readonly unisonExpressionMin: number = -2;\r\n    public static readonly unisonExpressionMax: number = 2; \r\n    public static readonly unisonSignMin: number = -2;\r\n    public static readonly unisonSignMax: number = 2; \r\n    public static readonly sineWaveLength: number = 1 << 8; // 256\r\n    public static readonly sineWaveMask: number = Config.sineWaveLength - 1;\r\n    public static readonly sineWave: Float32Array = generateSineWave();\r\n\r\n    // Picked strings have an all-pass filter with a corner frequency based on the tone fundamental frequency, in order to add a slight inharmonicity. (Which is important for distortion.)\r\n    public static readonly pickedStringDispersionCenterFreq: number = 6000.0; // The tone fundamental freq is pulled toward this freq for computing the all-pass corner freq.\r\n    public static readonly pickedStringDispersionFreqScale: number = 0.3; // The tone fundamental freq freq moves this much toward the center freq for computing the all-pass corner freq.\r\n    public static readonly pickedStringDispersionFreqMult: number = 4.0; // The all-pass corner freq is based on this times the adjusted tone fundamental freq.\r\n    public static readonly pickedStringShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay the high frequency energy in the picked string.\r\n\r\n    public static readonly distortionRange: number = 8;\r\n    public static readonly stringSustainRange: number = 15;\r\n    public static readonly stringDecayRate: number = 0.12;\r\n    public static readonly enableAcousticSustain: boolean = false;\r\n\tpublic static readonly sustainTypeNames: ReadonlyArray<string> = [\"bright\", \"acoustic\"]; // See SustainType enum above.\r\n\r\n    public static readonly bitcrusherFreqRange: number = 14;\r\n    public static readonly bitcrusherOctaveStep: number = 0.5;\r\n    public static readonly bitcrusherQuantizationRange: number = 8;\r\n\r\n    public static readonly maxEnvelopeCount: number = 12;\r\n    public static readonly defaultAutomationRange: number = 13;\r\n    public static readonly instrumentAutomationTargets: DictionaryArray<AutomationTarget> = toNameMap([\r\n        { name: \"none\", computeIndex: null, displayName: \"none\",             /*perNote: false,*/ interleave: false, isFilter: false, /*range: 0,                              */    maxCount: 1, effect: null, compatibleInstruments: null },\r\n        { name: \"noteVolume\", computeIndex: EnvelopeComputeIndex.noteVolume, displayName: \"note volume\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.volumeRange,             */    maxCount: 1, effect: null, compatibleInstruments: null },\r\n        { name: \"pulseWidth\", computeIndex: EnvelopeComputeIndex.pulseWidth, displayName: \"pulse width\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pwm, InstrumentType.supersaw] },\r\n        { name: \"stringSustain\", computeIndex: EnvelopeComputeIndex.stringSustain, displayName: \"sustain\",          /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.stringSustainRange,      */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pickedString] },\r\n        { name: \"unison\", computeIndex: EnvelopeComputeIndex.unison, displayName: \"unison\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.chip, InstrumentType.harmonics, InstrumentType.pickedString, InstrumentType.customChipWave, InstrumentType.pwm, InstrumentType.noise, InstrumentType.spectrum] },\r\n        { name: \"operatorFrequency\", computeIndex: EnvelopeComputeIndex.operatorFrequency0, displayName: \"fm# freq\",         /*perNote:  true,*/ interleave: true, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: Config.operatorCount+2, effect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\r\n        { name: \"operatorAmplitude\", computeIndex: EnvelopeComputeIndex.operatorAmplitude0, displayName: \"fm# volume\",       /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: Config.operatorCount+2, effect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\r\n        { name: \"feedbackAmplitude\", computeIndex: EnvelopeComputeIndex.feedbackAmplitude, displayName: \"fm feedback\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\r\n        { name: \"pitchShift\", computeIndex: EnvelopeComputeIndex.pitchShift, displayName: \"pitch shift\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pitchShiftRange,         */    maxCount: 1, effect: EffectType.pitchShift, compatibleInstruments: null },\r\n        { name: \"detune\", computeIndex: EnvelopeComputeIndex.detune, displayName: \"detune\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.detuneMax + 1,           */    maxCount: 1, effect: EffectType.detune, compatibleInstruments: null },\r\n        { name: \"vibratoDepth\", computeIndex: EnvelopeComputeIndex.vibratoDepth, displayName: \"vibrato range\",    /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.vibrato, compatibleInstruments: null },\r\n        { name: \"noteFilterAllFreqs\", computeIndex: EnvelopeComputeIndex.noteFilterAllFreqs, displayName: \"n. filter freqs\",  /*perNote:  true,*/ interleave: false, isFilter: true, /*range: null,                           */    maxCount: 1, effect: EffectType.noteFilter, compatibleInstruments: null },\r\n        { name: \"noteFilterFreq\", computeIndex: EnvelopeComputeIndex.noteFilterFreq0, displayName: \"n. filter # freq\", /*perNote:  true,*/ interleave: false/*true*/, isFilter: true, /*range: Config.filterFreqRange,     */        maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null },\r\n        { name: \"decimalOffset\", computeIndex: EnvelopeComputeIndex.decimalOffset, displayName: \"decimal offset\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pwm, InstrumentType.supersaw] },\r\n        { name: \"supersawDynamism\",       computeIndex:       EnvelopeComputeIndex.supersawDynamism,       displayName: \"dynamism\",         /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawDynamismMax + 1, */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.supersaw]},\r\n\t\t{ name: \"supersawSpread\",         computeIndex:       EnvelopeComputeIndex.supersawSpread,         displayName: \"spread\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawSpreadMax + 1,   */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.supersaw]},\r\n\t\t{ name: \"supersawShape\",          computeIndex:       EnvelopeComputeIndex.supersawShape,          displayName: \"saw↔pulse\",        /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawShapeMax + 1,    */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.supersaw]},    \r\n        // Controlling filter gain is less obvious and intuitive than controlling filter freq, so to avoid confusion I've disabled it for now...\r\n        //{name: \"noteFilterGain\",         computeIndex:       EnvelopeComputeIndex.noteFilterGain0,        displayName: \"n. filter # vol\",  /*perNote:  true,*/ interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null},\r\n        /*\r\n        {name: \"distortion\",             computeIndex: InstrumentAutomationIndex.distortion,             displayName: \"distortion\",       perNote: false, interleave: false, isFilter: false, range: Config.distortionRange,             maxCount: 1,    effect: EffectType.distortion,   compatibleInstruments: null},\r\n        {name: \"bitcrusherQuantization\", computeIndex: InstrumentAutomationIndex.bitcrusherQuantization, displayName: \"bit crush\",        perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherQuantizationRange, maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\r\n        {name: \"bitcrusherFrequency\",    computeIndex: InstrumentAutomationIndex.bitcrusherFrequency,    displayName: \"freq crush\",       perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherFreqRange,         maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\r\n        {name: \"eqFilterAllFreqs\",       computeIndex: InstrumentAutomationIndex.eqFilterAllFreqs,       displayName: \"eq filter freqs\",  perNote: false, interleave: false, isFilter:  true, range: null,                               maxCount: 1,    effect: null,                    compatibleInstruments: null},\r\n        {name: \"eqFilterFreq\",           computeIndex: InstrumentAutomationIndex.eqFilterFreq0,          displayName: \"eq filter # freq\", perNote: false, interleave:  true, isFilter:  true, range: Config.filterFreqRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\r\n        {name: \"eqFilterGain\",           computeIndex: InstrumentAutomationIndex.eqFilterGain0,          displayName: \"eq filter # vol\",  perNote: false, interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\r\n        {name: \"panning\",                computeIndex: InstrumentAutomationIndex.panning,                displayName: \"panning\",          perNote: false, interleave: false, isFilter: false, range: Config.panMax + 1,                  maxCount: 1,    effect: EffectType.panning,      compatibleInstruments: null},\r\n        {name: \"chorus\",                 computeIndex: InstrumentAutomationIndex.chorus,                 displayName: \"chorus\",           perNote: false, interleave: false, isFilter: false, range: Config.chorusRange,                 maxCount: 1,    effect: EffectType.chorus,       compatibleInstruments: null},\r\n        {name: \"echoSustain\",            computeIndex: InstrumentAutomationIndex.echoSustain,            displayName: \"echo\",             perNote: false, interleave: false, isFilter: false, range: Config.echoSustainRange,            maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null},\r\n        {name: \"echoDelay\",              computeIndex: InstrumentAutomationIndex.echoDelay,              displayName: \"echo delay\",       perNote: false, interleave: false, isFilter: false, range: Config.echoDelayRange,              maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null}, // wait until after we're computing a tick's settings for multiple run lengths.\r\n        {name: \"reverb\",                 computeIndex: InstrumentAutomationIndex.reverb,                 displayName: \"reverb\",           perNote: false, interleave: false, isFilter: false, range: Config.reverbRange,                 maxCount: 1,    effect: EffectType.reverb,       compatibleInstruments: null},\r\n        {name: \"mixVolume\",              computeIndex: InstrumentAutomationIndex.mixVolume,              displayName: \"mix volume\",       perNote: false, interleave: false, isFilter: false, range: Config.volumeRange,                 maxCount: 1,    effect: null,                    compatibleInstruments: null},\r\n        {name: \"envelope#\",              computeIndex: null,                                             displayName: \"envelope\",         perNote: false, interleave: false, isFilter: false, range: Config.defaultAutomationRange,      maxCount: Config.maxEnvelopeCount, effect: null, compatibleInstruments: null}, // maxCount special case for envelopes to be allowed to target earlier ones.\r\n        */\r\n    ]);\r\n    public static readonly operatorWaves: DictionaryArray<OperatorWave> = toNameMap([\r\n\t\t{ name: \"sine\", samples: Config.sineWave },\r\n\t\t{ name: \"triangle\", samples: generateTriWave() },\r\n\t\t{ name: \"pulse width\", samples: generateSquareWave() },\r\n\t\t{ name: \"sawtooth\", samples: generateSawWave() },\r\n\t\t{ name: \"ramp\", samples: generateSawWave(true) },\r\n\t\t{ name: \"trapezoid\", samples: generateTrapezoidWave(2) },\r\n\t    { name: \"quasi-sine\", samples: generateQuasiSineWave() },\r\n\t\t//{ name: \"white noise\", samples: generateWhiteNoiseFmWave() },\r\n\t\t//{ name: \"1-bit white noise\", samples: generateOneBitWhiteNoiseFmWave() },\r\n    ]);\r\n    public static readonly pwmOperatorWaves: DictionaryArray<OperatorWave> = toNameMap([\r\n        { name: \"1%\", samples: generateSquareWave(0.01) },\r\n        { name: \"5%\", samples: generateSquareWave(0.05) },\r\n        { name: \"12.5%\", samples: generateSquareWave(0.125) },\r\n        { name: \"25%\", samples: generateSquareWave(0.25) },\r\n        { name: \"33%\", samples: generateSquareWave(1 / 3) },\r\n        { name: \"50%\", samples: generateSquareWave(0.5) },\r\n        { name: \"66%\", samples: generateSquareWave(2 / 3) },\r\n        { name: \"75%\", samples: generateSquareWave(0.75) },\r\n        { name: \"87.5%\", samples: generateSquareWave(0.875) },\r\n        { name: \"95%\", samples: generateSquareWave(0.95) },\r\n        { name: \"99%\", samples: generateSquareWave(0.99) },\r\n    ]);\r\n\r\n\r\n    // Height of the small editor column for inserting/deleting rows, in pixels.\r\n    public static readonly barEditorHeight: number = 10;\r\n\r\n    // Careful about changing index ordering for this. Index is stored in URL/JSON etc.\r\n    public static readonly modulators: DictionaryArray<Modulator> = toNameMap([\r\n        { name: \"none\", pianoName: \"None\", maxRawVol: 6, newNoteVol: 6, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"No Mod Setting\", promptDesc: [ \"No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.\", \"[$LO - $HI]\" ] },\r\n        { name: \"song volume\", pianoName: \"Volume\", maxRawVol: 100, newNoteVol: 100, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Song Volume\", promptDesc: [ \"This setting affects the overall volume of the song, just like the main volume slider.\", \"At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\r\n        { name: \"tempo\", pianoName: \"Tempo\", maxRawVol: Config.tempoMax - Config.tempoMin, newNoteVol: Math.ceil((Config.tempoMax - Config.tempoMin) / 2), forSong: true, convertRealFactor: Config.tempoMin, associatedEffect: EffectType.length,\r\n            promptName: \"Song Tempo\", promptDesc: [ \"This setting controls the speed your song plays at, just like the tempo slider.\", \"When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.\", \"Note that you can make a 'swing' effect by rapidly changing between two tempo values.\", \"[OVERWRITING] [$LO - $HI] [BPM]\" ] },\r\n        { name: \"song reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange * 2, newNoteVol: Config.reverbRange, forSong: true, convertRealFactor: -Config.reverbRange, associatedEffect: EffectType.length,\r\n            promptName: \"Song Reverb\", promptDesc: [ \"This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.\", \"At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI]\" ] },\r\n        { name: \"next bar\", pianoName: \"Next Bar\", maxRawVol: 1, newNoteVol: 1, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Go To Next Bar\", promptDesc: [ \"This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.\", \"This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.\", \"You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.\", \"[$LO - $HI]\" ] },\r\n        { name: \"note volume\", pianoName: \"Note Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length,\r\n            promptName: \"Note Volume\", promptDesc: [ \"This setting affects the volume of your instrument as if its note size had been scaled.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.\", \"For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.\", \"[MULTIPLICATIVE] [$LO - $HI]\" ] },\r\n        { name: \"pan\", pianoName: \"Pan\", maxRawVol: Config.panMax, newNoteVol: Math.ceil(Config.panMax / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning,\r\n            promptName: \"Instrument Panning\", promptDesc: [ \"This setting controls the panning of your instrument, just like the panning slider.\", \"At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\" ] },\r\n        { name: \"reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.reverb,\r\n            promptName: \"Instrument Reverb\", promptDesc: [ \"This setting controls the reverb of your insturment, just like the reverb slider.\", \"At $LO, your instrument will have no reverb. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"distortion\", pianoName: \"Distortion\", maxRawVol: Config.distortionRange-1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.distortion,\r\n            promptName: \"Instrument Distortion\", promptDesc: [ \"This setting controls the amount of distortion for your instrument, just like the distortion slider.\", \"At $LO, your instrument will have no distortion. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\" ] },\r\n        { name: \"fm slider 1\", pianoName: \"FM 1\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 1\", promptDesc: [ \"This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\r\n        { name: \"fm slider 2\", pianoName: \"FM 2\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 2\", promptDesc: [\"This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\r\n        { name: \"fm slider 3\", pianoName: \"FM 3\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 3\", promptDesc: [\"This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\r\n        { name: \"fm slider 4\", pianoName: \"FM 4\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 4\", promptDesc: [\"This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\r\n        { name: \"fm feedback\", pianoName: \"FM Feedback\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Feedback\", promptDesc: [\"This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\r\n        { name: \"pulse width\", pianoName: \"Pulse Width\", maxRawVol: Config.pulseWidthRange, newNoteVol: Config.pulseWidthRange, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Pulse Width\", promptDesc: [\"This setting controls the width of this instrument's pulse wave, just like the pulse width slider.\", \"At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).\", \"Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.\", \"[OVERWRITING] [$LO - $HI] [%Duty]\"] },\r\n        { name: \"detune\", pianoName: \"Detune\", maxRawVol: Config.detuneMax - Config.detuneMin, newNoteVol: Config.detuneCenter, forSong: false, convertRealFactor: -Config.detuneCenter, associatedEffect: EffectType.detune,\r\n            promptName: \"Instrument Detune\", promptDesc: [\"This setting controls the detune for this instrument, just like the detune slider.\", \"At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.\", \"[OVERWRITING] [$LO - $HI] [cents]\"] },\r\n        { name: \"vibrato depth\", pianoName: \"Vibrato Depth\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\r\n            promptName: \"Vibrato Depth\", promptDesc: [\"This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.\", \"At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.\", \"[OVERWRITING] [$LO - $HI] [pitch ÷25]\"] },\r\n        { name: \"song detune\", pianoName: \"Detune\", maxRawVol: Config.songDetuneMax - Config.songDetuneMin, newNoteVol: Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2), forSong: true, convertRealFactor: -250, associatedEffect: EffectType.length,\r\n            promptName: \"Song Detune\", promptDesc: [\"This setting controls the overall detune of the entire song. There is no associated slider.\", \"At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [cents x4]\"] },\r\n        { name: \"vibrato speed\", pianoName: \"Vibrato Speed\", maxRawVol: 30, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\r\n            promptName: \"Vibrato Speed\", promptDesc: [\"This setting controls the speed your instrument will vibrato at, just like the slider.\", \"A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"vibrato delay\", pianoName: \"Vibrato Delay\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\r\n            promptName: \"Vibrato Delay\", promptDesc: [\"This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.\", \"A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).\", \"[OVERWRITING] [$LO - $HI] [beats ÷24]\"] },\r\n        { name: \"arp speed\", pianoName: \"Arp Speed\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chord,\r\n            promptName: \"Arpeggio Speed\", promptDesc: [\"This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.\", \"Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.\",\r\n                \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\" ,\"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"pan delay\", pianoName: \"Pan Delay\", maxRawVol: 20, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning,\r\n            promptName: \"Panning Delay\", promptDesc: [\"This setting controls the delay applied to panning for your instrument, just like the pan delay slider.\", \"With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"reset arp\", pianoName: \"Reset Arp\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chord,\r\n            promptName: \"Reset Arpeggio\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.\", \"This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.\", \"[$LO - $HI]\"] },\r\n        { name: \"eq filter\", pianoName: \"EQFlt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"EQ Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's EQ filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"note filter\", pianoName: \"N.Flt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\r\n            promptName: \"Note Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's note filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"bit crush\", pianoName: \"Bitcrush\", maxRawVol: Config.bitcrusherQuantizationRange-1, newNoteVol: Math.round(Config.bitcrusherQuantizationRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher,\r\n            promptName: \"Instrument Bit Crush\", promptDesc: [\"This setting controls the bit crush of your instrument, just like the bit crush slider.\", \"At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"freq crush\", pianoName: \"Freq Crush\", maxRawVol: Config.bitcrusherFreqRange-1, newNoteVol: Math.round(Config.bitcrusherFreqRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher,\r\n            promptName: \"Instrument Frequency Crush\", promptDesc: [\"This setting controls the frequency crush of your instrument, just like the freq crush slider.\", \"At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"echo\", pianoName: \"Echo\", maxRawVol: Config.echoSustainRange-1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.echo,\r\n            promptName: \"Instrument Echo Sustain\", promptDesc: [\"This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.\", \"At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"echo delay\", pianoName: \"Echo Delay\", maxRawVol: Config.echoDelayRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Instrument Echo Delay\", promptDesc: [\"This setting controls the echo delay of your instrument, just like the echo delay slider.\", \"At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.\", \"[OVERWRITING] [$LO - $HI] [~beats ÷12]\" ]\r\n        }, // Disabled via associatedEffect and manually in list build in SongEditor, enable and set back to echo after fixing bugginess!\r\n        { name: \"chorus\", pianoName: \"Chorus\", maxRawVol: Config.chorusRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chorus,\r\n            promptName: \"Instrument Chorus\", promptDesc: [\"This setting controls the chorus strength of your instrument, just like the chorus slider.\", \"At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"eq filt cut\", pianoName: \"EQFlt Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"EQ Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"eq filt peak\", pianoName: \"EQFlt Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"EQ Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"note filt cut\", pianoName: \"N.Flt Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\r\n            promptName: \"Note Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"note filt peak\", pianoName: \"N.Flt Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\r\n            promptName: \"Note Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"pitch shift\", pianoName: \"Pitch Shift\", maxRawVol: Config.pitchShiftRange - 1, newNoteVol: Config.pitchShiftCenter, forSong: false, convertRealFactor: -Config.pitchShiftCenter, associatedEffect: EffectType.pitchShift,\r\n            promptName: \"Pitch Shift\", promptDesc: [\"This setting controls the pitch offset of your instrument, just like the pitch shift slider.\", \"At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.\", \"[OVERWRITING] [$LO - $HI] [pitch]\"] },\r\n        { name: \"sustain\", pianoName: \"Sustain\", maxRawVol: Config.stringSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Picked String Sustain\", promptDesc: [\"This setting controls the sustain of your picked string instrument, just like the sustain slider.\", \"At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"mix volume\", pianoName: \"Mix Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length,\r\n            promptName: \"Mix Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its volume slider had been moved.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\r\n        { name: \"fm slider 5\", pianoName: \"FM 5\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 5\", promptDesc: [\"This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\r\n        { name: \"fm slider 6\", pianoName: \"FM 6\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"FM Slider 6\", promptDesc: [\"This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\r\n        { name: \"decimal offset\", pianoName: \"Decimal Offset\", maxRawVol: 99, newNoteVol: 0, forSong: false, convertRealFactor: 0, invertSliderIndicator: true, associatedEffect: EffectType.length,\r\n            promptName: \"Decimal Offset\", promptDesc: [\"This setting controls the decimal offset that is subtracted from the pulse width; use this for creating values like 12.5 or 6.25.\", \"[$LO - $HI]\"] },\r\n        { name: \"envelope speed\", pianoName: \"EnvelopeSpd\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Envelope Speed\", promptDesc: [\"This setting controls how fast all of the envelopes for the instrument play.\", \"At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:\",\r\n                \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\" ,\"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"dynamism\", pianoName: \"Dynamism\", maxRawVol: Config.supersawDynamismMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Supersaw Dynamism\", promptDesc: [\"This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.\", \"At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"spread\", pianoName: \"Spread\", maxRawVol: Config.supersawSpreadMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Supersaw Spread\", promptDesc: [\"This setting controls the supersaw spread of your instrument, just like the spread slider.\", \"At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\r\n        { name: \"saw shape\", pianoName: \"Saw Shape\", maxRawVol: Config.supersawShapeMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\r\n            promptName: \"Supersaw Shape\", promptDesc: [\"This setting controls the supersaw shape of your instrument, just like the Saw↔Pulse slider.\", \"As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.\", \"[OVERWRITING] [$LO - $HI] [%]\"] },\r\n        ]);\r\n}\r\n\r\nfunction centerWave(wave: Array<number>): Float32Array {\r\n    let sum: number = 0.0;\r\n    for (let i: number = 0; i < wave.length; i++) sum += wave[i];\r\n    const average: number = sum / wave.length;\r\n    for (let i: number = 0; i < wave.length; i++) wave[i] -= average;\r\n    performIntegral(wave);\r\n    // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n    wave.push(0);\r\n    return new Float32Array(wave);\r\n}\r\nfunction centerAndNormalizeWave(wave: Array<number>): Float32Array {\r\n    let magn: number = 0.0;\r\n\r\n    centerWave(wave);\r\n\r\n    // Going to length-1 because an extra 0 sample is added on the end as part of centerWave, which shouldn't impact magnitude calculation.\r\n    for (let i: number = 0; i < wave.length - 1; i++) {\r\n        magn += Math.abs(wave[i]);\r\n    }\r\n    const magnAvg: number = magn / (wave.length - 1);\r\n\r\n    for (let i: number = 0; i < wave.length - 1; i++) {\r\n        wave[i] = wave[i] / magnAvg;\r\n    }\r\n\r\n    return new Float32Array(wave);\r\n\r\n}\r\nexport function performIntegral(wave: { length: number, [index: number]: number }): Float32Array {\r\n    // Perform the integral on the wave. The synth function will perform the derivative to get the original wave back but with antialiasing.\r\n    let cumulative: number = 0.0;\r\n    let newWave: Float32Array = new Float32Array(wave.length);\r\n    for (let i: number = 0; i < wave.length; i++) {\r\n        newWave[i] = cumulative;\r\n        cumulative += wave[i];\r\n    }\r\n\r\n    return newWave;\r\n}\r\nexport function performIntegralOld(wave: { length: number, [index: number]: number }): void {\r\n\t// Old ver used in harmonics/picked string instruments, manipulates wave in place.\r\n\tlet cumulative: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tconst temp = wave[i];\r\n\t\twave[i] = cumulative;\r\n\t\tcumulative += temp;\r\n\t}\r\n}\r\n\r\nexport function getPulseWidthRatio(pulseWidth: number): number {\r\n    // BeepBox formula for reference\r\n    //return Math.pow(0.5, (Config.pulseWidthRange - 1 - pulseWidth) * Config.pulseWidthStepPower) * 0.5;\r\n\r\n    return pulseWidth / (Config.pulseWidthRange * 2);\r\n}\r\n\r\n\r\n// The function arguments will be defined in FFT.ts, but I want\r\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\r\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\r\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\r\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\r\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null, scaleElementsByFactor: Function | null): Float32Array {\r\n    let wave: Float32Array | null = Config.chipNoises[index].samples;\r\n    if (wave == null) {\r\n        wave = new Float32Array(Config.chipNoiseLength + 1);\r\n        Config.chipNoises[index].samples = wave;\r\n\r\n\t\tif (index == 0) {\r\n\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 1 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 1) {\r\n\t\t\t// White noise is just random values for each sample.\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\r\n\t\t\t}\r\n\t\t} else if (index == 2) {\r\n\t\t\t// The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 2 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 3) {\r\n\t\t\t// The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 4) {\r\n\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 5) {\r\n\t\t\t// \"Shine\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 6) {\r\n\t\t\t// \"Deep\" drums from modbox!\r\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 1, 10, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 20, 14, -2, -2, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 7) {\r\n\t\t\t// \"Cutter\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1) - 8.0;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 15 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 8) {\r\n\t\t\t// \"Metallic\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) / 2.0 - 0.5;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer -= 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n            }\r\n        } else if (index == 9) {\r\n            // a noise more like old static than white noise\r\n            let drumBuffer: number = 1;\r\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.1;\r\n                let newBuffer: number = drumBuffer >> 1;\r\n                if (((drumBuffer + newBuffer) & 1) == 1) {\r\n                    newBuffer += 8 ^ 2 << 16;\r\n                }\r\n                drumBuffer = newBuffer;\r\n            }\r\n\t\t}\r\n        else if (index == 10) {\r\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\r\n                wave[i] = Math.round(Math.random());\r\n            }\r\n        }\r\n        else if (index == 11) {\r\n            var drumBuffer = 1;\r\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\r\n                wave[i] = Math.round((drumBuffer & 1));\r\n                var newBuffer = drumBuffer >> 1;\r\n                if (((drumBuffer + newBuffer) & 1) == 1) {\r\n                    newBuffer -= 10 << 2;\r\n                }\r\n                drumBuffer = newBuffer;\r\n            }\r\n        }\r\n        else if (index == 12) {\r\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\r\n                var ultraboxnewchipnoiserand = Math.random();\r\n                wave[i] = Math.pow(ultraboxnewchipnoiserand, Math.clz32(ultraboxnewchipnoiserand));\r\n            }\r\n        }\r\n        else if (index == 13) {\r\n            // https://noisehack.com/generate-noise-web-audio-api/\r\n            var b0 = 0, b1 = 0, b2 = 0, b3, b4, b5, b6;\r\n            b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\r\n            \r\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\r\n                var white = Math.random() * 2 - 1;\r\n                b0 = 0.99886 * b0 + white * 0.0555179;\r\n                b1 = 0.99332 * b1 + white * 0.0750759;\r\n                b2 = 0.96900 * b2 + white * 0.1538520;\r\n                b3 = 0.86650 * b3 + white * 0.3104856;\r\n                b4 = 0.55000 * b4 + white * 0.5329522;\r\n                b5 = -0.7616 * b5 - white * 0.0168980;\r\n                wave[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\r\n                wave[i] *= 0.44;\r\n                b6 = white * 0.115926;\r\n            }\r\n        }\r\n        else if (index == 14) {\r\n            var lastOut = 0.0;\r\n            \r\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\r\n                var white = Math.random() * 2 - 1;\r\n                wave[i] = (lastOut + (0.02 * white)) / 1.02;\r\n                lastOut = wave[i];\r\n                wave[i] *= 14;\r\n            }\r\n        }\r\n\t\t\r\n\t\telse {\r\n\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\r\n\t\t}\r\n\r\n        wave[Config.chipNoiseLength] = wave[0];\r\n    }\r\n\r\n    return wave;\r\n}\r\n\r\nexport function drawNoiseSpectrum(wave: Float32Array, waveLength: number, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\r\n    const referenceOctave: number = 11;\r\n    const referenceIndex: number = 1 << referenceOctave;\r\n    const lowIndex: number = Math.pow(2, lowOctave) | 0;\r\n    const highIndex: number = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);\r\n    const retroWave: Float32Array = getDrumWave(0, null, null);\r\n    let combinedAmplitude: number = 0.0;\r\n    for (let i: number = lowIndex; i < highIndex; i++) {\r\n\r\n        let lerped: number = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);\r\n        let amplitude: number = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;\r\n\r\n        amplitude *= Math.pow(i / referenceIndex, overallSlope);\r\n\r\n        combinedAmplitude += amplitude;\r\n\r\n        // Add two different sources of psuedo-randomness to the noise\r\n        // (individually they aren't random enough) but in a deterministic\r\n        // way so that live spectrum editing doesn't result in audible pops.\r\n        // Multiply all the sine wave amplitudes by 1 or -1 based on the\r\n        // LFSR retro wave (effectively random), and also rotate the phase\r\n        // of each sine wave based on the golden angle to disrupt the symmetry.\r\n        amplitude *= retroWave[i];\r\n        const radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\r\n\r\n        wave[i] = Math.cos(radians) * amplitude;\r\n        wave[waveLength - i] = Math.sin(radians) * amplitude;\r\n    }\r\n\r\n    return combinedAmplitude;\r\n}\r\n\r\nfunction generateSineWave(): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateTriWave(): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) / (Math.PI / 2);\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateTrapezoidWave(drive: number = 2): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = Math.max(-1.0, Math.min(1.0, Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) * drive));\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateSquareWave(phaseWidth: number = 0): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    const centerPoint: number = Config.sineWaveLength / 4;\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = +((Math.abs(i - centerPoint) < phaseWidth * Config.sineWaveLength / 2)\r\n            || ((Math.abs(i - Config.sineWaveLength - centerPoint) < phaseWidth * Config.sineWaveLength / 2))) * 2 - 1;\r\n    }\r\n    return wave;\r\n}\r\n\r\nfunction generateSawWave(inverse: boolean = false): Float32Array {\r\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\r\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n        wave[i] = ((i + (Config.sineWaveLength / 4.0)) * 2.0 / Config.sineWaveLength) % 2 - 1;\r\n        wave[i] = inverse ? -wave[i] : wave[i];\r\n    }\r\n    return wave;\r\n}\r\n\r\n\t// function generateWhiteNoiseFmWave() {\r\n        // const wave = new Float32Array(Config.sineWaveLength + 1);\r\n        // for (let i = 0; i < Config.sineWaveLength + 1; i++) {\r\n            // wave[i] = Math.random() * 2.0 - 1.0;\r\n        // }\r\n        // return wave;\r\n    // }\r\n\t// function generateOneBitWhiteNoiseFmWave() {\r\n        // const wave = new Float32Array(Config.sineWaveLength + 1);\r\n        // for (let i = 0; i < Config.sineWaveLength + 1; i++) {\r\n            // wave[i] = Math.round(Math.random());\r\n        // }\r\n        // return wave;\r\n    // }\r\n\tfunction generateQuasiSineWave() {\r\n        const wave = new Float32Array(Config.sineWaveLength + 1);\r\n        for (let i = 0; i < Config.sineWaveLength + 1; i++) {\r\n            wave[i] = Math.round(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength));\r\n        }\r\n        return wave;\r\n\t}\r\n\r\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\r\n    let arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\r\n    if (arpeggioPattern != null) {\r\n        if (pitchCount == 2 && useFastTwoNoteArp == false) {\r\n            arpeggioPattern = [0, 0, 1, 1];\r\n        }\r\n        return arpeggioPattern[arpeggio % arpeggioPattern.length];\r\n    } else {\r\n        return arpeggio % pitchCount;\r\n    }\r\n}\r\n\r\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\r\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\r\n    const dictionary: Dictionary<T> = {};\r\n    for (let i: number = 0; i < array.length; i++) {\r\n        const value: any = array[i];\r\n        value.index = i;\r\n        dictionary[value.name] = <T>value;\r\n    }\r\n    const result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\r\n    result.dictionary = dictionary;\r\n    return result;\r\n}\r\n\r\nexport function effectsIncludeTransition(effects: number): boolean {\r\n    return (effects & (1 << EffectType.transition)) != 0;\r\n}\r\nexport function effectsIncludeChord(effects: number): boolean {\r\n    return (effects & (1 << EffectType.chord)) != 0;\r\n}\r\nexport function effectsIncludePitchShift(effects: number): boolean {\r\n    return (effects & (1 << EffectType.pitchShift)) != 0;\r\n}\r\nexport function effectsIncludeDetune(effects: number): boolean {\r\n    return (effects & (1 << EffectType.detune)) != 0;\r\n}\r\nexport function effectsIncludeVibrato(effects: number): boolean {\r\n    return (effects & (1 << EffectType.vibrato)) != 0;\r\n}\r\nexport function effectsIncludeNoteFilter(effects: number): boolean {\r\n    return (effects & (1 << EffectType.noteFilter)) != 0;\r\n}\r\nexport function effectsIncludeDistortion(effects: number): boolean {\r\n    return (effects & (1 << EffectType.distortion)) != 0;\r\n}\r\nexport function effectsIncludeBitcrusher(effects: number): boolean {\r\n    return (effects & (1 << EffectType.bitcrusher)) != 0;\r\n}\r\nexport function effectsIncludePanning(effects: number): boolean {\r\n    return (effects & (1 << EffectType.panning)) != 0;\r\n}\r\nexport function effectsIncludeChorus(effects: number): boolean {\r\n    return (effects & (1 << EffectType.chorus)) != 0;\r\n}\r\nexport function effectsIncludeEcho(effects: number): boolean {\r\n    return (effects & (1 << EffectType.echo)) != 0;\r\n}\r\nexport function effectsIncludeReverb(effects: number): boolean {\r\n    return (effects & (1 << EffectType.reverb)) != 0;\r\n}\r\nexport function rawChipToIntegrated(raw: DictionaryArray<ChipWave>): DictionaryArray<ChipWave> {\r\n    const newArray: Array<ChipWave> = new Array<ChipWave>(raw.length);\r\n    const dictionary: Dictionary<ChipWave> = {};\r\n    for (let i: number = 0; i < newArray.length; i++) {\r\n        newArray[i] = Object.assign([], raw[i]);\r\n        const value: any = newArray[i];\r\n        value.index = i;\r\n        dictionary[value.name] = <ChipWave>value;\r\n    }\r\n    for (let key in dictionary) {\r\n        dictionary[key].samples = performIntegral(dictionary[key].samples);\r\n    }\r\n    const result: DictionaryArray<ChipWave> = <DictionaryArray<ChipWave>><any>newArray;\r\n    result.dictionary = dictionary;\r\n    return result;\r\n}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nexport function applyElementArgs<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, args: Array<any>): T {\n\tfor (const arg of args) {\n\t\tif (arg instanceof Node) {\n\t\t\telement.appendChild(arg);\n\t\t} else if (typeof arg === \"string\") {\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t} else if (typeof arg === \"function\") {\n\t\t\tapplyElementArgs(element, [arg()]);\n\t\t} else if (Array.isArray(arg)) {\n\t\t\tapplyElementArgs(element, arg);\n\t\t} else if (arg && typeof Symbol !== \"undefined\" && typeof arg[Symbol.iterator] === \"function\") {\n\t\t\tapplyElementArgs(element, [...arg]);\n\t\t} else if (arg && arg.constructor === Object && element instanceof Element) {\n\t\t\t// If the argument is a literal {} Object\n\t\t\tfor (const key of Object.keys(arg)) {\n\t\t\t\tconst value = arg[key];\n\t\t\t\t/*if (key === \"classList\") {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.classList.add(...value.split(\" \"));\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.classList.add(...value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid classList value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else*/ if (key === \"class\" /* || key === \"className\" */) {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.setAttribute(\"class\", value);\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.setAttribute(\"class\", [...value].join(\" \"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid \" + key + \" value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else if (key === \"style\") {\n\t\t\t\t\tif (value && value.constructor === Object) {\n\t\t\t\t\t\tfor (const styleKey of Object.keys(value)) {\n\t\t\t\t\t\t\tif (styleKey in (<HTMLElement | SVGElement>element).style) {\n\t\t\t\t\t\t\t\t// In practice, camelCase and kebab-case properties both work as properties on CSSStyleDeclaration objects.\n\t\t\t\t\t\t\t\t(<any> element).style[styleKey] = value[styleKey];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// CSS variables start with -- and must be set with setProperty.\n\t\t\t\t\t\t\t\t(<HTMLElement | SVGElement>element).style.setProperty(styleKey, value[styleKey]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof(value) === \"function\") {\n\t\t\t\t\t// If value is a callback, set as a property instead trying to coerce to string.\n\t\t\t\t\t(<any>element)[key] = value;\n\t\t\t\t} else if (typeof(value) === \"boolean\") {\n\t\t\t\t\t// If value is boolean, set attribute if true, remove if false.\n\t\t\t\t\tif (value) element.setAttribute(key, \"\");\n\t\t\t\t\telse element.removeAttribute(key);\n\t\t\t\t} else {\n\t\t\t\t\t// Default to setting attribute, as if writing html directly.\n\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Just convert unrecognized objects to text and append them.\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t}\n\t}\n\treturn element;\n}\n\nexport const svgNS: string = \"http://www.w3.org/2000/svg\";\n\nexport function parseHTML(...args: Array<any>): DocumentFragment {\n\treturn document.createRange().createContextualFragment(args.join());\n}\n\n//let svgParser: SVGSVGElement | null = null;\nexport function parseSVG(...args: Array<any>): DocumentFragment {\n\tconst fragment: DocumentFragment = document.createDocumentFragment();\n\t\n\t// Internet Explorer doesn't support the first method here, so I commented it out and used a slightly more complex one involving DOMParser below.\n\t/*\n\tif (svgParser === null) svgParser = <SVGSVGElement>document.createElementNS(svgNS, \"svg\");\n\tsvgParser.innerHTML = args.join();\n\twhile (svgParser.firstChild !== null) fragment.appendChild(svgParser.firstChild);\n\t*/\n\tconst svgParser: Element = new DOMParser().parseFromString(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\" + args.join() + \"</svg>\", \"image/svg+xml\").documentElement;\n\twhile (svgParser.firstChild !== null) {\n\t\tdocument.importNode(svgParser.firstChild, true);\n\t\tfragment.appendChild(svgParser.firstChild);\n\t}\n\t\n\treturn fragment;\n}\n\nexport function replaceScriptWith(...args: Array<any>): void {\n\tlet currentScript: HTMLScriptElement | SVGScriptElement | null = document.currentScript;\n\tif (currentScript == null) { // double-equals to intentionally include undefined in Internet Explorer.\n\t\t\n\t\t// Internet Explorer doens't support currentScript, try this method instead:\n\t\tif (document.readyState === \"loading\") {\n\t\t\tconst scripts: HTMLCollectionOf<HTMLScriptElement> = document.getElementsByTagName(\"script\");\n\t\t\tcurrentScript = scripts[scripts.length - 1];\n\t\t}\n\t\t\n\t\tif (currentScript == null) {\n\t\t\tconsole.warn(\"Couldn't replace script because no script is currently being parsed and executed, maybe this is happening in a callback function or event handler instead?\");\n\t\t\treturn;\n\t\t}\n\t}\n\tif (currentScript.parentNode === null) {\n\t\tconsole.warn(\"Couldn't replace script element because it is not attached to a parent anymore, did you try to replace the same script more than once?\");\n\t\treturn;\n\t}\n\tcurrentScript.parentNode.replaceChild(applyElementArgs(document.createDocumentFragment(), args), currentScript);\n}\n\nexport function applyToElement<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, ...args: Array<any>): T {\n\tif (!(element instanceof Element || element instanceof DocumentFragment)) {\n\t\tconsole.warn(\"Couldn't apply to provided argument because it's not an element or DocumentFragment.\");\n\t\treturn element;\n\t}\n\treturn applyElementArgs(element, args);\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nimport {applyElementArgs, svgNS, parseHTML, parseSVG, replaceScriptWith, applyToElement} from \"./elements-base\";\nexport {replaceScriptWith, applyToElement};\n\ninterface HTMLElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => HTMLElement;\n\ta(...args: Array<any>): HTMLAnchorElement;\n\tabbr(...args: Array<any>): HTMLElement;\n\taddress(...args: Array<any>): HTMLElement;\n\tarea(...args: Array<any>): HTMLAreaElement;\n\tarticle(...args: Array<any>): HTMLElement;\n\taside(...args: Array<any>): HTMLElement;\n\taudio(...args: Array<any>): HTMLAudioElement;\n\tb(...args: Array<any>): HTMLElement;\n\tbase(...args: Array<any>): HTMLBaseElement;\n\tbdi(...args: Array<any>): HTMLElement;\n\tbdo(...args: Array<any>): HTMLElement;\n\tblockquote(...args: Array<any>): HTMLQuoteElement;\n\tbr(...args: Array<any>): HTMLBRElement;\n\tbutton(...args: Array<any>): HTMLButtonElement;\n\tcanvas(...args: Array<any>): HTMLCanvasElement;\n\tcaption(...args: Array<any>): HTMLTableCaptionElement;\n\tcite(...args: Array<any>): HTMLElement;\n\tcode(...args: Array<any>): HTMLElement;\n\tcol(...args: Array<any>): HTMLTableColElement;\n\tcolgroup(...args: Array<any>): HTMLTableColElement;\n\tdatalist(...args: Array<any>): HTMLDataListElement;\n\tdd(...args: Array<any>): HTMLElement;\n\tdel(...args: Array<any>): HTMLModElement;\n\tdetails(...args: Array<any>): HTMLDetailsElement;\n\tdfn(...args: Array<any>): HTMLElement;\n\tdialog(...args: Array<any>): HTMLDialogElement;\n\tdiv(...args: Array<any>): HTMLDivElement;\n\tdl(...args: Array<any>): HTMLDListElement;\n\tdt(...args: Array<any>): HTMLElement;\n\tem(...args: Array<any>): HTMLElement;\n\tembed(...args: Array<any>): HTMLEmbedElement;\n\tfieldset(...args: Array<any>): HTMLFieldSetElement;\n\tfigcaption(...args: Array<any>): HTMLElement;\n\tfigure(...args: Array<any>): HTMLElement;\n\tfooter(...args: Array<any>): HTMLElement;\n\tform(...args: Array<any>): HTMLFormElement;\n\th1(...args: Array<any>): HTMLHeadingElement;\n\th2(...args: Array<any>): HTMLHeadingElement;\n\th3(...args: Array<any>): HTMLHeadingElement;\n\th4(...args: Array<any>): HTMLHeadingElement;\n\th5(...args: Array<any>): HTMLHeadingElement;\n\th6(...args: Array<any>): HTMLHeadingElement;\n\theader(...args: Array<any>): HTMLElement;\n\thr(...args: Array<any>): HTMLHRElement;\n\ti(...args: Array<any>): HTMLElement;\n\tiframe(...args: Array<any>): HTMLIFrameElement;\n\timg(...args: Array<any>): HTMLImageElement;\n\tinput(...args: Array<any>): HTMLInputElement;\n\tins(...args: Array<any>): HTMLModElement;\n\tkbd(...args: Array<any>): HTMLElement;\n\tlabel(...args: Array<any>): HTMLLabelElement;\n\tlegend(...args: Array<any>): HTMLLegendElement;\n\tli(...args: Array<any>): HTMLLIElement;\n\tlink(...args: Array<any>): HTMLLinkElement;\n\tmain(...args: Array<any>): HTMLElement;\n\tmap(...args: Array<any>): HTMLMapElement;\n\tmark(...args: Array<any>): HTMLElement;\n\tmenu(...args: Array<any>): HTMLMenuElement;\n\tmenuitem(...args: Array<any>): HTMLUnknownElement;\n\tmeta(...args: Array<any>): HTMLMetaElement;\n\tmeter(...args: Array<any>): HTMLMeterElement;\n\tnav(...args: Array<any>): HTMLElement;\n\tnoscript(...args: Array<any>): HTMLElement;\n\tobject(...args: Array<any>): HTMLObjectElement;\n\tol(...args: Array<any>): HTMLOListElement;\n\toptgroup(...args: Array<any>): HTMLOptGroupElement;\n\toption(...args: Array<any>): HTMLOptionElement;\n\toutput(...args: Array<any>): HTMLOutputElement;\n\tp(...args: Array<any>): HTMLParagraphElement;\n\tparam(...args: Array<any>): HTMLParamElement;\n\tpicture(...args: Array<any>): HTMLPictureElement;\n\tpre(...args: Array<any>): HTMLPreElement;\n\tprogress(...args: Array<any>): HTMLProgressElement;\n\tq(...args: Array<any>): HTMLQuoteElement;\n\trp(...args: Array<any>): HTMLElement;\n\trt(...args: Array<any>): HTMLElement;\n\truby(...args: Array<any>): HTMLElement;\n\ts(...args: Array<any>): HTMLElement;\n\tsamp(...args: Array<any>): HTMLElement;\n\tscript(...args: Array<any>): HTMLScriptElement;\n\tsection(...args: Array<any>): HTMLElement;\n\tselect(...args: Array<any>): HTMLSelectElement;\n\tsmall(...args: Array<any>): HTMLElement;\n\tsource(...args: Array<any>): HTMLSourceElement;\n\tspan(...args: Array<any>): HTMLSpanElement;\n\tstrong(...args: Array<any>): HTMLElement;\n\tstyle(...args: Array<any>): HTMLStyleElement;\n\tsub(...args: Array<any>): HTMLElement;\n\tsummary(...args: Array<any>): HTMLElement;\n\tsup(...args: Array<any>): HTMLElement;\n\ttable(...args: Array<any>): HTMLTableElement;\n\ttbody(...args: Array<any>): HTMLTableSectionElement;\n\ttd(...args: Array<any>): HTMLTableCellElement;\n\ttemplate(...args: Array<any>): HTMLTemplateElement;\n\ttextarea(...args: Array<any>): HTMLTextAreaElement;\n\ttfoot(...args: Array<any>): HTMLTableSectionElement;\n\tth(...args: Array<any>): HTMLTableCellElement;\n\tthead(...args: Array<any>): HTMLTableSectionElement;\n\ttime(...args: Array<any>): HTMLTimeElement;\n\ttitle(...args: Array<any>): HTMLTitleElement;\n\ttr(...args: Array<any>): HTMLTableRowElement;\n\ttrack(...args: Array<any>): HTMLTrackElement;\n\tu(...args: Array<any>): HTMLElement;\n\tul(...args: Array<any>): HTMLUListElement;\n\tvar(...args: Array<any>): HTMLElement;\n\tvideo(...args: Array<any>): HTMLVideoElement;\n\twbr(...args: Array<any>): HTMLElement;\n}\n\ninterface SVGElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => SVGElement;\n\ta(...args: Array<any>): SVGAElement;\n\taltGlyph(...args: Array<any>): SVGElement;\n\taltGlyphDef(...args: Array<any>): SVGElement;\n\taltGlyphItem(...args: Array<any>): SVGElement;\n\tanimate(...args: Array<any>): SVGAnimateElement;\n\tanimateMotion(...args: Array<any>): SVGAnimateMotionElement;\n\tanimateTransform(...args: Array<any>): SVGAnimateTransformElement;\n\tcircle(...args: Array<any>): SVGCircleElement;\n\tclipPath(...args: Array<any>): SVGClipPathElement;\n\t\"color-profile\"(...args: Array<any>): SVGElement;\n\tcolor_profile(...args: Array<any>): SVGElement;\n\tcursor(...args: Array<any>): SVGElement;\n\tdefs(...args: Array<any>): SVGDefsElement;\n\tdesc(...args: Array<any>): SVGDescElement;\n\tdiscard(...args: Array<any>): SVGElement;\n\tellipse(...args: Array<any>): SVGEllipseElement;\n\tfeBlend(...args: Array<any>): SVGFEBlendElement;\n\tfeColorMatrix(...args: Array<any>): SVGFEColorMatrixElement;\n\tfeComponentTransfer(...args: Array<any>): SVGFEComponentTransferElement;\n\tfeComposite(...args: Array<any>): SVGFECompositeElement;\n\tfeConvolveMatrix(...args: Array<any>): SVGFEConvolveMatrixElement;\n\tfeDiffuseLighting(...args: Array<any>): SVGFEDiffuseLightingElement;\n\tfeDisplacementMap(...args: Array<any>): SVGFEDisplacementMapElement;\n\tfeDistantLight(...args: Array<any>): SVGFEDistantLightElement;\n\tfeDropShadow(...args: Array<any>): SVGElement;\n\tfeFlood(...args: Array<any>): SVGFEFloodElement;\n\tfeFuncA(...args: Array<any>): SVGFEFuncAElement;\n\tfeFuncB(...args: Array<any>): SVGFEFuncBElement;\n\tfeFuncG(...args: Array<any>): SVGFEFuncGElement;\n\tfeFuncR(...args: Array<any>): SVGFEFuncRElement;\n\tfeGaussianBlur(...args: Array<any>): SVGFEGaussianBlurElement;\n\tfeImage(...args: Array<any>): SVGFEImageElement;\n\tfeMerge(...args: Array<any>): SVGFEMergeElement;\n\tfeMergeNode(...args: Array<any>): SVGFEMergeNodeElement;\n\tfeMorphology(...args: Array<any>): SVGFEMorphologyElement;\n\tfeOffset(...args: Array<any>): SVGFEOffsetElement;\n\tfePointLight(...args: Array<any>): SVGFEPointLightElement;\n\tfeSpecularLighting(...args: Array<any>): SVGFESpecularLightingElement;\n\tfeSpotLight(...args: Array<any>): SVGFESpotLightElement;\n\tfeTile(...args: Array<any>): SVGFETileElement;\n\tfeTurbulence(...args: Array<any>): SVGFETurbulenceElement;\n\tfilter(...args: Array<any>): SVGFilterElement;\n\tfont(...args: Array<any>): SVGElement;\n\t\"font-face\"(...args: Array<any>): SVGElement;\n\tfont_face(...args: Array<any>): SVGElement;\n\t\"font-face-format\"(...args: Array<any>): SVGElement;\n\tfont_face_format(...args: Array<any>): SVGElement;\n\t\"font-face-name\"(...args: Array<any>): SVGElement;\n\tfont_face_name(...args: Array<any>): SVGElement;\n\t\"font-face-src\"(...args: Array<any>): SVGElement;\n\tfont_face_src(...args: Array<any>): SVGElement;\n\t\"font-face-uri\"(...args: Array<any>): SVGElement;\n\tfont_face_uri(...args: Array<any>): SVGElement;\n\tforeignObject(...args: Array<any>): SVGForeignObjectElement;\n\tg(...args: Array<any>): SVGGElement;\n\tglyph(...args: Array<any>): SVGElement;\n\tglyphRef(...args: Array<any>): SVGElement;\n\thkern(...args: Array<any>): SVGElement;\n\timage(...args: Array<any>): SVGImageElement;\n\tline(...args: Array<any>): SVGLineElement;\n\tlinearGradient(...args: Array<any>): SVGLinearGradientElement;\n\tmarker(...args: Array<any>): SVGMarkerElement;\n\tmask(...args: Array<any>): SVGMaskElement;\n\tmetadata(...args: Array<any>): SVGMetadataElement;\n\t\"missing-glyph\"(...args: Array<any>): SVGElement;\n\tmissing_glyph(...args: Array<any>): SVGElement;\n\tmpath(...args: Array<any>): SVGElement;\n\tpath(...args: Array<any>): SVGPathElement;\n\tpattern(...args: Array<any>): SVGPatternElement;\n\tpolygon(...args: Array<any>): SVGPolygonElement;\n\tpolyline(...args: Array<any>): SVGPolylineElement;\n\tradialGradient(...args: Array<any>): SVGRadialGradientElement;\n\trect(...args: Array<any>): SVGRectElement;\n\tscript(...args: Array<any>): SVGScriptElement;\n\tset(...args: Array<any>): SVGElement;\n\tstop(...args: Array<any>): SVGStopElement;\n\tstyle(...args: Array<any>): SVGStyleElement;\n\tsvg(...args: Array<any>): SVGSVGElement;\n\tswitch(...args: Array<any>): SVGSwitchElement;\n\tsymbol(...args: Array<any>): SVGSymbolElement;\n\ttext(...args: Array<any>): SVGTextElement;\n\ttextPath(...args: Array<any>): SVGTextPathElement;\n\ttitle(...args: Array<any>): SVGTitleElement;\n\ttref(...args: Array<any>): SVGElement;\n\ttspan(...args: Array<any>): SVGTSpanElement;\n\tuse(...args: Array<any>): SVGUseElement;\n\tview(...args: Array<any>): SVGViewElement;\n\tvkern(...args: Array<any>): SVGElement;\n}\n\nexport const HTML: HTMLElementFactory = <HTMLElementFactory> <unknown> parseHTML;\nexport const SVG: SVGElementFactory = <SVGElementFactory> <unknown> parseSVG;\n\nfor (const name of \"a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr\".split(\" \")) {\n\t(<any>HTML)[name] = (...args: Array<any>) => applyElementArgs(document.createElement(name), args);\n}\nfor (const name of \"a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern\".split(\" \")) {\n\t(<any>SVG)[name] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\tif (/-/.test(name)) {\n\t\tconst snakeCaseName = name.replace(/-/g, \"_\");\n\t\t(<any>SVG)[snakeCaseName] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nimport { BeepBoxOption, DictionaryArray, toNameMap, Config } from \"../synth/SynthConfig\";\r\nimport { Song } from \"../synth/synth\";\r\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\r\n\r\nexport interface ChannelColors extends BeepBoxOption {\r\n    readonly secondaryChannel: string;\r\n    readonly primaryChannel: string;\r\n    readonly secondaryNote: string;\r\n    readonly primaryNote: string;\r\n}\r\n\r\nexport class ColorConfig {\r\n    public static colorLookup: Map<number, ChannelColors> = new Map<number, ChannelColors>();\r\n\tpublic static usesColorFormula: boolean = false;\r\n\tpublic static readonly defaultTheme: string = \"ultrabox dark\";\r\n    public static readonly themes: { [name: string]: string } = {\r\n\t\"dark classic\": ``,\r\n        \"dark competition\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--hover-preview: #ddd;\r\n\t\t\t\t\t--playhead: #ddd;\r\n\t\t\t\t\t--primary-text: #ddd;\r\n\t\t\t\t\t--secondary-text: #8e695b;\r\n\t\t\t\t\t--text-selection: rgba(169,0,255,0.99);\r\n\t\t\t\t\t--box-selection-fill: rgba(221,221,221,0.2);\r\n\t\t\t\t\t--loop-accent: #bf15ba;\r\n\t\t\t\t\t--link-accent: #f888ff;\r\n\t\t\t\t\t--ui-widget-background: #443a3a;\r\n\t\t\t\t\t--pitch-background: #353333;\r\n\t\t\t\t\t--tonic: #884a44;\r\n\t\t\t\t\t--fifth-note: #415498;\r\n\t\t\t\t\t--noise4-secondary-channel: #6B3E8E;\r\n\t\t\t}\r\n\t\t`,\r\n        \"light classic\": `\r\n\t\t\t:root {\r\n\t\t\t\t-webkit-text-stroke-width: 0.5px;\r\n\t\t\t\t--page-margin: #685d88;\r\n\t\t\t\t--editor-background: white;\r\n\t\t\t\t--hover-preview: black;\r\n\t\t\t\t--playhead: rgba(0,0,0,0.5);\r\n\t\t\t\t--primary-text: black;\r\n\t\t\t\t--secondary-text: #777;\r\n\t\t\t\t--inverted-text: white;\r\n\t\t\t\t--text-selection: rgba(200,170,255,0.99);\r\n\t\t\t\t--box-selection-fill: rgba(0,0,0,0.1);\r\n\t\t\t\t--loop-accent: #98f;\r\n\t\t\t\t--link-accent: #74f;\r\n\t\t\t\t--ui-widget-background: #ececec;\r\n\t\t\t\t--ui-widget-focus: #eee;\r\n\t\t\t\t--pitch-background: #ececec;\r\n\t\t\t\t--tonic: #f0d6b6;\r\n\t\t\t\t--fifth-note: #bbddf0;\r\n\t\t\t\t--white-piano-key: #eee;\r\n\t\t\t\t--black-piano-key: #666;\r\n\t\t\t\t\t--track-editor-bg-pitch: #ececec;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #fdfdfd;\r\n\t\t\t\t\t--track-editor-bg-noise: #ececec;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #fdfdfd;\r\n\t\t\t\t\t--track-editor-bg-mod: #dbecfd;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #ecfdff;\r\n\t\t\t\t\t--multiplicative-mod-slider: #789;\r\n\t\t\t\t\t--overwriting-mod-slider: #987;\r\n\t\t\t\t\t--indicator-primary: #98f;\r\n\t\t\t\t\t--indicator-secondary: #cde;\r\n\t\t\t\t\t--select2-opt-group: #cecece;\r\n\t\t\t\t\t--input-box-outline: #ddd;\r\n\t\t\t\t\t--mute-button-normal: #c0b47f;\r\n\t\t\t\t\t--mute-button-mod: #bd7fc0;\r\n\t\t\t\t--pitch1-secondary-channel: #6CD9ED;\r\n\t\t\t\t--pitch1-primary-channel:   #00A0BD;\r\n\t\t\t\t--pitch1-secondary-note:    #34C2DC;\r\n\t\t\t\t--pitch1-primary-note:      #00758A;\r\n\t\t\t\t--pitch2-secondary-channel: #E3C941;\r\n\t\t\t\t--pitch2-primary-channel:   #B49700;\r\n\t\t\t\t--pitch2-secondary-note:    #D1B628;\r\n\t\t\t\t--pitch2-primary-note:      #836E00;\r\n\t\t\t\t--pitch3-secondary-channel: #FF9D61;\r\n\t\t\t\t--pitch3-primary-channel:   #E14E00;\r\n\t\t\t\t--pitch3-secondary-note:    #F67D3C;\r\n\t\t\t\t--pitch3-primary-note:      #B64000;\r\n\t\t\t\t--pitch4-secondary-channel: #4BE24B;\r\n\t\t\t\t--pitch4-primary-channel:   #00A800;\r\n\t\t\t\t--pitch4-secondary-note:    #2DC82D;\r\n\t\t\t\t--pitch4-primary-note:      #008000;\r\n\t\t\t\t--pitch5-secondary-channel: #FF90FF;\r\n\t\t\t\t--pitch5-primary-channel:   #E12EDF;\r\n\t\t\t\t--pitch5-secondary-note:    #EC6EEC;\r\n\t\t\t\t--pitch5-primary-note:      #A600A5;\r\n\t\t\t\t--pitch6-secondary-channel: #B5B5FE;\r\n\t\t\t\t--pitch6-primary-channel:   #6969FD;\r\n\t\t\t\t--pitch6-secondary-note:    #9393FE;\r\n\t\t\t\t--pitch6-primary-note:      #4A4AD7;\r\n\t\t\t\t--pitch7-secondary-channel: #C2D848;\r\n\t\t\t\t--pitch7-primary-channel:   #8EA800;\r\n\t\t\t\t--pitch7-secondary-note:    #B0C82D;\r\n\t\t\t\t--pitch7-primary-note:      #6C8000;\r\n\t\t\t\t--pitch8-secondary-channel: #FF90A4;\r\n\t\t\t\t--pitch8-primary-channel:   #E12E4D;\r\n\t\t\t\t--pitch8-secondary-note:    #EC6E85;\r\n\t\t\t\t--pitch8-primary-note:      #A6001D;\r\n\t\t\t\t--pitch9-secondary-channel: #41E3B5;\r\n\t\t\t\t--pitch9-primary-channel:   #00B481;\r\n\t\t\t\t--pitch9-secondary-note:    #28D1A1;\r\n\t\t\t\t--pitch9-primary-note:      #00835E;\r\n\t\t\t\t--pitch10-secondary-channel:#CA77FF;\r\n\t\t\t\t--pitch10-primary-channel:  #9609FF;\r\n\t\t\t\t--pitch10-secondary-note:   #B54FFF;\r\n\t\t\t\t--pitch10-primary-note:     #8400E3;\r\n\t\t\t\t--noise1-secondary-channel: #C1C1C1;\r\n\t\t\t\t--noise1-primary-channel:   #898989;\r\n\t\t\t\t--noise1-secondary-note:    #ADADAD;\r\n\t\t\t\t--noise1-primary-note:      #6C6C6C;\r\n\t\t\t\t--noise2-secondary-channel: #E8BB8C;\r\n\t\t\t\t--noise2-primary-channel:   #BD7D3A;\r\n\t\t\t\t--noise2-secondary-note:    #D1A374;\r\n\t\t\t\t--noise2-primary-note:      #836342;\r\n\t\t\t\t--noise3-secondary-channel: #9BC4EB;\r\n\t\t\t\t--noise3-primary-channel:   #4481BE;\r\n\t\t\t\t--noise3-secondary-note:    #7CA7D3;\r\n\t\t\t\t--noise3-primary-note:      #476685;\r\n\t\t\t\t--noise4-secondary-channel: #C5A5E0;\r\n\t\t\t\t--noise4-primary-channel:   #8553AE;\r\n\t\t\t\t--noise4-secondary-note:    #B290CC;\r\n\t\t\t\t--noise4-primary-note:      #684F7D;\r\n\t\t\t\t--noise5-secondary-channel: #B8CE93;\r\n\t\t\t\t--noise5-primary-channel:   #87A74F;\r\n\t\t\t\t--noise5-secondary-note:    #ABC183;\r\n\t\t\t\t--noise5-primary-note:      #68784C;\r\n\t\t\t\t\t--mod1-secondary-channel:   #339955;\r\n\t\t\t\t\t--mod1-primary-channel:     #77dd55;\r\n\t\t\t\t\t--mod1-primary-note:        #2ad84a;\r\n\t\t\t\t\t--mod2-primary-note:        #ba124a;\r\n\t\t\t\t\t--mod3-primary-note:        #7a1caa;\r\n\t\t\t\t\t--mod4-primary-note:        #a86810;\r\n\t\t\t\t\t--mod-label-primary:        #dddddd;\r\n\t\t\t\t\t--mod-label-secondary-text: #777;\r\n\t\t\t\t\t--disabled-note-primary:    #666;\r\n\t\t\t\t\t--disabled-note-secondary:  #aaa;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t.beepboxEditor button, .beepboxEditor select {\r\n\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t}\r\n\r\n\t\t\t\t.select2-selection__rendered {\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.promptContainerBG::before {\r\n\t\t\t\t\tbox-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);\r\n\t\t\t\t}\t\r\n\t\t`,\r\n        \"jummbox classic\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #040410;\r\n\t\t\t\t\t--editor-background: #040410;\r\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t\t\t--secondary-text: #84859a;\r\n\t\t\t\t\t--box-selection-fill: #044b94;\r\n\t\t\t\t\t--ui-widget-background: #393e4f;\r\n\t\t\t\t\t--ui-widget-focus: #6d6886;\r\n\t\t\t\t\t--pitch-background: #393e4f;\r\n\t\t\t\t\t--tonic: #725491;\r\n\t\t\t\t\t--fifth-note: #54547a;\r\n\t\t\t\t\t--white-piano-key: #eee;\r\n\t\t\t\t\t--black-piano-key: #666;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #393e4f;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\r\n\t\t\t\t\t--track-editor-bg-noise: #3d3535;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #161313;\r\n\t\t\t\t\t--track-editor-bg-mod: #283560;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a101f;\r\n\t\t\t\t\t--multiplicative-mod-slider: #606c9f;\r\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\r\n\t\t\t\t\t--indicator-primary: #9c64f7;\r\n\t\t\t\t\t--indicator-secondary: #393e4f;\r\n\t\t\t\t\t--select2-opt-group: #5d576f;\r\n\t\t\t\t\t--input-box-outline: #222;\r\n\t\t\t\t\t--mute-button-normal: #dda85d;\r\n\t\t\t\t\t--mute-button-mod: #886eae;\r\n\t\t\t\t\t--mod-label-primary: #282840;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\r\n\t\t\t\t\t--mod-label-primary-text: white;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 6.5;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 6.5;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 6.5;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 6.5;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 0;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 0;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 192;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 192;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 192;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 45;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 192;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--disabled-note-primary:    #91879f;\r\n\t\t\t\t\t--disabled-note-secondary:  #6a677a;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n        \"forest\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #010c03;\r\n\t\t\t\t\t--editor-background: #010c03;\r\n\t\t\t\t\t--hover-preview: #efe;\r\n\t\t\t\t\t--playhead: rgba(232, 255, 232, 0.9);\r\n\t\t\t\t\t--primary-text: #efe;\r\n\t\t\t\t\t--secondary-text: #70A070;\r\n\t\t\t\t\t--inverted-text: #280228;\r\n\t\t\t\t\t--text-selection: rgba(255,68,199,0.99);\r\n\t\t\t\t\t--box-selection-fill: #267aa3;\r\n\t\t\t\t\t--loop-accent: #ffe845;\r\n\t\t\t\t\t--link-accent: #9f8;\r\n\t\t\t\t\t--ui-widget-background: #203829;\r\n\t\t\t\t\t--ui-widget-focus: #487860;\r\n\t\t\t\t\t--pitch-background: #203829;\r\n\t\t\t\t\t--tonic: #2b8d20;\r\n\t\t\t\t\t--fifth-note: #385840;\r\n\t\t\t\t\t--white-piano-key: #bda;\r\n\t\t\t\t\t--black-piano-key: #573;\r\n                    --black-piano-key-text: #ffffff;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #254820;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #102819;\r\n\t\t\t\t\t--track-editor-bg-noise: #304050;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #102030;\r\n\t\t\t\t\t--track-editor-bg-mod: #506030;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #2a300a;\r\n\t\t\t\t\t--multiplicative-mod-slider: #205c8f;\r\n\t\t\t\t\t--overwriting-mod-slider: #20ac6f;\r\n\t\t\t\t\t--indicator-primary: #dcd866;\r\n\t\t\t\t\t--indicator-secondary: #203829;\r\n\t\t\t\t\t--select2-opt-group: #1a6f5a;\r\n\t\t\t\t\t--input-box-outline: #242;\r\n\t\t\t\t\t--mute-button-normal: #49e980;\r\n\t\t\t\t\t--mute-button-mod: #c2e502;\r\n\t\t\t\t\t--mod-label-primary: #133613;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(27, 126, 40);\r\n\t\t\t\t\t--mod-label-primary-text: #efe;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 120;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 59;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 50;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.04;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 120;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 86;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 70;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.04;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 120;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 85;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 30;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.04;\r\n\t\t\t\t\t--pitch-primary-note-hue: 120;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-note-sat: 90;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 80;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 200;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 22;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 200;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-primary-channel-sat: 48;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 65;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 200;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 33;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 200;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 64;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 40;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 44;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 40;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-primary-channel-sat: 60;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 40;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-secondary-note-sat: 62;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 55;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 40;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-primary-note-sat: 66;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--disabled-note-primary:    #536e5c;\r\n\t\t\t\t\t--disabled-note-secondary:  #395440;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n        \"canyon\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #0a0000;\r\n\t\t\t\t\t--editor-background: #0a0000;\r\n\t\t\t\t\t--playhead: rgba(247, 172, 196, 0.9);\r\n\t\t\t\t\t--primary-text: #f5d6bf;\r\n\t\t\t\t\t--secondary-text: #934050;\r\n\t\t\t\t\t--inverted-text: #290505;\r\n\t\t\t\t\t--text-selection: rgba(255, 208, 68, 0.99);\r\n\t\t\t\t\t--box-selection-fill: #94044870;\r\n\t\t\t\t\t--loop-accent: #ff1e1e;\r\n\t\t\t\t\t--link-accent: #da7b76;\r\n\t\t\t\t\t--ui-widget-background: #533137;\r\n\t\t\t\t\t--ui-widget-focus: #743e4b;\r\n\t\t\t\t\t--pitch-background: #4f3939;\r\n\t\t\t\t\t--tonic: #9e4145;\r\n\t\t\t\t\t--fifth-note: #5b3e6b;\r\n\t\t\t\t\t--white-piano-key: #d89898;\r\n\t\t\t\t\t--black-piano-key: #572b29;\r\n                    --black-piano-key-text: #ffffff;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #5e3a41;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #281d1c;\r\n\t\t\t\t\t--track-editor-bg-noise: #3a3551;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #272732;\r\n\t\t\t\t\t--track-editor-bg-mod: #552045;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #3e1442;\r\n\t\t\t\t\t--multiplicative-mod-slider: #9f6095;\r\n\t\t\t\t\t--overwriting-mod-slider: #b55050;\r\n\t\t\t\t\t--indicator-primary: #f2f764;\r\n\t\t\t\t\t--indicator-secondary: #4f3939;\r\n\t\t\t\t\t--select2-opt-group: #673030;\r\n\t\t\t\t\t--input-box-outline: #443131;\r\n\t\t\t\t\t--mute-button-normal: #d81833;\r\n\t\t\t\t\t--mute-button-mod: #9e2691;\r\n\t\t\t\t\t--mod-label-primary: #5f2b39;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(158, 66, 122);\r\n\t\t\t\t\t--mod-label-primary-text: #e6caed;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 73.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 90;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 83.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 35;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 60;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 60;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 60;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 60;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 222;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 222;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 222;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 54;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 222;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 75;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--disabled-note-primary:    #515164;\r\n\t\t\t\t\t--disabled-note-secondary:  #2a2a3a;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n        \"midnight\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #000;\r\n\t\t\t--editor-background: #000;\r\n\t\t\t--hover-preview: #757575;\r\n\t\t\t--playhead: #fff;\r\n\t\t\t--primary-text: #fff;\r\n\t\t\t--secondary-text: #acacac;\r\n\t\t\t--inverted-text: #290505;\r\n\t\t\t--text-selection: rgba(155, 155, 155, 0.99);\r\n\t\t\t--box-selection-fill: #79797970;\r\n\t\t\t--loop-accent: #646464;\r\n\t\t\t--link-accent: #707070;\r\n\t\t\t--ui-widget-background: #353535;\r\n\t\t\t--ui-widget-focus: #464646;\r\n\t\t\t--pitch-background: #222121;\r\n\t\t\t--tonic: #555955;\r\n\t\t\t--fifth-note: #1a1818;\r\n\t\t\t--white-piano-key: #a89e9e;\r\n\t\t\t--black-piano-key: #2d2424;\r\n            --black-piano-key-text: #ffffff;\r\n\t\t\t--use-color-formula: true;\r\n\t\t\t--track-editor-bg-pitch: #373737;\r\n\t\t\t--track-editor-bg-pitch-dim: #131313;\r\n\t\t\t--track-editor-bg-noise: #484848;\r\n\t\t\t--track-editor-bg-noise-dim: #131313;\r\n\t\t\t--track-editor-bg-mod: #373737;\r\n\t\t\t--track-editor-bg-mod-dim: #131313;\r\n\t\t\t--multiplicative-mod-slider: #555;\r\n\t\t\t--overwriting-mod-slider: #464545;\r\n\t\t\t--indicator-primary: #e0e0e0;\r\n\t\t\t--indicator-secondary: #404040;\r\n\t\t\t--select2-opt-group: #3c3b3b;\r\n\t\t\t--input-box-outline: #757575;\r\n\t\t\t--mute-button-normal: #8e8d8d;\r\n\t\t\t--mute-button-mod: #ddd;\r\n\t\t\t--mod-label-primary: #262526;\r\n\t\t\t--mod-label-secondary-text: rgb(227, 222, 225);\r\n\t\t\t--mod-label-primary-text: #b9b9b9;\r\n\t\t\t--pitch-secondary-channel-hue: 240;\r\n\t\t\t--pitch-secondary-channel-hue-scale: 228;\r\n\t\t\t--pitch-secondary-channel-sat: 73.3;\r\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-channel-lum: 25;\r\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-channel-hue: 240;\r\n\t\t\t--pitch-primary-channel-hue-scale: 228;\r\n\t\t\t--pitch-primary-channel-sat: 80;\r\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-primary-channel-lum: 60.5;\r\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-secondary-note-hue: 240;\r\n\t\t\t--pitch-secondary-note-hue-scale: 228;\r\n\t\t\t--pitch-secondary-note-sat: 73.9;\r\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-note-lum: 32;\r\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-note-hue: 240;\r\n\t\t\t--pitch-primary-note-hue-scale: 228;\r\n\t\t\t--pitch-primary-note-sat: 90;\r\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t--pitch-primary-note-lum: 80.6;\r\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t--noise-secondary-channel-hue: 160;\r\n\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t--noise-primary-channel-hue: 160;\r\n\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t--noise-secondary-note-hue: 160;\r\n\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t--noise-primary-note-hue: 160;\r\n\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t--mod-secondary-channel-hue: 62;\r\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t--mod-secondary-channel-lum: 30;\r\n\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t--mod-primary-channel-hue: 62;\r\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t--mod-secondary-note-hue: 62;\r\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t--mod-secondary-note-lum: 34;\r\n\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t--mod-primary-note-hue: 62;\r\n\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t--mod-primary-note-lum: 75;\r\n\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t--disabled-note-primary:    #66a;\r\n\t\t\t--disabled-note-secondary:  #447;\r\n\t\t}\r\n\t`,\r\n        \"jummbox light\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t-webkit-text-stroke-width: 0.5px;\r\n\t\t\t\t\t--page-margin: #cab1d3;\r\n\t\t\t\t\t--editor-background: #f4f4f4;\r\n\t\t\t\t\t--hover-preview: #2d26a2;\r\n\t\t\t\t\t--playhead: rgb(20 25 153 / 90%);\r\n\t\t\t\t\t--primary-text: #b686c3;\r\n\t\t\t\t\t--secondary-text: #970f38;\r\n\t\t\t\t\t--inverted-text: #fefdff;\r\n\t\t\t\t\t--text-selection: rgb(56 21 8 / 99%);\r\n\t\t\t\t\t--box-selection-fill: rgb(20 203 160 / 61%);\r\n\t\t\t\t\t--loop-accent: #09dc0e;\r\n\t\t\t\t\t--link-accent: #3ee669;\r\n\t\t\t\t\t--ui-widget-background: #0e0a42;\r\n\t\t\t\t\t--ui-widget-focus: #380c42;\r\n\t\t\t\t\t--pitch-background: #8daf96;\r\n\t\t\t\t\t--tonic: #a16fb1;\r\n\t\t\t\t\t--fifth-note: #d08c8c;\r\n\t\t\t\t\t--white-piano-key: #fbffee;\r\n\t\t\t\t\t--black-piano-key: #c9d8e5;\r\n\t\t\t\t\t--white-piano-key-text: #101160;\r\n\t\t\t\t\t--black-piano-key-text: #231b03;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #34456a;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #88afad;\r\n\t\t\t\t\t--track-editor-bg-noise: #564566;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #aaa;\r\n\t\t\t\t\t--track-editor-bg-mod: #7f779d;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #aaa;\r\n\t\t\t\t\t--multiplicative-mod-slider: #807caf;\r\n\t\t\t\t\t--overwriting-mod-slider: #909cdf;\r\n\t\t\t\t\t--indicator-primary: #ae38ff;\r\n\t\t\t\t\t--indicator-secondary: #5c8dbb;\r\n\t\t\t\t\t--select2-opt-group: #581b50;\r\n\t\t\t\t\t--input-box-outline: #6f7074;\r\n\t\t\t\t\t--mute-button-normal: #db1e00;\r\n\t\t\t\t\t--mute-button-mod: #883bf9;\r\n\t\t\t\t\t--mod-label-primary: #525297;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(197 147 245);\r\n\t\t\t\t\t--mod-label-primary-text: #a3aae9;\r\n                    --pitch-secondary-channel-hue: 26;\r\n                    --pitch-secondary-channel-hue-scale: 214.5;\r\n                    --pitch-secondary-channel-sat: 74.3;\r\n                    --pitch-secondary-channel-sat-scale: -0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 55;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: -0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 26;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 214.5;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 74;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: -0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 65.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: -0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 26;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 214.5;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 74.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: -0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 70;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: -0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 26;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 214.5;\r\n\t\t\t\t\t--pitch-primary-note-sat: 85;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 64.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: -0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 220;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 62;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: -0.1;\r\n\t\t\t\t\t--noise-primary-channel-hue: 220;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 53;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 53.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: -0.1;\r\n\t\t\t\t\t--noise-secondary-note-hue: 220;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 58.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 85;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: -1;\r\n\t\t\t\t\t--noise-primary-note-hue: 220;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 56.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 54;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: -1;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 90;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 60;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 90;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 89;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 65;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 90;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 79;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 95;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 90;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 79;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 55;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--disabled-note-primary:    #868;\r\n\t\t\t\t\t--disabled-note-secondary:  #767;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.beepboxEditor button, .beepboxEditor select {\r\n\t\t\t\t\tbackground-color: var(--secondary-text);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.select2-selection__rendered {\r\n\t\t\t\t\tbackground-color: var(--secondary-text);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.beepboxEditor .piano-button::before {\r\n\t\t\t\t\tdisplay: none;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.promptContainerBG::before {\r\n\t\t\t\t\tbox-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);\r\n\t\t\t\t}\r\n\t\t\t`,\r\n        \"amoled dark\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #000;\r\n\t\t\t\t\t--editor-background: #020406;\r\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t\t\t--secondary-text: #8e88ce;\r\n\t\t\t\t\t--box-selection-fill: #044b94;\r\n\t\t\t\t\t--loop-accent: #ad38f9;\r\n\t\t\t\t\t--link-accent: #bd25ff;\r\n\t\t\t\t\t--ui-widget-background: #080d1f;\r\n\t\t\t\t\t--ui-widget-focus: #060f2d;\r\n\t\t\t\t\t--pitch-background: #02060b;\r\n\t\t\t\t\t--tonic: #00113a;\r\n\t\t\t\t\t--fifth-note: #1b0019;\r\n\t\t\t\t\t--white-piano-key: #02040c;\r\n\t\t\t\t\t--black-piano-key: #02040c;\r\n                    --white-piano-key-text: #fff;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #050829;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #010213;\r\n\t\t\t\t\t--track-editor-bg-noise: #051529;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #010b13;\r\n\t\t\t\t\t--track-editor-bg-mod: #150529;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a0113;\r\n\t\t\t\t\t--multiplicative-mod-slider: #2b409c;\r\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\r\n\t\t\t\t\t--indicator-primary: #7f3bec;\r\n\t\t\t\t\t--indicator-secondary: #213888;\r\n\t\t\t\t\t--select2-opt-group: #1d123c;\r\n\t\t\t\t\t--input-box-outline: #1b1e48;\r\n\t\t\t\t\t--mute-button-normal: #d234b0;\r\n\t\t\t\t\t--mute-button-mod: #263d98;\r\n\t\t\t\t\t--mod-label-primary: #090910;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(73, 69, 214);\r\n\t\t\t\t\t--mod-label-primary-text: white;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 183;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 158.7;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 183;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 158.7;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 183;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 158.7;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 183;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 158.7;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 30;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 30;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 30;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 30;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 45;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 0;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--disabled-note-primary: #91879f;\r\n\t\t\t\t\t--disabled-note-secondary: #6a677a;\r\n\t\t\t\t}\r\n\r\n\t\t\t`,\r\n        \"beachcombing\": `\r\n\t\t\t:root {\r\n\t\t\t  --page-margin: #010121;\r\n  --editor-background: #020222;\r\n  --hover-preview: #f3ffff;\r\n  --playhead: #fff;\r\n  --primary-text: #c1f1ff;\r\n  --secondary-text: #546775;\r\n  --box-selection-fill: #3e0028;\r\n  --loop-accent: #5e68fffc;\r\n  --link-accent: #ff3ad5fc;\r\n  --ui-widget-background: #1f2b52;\r\n  --ui-widget-focus: #384e91;\r\n  --pitch-background: #2c3155;\r\n  --tonic: #935175;\r\n  --fifth-note: #1f569f;\r\n  --white-piano-key: #f3f2ff;\r\n  --black-piano-key: #4b4471;\r\n  --white-piano-key-text: #4b4471;\r\n  --track-editor-bg-pitch: #34406c;\r\n  --track-editor-bg-pitch-dim: #121931;\r\n  --track-editor-bg-noise: #562e3b;\r\n  --track-editor-bg-noise-dim: #161313;\r\n  --track-editor-bg-mod: #372e66;\r\n  --track-editor-bg-mod-dim: #2a1640;\r\n  --multiplicative-mod-slider: #606c9f;\r\n  --overwriting-mod-slider: #6850b5;\r\n  --indicator-primary: #ff8bd1;\r\n  --indicator-secondary: #393e4f;\r\n  --select2-opt-group: #5d576f;\r\n  --input-box-outline: #222;\r\n  --mute-button-normal: #7ce1ff;\r\n  --mute-button-mod: #db519d;\r\n  --pitch1-secondary-channel: #329b70;\r\n  --pitch1-primary-channel: #53ffb8;\r\n  --pitch1-secondary-note: #4cb98c;\r\n  --pitch1-primary-note: #98ffd4;\r\n  --pitch2-secondary-channel: #b08e4d;\r\n  --pitch2-primary-channel: #ffe185;\r\n  --pitch2-secondary-note: #91782e;\r\n  --pitch2-primary-note: #ffd968;\r\n  --pitch3-secondary-channel: #018e8e;\r\n  --pitch3-primary-channel: #3de4ff;\r\n  --pitch3-secondary-note: #24b7b7;\r\n  --pitch3-primary-note: #a7ffff;\r\n  --pitch4-secondary-channel: #792354;\r\n  --pitch4-primary-channel: #ff68bd;\r\n  --pitch4-secondary-note: #a73c78;\r\n  --pitch4-primary-note: #ff98d2;\r\n  --pitch5-secondary-channel: #185aab;\r\n  --pitch5-primary-channel: #6493ff;\r\n  --pitch5-secondary-note: #3e99d9;\r\n  --pitch5-primary-note: #b3e3ff;\r\n  --pitch6-secondary-channel: #953C47;\r\n  --pitch6-primary-channel: #FF7888;\r\n  --pitch6-secondary-note: #DF4F60;\r\n  --pitch6-primary-note: #FFB2BB;\r\n  --pitch7-secondary-channel: #4f007d;\r\n  --pitch7-primary-channel: #a54cd9;\r\n  --pitch7-secondary-note: #732b9d;\r\n  --pitch7-primary-note: #d386ff;\r\n  --pitch8-secondary-channel: #323c99;\r\n  --pitch8-primary-channel: #1b61ff;\r\n  --pitch8-secondary-note: #1848b3;\r\n  --pitch8-primary-note: #6f9bff;\r\n  --pitch9-secondary-channel: #1F605A;\r\n  --pitch9-primary-channel: #69FFEA;\r\n  --pitch9-secondary-note: #178076;\r\n  --pitch10-secondary-channel: #6D438C;\r\n  --pitch10-secondary-note: #8040B0;\r\n  --noise1-secondary-channel: #635070;\r\n  --noise1-primary-channel: #9071db;\r\n  --noise1-secondary-note: #915dc1;\r\n  --noise1-primary-note: #c5a5ff;\r\n  --noise2-secondary-channel: #993367;\r\n  --noise2-primary-channel: #dd777c;\r\n  --noise2-secondary-note: #cc6695;\r\n  --noise2-primary-note: #f0bbd1;\r\n  --noise3-secondary-channel: #4a8c8f;\r\n  --noise3-primary-channel: #77c5dd;\r\n  --noise3-secondary-note: #6fb4cf;\r\n  --noise3-primary-note: #bbf2ff;\r\n  --noise4-secondary-channel: #8e3e7d;\r\n  --noise4-primary-channel: #c682d2;\r\n  --noise4-secondary-note: #b871c1;\r\n  --noise4-primary-note: #ffb8f0;\r\n  --noise5-secondary-channel: #785e37;\r\n  --noise5-primary-channel: #bb9d77;\r\n  --noise5-secondary-note: #aa8c66;\r\n  --noise5-primary-note: #e2d1b2;\r\n  --mod1-secondary-channel: #4e8397;\r\n  --mod1-primary-channel: #92e6f3;\r\n  --mod1-secondary-note: #76b9d9;\r\n  --mod1-primary-note: #cde3ff;\r\n  --mod2-secondary-channel: #ad5774;\r\n  --mod2-primary-channel: #eba4ae;\r\n  --mod2-secondary-note: #c9719b;\r\n  --mod2-primary-note: #fdcee7;\r\n  --mod3-secondary-channel: #6f579f;\r\n  --mod3-primary-channel: #b192f7;\r\n  --mod3-secondary-note: #7c3fc8;\r\n  --mod4-secondary-channel: #a88a36;\r\n  --mod4-primary-channel: #bec825;\r\n  --mod4-secondary-note: #aecb57;\r\n  --mod4-primary-note: #dee9bd;\r\n  --mod-label-primary: #2c2c56;\r\n  --mod-label-secondary-text: rgb(71,69,147);\r\n  --mod-label-primary-text: white;\r\n  --disabled-note-primary: #91879f;\r\n  --disabled-note-secondary: #6a677a;\r\n\r\n\r\n\t\t\t}\r\n\t\t`,\r\n        \"roe\": `\r\n\t\t\t:root {\r\n\t\t\t--page-margin: #050000;\r\n\t\t\t--editor-background: #050000;\r\n\t\t\t--primary-text: #b8cee0;\r\n\t\t\t--secondary-text: #cb3434;\r\n\t\t\t--text-selection: rgb(255 68 68 / 99%);\r\n\t\t\t--box-selection-fill: rgb(255 0 0 / 30%);\r\n\t\t\t--loop-accent: #7744FF;\r\n\t\t\t--link-accent: #FF2A2A;\r\n\t\t\t--ui-widget-background: #1a2642;\r\n\t\t\t--ui-widget-focus: #2c3f6d;\r\n\t\t\t--pitch-background: #15111a;\r\n\t\t\t--tonic: #1b3041;\r\n\t\t\t--fifth-note: #381818;\r\n\t\t\t--white-piano-key: #cdcdcd;\r\n\t\t\t--black-piano-key: #232323;\r\n\t\t\t--track-editor-bg-pitch: #302938;\r\n\t\t\t--track-editor-bg-pitch-dim: #211c26;\r\n\t\t\t--track-editor-bg-noise: #261f42;\r\n\t\t\t--track-editor-bg-noise-dim: #1a152d;\r\n\t\t\t--track-editor-bg-mod: #183049;\r\n\t\t\t--track-editor-bg-mod-dim: #102132;\r\n\t\t\t--multiplicative-mod-slider: #344a7f;\r\n\t\t\t--overwriting-mod-slider: #344a7f;\r\n\t\t\t--indicator-primary: #FF2A2A;\r\n\t\t\t--indicator-secondary: #800000;\r\n\t\t\t--select2-opt-group: #141e34;\r\n\t\t\t--input-box-outline: #141e34;\r\n\t\t\t--mute-button-normal: #299eff;\r\n\t\t\t--mute-button-mod: #165a93;\r\n\t\t\t--pitch1-secondary-channel: #273c90;\r\n\t\t\t--pitch1-primary-channel: #476BFF;\r\n\t\t\t--pitch1-secondary-note: #273c90;\r\n\t\t\t--pitch1-primary-note: #476BFF;\r\n\t\t\t--pitch2-secondary-channel: #3a3898;\r\n\t\t\t--pitch2-primary-channel: #625FFB;\r\n\t\t\t--pitch2-secondary-note: #3a3898;\r\n\t\t\t--pitch2-primary-note: #625FFB;\r\n\t\t\t--pitch3-secondary-channel: #542780;\r\n\t\t\t--pitch3-primary-channel: #9C49EC;\r\n\t\t\t--pitch3-secondary-note: #542780;\r\n\t\t\t--pitch3-primary-note: #9C49EC;\r\n\t\t\t--pitch4-secondary-channel: #84225d;\r\n\t\t\t--pitch4-primary-channel: #fd3fb1;\r\n\t\t\t--pitch4-secondary-note: #84225d;\r\n\t\t\t--pitch4-primary-note: #fd3fb1;\r\n\t\t\t--pitch5-secondary-channel: #8d2323;\r\n\t\t\t--pitch5-primary-channel: #ff3f3f;\r\n\t\t\t--pitch5-secondary-note: #8d2323;\r\n\t\t\t--pitch5-primary-note: #ff3f3f;\r\n\t\t\t--pitch6-secondary-channel: #84225d;\r\n\t\t\t--pitch6-primary-channel: #fd3fb1;\r\n\t\t\t--pitch6-secondary-note: #84225d;\r\n\t\t\t--pitch6-primary-note: #fd3fb1;\r\n\t\t\t--pitch7-secondary-channel: #542780;\r\n\t\t\t--pitch7-primary-channel: #9C49EC;\r\n\t\t\t--pitch7-secondary-note: #542780;\r\n\t\t\t--pitch7-primary-note: #9C49EC;\r\n\t\t\t--pitch8-secondary-channel: #3a3898;\r\n\t\t\t--pitch8-primary-channel: #625FFB;\r\n\t\t\t--pitch8-secondary-note: #3a3898;\r\n\t\t\t--pitch8-primary-note: #625FFB;\r\n\t\t\t--pitch9-secondary-channel: #273c90;\r\n\t\t\t--pitch9-primary-channel: #476BFF;\r\n\t\t\t--pitch9-secondary-note: #273c90;\r\n\t\t\t--pitch9-primary-note: #476BFF;\r\n\t\t\t--pitch10-secondary-channel: #165a93;\r\n\t\t\t--pitch10-primary-channel: #299EFF;\r\n\t\t\t--pitch10-secondary-note: #165a93;\r\n\t\t\t--pitch10-primary-note: #299EFF;\r\n\t\t\t--noise1-secondary-channel: #4281FF;\r\n\t\t\t--noise1-primary-channel: #96b9ff;\r\n\t\t\t--noise1-secondary-note: #4281FF;\r\n\t\t\t--noise1-primary-note: #96b9ff;\r\n\t\t\t--noise2-secondary-channel: #7347FF;\r\n\t\t\t--noise2-primary-channel: #c3b0ff;\r\n\t\t\t--noise2-secondary-note: #7347FF;\r\n\t\t\t--noise2-primary-note: #c3b0ff;\r\n\t\t\t--noise3-secondary-channel: #9F3CBF;\r\n\t\t\t--noise3-primary-channel: #e29cf9;\r\n\t\t\t--noise3-secondary-note: #9F3CBF;\r\n\t\t\t--noise3-primary-note: #e29cf9;\r\n\t\t\t--noise4-secondary-channel: #D3326F;\r\n\t\t\t--noise4-primary-channel: #fb9bbf;\r\n\t\t\t--noise4-secondary-note: #D3326F;\r\n\t\t\t--noise4-primary-note: #fb9bbf;\r\n\t\t\t--noise5-secondary-channel: #FF2A2A;\r\n\t\t\t--noise5-primary-channel: #ffa2a2;\r\n\t\t\t--noise5-secondary-note: #FF2A2A;\r\n\t\t\t--noise5-primary-note: #ffa2a2;\r\n\t\t\t--mod1-secondary-channel: #47587a;\r\n\t\t\t--mod1-primary-channel: #96b9ff;\r\n\t\t\t--mod1-secondary-note: #47587a;\r\n\t\t\t--mod1-primary-note: #96b9ff;\r\n\t\t\t--mod2-secondary-channel: #716791;\r\n\t\t\t--mod2-primary-channel: #c3b0ff;\r\n\t\t\t--mod2-secondary-note: #716791;\r\n\t\t\t--mod2-primary-note: #c3b0ff;\r\n\t\t\t--mod3-secondary-channel: #6f4c7b;\r\n\t\t\t--mod3-primary-channel: #e29cf9;\r\n\t\t\t--mod3-secondary-note: #6f4c7b;\r\n\t\t\t--mod3-primary-note: #e29cf9;\r\n\t\t\t--mod4-secondary-channel: #9e6279;\r\n\t\t\t--mod4-primary-channel: #fb9bbf;\r\n\t\t\t--mod4-secondary-note: #9e6279;\r\n\t\t\t--mod4-primary-note: #fb9bbf;\r\n\t\t\t--mod-label-primary: #15111a;\r\n\t\t\t--mod-label-secondary-text: #cb3434;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #c9c9c9;\r\n\t\t\t--disabled-note-secondary: #616161;\r\n\t\t}`,\r\n        \"moonlight\": `\r\n\t\t\t:root {\r\n\t\t\t--page-margin: #020514;\r\n\t\t\t--editor-background: #020514;\r\n\t\t\t--primary-text: #D4DCE9;\r\n\t\t\t--secondary-text: #3E87DA;\r\n\t\t\t--text-selection: #03599bd9;\r\n\t\t\t--box-selection-fill: hsl(206deg 66% 41% / 85%);\r\n\t\t\t--loop-accent: #639BD6;\r\n\t\t\t--link-accent: #A8C6E8;\r\n\t\t\t--ui-widget-background: #1e2940;\r\n\t\t\t--ui-widget-focus: #324b81;\r\n\t\t\t--pitch-background: #223849;\r\n\t\t\t--tonic: #33536c;\r\n\t\t\t--fifth-note: hsl(206deg 36% 16%);\r\n\t\t\t--white-piano-key: #c1bfe9;\r\n\t\t\t--black-piano-key: #454354;\r\n\t\t\t--track-editor-bg-pitch: #25568d80;\r\n\t\t\t--track-editor-bg-pitch-dim: #10253c80;\r\n\t\t\t--track-editor-bg-noise: #25568d80;\r\n\t\t\t--track-editor-bg-noise-dim: #10253c80;\r\n\t\t\t--track-editor-bg-mod: #25568d80;\r\n\t\t\t--track-editor-bg-mod-dim: #10253c80;\r\n\t\t\t--multiplicative-mod-slider: #0476cd;\r\n\t\t\t--overwriting-mod-slider: #035899;\r\n\t\t\t--indicator-primary: #57a1f4;\r\n\t\t\t--indicator-secondary: #2e5684;\r\n\t\t\t--select2-opt-group: #24355c;\r\n\t\t\t--input-box-outline: #141e34;\r\n\t\t\t--mute-button-normal: #6ebffc;\r\n\t\t\t--mute-button-mod: #0a92fa;\r\n\t\t\t--pitch1-secondary-channel: #47425c;\r\n\t\t\t--pitch1-primary-channel: #918bac;\r\n\t\t\t--pitch1-secondary-note: #6b6489;\r\n\t\t\t--pitch1-primary-note: #a8a3bf;\r\n\t\t\t--pitch2-secondary-channel: #626493;\r\n\t\t\t--pitch2-primary-channel: #bdbed3;\r\n\t\t\t--pitch2-secondary-note: #626493;\r\n\t\t\t--pitch2-primary-note: #bdbed3;\r\n\t\t\t--pitch3-secondary-channel: #6e89b4;\r\n\t\t\t--pitch3-primary-channel: #d4dce9;\r\n\t\t\t--pitch3-secondary-note: #6e89b4;\r\n\t\t\t--pitch3-primary-note: #d4dce9;\r\n\t\t\t--pitch4-secondary-channel: #4c77a9;\r\n\t\t\t--pitch4-primary-channel: #a8c6e8;\r\n\t\t\t--pitch4-secondary-note: #4c77a9;\r\n\t\t\t--pitch4-primary-note: #a8c6e8;\r\n\t\t\t--pitch5-secondary-channel: #314e6d;\r\n\t\t\t--pitch5-primary-channel: #639bd6;\r\n\t\t\t--pitch5-secondary-note: #46698f;\r\n\t\t\t--pitch5-primary-note: #639bd6;\r\n\t\t\t--pitch6-secondary-channel: #143d6b;\r\n\t\t\t--pitch6-primary-channel: #3e87da;\r\n\t\t\t--pitch6-secondary-note: #143d6b;\r\n\t\t\t--pitch6-primary-note: #3e87da;\r\n\t\t\t--pitch7-secondary-channel: #314e6d;\r\n\t\t\t--pitch7-primary-channel: #639bd6;\r\n\t\t\t--pitch7-secondary-note: #314e6d;\r\n\t\t\t--pitch7-primary-note: #639bd6;\r\n\t\t\t--pitch8-secondary-channel: #4c77a9;\r\n\t\t\t--pitch8-primary-channel: #a8c6e8;\r\n\t\t\t--pitch8-secondary-note: #4c77a9;\r\n\t\t\t--pitch8-primary-note: #a8c6e8;\r\n\t\t\t--pitch9-secondary-channel: #6e89b4;\r\n\t\t\t--pitch9-primary-channel: #d4dce9;\r\n\t\t\t--pitch9-secondary-note: #6e89b4;\r\n\t\t\t--pitch9-primary-note: #d4dce9;\r\n\t\t\t--pitch10-secondary-channel: #626493;\r\n\t\t\t--pitch10-primary-channel: #bdbed3;\r\n\t\t\t--pitch10-secondary-note: #626493;\r\n\t\t\t--pitch10-primary-note: #bdbed3;\r\n\t\t\t--noise1-secondary-channel: #4b4a55;\r\n\t\t\t--noise1-primary-channel: #9795a3;\r\n\t\t\t--noise1-secondary-note: #4b4a55;\r\n\t\t\t--noise1-primary-note: #9795a3;\r\n\t\t\t--noise2-secondary-channel: #858e9d;\r\n\t\t\t--noise2-primary-channel: #d7dce5;\r\n\t\t\t--noise2-secondary-note: #858e9d;\r\n\t\t\t--noise2-primary-note: #d7dce5;\r\n\t\t\t--noise3-secondary-channel: #394e65;\r\n\t\t\t--noise3-primary-channel: #809bb7;\r\n\t\t\t--noise3-secondary-note: #394e65;\r\n\t\t\t--noise3-primary-note: #809bb7;\r\n\t\t\t--noise4-secondary-channel: #37577b;\r\n\t\t\t--noise4-primary-channel: #6189b8;\r\n\t\t\t--noise4-secondary-note: #37577b;\r\n\t\t\t--noise4-primary-note: #6189b8;\r\n\t\t\t--noise5-secondary-channel: #223849;\r\n\t\t\t--noise5-primary-channel: #5588af;\r\n\t\t\t--noise5-secondary-note: #223849;\r\n\t\t\t--noise5-primary-note: #5588af;\r\n\t\t\t--mod1-secondary-channel: #3e336c;\r\n\t\t\t--mod1-primary-channel: #6d60a4;\r\n\t\t\t--mod1-secondary-note: #3e336c;\r\n\t\t\t--mod1-primary-note: #6d60a4;\r\n\t\t\t--mod2-secondary-channel: #716791;\r\n\t\t\t--mod2-primary-channel: #bdbed3;\r\n\t\t\t--mod2-secondary-note: #716791;\r\n\t\t\t--mod2-primary-note: #bdbed3;\r\n\t\t\t--mod3-secondary-channel: #6b91bd;\r\n\t\t\t--mod3-primary-channel: #4b8fdd;\r\n\t\t\t--mod3-secondary-note: #597ca7;\r\n\t\t\t--mod3-primary-note: #7eade3;\r\n\t\t\t--mod4-secondary-channel: #14559f;\r\n\t\t\t--mod4-primary-channel: #3386e6;\r\n\t\t\t--mod4-secondary-note: #14559f;\r\n\t\t\t--mod4-primary-note: #3386e6;\r\n\t\t\t--mod-label-primary: #1e2940;\r\n\t\t\t--mod-label-secondary-text: #748ebe;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #828282;\r\n\t\t\t--disabled-note-secondary: #4f4f4f;\r\n\t\t\t}`,\r\n        \"autumn\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #060304;\r\n\t\t\t--editor-background: #060304;\r\n\t\t\t--text-selection: rgb(115 80 76);\r\n\t\t\t--box-selection-fill: rgb(174 73 81 / 45%);\r\n\t\t\t--loop-accent: #834A69;\r\n\t\t\t--ui-widget-background: #2a2523;\r\n\t\t\t--ui-widget-focus: #4e4c44;\r\n\t\t\t--pitch-background: #121212;\r\n\t\t\t--tonic: #4f4f4f;\r\n\t\t\t--fifth-note: #222;\r\n\t\t\t--white-piano-key: #b59b9b;\r\n\t\t\t--black-piano-key: #231e1e;\r\n\t\t\t--track-editor-bg-pitch: #352f38;\r\n\t\t\t--track-editor-bg-pitch-dim: #232025;\r\n\t\t\t--track-editor-bg-noise: #3c3029;\r\n\t\t\t--track-editor-bg-noise-dim: #251d19;\r\n\t\t\t--track-editor-bg-mod: #202623;\r\n\t\t\t--track-editor-bg-mod-dim: #131715;\r\n\t\t\t--multiplicative-mod-slider: #D9D16E;\r\n\t\t\t--overwriting-mod-slider: #2D826F;\r\n\t\t\t--indicator-primary: #D9D16E;\r\n\t\t\t--indicator-secondary: #444226;\r\n\t\t\t--select2-opt-group: #20191c;\r\n\t\t\t--input-box-outline: #20191c;\r\n\t\t\t--mute-button-normal: var(--pitch2-primary-channel);\r\n\t\t\t--mute-button-mod: var(--pitch4-primary-channel);\r\n\t\t\t--pitch1-secondary-channel: #704a34;\r\n\t\t\t--pitch1-primary-channel: #D9895A;\r\n\t\t\t--pitch1-secondary-note: #704a34;\r\n\t\t\t--pitch1-primary-note: #D9895A;\r\n\t\t\t--pitch2-secondary-channel: #5f3538;\r\n\t\t\t--pitch2-primary-channel: #AE4951;\r\n\t\t\t--pitch2-secondary-note: #5f3538;\r\n\t\t\t--pitch2-primary-note: #AE4951;\r\n\t\t\t--pitch3-secondary-channel: #5c4336;\r\n\t\t\t--pitch3-primary-channel: #CA9A81;\r\n\t\t\t--pitch3-secondary-note: #5c4336;\r\n\t\t\t--pitch3-primary-note: #CA9A81;\r\n\t\t\t--pitch4-secondary-channel: #1d3143;\r\n\t\t\t--pitch4-primary-channel: #386995;\r\n\t\t\t--pitch4-secondary-note: #1d3143;\r\n\t\t\t--pitch4-primary-note: #386995;\r\n\t\t\t--pitch5-secondary-channel: #9c8a58;\r\n\t\t\t--pitch5-primary-channel: #D9D16E;\r\n\t\t\t--pitch5-secondary-note: #7c783f;\r\n\t\t\t--pitch5-primary-note: #D9D16E;\r\n\t\t\t--pitch6-secondary-channel: #886562;\r\n\t\t\t--pitch6-primary-channel: #D3A9A5;\r\n\t\t\t--pitch6-secondary-note: #886562;\r\n\t\t\t--pitch6-primary-note: #D3A9A5;\r\n\t\t\t--pitch7-secondary-channel: #1c3f37;\r\n\t\t\t--pitch7-primary-channel: #2D826F;\r\n\t\t\t--pitch7-secondary-note: #1c3f37;\r\n\t\t\t--pitch7-primary-note: #2D826F;\r\n\t\t\t--pitch8-secondary-channel: #442e2d;\r\n\t\t\t--pitch8-primary-channel: #815150;\r\n\t\t\t--pitch8-secondary-note: #442e2d;\r\n\t\t\t--pitch8-primary-note: #815150;\r\n\t\t\t--pitch9-secondary-channel: #8e6f60;\r\n\t\t\t--pitch9-primary-channel: #E5B8A1;\r\n\t\t\t--pitch9-secondary-note: #8e6f60;\r\n\t\t\t--pitch9-primary-note: #E5B8A1;\r\n\t\t\t--pitch10-secondary-channel: #4f3142;\r\n\t\t\t--pitch10-primary-channel: #834A69;\r\n\t\t\t--pitch10-secondary-note: #4f3142;\r\n\t\t\t--pitch10-primary-note: #834A69;\r\n\t\t\t--noise1-secondary-channel: #6b5346;\r\n\t\t\t--noise1-primary-channel: #b99c89;\r\n\t\t\t--noise1-secondary-note: #6b5346;\r\n\t\t\t--noise1-primary-note: #F0D0BB;\r\n\t\t\t--noise2-secondary-channel: #4a3839;\r\n\t\t\t--noise2-primary-channel: #9c6b6e;\r\n\t\t\t--noise2-secondary-note: #4a3839;\r\n\t\t\t--noise2-primary-note: #c18b8f;\r\n\t\t\t--noise3-secondary-channel: #2d3c4a;\r\n\t\t\t--noise3-primary-channel: #536e86;\r\n\t\t\t--noise3-secondary-note: #2d3c4a;\r\n\t\t\t--noise3-primary-note: #8fa8c0;\r\n\t\t\t--noise4-secondary-channel: #273f3a;\r\n\t\t\t--noise4-primary-channel: #4e8377;\r\n\t\t\t--noise4-secondary-note: #273f3a;\r\n\t\t\t--noise4-primary-note: #87baae;\r\n\t\t\t--noise5-secondary-channel: #372730;\r\n\t\t\t--noise5-primary-channel: #7f5e70;\r\n\t\t\t--noise5-secondary-note: #372730;\r\n\t\t\t--noise5-primary-note: #cc96b3;\r\n\t\t\t--mod1-secondary-channel: #783f1f;\r\n\t\t\t--mod1-primary-channel: #dc6d2c;\r\n\t\t\t--mod1-secondary-note: #783f1f;\r\n\t\t\t--mod1-primary-note: #dc6d2c;\r\n\t\t\t--mod2-secondary-channel: #0b3153;\r\n\t\t\t--mod2-primary-channel: #1464ac;\r\n\t\t\t--mod2-secondary-note: #0b3153;\r\n\t\t\t--mod2-primary-note: #1464ac;\r\n\t\t\t--mod3-secondary-channel: #075040;\r\n\t\t\t--mod3-primary-channel: #08a17f;\r\n\t\t\t--mod3-secondary-note: #075040;\r\n\t\t\t--mod3-primary-note: #08a17f;\r\n\t\t\t--mod4-secondary-channel: #631640;\r\n\t\t\t--mod4-primary-channel: #b4186d;\r\n\t\t\t--mod4-secondary-note: #631640;\r\n\t\t\t--mod4-primary-note: #b4186d;\r\n\t\t\t--mod-label-primary: #000;\r\n\t\t\t--mod-label-secondary-text: #707070;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #5d5d5d;\r\n\t\t\t--disabled-note-secondary: #292929;\r\n\t\t}`,\r\n        \"fruit\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #040507;\r\n\t\t\t--editor-background: #040507;\r\n\t\t\t--text-selection: rgb(115 103 76);\r\n\t\t\t--box-selection-fill: rgb(174 109 73 / 45%);\r\n\t\t\t--loop-accent: #EC897D;\r\n\t\t\t--link-accent: #FDE484;\r\n\t\t\t--ui-widget-background: #22222c;\r\n\t\t\t--ui-widget-focus: #39394c;\r\n\t\t\t--pitch-background: #101010;\r\n\t\t\t--tonic: #2c2d34;\r\n\t\t\t--fifth-note: #191a20;\r\n\t\t\t--white-piano-key: #bbbaba;\r\n\t\t\t--black-piano-key: #2d2d2d;\r\n\t\t\t--track-editor-bg-pitch: #2b2d40;\r\n\t\t\t--track-editor-bg-pitch-dim: #191a25;\r\n\t\t\t--track-editor-bg-noise: #3c3644;\r\n\t\t\t--track-editor-bg-noise-dim: #26222b;\r\n\t\t\t--track-editor-bg-mod: #322a2a;\r\n\t\t\t--track-editor-bg-mod-dim: #191515;\r\n\t\t\t--multiplicative-mod-slider: #977da9;\r\n\t\t\t--overwriting-mod-slider: #798FA7;\r\n\t\t\t--indicator-primary: #EAAC9D;\r\n\t\t\t--indicator-secondary: #5e413a;\r\n\t\t\t--select2-opt-group: #191920;\r\n\t\t\t--input-box-outline: #191920;\r\n\t\t\t--mute-button-normal: #798FA7;\r\n\t\t\t--mute-button-mod: #354457;\r\n\t\t\t--pitch1-secondary-channel: #91655a;\r\n\t\t\t--pitch1-primary-channel: #EAAC9D;\r\n\t\t\t--pitch1-secondary-note: #91655a;\r\n\t\t\t--pitch1-primary-note: #EAAC9D;\r\n\t\t\t--pitch2-secondary-channel: #8f6513;\r\n\t\t\t--pitch2-primary-channel: #FFAF12;\r\n\t\t\t--pitch2-secondary-note: #8f6513;\r\n\t\t\t--pitch2-primary-note: #FFAF12;\r\n\t\t\t--pitch3-secondary-channel: #212f46;\r\n\t\t\t--pitch3-primary-channel: #34558B;\r\n\t\t\t--pitch3-secondary-note: #212f46;\r\n\t\t\t--pitch3-primary-note: #34558B;\r\n\t\t\t--pitch4-secondary-channel: #2e6b5b;\r\n\t\t\t--pitch4-primary-channel: #4EC5A7;\r\n\t\t\t--pitch4-secondary-note: #2e6b5b;\r\n\t\t\t--pitch4-primary-note: #4EC5A7;\r\n\t\t\t--pitch5-secondary-channel: #555D46;\r\n\t\t\t--pitch5-primary-channel: #aabf84;\r\n\t\t\t--pitch5-secondary-note: #555D46;\r\n\t\t\t--pitch5-primary-note: #aabf84;\r\n\t\t\t--pitch6-secondary-channel: #A2553B;\r\n\t\t\t--pitch6-primary-channel: #e59a81;\r\n\t\t\t--pitch6-secondary-note: #A2553B;\r\n\t\t\t--pitch6-primary-note: #e59a81;\r\n\t\t\t--pitch7-secondary-channel: #7b4021;\r\n\t\t\t--pitch7-primary-channel: #FE813E;\r\n\t\t\t--pitch7-secondary-note: #7b4021;\r\n\t\t\t--pitch7-primary-note: #FE813E;\r\n\t\t\t--pitch8-secondary-channel: #847753;\r\n\t\t\t--pitch8-primary-channel: #EFDAA3;\r\n\t\t\t--pitch8-secondary-note: #847753;\r\n\t\t\t--pitch8-primary-note: #EFDAA3;\r\n\t\t\t--pitch9-secondary-channel: #2c3642;\r\n\t\t\t--pitch9-primary-channel: #798FA7;\r\n\t\t\t--pitch9-secondary-note: #2c3642;\r\n\t\t\t--pitch9-primary-note: #798FA7;\r\n\t\t\t--pitch10-secondary-channel: #0d4453;\r\n\t\t\t--pitch10-primary-channel: #107895;\r\n\t\t\t--pitch10-secondary-note: #0d4453;\r\n\t\t\t--pitch10-primary-note: #107895;\r\n\t\t\t--noise1-secondary-channel: #71617C;\r\n\t\t\t--noise1-primary-channel: #977da9;\r\n\t\t\t--noise1-secondary-note: #71617C;\r\n\t\t\t--noise1-primary-note: #977da9;\r\n\t\t\t--noise2-secondary-channel: #3B3D4A;\r\n\t\t\t--noise2-primary-channel: #707591;\r\n\t\t\t--noise2-secondary-note: #3B3D4A;\r\n\t\t\t--noise2-primary-note: #707591;\r\n\t\t\t--noise3-secondary-channel: #625f5e;\r\n\t\t\t--noise3-primary-channel: #A19D9C;\r\n\t\t\t--noise3-secondary-note: #625f5e;\r\n\t\t\t--noise3-primary-note: #A19D9C;\r\n\t\t\t--noise4-secondary-channel: #ab847b;\r\n\t\t\t--noise4-primary-channel: #EAAC9D;\r\n\t\t\t--noise4-secondary-note: #ab847b;\r\n\t\t\t--noise4-primary-note: #EAAC9D;\r\n\t\t\t--noise5-secondary-channel: #B49D74;\r\n\t\t\t--noise5-primary-channel: #dec69b;\r\n\t\t\t--noise5-secondary-note: #B49D74;\r\n\t\t\t--noise5-primary-note: #dec69b;\r\n\t\t\t--mod1-secondary-channel: #722124;\r\n\t\t\t--mod1-primary-channel: #D13A41;\r\n\t\t\t--mod1-secondary-note: #722124;\r\n\t\t\t--mod1-primary-note: #D13A41;\r\n\t\t\t--mod2-secondary-channel: #213657;\r\n\t\t\t--mod2-primary-channel: #34558B;\r\n\t\t\t--mod2-secondary-note: #213657;\r\n\t\t\t--mod2-primary-note: #34558B;\r\n\t\t\t--mod3-secondary-channel: #555D46;\r\n\t\t\t--mod3-primary-channel: #848f6d;\r\n\t\t\t--mod3-secondary-note: #555D46;\r\n\t\t\t--mod3-primary-note: #848f6d;\r\n\t\t\t--mod4-secondary-channel: #71617C;\r\n\t\t\t--mod4-primary-channel: #a68ab9;\r\n\t\t\t--mod4-secondary-note: #71617C;\r\n\t\t\t--mod4-primary-note: #a68ab9;\r\n\t\t\t--mod-label-primary: #282828;\r\n\t\t\t--mod-label-secondary-text: #707070;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #5d5d5d;\r\n\t\t\t--disabled-note-secondary: #292929;\r\n\t\t}`,\r\n        \"sunset\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #040300;\r\n\t\t\t--editor-background: #040300;\r\n\t\t\t--text-selection: rgb(94 0 157);\r\n\t\t\t--box-selection-fill: rgb(174 173 73 / 45%);\r\n\t\t\t--loop-accent: #EC897D;\r\n\t\t\t--link-accent: #FDE484;\r\n\t\t\t--ui-widget-background: #241b24;\r\n\t\t\t--ui-widget-focus: #3a2e39;\r\n\t\t\t--pitch-background: #141414;\r\n\t\t\t--tonic: #2C212B;\r\n\t\t\t--fifth-note: #2E2A15;\r\n\t\t\t--white-piano-key: #bbbaba;\r\n\t\t\t--black-piano-key: #2d2d2d;\r\n\t\t\t--track-editor-bg-pitch: #2d2e42;\r\n\t\t\t--track-editor-bg-pitch-dim: #191a25;\r\n\t\t\t--track-editor-bg-noise: #393340;\r\n\t\t\t--track-editor-bg-noise-dim: #26222b;\r\n\t\t\t--track-editor-bg-mod: #232a2c;\r\n\t\t\t--track-editor-bg-mod-dim: #151819;\r\n\t\t\t--multiplicative-mod-slider: #977da9;\r\n\t\t\t--overwriting-mod-slider: #798FA7;\r\n\t\t\t--indicator-primary: #F28891;\r\n\t\t\t--indicator-secondary: #601d23;\r\n\t\t\t--select2-opt-group: #151015;\r\n\t\t\t--input-box-outline: #151015;\r\n\t\t\t--mute-button-normal: #E4739D;\r\n\t\t\t--mute-button-mod: #9650A6;\r\n\t\t\t--pitch1-secondary-channel: #7F7721;\r\n\t\t\t--pitch1-primary-channel: #F3E79A;\r\n\t\t\t--pitch1-secondary-note: #7F7721;\r\n\t\t\t--pitch1-primary-note: #F3E79A;\r\n\t\t\t--pitch2-secondary-channel: #785E20;\r\n\t\t\t--pitch2-primary-channel: #F7D086;\r\n\t\t\t--pitch2-secondary-note: #785E20;\r\n\t\t\t--pitch2-primary-note: #F7D086;\r\n\t\t\t--pitch3-secondary-channel: #6E4219;\r\n\t\t\t--pitch3-primary-channel: #F9B881;\r\n\t\t\t--pitch3-secondary-note: #6E4219;\r\n\t\t\t--pitch3-primary-note: #F9B881;\r\n\t\t\t--pitch4-secondary-channel: #79351F;\r\n\t\t\t--pitch4-primary-channel: #F7A086;\r\n\t\t\t--pitch4-secondary-note: #79351F;\r\n\t\t\t--pitch4-primary-note: #F7A086;\r\n\t\t\t--pitch5-secondary-channel: #81272F;\r\n\t\t\t--pitch5-primary-channel: #F28891;\r\n\t\t\t--pitch5-secondary-note: #81272F;\r\n\t\t\t--pitch5-primary-note: #F28891;\r\n\t\t\t--pitch6-secondary-channel: #8F224D;\r\n\t\t\t--pitch6-primary-channel: #E4739D;\r\n\t\t\t--pitch6-secondary-note: #8F224D;\r\n\t\t\t--pitch6-primary-note: #E4739D;\r\n\t\t\t--pitch7-secondary-channel: #611548;\r\n\t\t\t--pitch7-primary-channel: #CF63A6;\r\n\t\t\t--pitch7-secondary-note: #611548;\r\n\t\t\t--pitch7-primary-note: #CF63A6;\r\n\t\t\t--pitch8-secondary-channel: #561253;\r\n\t\t\t--pitch8-primary-channel: #B557A9;\r\n\t\t\t--pitch8-secondary-note: #4D104A;\r\n\t\t\t--pitch8-primary-note: #B557A9;\r\n\t\t\t--pitch9-secondary-channel: #4c1260;\r\n\t\t\t--pitch9-primary-channel: #9650A6;\r\n\t\t\t--pitch9-secondary-note: #3C0F4C;\r\n\t\t\t--pitch9-primary-note: #9650A6;\r\n\t\t\t--pitch10-secondary-channel: #3e1d78;\r\n\t\t\t--pitch10-primary-channel: #704D9E;\r\n\t\t\t--pitch10-secondary-note: #27124C;\r\n\t\t\t--pitch10-primary-note: #704D9E;\r\n\t\t\t--noise1-secondary-channel: #A7A578;\r\n\t\t\t--noise1-primary-channel: #EFE9AC;\r\n\t\t\t--noise1-secondary-note: #A7A578;\r\n\t\t\t--noise1-primary-note: #EFE9AC;\r\n\t\t\t--noise2-secondary-channel: #947A5F;\r\n\t\t\t--noise2-primary-channel: #FBCEA8;\r\n\t\t\t--noise2-secondary-note: #947A5F;\r\n\t\t\t--noise2-primary-note: #FBCEA8;\r\n\t\t\t--noise3-secondary-channel: #A3635D;\r\n\t\t\t--noise3-primary-channel: #F4A5AB;\r\n\t\t\t--noise3-secondary-note: #A3635D;\r\n\t\t\t--noise3-primary-note: #F4A5AB;\r\n\t\t\t--noise4-secondary-channel: #724D60;\r\n\t\t\t--noise4-primary-channel: #CD90B6;\r\n\t\t\t--noise4-secondary-note: #724D60;\r\n\t\t\t--noise4-primary-note: #CD90B6;\r\n\t\t\t--noise5-secondary-channel: #503F5C;\r\n\t\t\t--noise5-primary-channel: #7C6A9E;\r\n\t\t\t--noise5-secondary-note: #503F5C;\r\n\t\t\t--noise5-primary-note: #7C6A9E;\r\n\t\t\t--mod1-secondary-channel: #371883;\r\n\t\t\t--mod1-primary-channel: #6416C6;\r\n\t\t\t--mod1-secondary-note: #1F0A52;\r\n\t\t\t--mod1-primary-note: #6416C6;\r\n\t\t\t--mod2-secondary-channel: #690645;\r\n\t\t\t--mod2-primary-channel: #E52FA2;\r\n\t\t\t--mod2-secondary-note: #690645;\r\n\t\t\t--mod2-primary-note: #E52FA2;\r\n\t\t\t--mod3-secondary-channel: #943618;\r\n\t\t\t--mod3-primary-channel: #eb5b2c;\r\n\t\t\t--mod3-secondary-note: #943618;\r\n\t\t\t--mod3-primary-note: #eb5b2c;\r\n\t\t\t--mod4-secondary-channel: #928409;\r\n\t\t\t--mod4-primary-channel: #ecd50e;\r\n\t\t\t--mod4-secondary-note: #928409;\r\n\t\t\t--mod4-primary-note: #ecd50e;\r\n\t\t\t--mod-label-primary: #282828;\r\n\t\t\t--mod-label-secondary-text: #707070;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #5d5d5d;\r\n\t\t\t--disabled-note-secondary: #292929;\r\n\t\t}`,\r\n        \"toxic\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #010003;\r\n\t\t\t--editor-background: #010003;\r\n\t\t\t--text-selection: rgb(147 195 0);\r\n\t\t\t--box-selection-fill: rgb(145 174 73 / 49%);\r\n\t\t\t--loop-accent: #BCDE2C;\r\n\t\t\t--link-accent: #edff9f;\r\n\t\t\t--ui-widget-background: #261e2e;\r\n\t\t\t--ui-widget-focus: #322042;\r\n\t\t\t--pitch-background: #141c15;\r\n\t\t\t--tonic: #282c21;\r\n\t\t\t--fifth-note: #18221a;\r\n\t\t\t--white-piano-key: #e3e3e3;\r\n\t\t\t--black-piano-key: #2d2d2d;\r\n\t\t\t--track-editor-bg-pitch: #38293e;\r\n\t\t\t--track-editor-bg-pitch-dim: #251c29;\r\n\t\t\t--track-editor-bg-noise: #2c304c;\r\n\t\t\t--track-editor-bg-noise-dim: #191b2b;\r\n\t\t\t--track-editor-bg-mod: #311b32;\r\n\t\t\t--track-editor-bg-mod-dim: #1d101e;\r\n\t\t\t--multiplicative-mod-slider: #977da9;\r\n\t\t\t--overwriting-mod-slider: #798FA7;\r\n\t\t\t--indicator-primary: #aae9ff;\r\n\t\t\t--indicator-secondary: #253e46;\r\n\t\t\t--select2-opt-group: #110d15;\r\n\t\t\t--input-box-outline: #110d15;\r\n\t\t\t--mute-button-normal: #8f5ad1;\r\n\t\t\t--mute-button-mod: #482574;\r\n\t\t\t--pitch1-secondary-channel: #6b7f19;\r\n\t\t\t--pitch1-primary-channel: #BCDE2C;\r\n\t\t\t--pitch1-secondary-note: #6b7f19;\r\n\t\t\t--pitch1-primary-note: #BCDE2C;\r\n\t\t\t--pitch2-secondary-channel: #497a31;\r\n\t\t\t--pitch2-primary-channel: #7BD152;\r\n\t\t\t--pitch2-secondary-note: #497a31;\r\n\t\t\t--pitch2-primary-note: #7BD152;\r\n\t\t\t--pitch3-secondary-channel: #286b40;\r\n\t\t\t--pitch3-primary-channel: #45BE71;\r\n\t\t\t--pitch3-secondary-note: #286b40;\r\n\t\t\t--pitch3-primary-note: #45BE71;\r\n\t\t\t--pitch4-secondary-channel: #125140;\r\n\t\t\t--pitch4-primary-channel: #25A884;\r\n\t\t\t--pitch4-secondary-note: #125140;\r\n\t\t\t--pitch4-primary-note: #25A884;\r\n\t\t\t--pitch5-secondary-channel: #114c49;\r\n\t\t\t--pitch5-primary-channel: #21908C;\r\n\t\t\t--pitch5-secondary-note: #114c49;\r\n\t\t\t--pitch5-primary-note: #21908C;\r\n\t\t\t--pitch6-secondary-channel: #143843;\r\n\t\t\t--pitch6-primary-channel: #2B788E;\r\n\t\t\t--pitch6-secondary-note: #143843;\r\n\t\t\t--pitch6-primary-note: #2B788E;\r\n\t\t\t--pitch7-secondary-channel: #1d354e;\r\n\t\t\t--pitch7-primary-channel: #355F8D;\r\n\t\t\t--pitch7-secondary-note: #1a2f46;\r\n\t\t\t--pitch7-primary-note: #355F8D;\r\n\t\t\t--pitch8-secondary-channel: #2c2e5a;\r\n\t\t\t--pitch8-primary-channel: #414486;\r\n\t\t\t--pitch8-secondary-note: #1e1f3d;\r\n\t\t\t--pitch8-primary-note: #414486;\r\n\t\t\t--pitch9-secondary-channel: #3c1f5e;\r\n\t\t\t--pitch9-primary-channel: #5e3b89;\r\n\t\t\t--pitch9-secondary-note: #25133b;\r\n\t\t\t--pitch9-primary-note: #5e3b89;\r\n\t\t\t--pitch10-secondary-channel: #510264;\r\n\t\t\t--pitch10-primary-channel: #720d8a;\r\n\t\t\t--pitch10-secondary-note: #440154;\r\n\t\t\t--pitch10-primary-note: #720d8a;\r\n\t\t\t--noise1-secondary-channel: #BCDE2C;\r\n\t\t\t--noise1-primary-channel: #edff9f;\r\n\t\t\t--noise1-secondary-note: #BCDE2C;\r\n\t\t\t--noise1-primary-note: #edff9f;\r\n\t\t\t--noise2-secondary-channel: #45BE71;\r\n\t\t\t--noise2-primary-channel: #89ffb4;\r\n\t\t\t--noise2-secondary-note: #45BE71;\r\n\t\t\t--noise2-primary-note: #89ffb4;\r\n\t\t\t--noise3-secondary-channel: #21908C;\r\n\t\t\t--noise3-primary-channel: #72fffa;\r\n\t\t\t--noise3-secondary-note: #21908C;\r\n\t\t\t--noise3-primary-note: #72fffa;\r\n\t\t\t--noise4-secondary-channel: #355F8D;\r\n\t\t\t--noise4-primary-channel: #7cb6f5;\r\n\t\t\t--noise4-secondary-note: #355F8D;\r\n\t\t\t--noise4-primary-note: #7cb6f5;\r\n\t\t\t--noise5-secondary-channel: #482574;\r\n\t\t\t--noise5-primary-channel: #8f5ad1;\r\n\t\t\t--noise5-secondary-note: #48257A;\r\n\t\t\t--noise5-primary-note: #8f5ad1;\r\n\t\t\t--mod1-secondary-channel: #815a16;\r\n\t\t\t--mod1-primary-channel: #F5AB29;\r\n\t\t\t--mod1-secondary-note: #815a16;\r\n\t\t\t--mod1-primary-note: #F5AB29;\r\n\t\t\t--mod2-secondary-channel: #4d341a;\r\n\t\t\t--mod2-primary-channel: #C98540;\r\n\t\t\t--mod2-secondary-note: #4d341a;\r\n\t\t\t--mod2-primary-note: #C98540;\r\n\t\t\t--mod3-secondary-channel: #643734;\r\n\t\t\t--mod3-primary-channel: #A75D58;\r\n\t\t\t--mod3-secondary-note: #643734;\r\n\t\t\t--mod3-primary-note: #A75D58;\r\n\t\t\t--mod4-secondary-channel: #461430;\r\n\t\t\t--mod4-primary-channel: #812359;\r\n\t\t\t--mod4-secondary-note: #3f112b;\r\n\t\t\t--mod4-primary-note: #812359;\r\n\t\t\t--mod-label-primary: #282828;\r\n\t\t\t--mod-label-secondary-text: #707070;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #5d5d5d;\r\n\t\t\t--disabled-note-secondary: #292929;\r\n\t\t}`,\r\n        \"violet verdant\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #0e031a;\r\n\t\t\t--editor-background: #0e031a;\r\n\t\t\t--hover-preview: #e5ffea;\r\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t--primary-text: #f0e0ff;\r\n\t\t\t--secondary-text: #706087;\r\n\t\t\t--box-selection-fill: #225835;\r\n\t\t\t--loop-accent: #8f00fb;\r\n\t\t\t--link-accent: #82dd5d;\r\n\t\t\t--ui-widget-background: #303c66;\r\n\t\t\t--ui-widget-focus: #62559b;\r\n\t\t\t--pitch-background: #293b52;\r\n\t\t\t--tonic: #5b46ad;\r\n\t\t\t--fifth-note: #42604d;\r\n\t\t\t--white-piano-key: #f6e8ff;\r\n\t\t\t--black-piano-key: #5a4972;\r\n\t\t\t--use-color-formula: true;\r\n\t\t\t--track-editor-bg-pitch: #392a46;\r\n\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\r\n\t\t\t--track-editor-bg-noise: #403150;\r\n\t\t\t--track-editor-bg-noise-dim: #161313;\r\n\t\t\t--track-editor-bg-mod: #253c25;\r\n\t\t\t--track-editor-bg-mod-dim: #0c1811;\r\n\t\t\t--multiplicative-mod-slider: #606c9f;\r\n\t\t\t--overwriting-mod-slider: #6850b5;\r\n\t\t\t--indicator-primary: #9c64f7;\r\n\t\t\t--indicator-secondary: #393e4f;\r\n\t\t\t--select2-opt-group: #5d576f;\r\n\t\t\t--input-box-outline: #403150;\r\n\t\t\t--mute-button-normal: #82dd5d;\r\n\t\t\t--mute-button-mod: #945de5;\r\n\t\t\t--mod-label-primary: #312840;\r\n\t\t\t--mod-label-secondary-text: rgb(88 70 104);\r\n\t\t\t--mod-label-primary-text: #82dd5d;\r\n\t\t\t--pitch-secondary-channel-hue: 64;\r\n\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\r\n\t\t\t--pitch-secondary-channel-sat: 63.3;\r\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-channel-hue: 64;\r\n\t\t\t--pitch-primary-channel-hue-scale: 6.1;\r\n\t\t\t--pitch-primary-channel-sat: 90;\r\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-secondary-note-hue: 32;\r\n\t\t\t--pitch-secondary-note-hue-scale: 6.1;\r\n\t\t\t--pitch-secondary-note-sat: 87.9;\r\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-note-lum: 25;\r\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-note-hue: 64;\r\n\t\t\t--pitch-primary-note-hue-scale: 6.1;\r\n\t\t\t--pitch-primary-note-sat: 90;\r\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t--noise-secondary-channel-hue: 192;\r\n\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t--noise-secondary-channel-sat: 45;\r\n\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t--noise-secondary-channel-lum: 32;\r\n\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t--noise-primary-channel-hue: 192;\r\n\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t--noise-primary-channel-lum: 43.5;\r\n\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t--noise-secondary-note-hue: 160;\r\n\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t--noise-secondary-note-lum: 45;\r\n\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t--noise-primary-note-hue: 192;\r\n\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t--mod-secondary-channel-hue: 132;\r\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t--mod-primary-channel-hue: 132;\r\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t--mod-secondary-note-hue: 100;\r\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t--mod-secondary-note-lum: 45;\r\n\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t--mod-primary-note-hue: 132;\r\n\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t--disabled-note-primary: #91879f;\r\n\t\t\t--disabled-note-secondary: #6a677a;\r\n\t\t}`,\r\n        \"portal\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #04081a;\r\n\t\t\t--editor-background: #04081a;\r\n\t\t\t--box-selection-fill: rgb(0 72 181);\r\n\t\t\t--loop-accent: #44d4ff;\r\n\t\t\t--link-accent: #ffa500;\r\n\t\t\t--ui-widget-background: #212c4a;\r\n\t\t\t--ui-widget-focus: #121f42;\r\n\t\t\t--pitch-background: #1b263e;\r\n\t\t\t--tonic: #995d00;\r\n\t\t\t--fifth-note: #0898a1;\r\n\t\t\t--white-piano-key: #ffffff;\r\n\t\t\t--black-piano-key: #516d7a;\r\n\t\t\t--track-editor-bg-pitch: #213352;\r\n\t\t\t--track-editor-bg-pitch-dim: #152032;\r\n\t\t\t--track-editor-bg-noise: #403524;\r\n\t\t\t--track-editor-bg-noise-dim: #2a1f0e;\r\n\t\t\t--indicator-primary: #5490ff;\r\n\t\t\t--mute-button-normal: #3372ff;\r\n\t\t\t--mute-button-mod: #dd872f;\r\n\t\t\t--pitch1-primary-channel: #77f7ff;\r\n\t\t\t--pitch2-secondary-channel: #0083a1;\r\n\t\t\t--pitch2-primary-channel: #35d9ff;\r\n\t\t\t--pitch2-secondary-note: #0083a1;\r\n\t\t\t--pitch2-primary-note: #a4eeff;\r\n\t\t\t--pitch3-secondary-channel: #0074c7;\r\n\t\t\t--pitch3-primary-channel: #3caeff;\r\n\t\t\t--pitch3-secondary-note: #00477a;\r\n\t\t\t--pitch3-primary-note: #aadcff;\r\n\t\t\t--pitch4-secondary-channel: #0039a1;\r\n\t\t\t--pitch4-primary-channel: #2673ff;\r\n\t\t\t--pitch4-secondary-note: #001f56;\r\n\t\t\t--pitch4-primary-note: #9bbeff;\r\n\t\t\t--pitch5-secondary-channel: #31148b;\r\n\t\t\t--pitch5-primary-channel: #7042ff;\r\n\t\t\t--pitch5-secondary-note: #190656;\r\n\t\t\t--pitch5-primary-note: #b79fff;\r\n\t\t\t--pitch6-secondary-channel: #979934;\r\n\t\t\t--pitch6-primary-channel: #fbff2f;\r\n\t\t\t--pitch6-secondary-note: #5d5e0a;\r\n\t\t\t--pitch6-primary-note: #fdff9a;\r\n\t\t\t--pitch7-secondary-channel: #b78f00;\r\n\t\t\t--pitch7-primary-channel: #ffd747;\r\n\t\t\t--pitch7-secondary-note: #5e3d00;\r\n\t\t\t--pitch7-primary-note: #ffe381;\r\n\t\t\t--pitch8-secondary-channel: #9d6500;\r\n\t\t\t--pitch8-primary-channel: #ffa400;\r\n\t\t\t--pitch8-secondary-note: #583900;\r\n\t\t\t--pitch8-primary-note: #ffd07c;\r\n\t\t\t--pitch9-secondary-channel: #744203;\r\n\t\t\t--pitch9-primary-channel: #ff8e00;\r\n\t\t\t--pitch9-secondary-note: #502d00;\r\n\t\t\t--pitch9-primary-note: #ffcb89;\r\n\t\t\t--pitch10-secondary-channel: #a32d00;\r\n\t\t\t--pitch10-primary-channel: #ff885b;\r\n\t\t\t--pitch10-secondary-note: #521700;\r\n\t\t\t--pitch10-primary-note: #ffb397;\r\n\t\t\t--noise1-secondary-channel: #6e2210;\r\n\t\t\t--noise1-primary-channel: #ff4600;\r\n\t\t\t--noise1-secondary-note: #4c1a08;\r\n\t\t\t--noise1-primary-note: #ffc9b4;\r\n\t\t\t--noise2-secondary-channel: #6a3110;\r\n\t\t\t--noise2-primary-channel: #ff782a;\r\n\t\t\t--noise2-secondary-note: #4c1f05;\r\n\t\t\t--noise2-primary-note: #ffb488;\r\n\t\t\t--noise3-secondary-channel: #72460e;\r\n\t\t\t--noise3-primary-channel: #d9871f;\r\n\t\t\t--noise3-secondary-note: #442905;\r\n\t\t\t--noise3-primary-note: #ffdcae;\r\n\t\t\t--noise4-secondary-channel: #837a0f;\r\n\t\t\t--noise4-primary-channel: #f7ea55;\r\n\t\t\t--noise4-secondary-note: #605906;\r\n\t\t\t--noise4-primary-note: #fff9ab;\r\n\t\t\t--noise5-secondary-channel: #8c8f00;\r\n\t\t\t--noise5-primary-channel: #fdff90;\r\n\t\t\t--noise5-secondary-note: #606200;\r\n\t\t\t--noise5-primary-note: #feffbc;\r\n\t\t\t--mod1-secondary-channel: #561b97;\r\n\t\t\t--mod1-primary-channel: #aa66f5;\r\n\t\t\t--mod1-secondary-note: #30075c;\r\n\t\t\t--mod1-primary-note: #cd9fff;\r\n\t\t\t--mod2-secondary-channel: #5116df;\r\n\t\t\t--mod2-primary-channel: #6b2dff;\r\n\t\t\t--mod2-secondary-note: #36138b;\r\n\t\t\t--mod2-primary-note: #bea3ff;\r\n\t\t\t--mod3-secondary-channel: #2535a1;\r\n\t\t\t--mod3-primary-channel: #3f57ff;\r\n\t\t\t--mod3-secondary-note: #0e185c;\r\n\t\t\t--mod3-primary-note: #8494ff;\r\n\t\t\t--mod4-secondary-channel: #1b5883;\r\n\t\t\t--mod4-primary-channel: #5eb7f5;\r\n\t\t\t--mod4-secondary-note: #072f4a;\r\n\t\t\t--mod4-primary-note: #63beff;\r\n\t\t\t--mod-label-primary: #24293a;\r\n\t\t\t--mod-label-secondary-text: #454d4e;\r\n\t\t\t--mod-label-primary-text: #7bd4ff;\r\n\t\t\t--disabled-note-primary: #072f4a;\r\n\t\t\t--disabled-note-secondary: #6585a7;\r\n\t\t}`,\r\n        \"fusion\": `:root {\r\n\t\t\t--page-margin: #0c0306;\r\n\t\t\t--editor-background: #0c0306;\r\n\t\t\t--primary-text: #26d9cd;\r\n\t\t\t--secondary-text: #ff6666;\r\n\t\t\t--inverted-text: white;\r\n\t\t\t--text-selection: #ffffff;\r\n\t\t\t--box-selection-fill: #ff00004d;\r\n\t\t\t--loop-accent: #ff6666;\r\n\t\t\t--link-accent: white;\r\n\t\t\t--ui-widget-background: #232323;\r\n\t\t\t--ui-widget-focus: #303030;\r\n\t\t\t--pitch-background: hsl(61deg 100% 70% / 25%);\r\n\t\t\t--tonic: #66a3ff40;\r\n\t\t\t--fifth-note: #ff666640;\r\n\t\t\t--white-piano-key: #cdcdcd;\r\n\t\t\t--black-piano-key: #232323;\r\n\t\t\t--track-editor-bg-pitch: #404040bf;\r\n\t\t\t--track-editor-bg-pitch-dim: #151515;\r\n\t\t\t--track-editor-bg-noise: #404040bf;\r\n\t\t\t--track-editor-bg-noise-dim: #151515;\r\n\t\t\t--track-editor-bg-mod: #404040bf;\r\n\t\t\t--track-editor-bg-mod-dim: #151515;\r\n\t\t\t--multiplicative-mod-slider: #ef7692;\r\n\t\t\t--overwriting-mod-slider: #f43e69;\r\n\t\t\t--indicator-primary: #26d9cd;\r\n\t\t\t--indicator-secondary: hsl(176deg 70% 25%);\r\n\t\t\t--select2-opt-group: #232323;\r\n\t\t\t--input-box-outline: #141e34;\r\n\t\t\t--mute-button-normal: #26d9cd;\r\n\t\t\t--mute-button-mod: hsl(346deg 70% 50%);\r\n\t\t\t--pitch1-secondary-channel: #bf4040;\r\n\t\t\t--pitch1-primary-channel: #ff6666;\r\n\t\t\t--pitch1-secondary-note: #bf4040;\r\n\t\t\t--pitch1-primary-note: #ff6666;\r\n\t\t\t--pitch2-secondary-channel: #bf5b40;\r\n\t\t\t--pitch2-primary-channel: #ff8766;\r\n\t\t\t--pitch2-secondary-note: #bf5b40;\r\n\t\t\t--pitch2-primary-note: #ff8766;\r\n\t\t\t--pitch3-secondary-channel: #bf7940;\r\n\t\t\t--pitch3-primary-channel: #ffab66;\r\n\t\t\t--pitch3-secondary-note: #bf7940;\r\n\t\t\t--pitch3-primary-note: #ffab66;\r\n\t\t\t--pitch4-secondary-channel: #bf9b40;\r\n\t\t\t--pitch4-primary-channel: #ffd466;\r\n\t\t\t--pitch4-secondary-note: #bf9b40;\r\n\t\t\t--pitch4-primary-note: #ffd466;\r\n\t\t\t--pitch5-secondary-channel: #bdbf40;\r\n\t\t\t--pitch5-primary-channel: #fcff66;\r\n\t\t\t--pitch5-secondary-note: #bdbf40;\r\n\t\t\t--pitch5-primary-note: #fcff66;\r\n\t\t\t--pitch6-secondary-channel: #9dbf40;\r\n\t\t\t--pitch6-primary-channel: #d6ff66;\r\n\t\t\t--pitch6-secondary-note: #9dbf40;\r\n\t\t\t--pitch6-primary-note: #d6ff66;\r\n\t\t\t--pitch7-secondary-channel: #9dbf40;\r\n\t\t\t--pitch7-primary-channel: #fcff66;\r\n\t\t\t--pitch7-secondary-note: #9dbf40;\r\n\t\t\t--pitch7-primary-note: #fcff66;\r\n\t\t\t--pitch8-secondary-channel: #bf9b40;\r\n\t\t\t--pitch8-primary-channel: #ffd466;\r\n\t\t\t--pitch8-secondary-note: #bf9b40;\r\n\t\t\t--pitch8-primary-note: #ffd466;\r\n\t\t\t--pitch9-secondary-channel: #bf5b40;\r\n\t\t\t--pitch9-primary-channel: #ffab66;\r\n\t\t\t--pitch9-secondary-note: #bf5b40;\r\n\t\t\t--pitch9-primary-note: #ffab66;\r\n\t\t\t--pitch10-secondary-channel: #d15a1f;\r\n\t\t\t--pitch10-primary-channel: #ff8766;\r\n\t\t\t--pitch10-secondary-note: #d15a1f;\r\n\t\t\t--pitch10-primary-note: #ff8766;\r\n\t\t\t--noise1-secondary-channel: #4073bf;\r\n\t\t\t--noise1-primary-channel: #66a3ff;\r\n\t\t\t--noise1-secondary-note: #4073bf;\r\n\t\t\t--noise1-primary-note: #66a3ff;\r\n\t\t\t--noise2-secondary-channel: #405dbf;\r\n\t\t\t--noise2-primary-channel: #668aff;\r\n\t\t\t--noise2-secondary-note: #405dbf;\r\n\t\t\t--noise2-primary-note: #668aff;\r\n\t\t\t--noise3-secondary-channel: #4f40bf;\r\n\t\t\t--noise3-primary-channel: #7866ff;\r\n\t\t\t--noise3-secondary-note: #4f40bf;\r\n\t\t\t--noise3-primary-note: #7866ff;\r\n\t\t\t--noise4-secondary-channel: #8840bf;\r\n\t\t\t--noise4-primary-channel: #bd66ff;\r\n\t\t\t--noise4-secondary-note: #8840bf;\r\n\t\t\t--noise4-primary-note: #bd66ff;\r\n\t\t\t--noise5-secondary-channel: #bf40b5;\r\n\t\t\t--noise5-primary-channel: #ff66f2;\r\n\t\t\t--noise5-secondary-note: #bf40b5;\r\n\t\t\t--noise5-primary-note: #ff66f2;\r\n\t\t\t--mod1-secondary-channel: #cc6666;\r\n\t\t\t--mod1-primary-channel: #ff9999;\r\n\t\t\t--mod1-secondary-note: #cc6666;\r\n\t\t\t--mod1-primary-note: #ff9999;\r\n\t\t\t--mod2-secondary-channel: #cc7766;\r\n\t\t\t--mod2-primary-channel: #ffaa99;\r\n\t\t\t--mod2-secondary-note: #bf5540;\r\n\t\t\t--mod2-primary-note: #ffaa99;\r\n\t\t\t--mod3-secondary-channel: #cc8866;\r\n\t\t\t--mod3-primary-channel: #ffbb99;\r\n\t\t\t--mod3-secondary-note: #cc8866;\r\n\t\t\t--mod3-primary-note: #ffbb99;\r\n\t\t\t--mod4-secondary-channel: #cc9966;\r\n\t\t\t--mod4-primary-channel: #ffcc99;\r\n\t\t\t--mod4-secondary-note: #cc9966;\r\n\t\t\t--mod4-primary-note: #ffcc99;\r\n\t\t\t--disabled-note-primary: #696969;\r\n\t\t\t--disabled-note-secondary: #232323;\r\n\t\t}`,\r\n        \"inverse\": `:root {\r\n\t\t\t--page-margin: #c4c8e3;\r\n\t\t\t--editor-background: #c4c8e3;\r\n\t\t\t--hover-preview: #000000;\r\n\t\t\t--playhead: #243953;\r\n\t\t\t--primary-text: black;\r\n\t\t\t--secondary-text: #855b95;\r\n\t\t\t--text-selection: rgb(132 125 255);\r\n\t\t\t--box-selection-fill: rgb(174 109 73 / 65%);\r\n\t\t\t--loop-accent: #EC897D;\r\n\t\t\t--link-accent: #4e00c8;\r\n\t\t\t--ui-widget-background: #e7e7ff;\r\n\t\t\t--ui-widget-focus: #d0d3e9;\r\n\t\t\t--pitch-background: #ffffff;\r\n\t\t\t--tonic: #bbbbbb;\r\n\t\t\t--fifth-note: #dcdcdc;\r\n\t\t\t--white-piano-key: #ffffff;\r\n\t\t\t--black-piano-key: #615f66;\r\n\t\t\t--track-editor-bg-pitch: #e9ebff;\r\n\t\t\t--track-editor-bg-pitch-dim: #e9ebff;\r\n\t\t\t--track-editor-bg-noise: #fdf2fe;\r\n\t\t\t--track-editor-bg-noise-dim: #fdf2fe;\r\n\t\t\t--track-editor-bg-mod: #dbdefe;\r\n\t\t\t--track-editor-bg-mod-dim: #dbdefe;\r\n\t\t\t--multiplicative-mod-slider: #6900b3;\r\n\t\t\t--overwriting-mod-slider: #004b9d;\r\n\t\t\t--indicator-primary: #ff633d;\r\n\t\t\t--indicator-secondary: #933822;\r\n\t\t\t--select2-opt-group: #e7e7ff;\r\n\t\t\t--input-box-outline: #e7e7ff;\r\n\t\t\t--mute-button-normal: #0072ef;\r\n\t\t\t--mute-button-mod: #002e67;\r\n\t\t\t--pitch1-secondary-channel: #b77d6e;\r\n\t\t\t--pitch1-primary-channel: #ff9d85;\r\n\t\t\t--pitch1-secondary-note: #b77d6e;\r\n\t\t\t--pitch1-primary-note: #ff9d85;\r\n\t\t\t--pitch2-secondary-channel: #be8821;\r\n\t\t\t--pitch2-primary-channel: #FFAF12;\r\n\t\t\t--pitch2-secondary-note: #be8821;\r\n\t\t\t--pitch2-primary-note: #FFAF12;\r\n\t\t\t--pitch3-secondary-channel: #3a62a4;\r\n\t\t\t--pitch3-primary-channel: #528ae6;\r\n\t\t\t--pitch3-secondary-note: #3a62a4;\r\n\t\t\t--pitch3-primary-note: #528ae6;\r\n\t\t\t--pitch4-secondary-channel: #3e8d78;\r\n\t\t\t--pitch4-primary-channel: #4EC5A7;\r\n\t\t\t--pitch4-secondary-note: #3e8d78;\r\n\t\t\t--pitch4-primary-note: #4EC5A7;\r\n\t\t\t--pitch5-secondary-channel: #84906d;\r\n\t\t\t--pitch5-primary-channel: #aabf84;\r\n\t\t\t--pitch5-secondary-note: #84906d;\r\n\t\t\t--pitch5-primary-note: #aabf84;\r\n\t\t\t--pitch6-secondary-channel: #bd6345;\r\n\t\t\t--pitch6-primary-channel: #e59a81;\r\n\t\t\t--pitch6-secondary-note: #bd6345;\r\n\t\t\t--pitch6-primary-note: #e59a81;\r\n\t\t\t--pitch7-secondary-channel: #aa592f;\r\n\t\t\t--pitch7-primary-channel: #FE813E;\r\n\t\t\t--pitch7-secondary-note: #aa592f;\r\n\t\t\t--pitch7-primary-note: #FE813E;\r\n\t\t\t--pitch8-secondary-channel: #b2a171;\r\n\t\t\t--pitch8-primary-channel: #ffd76d;\r\n\t\t\t--pitch8-secondary-note: #b2a171;\r\n\t\t\t--pitch8-primary-note: #ffd76d;\r\n\t\t\t--pitch9-secondary-channel: #4f6177;\r\n\t\t\t--pitch9-primary-channel: #798FA7;\r\n\t\t\t--pitch9-secondary-note: #4f6177;\r\n\t\t\t--pitch9-primary-note: #798FA7;\r\n\t\t\t--pitch10-secondary-channel: #165162;\r\n\t\t\t--pitch10-primary-channel: #107895;\r\n\t\t\t--pitch10-secondary-note: #165162;\r\n\t\t\t--pitch10-primary-note: #107895;\r\n\t\t\t--noise1-secondary-channel: #71617C;\r\n\t\t\t--noise1-primary-channel: #977da9;\r\n\t\t\t--noise1-secondary-note: #71617C;\r\n\t\t\t--noise1-primary-note: #977da9;\r\n\t\t\t--noise2-secondary-channel: #4a4c5b;\r\n\t\t\t--noise2-primary-channel: #707591;\r\n\t\t\t--noise2-secondary-note: #4a4c5b;\r\n\t\t\t--noise2-primary-note: #707591;\r\n\t\t\t--noise3-secondary-channel: #817c7b;\r\n\t\t\t--noise3-primary-channel: #A19D9C;\r\n\t\t\t--noise3-secondary-note: #817c7b;\r\n\t\t\t--noise3-primary-note: #A19D9C;\r\n\t\t\t--noise4-secondary-channel: #ab847b;\r\n\t\t\t--noise4-primary-channel: #EAAC9D;\r\n\t\t\t--noise4-secondary-note: #ab847b;\r\n\t\t\t--noise4-primary-note: #EAAC9D;\r\n\t\t\t--noise5-secondary-channel: #B49D74;\r\n\t\t\t--noise5-primary-channel: #dec69b;\r\n\t\t\t--noise5-secondary-note: #B49D74;\r\n\t\t\t--noise5-primary-note: #dec69b;\r\n\t\t\t--mod1-secondary-channel: #722124;\r\n\t\t\t--mod1-primary-channel: #D13A41;\r\n\t\t\t--mod1-secondary-note: #722124;\r\n\t\t\t--mod1-primary-note: #D13A41;\r\n\t\t\t--mod2-secondary-channel: #213657;\r\n\t\t\t--mod2-primary-channel: #34558B;\r\n\t\t\t--mod2-secondary-note: #213657;\r\n\t\t\t--mod2-primary-note: #34558B;\r\n\t\t\t--mod3-secondary-channel: #555D46;\r\n\t\t\t--mod3-primary-channel: #848f6d;\r\n\t\t\t--mod3-secondary-note: #555D46;\r\n\t\t\t--mod3-primary-note: #848f6d;\r\n\t\t\t--mod4-secondary-channel: #71617C;\r\n\t\t\t--mod4-primary-channel: #a68ab9;\r\n\t\t\t--mod4-secondary-note: #71617C;\r\n\t\t\t--mod4-primary-note: #a68ab9;\r\n\t\t\t--mod-label-primary: #e9e9e9;\r\n\t\t\t--mod-label-secondary-text: #707070;\r\n\t\t\t--disabled-note-primary: #959595;\r\n\t\t\t--disabled-note-secondary: #6e6e6e;\r\n\t\t\t}`,\r\n        \"nebula\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #040410;\r\n\t\t\t--editor-background: #150e1f;\r\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t--secondary-text: #8C849A;\r\n\t\t\t--text-selection: rgba(141,79,201,0.99);\r\n\t\t\t--box-selection-fill: #311E44;\r\n\t\t\t--loop-accent: #CC688C;\r\n\t\t\t--link-accent: #817DC9;\r\n\t\t\t--ui-widget-background: #44394F;\r\n\t\t\t--ui-widget-focus: #7A6386;\r\n\t\t\t--pitch-background: #393e4f40;\r\n\t\t\t--tonic: #7D5C9EC0;\r\n\t\t\t--fifth-note: #ab77bd50;\r\n\t\t\t--white-piano-key: #EEEEEE;\r\n\t\t\t--black-piano-key: #5F5566;\r\n\t\t\t--use-color-formula: true;\r\n\t\t\t--track-editor-bg-pitch: #46374C;\r\n\t\t\t--track-editor-bg-pitch-dim: #1F1C2850;\r\n\t\t\t--track-editor-bg-noise: #3D353B;\r\n\t\t\t--track-editor-bg-noise-dim: #16131550;\r\n\t\t\t--track-editor-bg-mod: #623F4C;\r\n\t\t\t--track-editor-bg-mod-dim: #361A2450;\r\n\t\t\t--multiplicative-mod-slider: #9F6E6A;\r\n\t\t\t--overwriting-mod-slider: #A664B5;\r\n\t\t\t--indicator-primary: #CC6B8E;\r\n\t\t\t--indicator-secondary: #44394F;\r\n\t\t\t--select2-opt-group: #6A576F;\r\n\t\t\t--input-box-outline: #222;\r\n\t\t\t--mute-button-normal: #BF91DC;\r\n\t\t\t--mute-button-mod: #DC8C9A;\r\n\t\t\t--mod-label-primary: #3A2840;\r\n\t\t\t--mod-label-secondary-text: #62485E;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--pitch-secondary-channel-hue: -96;\r\n\t\t\t--pitch-secondary-channel-hue-scale: 4.2;\r\n\t\t\t--pitch-secondary-channel-sat: 50.3;\r\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-channel-hue: -96;\r\n\t\t\t--pitch-primary-channel-hue-scale: 4.2;\r\n\t\t\t--pitch-primary-channel-sat: 70;\r\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-secondary-note-hue: -96;\r\n\t\t\t--pitch-secondary-note-hue-scale: 4.2;\r\n\t\t\t--pitch-secondary-note-sat: 70.9;\r\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-note-lum: 25;\r\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-note-hue: -96;\r\n\t\t\t--pitch-primary-note-hue-scale: 4.2;\r\n\t\t\t--pitch-primary-note-sat: 90;\r\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t--noise-secondary-channel-hue: 16;\r\n\t\t\t--noise-secondary-channel-hue-scale: -1.33;\r\n\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t--noise-primary-channel-hue: 16;\r\n\t\t\t--noise-primary-channel-hue-scale: -1.33;\r\n\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t--noise-secondary-note-hue: 12;\r\n\t\t\t--noise-secondary-note-hue-scale: -1.33;\r\n\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t--noise-primary-note-hue: 12;\r\n\t\t\t--noise-primary-note-hue-scale: -1.33;\r\n\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t--mod-secondary-channel-hue: 12;\r\n\t\t\t--mod-secondary-channel-hue-scale: -.75;\r\n\t\t\t--mod-secondary-channel-sat: 50;\r\n\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t--mod-primary-channel-hue: 12;\r\n\t\t\t--mod-primary-channel-hue-scale: -.75;\r\n\t\t\t--mod-primary-channel-sat: 70;\r\n\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t--mod-secondary-note-hue: 12;\r\n\t\t\t--mod-secondary-note-hue-scale: -.75;\r\n\t\t\t--mod-secondary-note-sat: 75;\r\n\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t--mod-secondary-note-lum: 45;\r\n\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t--mod-primary-note-hue: 12;\r\n\t\t\t--mod-primary-note-hue-scale: -.75;\r\n\t\t\t--mod-primary-note-sat: 85;\r\n\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t--disabled-note-primary: #aaa;\r\n\t\t}`,\r\n        \"roe light\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #fff5f5;\r\n\t\t\t--editor-background: #fff5f5;\r\n\t\t\t--hover-preview: #0e8bf1;\r\n\t\t\t--playhead: 000;\r\n\t\t\t--primary-text: #0e8bf1;\r\n\t\t\t--secondary-text: #f10e0e;\r\n\t\t\t--inverted-text: white;\r\n\t\t\t--text-selection: #ff4444fc;\r\n\t\t\t--box-selection-fill: #ff00004d;\r\n\t\t\t--loop-accent: #9a75ff;\r\n\t\t\t--link-accent: #ff7070;\r\n\t\t\t--ui-widget-background: #bdc9e5;\r\n\t\t\t--ui-widget-focus: #a3b7e5;\r\n\t\t\t--pitch-background: #d0c7db;\r\n\t\t\t--tonic: #bed3e4;\r\n\t\t\t--fifth-note: #e7c6c6;\r\n\t\t\t--white-piano-key: #cdcdcd;\r\n\t\t\t--black-piano-key: #232323;\r\n\t\t\t--track-editor-bg-pitch: #e5e1ea;\r\n\t\t\t--track-editor-bg-pitch-dim: #cbc4d4;\r\n\t\t\t--track-editor-bg-noise: #e0ddee;\r\n\t\t\t--track-editor-bg-noise-dim: #c1bade;\r\n\t\t\t--track-editor-bg-mod: #d8e6f3;\r\n\t\t\t--track-editor-bg-mod-dim: #b1cce7;\r\n\t\t\t--multiplicative-mod-slider: #8097cb;\r\n\t\t\t--overwriting-mod-slider: #8097cb;\r\n\t\t\t--indicator-primary: #FF2A2A;\r\n\t\t\t--indicator-secondary: #92a6d3;\r\n\t\t\t--select2-opt-group: #b6c4e2;\r\n\t\t\t--input-box-outline: #bdc9e5;\r\n\t\t\t--mute-button-normal: #66baff;\r\n\t\t\t--mute-button-mod: #1a98ff;\r\n\t\t\t--pitch1-secondary-channel: #273c90;\r\n\t\t\t--pitch1-primary-channel: #476BFF;\r\n\t\t\t--pitch1-secondary-note: #273c90;\r\n\t\t\t--pitch1-primary-note: #476BFF;\r\n\t\t\t--pitch2-secondary-channel: #3a3898;\r\n\t\t\t--pitch2-primary-channel: #625FFB;\r\n\t\t\t--pitch2-secondary-note: #3a3898;\r\n\t\t\t--pitch2-primary-note: #625FFB;\r\n\t\t\t--pitch3-secondary-channel: #542780;\r\n\t\t\t--pitch3-primary-channel: #9C49EC;\r\n\t\t\t--pitch3-secondary-note: #542780;\r\n\t\t\t--pitch3-primary-note: #9C49EC;\r\n\t\t\t--pitch4-secondary-channel: #84225d;\r\n\t\t\t--pitch4-primary-channel: #fd3fb1;\r\n\t\t\t--pitch4-secondary-note: #84225d;\r\n\t\t\t--pitch4-primary-note: #fd3fb1;\r\n\t\t\t--pitch5-secondary-channel: #8d2323;\r\n\t\t\t--pitch5-primary-channel: #ff3f3f;\r\n\t\t\t--pitch5-secondary-note: #8d2323;\r\n\t\t\t--pitch5-primary-note: #ff3f3f;\r\n\t\t\t--pitch6-secondary-channel: #84225d;\r\n\t\t\t--pitch6-primary-channel: #fd3fb1;\r\n\t\t\t--pitch6-secondary-note: #84225d;\r\n\t\t\t--pitch6-primary-note: #fd3fb1;\r\n\t\t\t--pitch7-secondary-channel: #542780;\r\n\t\t\t--pitch7-primary-channel: #9C49EC;\r\n\t\t\t--pitch7-secondary-note: #542780;\r\n\t\t\t--pitch7-primary-note: #9C49EC;\r\n\t\t\t--pitch8-secondary-channel: #3a3898;\r\n\t\t\t--pitch8-primary-channel: #625FFB;\r\n\t\t\t--pitch8-secondary-note: #3a3898;\r\n\t\t\t--pitch8-primary-note: #625FFB;\r\n\t\t\t--pitch9-secondary-channel: #273c90;\r\n\t\t\t--pitch9-primary-channel: #476BFF;\r\n\t\t\t--pitch9-secondary-note: #273c90;\r\n\t\t\t--pitch9-primary-note: #476BFF;\r\n\t\t\t--pitch10-secondary-channel: #165a93;\r\n\t\t\t--pitch10-primary-channel: #299EFF;\r\n\t\t\t--pitch10-secondary-note: #165a93;\r\n\t\t\t--pitch10-primary-note: #299EFF;\r\n\t\t\t--noise1-secondary-channel: #336bdb;\r\n\t\t\t--noise1-primary-channel: #4281FF;\r\n\t\t\t--noise1-secondary-note: #336bdb;\r\n\t\t\t--noise1-primary-note: #4281FF;\r\n\t\t\t--noise2-secondary-channel: #5e38dc;\r\n\t\t\t--noise2-primary-channel: #7347FF;\r\n\t\t\t--noise2-secondary-note: #5e38dc;\r\n\t\t\t--noise2-primary-note: #7347FF;\r\n\t\t\t--noise3-secondary-channel: #7d3097;\r\n\t\t\t--noise3-primary-channel: #9F3CBF;\r\n\t\t\t--noise3-secondary-note: #7d3097;\r\n\t\t\t--noise3-primary-note: #9F3CBF;\r\n\t\t\t--noise4-secondary-channel: #ad2559;\r\n\t\t\t--noise4-primary-channel: #D3326F;\r\n\t\t\t--noise4-secondary-note: #ad2559;\r\n\t\t\t--noise4-primary-note: #D3326F;\r\n\t\t\t--noise5-secondary-channel: #d02525;\r\n\t\t\t--noise5-primary-channel: #FF2A2A;\r\n\t\t\t--noise5-secondary-note: #d02525;\r\n\t\t\t--noise5-primary-note: #FF2A2A;\r\n\t\t\t--mod1-secondary-channel: #35415a;\r\n\t\t\t--mod1-primary-channel: #47587a;\r\n\t\t\t--mod1-secondary-note: #35415a;\r\n\t\t\t--mod1-primary-note: #47587a;\r\n\t\t\t--mod2-secondary-channel: #5a5374;\r\n\t\t\t--mod2-primary-channel: #716791;\r\n\t\t\t--mod2-secondary-note: #5a5374;\r\n\t\t\t--mod2-primary-note: #716791;\r\n\t\t\t--mod3-secondary-channel: #53385c;\r\n\t\t\t--mod3-primary-channel: #6f4c7b;\r\n\t\t\t--mod3-secondary-note: #53385c;\r\n\t\t\t--mod3-primary-note: #6f4c7b;\r\n\t\t\t--mod4-secondary-channel: #7e4e60;\r\n\t\t\t--mod4-primary-channel: #9e6279;\r\n\t\t\t--mod4-secondary-note: #7e4e60;\r\n\t\t\t--mod4-primary-note: #9e6279;\r\n\t\t\t--mod-label-primary: #d0c7db;\r\n\t\t\t--mod-label-secondary-text: #cb3434;\r\n\t\t\t--disabled-note-primary: #616161;\r\n\t\t\t--disabled-note-secondary: #474747;\r\n\t\t}\r\n\t\t.promptContainerBG::before {\r\n\t\t\tbox-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);\r\n\t\t}`,\r\n        \"energized\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #000a08;\r\n\t\t\t--editor-background: #000a08;\r\n\t\t\t--hover-preview: #ffffcc;\r\n\t\t\t--playhead: #ccfff5;\r\n\t\t\t--secondary-text: #d9d98c;\r\n\t\t\t--text-selection: #ffff6659;\r\n\t\t\t--box-selection-fill: #ffffff33;\r\n\t\t\t--loop-accent: #ffff00;\r\n\t\t\t--link-accent: #00ffcc;\r\n\t\t\t--ui-widget-background: #141f1d;\r\n\t\t\t--ui-widget-focus: #24423d;\r\n\t\t\t--pitch-background: #001410;\r\n\t\t\t--tonic: #00241d;\r\n\t\t\t--fifth-note: #ffff6633;\r\n\t\t\t--white-piano-key: #66998f;\r\n\t\t\t--black-piano-key: #141f1d;\r\n\t\t\t--track-editor-bg-pitch: #66998f40;\r\n\t\t\t--track-editor-bg-pitch-dim: #293d3940;\r\n\t\t\t--track-editor-bg-noise: #66998f40;\r\n\t\t\t--track-editor-bg-noise-dim: #293d3940;\r\n\t\t\t--track-editor-bg-mod: #99996640;\r\n\t\t\t--track-editor-bg-mod-dim: #3d3d2940;\r\n\t\t\t--multiplicative-mod-slider: #ffff00;\r\n\t\t\t--overwriting-mod-slider: #00ffcc;\r\n\t\t\t--indicator-primary: #ffff00;\r\n\t\t\t--indicator-secondary: #141f1d;\r\n\t\t\t--select2-opt-group: #1b312e;\r\n\t\t\t--input-box-outline: #141f1d;\r\n\t\t\t--mute-button-normal: #00ffcc;\r\n\t\t\t--mute-button-mod: #00997a;\r\n\t\t\t--pitch1-secondary-channel: #bfbf40;\r\n\t\t\t--pitch1-primary-channel: #ffff64;\r\n\t\t\t--pitch1-secondary-note: #bfbf40;\r\n\t\t\t--pitch1-primary-note: #ffff64;\r\n\t\t\t--pitch2-secondary-channel: #a2bf40;\r\n\t\t\t--pitch2-primary-channel: #e0ff7d;\r\n\t\t\t--pitch2-secondary-note: #a2bf40;\r\n\t\t\t--pitch2-primary-note: #e0ff7d;\r\n\t\t\t--pitch3-secondary-channel: #75bf40;\r\n\t\t\t--pitch3-primary-channel: #c1ff96;\r\n\t\t\t--pitch3-secondary-note: #75bf40;\r\n\t\t\t--pitch3-primary-note: #c1ff96;\r\n\t\t\t--pitch4-secondary-channel: #40bf51;\r\n\t\t\t--pitch4-primary-channel: #a2ffaf;\r\n\t\t\t--pitch4-secondary-note: #40bf51;\r\n\t\t\t--pitch4-primary-note: #a2ffaf;\r\n\t\t\t--pitch5-secondary-channel: #40bf86;\r\n\t\t\t--pitch5-primary-channel: #83ffc8;\r\n\t\t\t--pitch5-secondary-note: #40bf86;\r\n\t\t\t--pitch5-primary-note: #83ffc8;\r\n\t\t\t--pitch6-secondary-channel: #40bfa6;\r\n\t\t\t--pitch6-primary-channel: #64ffe1;\r\n\t\t\t--pitch6-secondary-note: #40bfa6;\r\n\t\t\t--pitch6-primary-note: #64ffe1;\r\n\t\t\t--pitch7-secondary-channel: #40bf86;\r\n\t\t\t--pitch7-primary-channel: #83ffc8;\r\n\t\t\t--pitch7-secondary-note: #40bf86;\r\n\t\t\t--pitch7-primary-note: #83ffc8;\r\n\t\t\t--pitch8-secondary-channel: #40bf51;\r\n\t\t\t--pitch8-primary-channel: #a2ffaf;\r\n\t\t\t--pitch8-secondary-note: #40bf51;\r\n\t\t\t--pitch8-primary-note: #a2ffaf;\r\n\t\t\t--pitch9-secondary-channel: #75bf40;\r\n\t\t\t--pitch9-primary-channel: #c1ff96;\r\n\t\t\t--pitch9-secondary-note: #75bf40;\r\n\t\t\t--pitch9-primary-note: #c1ff96;\r\n\t\t\t--pitch10-secondary-channel: #a2bf40;\r\n\t\t\t--pitch10-primary-channel: #e0ff7d;\r\n\t\t\t--pitch10-secondary-note: #a2bf40;\r\n\t\t\t--pitch10-primary-note: #e0ff7d;\r\n\t\t\t--noise1-secondary-channel: #a6a659;\r\n\t\t\t--noise1-primary-channel: #ffffcc;\r\n\t\t\t--noise1-secondary-note: #a6a659;\r\n\t\t\t--noise1-primary-note: #ffffcc;\r\n\t\t\t--noise2-secondary-channel: #94a659;\r\n\t\t\t--noise2-primary-channel: #f3ffcc;\r\n\t\t\t--noise2-secondary-note: #94a659;\r\n\t\t\t--noise2-primary-note: #f3ffcc;\r\n\t\t\t--noise3-secondary-channel: #79a659;\r\n\t\t\t--noise3-primary-channel: #e1ffcc;\r\n\t\t\t--noise3-secondary-note: #79a659;\r\n\t\t\t--noise3-primary-note: #e1ffcc;\r\n\t\t\t--noise4-secondary-channel: #94a659;\r\n\t\t\t--noise4-primary-channel: #f3ffcc;\r\n\t\t\t--noise4-secondary-note: #94a659;\r\n\t\t\t--noise4-primary-note: #f3ffcc;\r\n\t\t\t--noise5-secondary-channel: #a6a659;\r\n\t\t\t--noise5-primary-channel: #ffffcc;\r\n\t\t\t--noise5-secondary-note: #a6a659;\r\n\t\t\t--noise5-primary-note: #ffffcc;\r\n\t\t\t--mod1-secondary-channel: #a3a329;\r\n\t\t\t--mod1-primary-channel: #ffff00;\r\n\t\t\t--mod1-secondary-note: #a3a329;\r\n\t\t\t--mod1-primary-note: #ffff00;\r\n\t\t\t--mod2-secondary-channel: #a38529;\r\n\t\t\t--mod2-primary-channel: #ffbf00;\r\n\t\t\t--mod2-secondary-note: #a38529;\r\n\t\t\t--mod2-primary-note: #ffbf00;\r\n\t\t\t--mod3-secondary-channel: #a36629;\r\n\t\t\t--mod3-primary-channel: #ff7f00;\r\n\t\t\t--mod3-secondary-note: #a36629;\r\n\t\t\t--mod3-primary-note: #ff7f00;\r\n\t\t\t--mod4-secondary-channel: #a38529;\r\n\t\t\t--mod4-primary-channel: #ffbf00;\r\n\t\t\t--mod4-secondary-note: #a38529;\r\n\t\t\t--mod4-primary-note: #ffbf00;\r\n\t\t\t--mod-label-primary: #141f1d;\r\n\t\t\t--mod-label-secondary-text: #d9d98c;\r\n\t\t\t--mod-label-primary-text: white;\r\n\t\t\t--disabled-note-primary: #808080;\r\n\t\t\t--disabled-note-secondary: #666666;\r\n\t\t}`,\r\n        \"neapolitan\": `:root {\r\n\t\t\t--page-margin: #120807;\r\n\t\t\t--editor-background: #120807;\r\n\t\t\t--hover-preview: #e79a82;\r\n\t\t\t--playhead: #e79a82;\r\n\t\t\t--primary-text: #decdbf;\r\n\t\t\t--secondary-text: #fa99bb;\r\n\t\t\t--text-selection: #990036;\r\n\t\t\t--loop-accent: #f6377a;\r\n\t\t\t--link-accent: #f6377a;\r\n\t\t\t--ui-widget-background: #24160f;\r\n\t\t\t--ui-widget-focus: #362217;\r\n\t\t\t--pitch-background: #1e1106;\r\n\t\t\t--tonic: #382414;\r\n\t\t\t--fifth-note: #41240c;\r\n\t\t\t--white-piano-key: #e1c5b7;\r\n\t\t\t--black-piano-key: #482c1e;\r\n\t\t\t--white-piano-key-text: black;\r\n\t\t\t--black-piano-key-text: white;\r\n\t\t\t--track-editor-bg-pitch: #4d2a19;\r\n\t\t\t--track-editor-bg-pitch-dim: #27150c;\r\n\t\t\t--track-editor-bg-noise: #4d2a19;\r\n\t\t\t--track-editor-bg-noise-dim: #27150c;\r\n\t\t\t--track-editor-bg-mod: #4d2a19;\r\n\t\t\t--track-editor-bg-mod-dim: #27150c;\r\n\t\t\t--multiplicative-mod-slider: #decdbf;\r\n\t\t\t--overwriting-mod-slider: #decdbf;\r\n\t\t\t--indicator-primary: #decdbf;\r\n\t\t\t--indicator-secondary: #362217;\r\n\t\t\t--select2-opt-group: #24160f;\r\n\t\t\t--input-box-outline: #24160f;\r\n\t\t\t--mute-button-normal: #ff66a1;\r\n\t\t\t--mute-button-mod: #e61968;\r\n\t\t\t--pitch1-secondary-channel: #680029;\r\n\t\t\t--pitch1-primary-channel: #cc0052;\r\n\t\t\t--pitch1-secondary-note: #660029;\r\n\t\t\t--pitch1-primary-note: #cc0052;\r\n\t\t\t--pitch2-secondary-channel: #7e1b43;\r\n\t\t\t--pitch2-primary-channel: #d32e71;\r\n\t\t\t--pitch2-secondary-note: #7e1b43;\r\n\t\t\t--pitch2-primary-note: #d32e71;\r\n\t\t\t--pitch3-secondary-channel: #aa275e;\r\n\t\t\t--pitch3-primary-channel: #da5d91;\r\n\t\t\t--pitch3-secondary-note: #aa275e;\r\n\t\t\t--pitch3-primary-note: #da5d91;\r\n\t\t\t--pitch4-secondary-channel: #cc3878;\r\n\t\t\t--pitch4-primary-channel: #e18bb0;\r\n\t\t\t--pitch4-secondary-note: #cc3878;\r\n\t\t\t--pitch4-primary-note: #e18bb0;\r\n\t\t\t--pitch5-secondary-channel: #d06c9b;\r\n\t\t\t--pitch5-primary-channel: #e9bad0;\r\n\t\t\t--pitch5-secondary-note: #d06c9b;\r\n\t\t\t--pitch5-primary-note: #e9bad0;\r\n\t\t\t--pitch6-secondary-channel: #c9acc5;\r\n\t\t\t--pitch6-primary-channel: #f0e8ef;\r\n\t\t\t--pitch6-secondary-note: #c9acc5;\r\n\t\t\t--pitch6-primary-note: #f0e8ef;\r\n\t\t\t--pitch7-secondary-channel: #d06c9b;\r\n\t\t\t--pitch7-primary-channel: #e9bad0;\r\n\t\t\t--pitch7-secondary-note: #d06c9b;\r\n\t\t\t--pitch7-primary-note: #e9bad0;\r\n\t\t\t--pitch8-secondary-channel: #cc3878;\r\n\t\t\t--pitch8-primary-channel: #e18bb0;\r\n\t\t\t--pitch8-secondary-note: #cc3878;\r\n\t\t\t--pitch8-primary-note: #e18bb0;\r\n\t\t\t--pitch9-secondary-channel: #aa275e;\r\n\t\t\t--pitch9-primary-channel: #da5d91;\r\n\t\t\t--pitch9-secondary-note: #aa275e;\r\n\t\t\t--pitch9-primary-note: #da5d91;\r\n\t\t\t--pitch10-secondary-channel: #7e1b43;\r\n\t\t\t--pitch10-primary-channel: #d32e71;\r\n\t\t\t--pitch10-secondary-note: #7e1b43;\r\n\t\t\t--pitch10-primary-note: #d32e71;\r\n\t\t\t--noise1-secondary-channel: #683a37;\r\n\t\t\t--noise1-primary-channel: #A85F5A;\r\n\t\t\t--noise1-secondary-note: #683a37;\r\n\t\t\t--noise1-primary-note: #A85F5A;\r\n\t\t\t--noise2-secondary-channel: #7c4a41;\r\n\t\t\t--noise2-primary-channel: #B47A70;\r\n\t\t\t--noise2-secondary-note: #7c4a41;\r\n\t\t\t--noise2-primary-note: #B47A70;\r\n\t\t\t--noise3-secondary-channel: #935f4d;\r\n\t\t\t--noise3-primary-channel: #c09587;\r\n\t\t\t--noise3-secondary-note: #935f4d;\r\n\t\t\t--noise3-primary-note: #C09587;\r\n\t\t\t--noise4-secondary-channel: #aa795a;\r\n\t\t\t--noise4-primary-channel: #cdb09d;\r\n\t\t\t--noise4-secondary-note: #aa795a;\r\n\t\t\t--noise4-primary-note: #CDAF9D;\r\n\t\t\t--noise5-secondary-channel: #bb987c;\r\n\t\t\t--noise5-primary-channel: #decdbf;\r\n\t\t\t--noise5-secondary-note: #bb987c;\r\n\t\t\t--noise5-primary-note: #decdbf;\r\n\t\t\t--mod1-secondary-channel: #6ca784;\r\n\t\t\t--mod1-primary-channel: #accdb9;\r\n\t\t\t--mod1-secondary-note: #6ca784;\r\n\t\t\t--mod1-primary-note: #accdb9;\r\n\t\t\t--mod2-secondary-channel: #7daa9f;\r\n\t\t\t--mod2-primary-channel: #bbd3cd;\r\n\t\t\t--mod2-secondary-note: #7daa9f;\r\n\t\t\t--mod2-primary-note: #bbd3cd;\r\n\t\t\t--mod3-secondary-channel: #70a3a9;\r\n\t\t\t--mod3-primary-channel: #afcccf;\r\n\t\t\t--mod3-secondary-note: #70a3a9;\r\n\t\t\t--mod3-primary-note: #afcccf;\r\n\t\t\t--mod4-secondary-channel: #5698b8;\r\n\t\t\t--mod4-primary-channel: #9ec3d6;\r\n\t\t\t--mod4-secondary-note: #5698b8;\r\n\t\t\t--mod4-primary-note: #9ec3d6;\r\n\t\t\t--mod-label-primary: #24160f;\r\n\t\t\t--mod-label-secondary-text: #E5AFC2;\r\n\t\t\t--mod-label-primary-text: #decdbf;\r\n\t\t\t--disabled-note-primary: #bababa;\r\n\t\t\t--disabled-note-secondary: #878787;\r\n\t\t}`,\r\n        \"poly\":\r\n\t\t\t`:root {\r\n\t\t\t--page-margin: #000;\r\n\t\t\t--editor-background: #000;\r\n\t\t\t--hover-preview: #808080;\r\n\t\t\t--playhead: #808080;\r\n\t\t\t--secondary-text: #cccccc;\r\n\t\t\t--text-selection: #696969;\r\n\t\t\t--box-selection-fill: #cccccc40;\r\n\t\t\t--loop-accent: #808080;\r\n\t\t\t--link-accent: white;\r\n\t\t\t--ui-widget-background: #232323;\r\n\t\t\t--ui-widget-focus: #303030;\r\n\t\t\t--pitch-background: #1a1a1a;\r\n\t\t\t--tonic: #262626;\r\n\t\t\t--fifth-note: #0d0d0d;\r\n\t\t\t--white-piano-key: #808080;\r\n\t\t\t--black-piano-key: #232323;\r\n\t\t\t--use-color-formula: true;\r\n\t\t\t--track-editor-bg-pitch: #262626;\r\n\t\t\t--track-editor-bg-pitch-dim: #1a1a1a;\r\n\t\t\t--track-editor-bg-noise: #262626;\r\n\t\t\t--track-editor-bg-noise-dim: #1a1a1a;\r\n\t\t\t--track-editor-bg-mod: #262626;\r\n\t\t\t--track-editor-bg-mod-dim: #1a1a1a;\r\n\t\t\t--multiplicative-mod-slider: #808080;\r\n\t\t\t--overwriting-mod-slider: #808080;\r\n\t\t\t--indicator-primary: #808080;\r\n\t\t\t--indicator-secondary: #333333;\r\n\t\t\t--select2-opt-group: #232323;\r\n\t\t\t--input-box-outline: #222;\r\n\t\t\t--mute-button-normal: #808080;\r\n\t\t\t--mute-button-mod: #808080;\r\n\t\t\t--mod-label-primary: #232323;\r\n\t\t\t--mod-label-secondary-text: #696969;\r\n\t\t\t--mod-label-primary-text: #cdcdcd;\r\n\t\t\t--pitch-secondary-channel-hue: 208;\r\n\t\t\t--pitch-secondary-channel-hue-scale: 10;\r\n\t\t\t--pitch-secondary-channel-sat: 100;\r\n\t\t\t--pitch-secondary-channel-sat-scale: 0;\r\n\t\t\t--pitch-secondary-channel-lum: 88;\r\n\t\t\t--pitch-secondary-channel-lum-scale: 0;\r\n\t\t\t--pitch-primary-channel-hue: 207;\r\n\t\t\t--pitch-primary-channel-hue-scale: 10;\r\n\t\t\t--pitch-primary-channel-sat: 100;\r\n\t\t\t--pitch-primary-channel-sat-scale: 0;\r\n\t\t\t--pitch-primary-channel-lum: 910;\r\n\t\t\t--pitch-primary-channel-lum-scale: 0;\r\n\t\t\t--pitch-secondary-note-hue: 208;\r\n\t\t\t--pitch-secondary-note-hue-scale: 10;\r\n\t\t\t--pitch-secondary-note-sat: 100;\r\n\t\t\t--pitch-secondary-note-sat-scale: 0;\r\n\t\t\t--pitch-secondary-note-lum: 88;\r\n\t\t\t--pitch-secondary-note-lum-scale: 0;\r\n\t\t\t--pitch-primary-note-hue: 208;\r\n\t\t\t--pitch-primary-note-hue-scale: 10;\r\n\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t--pitch-primary-note-sat-scale: 0;\r\n\t\t\t--pitch-primary-note-lum: 910;\r\n\t\t\t--pitch-primary-note-lum-scale: 0;\r\n\t\t\t--noise-secondary-channel-hue: 328;\r\n\t\t\t--noise-secondary-channel-hue-scale: 10;\r\n\t\t\t--noise-secondary-channel-sat: 100;\r\n\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t--noise-secondary-channel-lum: 88;\r\n\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t--noise-primary-channel-hue: 327;\r\n\t\t\t--noise-primary-channel-hue-scale: 10;\r\n\t\t\t--noise-primary-channel-sat: 100;\r\n\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t--noise-primary-channel-lum: 910;\r\n\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t--noise-secondary-note-hue: 328;\r\n\t\t\t--noise-secondary-note-hue-scale: 10;\r\n\t\t\t--noise-secondary-note-sat: 100;\r\n\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t--noise-secondary-note-lum: 88;\r\n\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t--noise-primary-note-hue: 327;\r\n\t\t\t--noise-primary-note-hue-scale: 10;\r\n\t\t\t--noise-primary-note-sat: 100;\r\n\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t--noise-primary-note-lum: 910;\r\n\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t--mod-secondary-channel-hue: 87;\r\n\t\t\t--mod-secondary-channel-hue-scale: 10;\r\n\t\t\t--mod-secondary-channel-sat: 100;\r\n\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t--mod-secondary-channel-lum: 88;\r\n\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t--mod-primary-channel-hue: 88;\r\n\t\t\t--mod-primary-channel-hue-scale: 10;\r\n\t\t\t--mod-primary-channel-sat: 100;\r\n\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t--mod-primary-channel-lum: 910;\r\n\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t--mod-secondary-note-hue: 87;\r\n\t\t\t--mod-secondary-note-hue-scale: 10;\r\n\t\t\t--mod-secondary-note-sat: 100;\r\n\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t--mod-secondary-note-lum: 88;\r\n\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t--mod-primary-note-hue: 88;\r\n\t\t\t--mod-primary-note-hue-scale: 10;\r\n\t\t\t--mod-primary-note-sat: 100;\r\n\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t--mod-primary-note-lum: 910;\r\n\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t--disabled-note-primary: #c6c6c6;\r\n\t\t\t--disabled-note-secondary: #8c8c8c;\r\n\t\t}`,\r\n\t\t\"blutonium\":\r\n\t\t\t`:root {\r\n\t\t\t--page-margin: #02070D;\r\n\t\t\t--editor-background: #02070D;\r\n\t\t\t--primary-text: #9bd1ee;\r\n\t\t\t--secondary-text: #5a6da8;\r\n\t\t\t--text-selection: rgb(68 68 255 / 99%);\r\n\t\t\t--box-selection-fill: rgb(0 0 255 / 30%);\r\n\t\t\t--loop-accent: #024aca;\r\n\t\t\t--link-accent: #024aca;\r\n\t\t\t--ui-widget-background: #161c2e;\r\n\t\t\t--ui-widget-focus: #262c3e;\r\n\t\t\t--pitch-background: #22272D;\r\n\t\t\t--tonic: #1b3056;\r\n\t\t\t--fifth-note: #344051;\r\n\t\t\t--white-piano-key: #a6c6ed;\r\n\t\t\t--black-piano-key: #2f4687;\r\n\t\t\t--track-editor-bg-pitch: #25284c;\r\n\t\t\t--track-editor-bg-pitch-dim: #211c26;\r\n\t\t\t--track-editor-bg-noise: #261f42;\r\n\t\t\t--track-editor-bg-noise-dim: #1a152d;\r\n\t\t\t--track-editor-bg-mod: #183049;\r\n\t\t\t--track-editor-bg-mod-dim: #102132;\r\n\t\t\t--multiplicative-mod-slider: #344a7f;\r\n\t\t\t--overwriting-mod-slider: #344a7f;\r\n\t\t\t--indicator-primary: #024aca;\r\n\t\t\t--indicator-secondary: #00177d;\r\n\t\t\t--select2-opt-group: #141e34;\r\n\t\t\t--input-box-outline: #141e34;\r\n\t\t\t--mute-button-normal: #273b9d;\r\n\t\t\t--mute-button-mod: #27989d;\r\n\t\t\t--pitch1-secondary-channel: hsl(200, 100%, 40%);\r\n\t\t\t--pitch1-primary-channel: #99ddff;\r\n\t\t\t--pitch1-secondary-note: hsl(200, 100%, 40%);\r\n\t\t\t--pitch1-primary-note: #99ddff;\r\n\t\t\t--pitch2-secondary-channel: \thsl(212, 100%, 34%);\r\n\t\t\t--pitch2-primary-channel: #5BA8FF;\r\n\t\t\t--pitch2-secondary-note: hsl(212, 100%, 34%);\r\n\t\t\t--pitch2-primary-note: #5BA8FF;\r\n\t\t\t--pitch3-secondary-channel: #024ACA;\r\n\t\t\t--pitch3-primary-channel: #0A89FF;\r\n\t\t\t--pitch3-secondary-note: #024ACA;\r\n\t\t\t--pitch3-primary-note: #0A89FF;\r\n\t\t\t--pitch4-secondary-channel: #00177D;\r\n\t\t\t--pitch4-primary-channel: #024ACA;\r\n\t\t\t--pitch4-secondary-note: #00177D;\r\n\t\t\t--pitch4-primary-note: #024ACA;\r\n\t\t\t--pitch5-secondary-channel: #000e4e;\r\n\t\t\t--pitch5-primary-channel: #0023bf;\r\n\t\t\t--pitch5-secondary-note: #000e4e;\r\n\t\t\t--pitch5-primary-note: #0023bf;\r\n\t\t\t--pitch6-secondary-channel: #8990FE;\r\n\t\t\t--pitch6-primary-channel: #C2C6FF;\r\n\t\t\t--pitch6-secondary-note: #8990FE;\r\n\t\t\t--pitch6-primary-note: #C2C6FF;\r\n\t\t\t--pitch7-secondary-channel: #5E65D3;\r\n\t\t\t--pitch7-primary-channel: #8990FE;\r\n\t\t\t--pitch7-secondary-note: #5E65D3;\r\n\t\t\t--pitch7-primary-note: #8990FE;\r\n\t\t\t--pitch8-secondary-channel: #3138A6;\r\n\t\t\t--pitch8-primary-channel: #5E65D3;\r\n\t\t\t--pitch8-secondary-note: #3138A6;\r\n\t\t\t--pitch8-primary-note: #5E65D3;\r\n\t\t\t--pitch9-secondary-channel: #1B0B7F;\r\n\t\t\t--pitch9-primary-channel: #3138A6;\r\n\t\t\t--pitch9-secondary-note: #1B0B7F;\r\n\t\t\t--pitch9-primary-note: #3138A6;\r\n\t\t\t--pitch10-secondary-channel: #13015D;\r\n\t\t\t--pitch10-primary-channel: #1c02bd;\r\n\t\t\t--pitch10-secondary-note: #13015D;\r\n\t\t\t--pitch10-primary-note: #1c02bd;\r\n\t\t\t--noise1-secondary-channel: #A675FE;\r\n\t\t\t--noise1-primary-channel: #E2C9FF;\r\n\t\t\t--noise1-secondary-note: #A675FE;\r\n\t\t\t--noise1-primary-note: #E2C9FF;\r\n\t\t\t--noise2-secondary-channel: #6A31CA;\r\n\t\t\t--noise2-primary-channel: #A675FE;\r\n\t\t\t--noise2-secondary-note: #6A31CA;\r\n\t\t\t--noise2-primary-note: #A675FE;\r\n\t\t\t--noise3-secondary-channel: #5A1991;\r\n\t\t\t--noise3-primary-channel: #6A31CA;\r\n\t\t\t--noise3-secondary-note: #5A1991;\r\n\t\t\t--noise3-primary-note: #6A31CA;\r\n\t\t\t--noise4-secondary-channel: #2f1a68;\r\n\t\t\t--noise4-primary-channel: #5A1991;\r\n\t\t\t--noise4-secondary-note: #2f1a68;\r\n\t\t\t--noise4-primary-note: #5A1991;\r\n\t\t\t--noise5-secondary-channel: #211640;\r\n\t\t\t--noise5-primary-channel: #391b8d;\r\n\t\t\t--noise5-secondary-note: #211640;\r\n\t\t\t--noise5-primary-note: #391b8d;\r\n\t\t\t--mod1-secondary-channel: #25E2CD;\r\n\t\t\t--mod1-primary-channel: #BDFFCA;\r\n\t\t\t--mod1-secondary-note: #25E2CD;\r\n\t\t\t--mod1-primary-note: #BDFFCA;\r\n\t\t\t--mod2-secondary-channel: #0A98AC;\r\n\t\t\t--mod2-primary-channel: #25E2CD;\r\n\t\t\t--mod2-secondary-note: #0A98AC;\r\n\t\t\t--mod2-primary-note: #25E2CC;\r\n\t\t\t--mod3-secondary-channel: #005280;\r\n\t\t\t--mod3-primary-channel: #0A98AC;\r\n\t\t\t--mod3-secondary-note: #005280;\r\n\t\t\t--mod3-primary-note: #0A98AC;\r\n\t\t\t--mod4-secondary-channel: #0f3670;\r\n\t\t\t--mod4-primary-channel: #1369c1;\r\n\t\t\t--mod4-secondary-note: #0f3670;\r\n\t\t\t--mod4-primary-note: #1369c1;\r\n\t\t\t--mod-label-primary: #191d26;\r\n\t\t\t--mod-label-secondary-text: #024aca;\r\n\t\t\t--mod-label-primary-text: #ffffffa6;\r\n\t\t\t--disabled-note-primary: #c9c9c9;\r\n\t\t\t--disabled-note-secondary: #616161;\r\n\t}`,\r\n\"slushie\": `\r\n\t:root {\r\n\t\t--page-margin: #040814;\r\n\t\t--editor-background: #040814;\r\n\t\t--hover-preview: #c6f7ff;\r\n\t\t--primary-text: #d3f3ff;\r\n\t\t--secondary-text: #6f72b5;\r\n\t\t--inverted-text: black;\r\n\t\t--box-selection-fill: rgb(43 70 171 / 62%);\r\n\t\t--loop-accent: #573ebb;\r\n\t\t--ui-widget-background: #2e2f44;\r\n\t\t--ui-widget-focus: #2b2c46;\r\n\t\t--pitch-background: #353654;\r\n\t\t--tonic: #716fe3;\r\n\t\t--fifth-note: #76469b;\r\n\t\t--white-piano-key: #abbce3;\r\n\t\t--black-piano-key: #2f235e;\r\n\t\t--track-editor-bg-pitch: #3a3b5c;\r\n\t\t--track-editor-bg-pitch-dim: #1f2036;\r\n\t\t--track-editor-bg-noise: #3c3554;\r\n\t\t--track-editor-bg-noise-dim: #1e1834;\r\n\t\t--track-editor-bg-mod: #30335e;\r\n\t\t--track-editor-bg-mod-dim: #161938;\r\n\t\t--multiplicative-mod-slider: #e29cff;\r\n\t\t--overwriting-mod-slider: #495789;\r\n\t\t--indicator-primary: #e1a6ff;\r\n\t\t--indicator-secondary: #415187;\r\n\t\t--select2-opt-group: #22223a;\r\n\t\t--input-box-outline: #2d2648;\r\n\t\t--mute-button-normal: #7aceff;\r\n\t\t--pitch1-secondary-channel: #5f3ea5;\r\n\t\t--pitch1-primary-channel: #c1a4ff;\r\n\t\t--pitch1-secondary-note: #794fd3;\r\n\t\t--pitch1-primary-note: #d8c6ff;\r\n\t\t--pitch2-secondary-channel: #4f44bf;\r\n\t\t--pitch2-primary-channel: #9287ff;\r\n\t\t--pitch2-secondary-note: #5e51d9;\r\n\t\t--pitch2-primary-note: #b6afff;\r\n\t\t--pitch3-secondary-channel: #374eb9;\r\n\t\t--pitch3-primary-channel: #8097ff;\r\n\t\t--pitch3-secondary-note: #445cc9;\r\n\t\t--pitch3-primary-note: #a0b2ff;\r\n\t\t--pitch4-secondary-channel: #2867cf;\r\n\t\t--pitch4-primary-channel: #6fa5ff;\r\n\t\t--pitch4-secondary-note: #2e6ed7;\r\n\t\t--pitch4-primary-note: #a6c7ff;\r\n\t\t--pitch5-secondary-channel: #3175a7;\r\n\t\t--pitch5-primary-channel: #7ec9ff;\r\n\t\t--pitch5-secondary-note: #367eb3;\r\n\t\t--pitch5-primary-note: #9fd7ff;\r\n\t\t--pitch6-secondary-channel: #3993a9;\r\n\t\t--pitch6-primary-channel: #8ce9ff;\r\n\t\t--pitch6-secondary-note: #386da3;\r\n\t\t--pitch6-primary-note: #9eecff;\r\n\t\t--pitch7-secondary-channel: #369d8a;\r\n\t\t--pitch7-primary-channel: #8bfce7;\r\n\t\t--pitch7-secondary-note: #1c93a7;\r\n\t\t--pitch7-primary-note: #abffef;\r\n\t\t--pitch8-secondary-channel: #00A170;\r\n\t\t--pitch8-primary-channel: #50FFC9;\r\n\t\t--pitch8-secondary-note: #00C78A;\r\n\t\t--pitch8-primary-note: #83FFD9;\r\n\t\t--pitch9-secondary-channel: #49b374;\r\n\t\t--pitch9-primary-channel: #8affa9;\r\n\t\t--pitch9-secondary-note: #26815f;\r\n\t\t--pitch9-primary-note: #c8ffde;\r\n\t\t--pitch10-secondary-channel: #58a747;\r\n\t\t--pitch10-primary-channel: #bbffaa;\r\n\t\t--pitch10-secondary-note: #1d7c48;\r\n\t\t--pitch10-primary-note: #c7ffbc;\r\n\t\t--noise1-secondary-channel: #42829b;\r\n\t\t--noise1-primary-channel: #97d3fc;\r\n\t\t--noise1-secondary-note: #3f53b3;\r\n\t\t--noise1-primary-note: #97d3fc;\r\n\t\t--noise2-secondary-channel: #6354bb;\r\n\t\t--noise2-primary-channel: #9a89ff;\r\n\t\t--noise2-secondary-note: #5f4dcd;\r\n\t\t--noise2-primary-note: #c6bcff;\r\n\t\t--noise3-secondary-channel: #704a95;\r\n\t\t--noise3-primary-channel: #c285ff;\r\n\t\t--noise3-secondary-note: #ad5aff;\r\n\t\t--noise3-primary-note: #d3a6ff;\r\n\t\t--noise4-secondary-channel: #a53c65;\r\n\t\t--noise4-primary-channel: #f794bb;\r\n\t\t--noise4-secondary-note: #cb5080;\r\n\t\t--noise4-primary-note: #f794bb;\r\n\t\t--noise5-secondary-channel: #9b2d2d;\r\n\t\t--noise5-primary-channel: #ff7676;\r\n\t\t--noise5-secondary-note: #cb4444;\r\n\t\t--noise5-primary-note: #ff9999;\r\n\t\t--mod1-secondary-channel: #b7613c;\r\n\t\t--mod1-primary-channel: #ff9f76;\r\n\t\t--mod1-secondary-note: #e77e52;\r\n\t\t--mod1-primary-note: #ffb99b;\r\n\t\t--mod2-secondary-channel: #916d34;\r\n\t\t--mod2-primary-channel: #fece80;\r\n\t\t--mod2-secondary-note: #c58b35;\r\n\t\t--mod2-primary-note: #ffdda5;\r\n\t\t--mod3-secondary-channel: #83761a;\r\n\t\t--mod3-primary-channel: #fdf68c;\r\n\t\t--mod3-secondary-note: #c18e00;\r\n\t\t--mod3-primary-note: #fdf68c;\r\n\t\t--mod4-secondary-channel: #a86436;\r\n\t\t--mod4-primary-channel: #c8a825;\r\n\t\t--mod4-secondary-note: #e8ba46;\r\n\t\t--mod4-primary-note: #c8a825;\r\n\t\t--mod-label-primary: #37325e;\r\n\t\t--mod-label-secondary-text: #6e8aa7;\r\n\t\t--mod-label-primary-text: #c1ffff;\r\n}`,\r\n\"ultrabox dark\": `\r\n:root {\r\n/*--mod-title: #CCCCCC;*/\r\n--loop-accent: #CCCCCC;\r\n--playhead: #CCCCCC;\r\n/*--primary-text: #CCCCCC;\r\n--hover-preview: #CCCCCC;*/\r\n--link-accent: #FF8EC5;\r\n--indicator-primary: #FF8EC5;\r\n/*--indicator-primary: #CCCCCC;*/\r\n/*--indicator-secondary: #E856B2;*/\r\n--white-piano-key: #CCCCCC;\r\n/*--black-piano-key: #444;*/\r\n--text-selection: #932253;\r\n--oscilloscope-line-L: #CCCCCC;\r\n--oscilloscope-line-R: #932253;\r\n--pitch-channel-limit: 8;\r\n--pitch1-secondary-channel: #A83030;\r\n--pitch1-primary-channel:   #FF7C7C;\r\n--pitch1-secondary-note:    #B51532;\r\n--pitch1-primary-note:      #FFA3A3;\r\n\r\n--pitch2-secondary-channel: #C75000;\r\n--pitch2-primary-channel:   #FF9752;\r\n--pitch2-secondary-note:    #FF771C;\r\n--pitch2-primary-note:      #FFCDAB;\r\n\r\n--pitch3-secondary-channel: #A1A100;\r\n--pitch3-primary-channel: #FFFF25;\r\n--pitch3-secondary-note: #C7C700;\r\n--pitch3-primary-note: #FFFF92;\r\n\r\n--pitch4-secondary-channel: #139620;\r\n--pitch4-primary-channel:   #25ff3a;\r\n--pitch4-secondary-note:    #21FF33;\r\n--pitch4-primary-note:      #C0FFB5;\r\n\r\n--pitch5-secondary-channel: #0099A1;\r\n--pitch5-primary-channel:   #25F3FF;\r\n--pitch5-secondary-note:    #00BDC7;\r\n--pitch5-primary-note:      #92F9FF;\r\n\r\n--pitch6-secondary-channel: #58599E;\r\n--pitch6-primary-channel:   #5EA3FF;\r\n--pitch6-secondary-note:    #183AC7;\r\n--pitch6-primary-note:      #9EC8FF;\r\n\r\n--pitch7-secondary-channel: #6038a5;\r\n--pitch7-primary-channel:   #C760FF;\r\n--pitch7-secondary-note:    #5433A0;\r\n--pitch7-primary-note:      #D99EFF;\r\n\r\n--pitch8-secondary-channel: #932253;\r\n--pitch8-primary-channel:   #FF60A5;\r\n--pitch8-secondary-note:    #8E1C4E;\r\n--pitch8-primary-note:      #FF8EC5;\r\n\r\n/*--track-editor-bg-mod: #632D45;\r\n--track-editor-bg-mod-dim: #3F1D2C;*/\r\n}`,\r\n\t\t\"modbox classic\": `\r\n\t\t\t:root {\r\n\t\t\t\t--loop-accent: #9900cc;\r\n\t\t\t\t\t--pitch-channel-limit: 6;\r\n\t\t\t\t\t--noise-channel-limit: 4;\r\n\t\t\t\t--pitch1-secondary-note:    #0099a1;\r\n\t\t\t\t--pitch1-primary-note:      #25f3ff;\r\n\t\t\t\t--pitch2-secondary-channel: #439143;\r\n\t\t\t\t--pitch2-primary-channel:   #44ff44;\r\n\t\t\t\t--pitch2-secondary-note:    #439143;\r\n\t\t\t\t--pitch2-primary-note:      #44ff44;\r\n\t\t\t\t--pitch3-secondary-channel: #a1a100;\r\n\t\t\t\t--pitch3-primary-channel:   #ffff25;\r\n\t\t\t\t--pitch3-secondary-note:    #a1a100;\r\n\t\t\t\t--pitch3-primary-note:      #ffff25;\r\n\t\t\t\t--pitch4-secondary-channel: #c75000;\r\n\t\t\t\t--pitch4-primary-channel:   #ff9752;\r\n\t\t\t\t--pitch4-secondary-note:    #c75000;\r\n\t\t\t\t--pitch4-primary-note:      #ff9752;\r\n\t\t\t\t--pitch5-secondary-note:    #d020d0;\r\n\t\t\t\t--pitch5-primary-note:      #ff90ff;\r\n\t\t\t\t--pitch6-secondary-channel: #552377;\r\n\t\t\t\t--pitch6-primary-channel:   #9f31ea;\r\n\t\t\t\t--pitch6-secondary-note:    #552377;\r\n\t\t\t\t--pitch6-primary-note:      #9f31ea;\r\n\t\t\t\t--pitch7-secondary-channel: #221b89;\r\n\t\t\t\t--pitch7-primary-channel:   #2b6aff;\r\n\t\t\t\t--pitch7-secondary-note:    #221b89;\r\n\t\t\t\t--pitch7-primary-note:      #2b6aff;\r\n\t\t\t\t--pitch8-secondary-channel: #00995f;\r\n\t\t\t\t--pitch8-primary-channel:   #00ff9f;\r\n\t\t\t\t--pitch8-secondary-note:    #00995f;\r\n\t\t\t\t--pitch8-primary-note:      #00ff9f;\r\n\t\t\t\t--pitch9-secondary-channel: #d6b03e;\r\n\t\t\t\t--pitch9-primary-channel:   #ffbf00;\r\n\t\t\t\t--pitch9-secondary-note:    #d6b03e;\r\n\t\t\t\t--pitch9-primary-note:      #ffbf00;\r\n\t\t\t\t--pitch10-secondary-channel:#b25915;\r\n\t\t\t\t--pitch10-primary-channel:  #d85d00;\r\n\t\t\t\t--pitch10-secondary-note:   #b25915;\r\n\t\t\t\t--pitch10-primary-note:     #d85d00;\r\n\t\t\t\t--noise1-secondary-channel: #991010;\r\n\t\t\t\t--noise1-primary-channel:   #ff1616;\r\n\t\t\t\t--noise1-secondary-note:    #991010;\r\n\t\t\t\t--noise1-primary-note:      #ff1616;\r\n\t\t\t\t--noise2-secondary-channel: #aaaaaa;\r\n\t\t\t\t--noise2-primary-channel:   #ffffff;\r\n\t\t\t\t--noise2-secondary-note:    #aaaaaa;\r\n\t\t\t\t--noise2-primary-note:      #ffffff;\r\n\t\t\t\t--noise3-secondary-channel: #5869BD;\r\n\t\t\t\t--noise3-primary-channel:   #768dfc;\r\n\t\t\t\t--noise3-secondary-note:    #5869BD;\r\n\t\t\t\t--noise3-primary-note:      #768dfc;\r\n\t\t\t\t--noise4-secondary-channel: #7c9b42;\r\n\t\t\t\t--noise4-primary-channel:   #a5ff00;\r\n\t\t\t\t--noise4-secondary-note:    #7c9b42;\r\n\t\t\t\t--noise4-primary-note:      #a5ff00;\r\n\t\t\t\t--noise5-secondary-channel: #7c9b42;\r\n         --mod1-secondary-channel: #0099a1;\r\n\t\t\t\t--mod1-primary-channel:   #25f3ff;\r\n\t\t\t\t--mod1-secondary-note:    #0099a1;\r\n\t\t\t\t--mod1-primary-note:      #25f3ff;\r\n\t\t\t\t--mod2-secondary-channel: #439143;\r\n\t\t\t\t--mod2-primary-channel:   #44ff44;\r\n\t\t\t\t--mod2-secondary-note:    #439143;\r\n\t\t\t\t--mod2-primary-note:      #44ff44;\r\n\t\t\t\t--mod3-secondary-channel: #a1a100;\r\n\t\t\t\t--mod3-primary-channel:   #ffff25;\r\n\t\t\t\t--mod3-secondary-note:    #a1a100;\r\n\t\t\t\t--mod3-primary-note:      #ffff25;\r\n\t\t\t\t--mod4-secondary-channel: #c75000;\r\n\t\t\t\t--mod4-primary-channel:   #ff9752;\r\n\t\t\t\t--mod4-secondary-note:    #c75000;\r\n\t\t\t\t--mod4-primary-note:      #ff9752;\r\n\t\t\t\t\t--text-disabled-icon: ✗ ;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\t\"zefbox\": `\r\n\t\t\t:root {\r\n\t\t\t\t--loop-accent: #C3593D;\r\n\t\t\t\t--pitch1-secondary-channel: #06c400;\r\n\t\t\t\t--pitch1-primary-channel:   #08ff00;\r\n\t\t\t\t--pitch1-secondary-note:    #06c400;\r\n\t\t\t\t--pitch1-primary-note:      #06e000;\r\n\t\t\t\t--pitch2-secondary-channel: #00bf97;\r\n\t\t\t\t--pitch2-primary-channel:   #00ffcb;\r\n\t\t\t\t--pitch2-secondary-note:    #00bf97;\r\n\t\t\t\t--pitch2-primary-note:      #00edbc;\r\n\t\t\t\t--pitch3-secondary-channel: #b5b000;\r\n\t\t\t\t--pitch3-primary-channel:   #fffa00;\r\n\t\t\t\t--pitch3-secondary-note:    #b5b000;\r\n\t\t\t\t--pitch3-primary-note:      #e0db00;\r\n\t\t\t\t--pitch4-secondary-channel: #c90000;\r\n\t\t\t\t--pitch4-primary-channel:   #e20000;\r\n\t\t\t\t--pitch4-secondary-note:    #c90000;\r\n\t\t\t\t--pitch4-primary-note:      #e20000;\r\n\t\t\t\t--pitch5-secondary-channel: #d17d12;\r\n\t\t\t\t--pitch5-primary-channel:   #ff9e21;\r\n\t\t\t\t--pitch5-secondary-note:    #d17d12;\r\n\t\t\t\t--pitch5-primary-note:      #ef9017;\r\n\t\t\t\t--pitch6-secondary-channel: #d35bc8;\r\n\t\t\t\t--pitch6-primary-channel:   #ffa5f7;\r\n\t\t\t\t--pitch6-secondary-note:    #d35bc8;\r\n\t\t\t\t--pitch6-primary-note:      #fc64ee;\r\n\t\t\t\t--pitch7-secondary-channel: #D00000;\r\n\t\t\t\t--pitch7-primary-channel:   #FF4444;\r\n\t\t\t\t--pitch7-secondary-note:    #D00000;\r\n\t\t\t\t--pitch7-primary-note:      #FF4444;\r\n\t\t\t\t--pitch8-secondary-channel: #00C700;\r\n\t\t\t\t--pitch8-primary-channel:   #A0FFA0;\r\n\t\t\t\t--pitch8-secondary-note:    #00C700;\r\n\t\t\t\t--pitch8-primary-note:      #A0FFA0;\r\n\t\t\t\t--pitch9-secondary-channel: #A88981;\r\n\t\t\t\t--pitch9-primary-channel:   #F1C3B7;\r\n\t\t\t\t--pitch9-secondary-note:    #A88981;\r\n\t\t\t\t--pitch9-primary-note:      #F1C3B7;\r\n\t\t\t\t--pitch10-secondary-channel:#0C0A99;\r\n\t\t\t\t--pitch10-primary-channel:  #0000EE;\r\n\t\t\t\t--pitch10-secondary-note:   #0C0A99;\r\n\t\t\t\t--pitch10-primary-note:     #0000EE;\r\n\t\t\t\t--noise1-secondary-channel: #ABABAB;\r\n\t\t\t\t--noise1-primary-channel:   #D6D6D6;\r\n\t\t\t\t--noise1-secondary-note:    #ABABAB;\r\n\t\t\t\t--noise1-primary-note:      #D6D6D6;\r\n\t\t\t\t--noise2-secondary-channel: #A18F51;\r\n\t\t\t\t--noise2-primary-channel:   #F6BB6A;\r\n\t\t\t\t--noise2-secondary-note:    #A18F51;\r\n\t\t\t\t--noise2-primary-note:      #F6BB6A;\r\n\t\t\t\t--noise3-secondary-channel: #5869BD;\r\n\t\t\t\t--noise3-primary-channel:   #768DFC;\r\n\t\t\t\t--noise3-secondary-note:    #5869BD;\r\n\t\t\t\t--noise3-primary-note:      #768DFC;\r\n\t\t\t\t--noise4-secondary-channel: #8888D0;\r\n\t\t\t\t--noise4-primary-channel:   #D0D0FF;\r\n\t\t\t\t--noise4-secondary-note:    #8888D0;\r\n\t\t\t\t--noise4-primary-note:      #D0D0FF;\r\n\t\t\t\t--noise5-secondary-channel: #B7148E;\r\n\t\t\t\t--noise5-primary-channel:   #E819B4;\r\n\t\t\t\t--noise5-secondary-note:    #B7148E;\r\n\t\t\t\t--noise5-primary-note:      #E819B4;\r\n       --mod1-secondary-channel: #06c400;\r\n\t\t\t\t--mod1-primary-channel:   #08ff00;\r\n\t\t\t\t--mod1-secondary-note:    #06c400;\r\n\t\t\t\t--mod1-primary-note:      #06e000;\r\n\t\t\t\t--mod2-secondary-channel: #00bf97;\r\n\t\t\t\t--mod2-primary-channel:   #00ffcb;\r\n\t\t\t\t--mod2-secondary-note:    #00bf97;\r\n\t\t\t\t--mod2-primary-note:      #00edbc;\r\n\t\t\t\t--mod3-secondary-channel: #b5b000;\r\n\t\t\t\t--mod3-primary-channel:   #fffa00;\r\n\t\t\t\t--mod3-secondary-note:    #b5b000;\r\n\t\t\t\t--mod3-primary-note:      #e0db00;\r\n\t\t\t\t--mod4-secondary-channel: #c90000;\r\n\t\t\t\t--mod4-primary-channel:   #e20000;\r\n\t\t\t\t--mod4-secondary-note:    #c90000;\r\n\t\t\t\t--mod4-primary-note:      #e20000;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\t\"sandbox classic\": `\r\n\t\t\t:root {\r\n\t\t\t\t--loop-accent: #198195;\r\n\t\t\t\t\t--pitch-channel-limit: 6;\r\n\t\t\t\t\t--noise-channel-limit: 4;\r\n\t\t\t\t--pitch1-secondary-channel: #539999;\r\n\t\t\t\t--pitch1-primary-channel:   #5EB1B1;\r\n\t\t\t\t--pitch1-secondary-note:    #539999;\r\n\t\t\t\t--pitch1-primary-note:      #5EB1B1;\r\n\t\t\t\t--pitch2-secondary-channel: #95933C;\r\n\t\t\t\t--pitch2-primary-channel:   #B0AD44;\r\n\t\t\t\t--pitch2-secondary-note:    #95933C;\r\n\t\t\t\t--pitch2-primary-note:      #B0AD44;\r\n\t\t\t\t--pitch3-secondary-channel: #E75566;\r\n\t\t\t\t--pitch3-primary-channel:   #FF9AA6;\r\n\t\t\t\t--pitch3-secondary-note:    #E75566;\r\n\t\t\t\t--pitch3-primary-note:      #FF9AA6;\r\n\t\t\t\t--pitch4-secondary-channel: #8B4343;\r\n\t\t\t\t--pitch4-primary-channel:   #FF8844;\r\n\t\t\t\t--pitch4-secondary-note:    #8B4343;\r\n\t\t\t\t--pitch4-primary-note:      #FF8844;\r\n\t\t\t\t--pitch5-secondary-channel: #888888;\r\n\t\t\t\t--pitch5-primary-channel:   #BBBBBB;\r\n\t\t\t\t--pitch5-secondary-note:    #888888;\r\n\t\t\t\t--pitch5-primary-note:      #BBBBBB;\r\n\t\t\t\t--pitch6-secondary-channel: #BB6906;\r\n\t\t\t\t--pitch6-primary-channel:   #FE8D00;\r\n\t\t\t\t--pitch6-secondary-note:    #BB6906;\r\n\t\t\t\t--pitch6-primary-note:      #FE8D00;\r\n\t\t\t\t--pitch7-secondary-channel: #539999;\r\n\t\t\t\t--pitch7-primary-channel:   #5EB1B1;\r\n\t\t\t\t--pitch7-secondary-note:    #539999;\r\n\t\t\t\t--pitch7-primary-note:      #5EB1B1;\r\n\t\t\t\t--pitch8-secondary-channel: #95933C;\r\n\t\t\t\t--pitch8-primary-channel:   #B0AD44;\r\n\t\t\t\t--pitch8-secondary-note:    #95933C;\r\n\t\t\t\t--pitch8-primary-note:      #B0AD44;\r\n\t\t\t\t--pitch9-secondary-channel: #E75566;\r\n\t\t\t\t--pitch9-primary-channel:   #FF9AA6;\r\n\t\t\t\t--pitch9-secondary-note:    #E75566;\r\n\t\t\t\t--pitch9-primary-note:      #FF9AA6;\r\n\t\t\t\t--pitch10-secondary-channel: #8B4343;\r\n\t\t\t\t--pitch10-primary-channel:   #FF8844;\r\n\t\t\t\t--pitch10-secondary-note:    #8B4343;\r\n\t\t\t\t--pitch10-primary-note:      #FF8844;\t\t\t\r\n\t\t\t\t--noise1-secondary-channel: #ABABAB;\r\n\t\t\t\t--noise1-primary-channel:   #D6D6D6;\r\n\t\t\t\t--noise1-secondary-note:    #ABABAB;\r\n\t\t\t\t--noise1-primary-note:      #D6D6D6;\r\n\t\t\t\t--noise2-secondary-channel: #A18F51;\r\n\t\t\t\t--noise2-primary-channel:   #F6BB6A;\r\n\t\t\t\t--noise2-secondary-note:    #A18F51;\r\n\t\t\t\t--noise2-primary-note:      #F6BB6A;\r\n\t\t\t\t--noise3-secondary-channel: #5869BD;\r\n\t\t\t\t--noise3-primary-channel:   #768DFC;\r\n\t\t\t\t--noise3-secondary-note:    #5869BD;\r\n\t\t\t\t--noise3-primary-note:      #768DFC;\r\n\t\t\t\t--noise4-secondary-channel: #8888D0;\r\n\t\t\t\t--noise4-primary-channel:   #D0D0FF;\r\n\t\t\t\t--noise4-secondary-note:    #8888D0;\r\n\t\t\t\t--noise4-primary-note:      #D0D0FF;\r\n\t\t\t\t--noise5-secondary-channel: #A18F51;\r\n\t\t\t\t--noise5-primary-channel:   #F6BB6A;\r\n\t\t\t\t--noise5-secondary-note:    #A18F51;\r\n\t\t\t\t--noise5-primary-note:      #F6BB6A;\t\t\t\r\n         \t--mod1-secondary-channel: #539999;\r\n\t\t\t\t--mod1-primary-channel:   #5EB1B1;\r\n\t\t\t\t--mod1-secondary-note:    #539999;\r\n\t\t\t\t--mod1-primary-note:      #5EB1B1;\r\n\t\t\t\t--mod2-secondary-channel: #95933C;\r\n\t\t\t\t--mod2-primary-channel:   #B0AD44;\r\n\t\t\t\t--mod2-secondary-note:    #95933C;\r\n\t\t\t\t--mod2-primary-note:      #B0AD44;\r\n\t\t\t\t--mod3-secondary-channel: #E75566;\r\n\t\t\t\t--mod3-primary-channel:   #FF9AA6;\r\n\t\t\t\t--mod3-secondary-note:    #E75566;\r\n\t\t\t\t--mod3-primary-note:      #FF9AA6;\r\n\t\t\t\t--mod4-secondary-channel: #8B4343;\r\n\t\t\t\t--mod4-primary-channel:   #FF8844;\r\n\t\t\t\t--mod4-secondary-note:    #8B4343;\r\n\t\t\t\t--mod4-primary-note:      #FF8844;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\t\"harrybox\": `\r\n\t\t\t:root {\r\n\t\t\t\t--loop-accent: #9900cc;\r\n\t\t\t\t\t--noise-channel-limit: 2;\r\n\t\t\t\t--pitch1-secondary-channel: #00ffff;\r\n\t\t\t\t--pitch1-primary-channel:   #00ffff;\r\n\t\t\t\t--pitch1-secondary-note:    #00ffff;\r\n\t\t\t\t--pitch1-primary-note:      #00ffff;\r\n\t\t\t\t--pitch2-secondary-channel: #00d8d8;\r\n\t\t\t\t--pitch2-primary-channel:   #00d8d8;\r\n\t\t\t\t--pitch2-secondary-note:    #00d8d8;\r\n\t\t\t\t--pitch2-primary-note:      #00d8d8;\r\n\t\t\t\t--pitch3-secondary-channel: #00adad;\r\n\t\t\t\t--pitch3-primary-channel:   #00adad;\r\n\t\t\t\t--pitch3-secondary-note:    #00adad;\r\n\t\t\t\t--pitch3-primary-note:      #00adad;\r\n\t\t\t\t-pitch4-secondary-channel: #008c8c;\r\n\t\t\t\t--pitch4-primary-channel:   #008c8c;\r\n\t\t\t\t--pitch4-secondary-note:    #008c8c;\r\n\t\t\t\t--pitch4-primary-note:      #008c8c;\r\n\t\t\t\t--pitch5-secondary-channel: #005b5b;\r\n\t\t\t\t--pitch5-primary-channel:   #005b5b;\r\n\t\t\t\t--pitch5-secondary-note:    #005b5b;\r\n\t\t\t\t--pitch5-primary-note:      #005b5b;\r\n\t\t\t\t--pitch6-secondary-channel: #003333;\r\n\t\t\t\t--pitch6-primary-channel:   #003333;\r\n\t\t\t\t--pitch6-secondary-note:    #003333;\r\n\t\t\t\t--pitch6-primary-note:      #003333;\r\n\t\t\t\t--pitch7-secondary-channel: #00ffff;\r\n\t\t\t\t--pitch7-primary-channel:   #00ffff;\r\n\t\t\t\t--pitch7-secondary-note:    #00ffff;\r\n\t\t\t\t--pitch7-primary-note:      #00ffff;\r\n\t\t\t\t--pitch8-secondary-channel: #00ffff;\r\n\t\t\t\t--pitch8-primary-channel:   #00ffff;\r\n\t\t\t\t--pitch8-secondary-note:    #00ffff;\r\n\t\t\t\t--pitch8-primary-note:      #00ffff;\r\n\t\t\t\t--pitch9-secondary-channel: #00ffff;\r\n\t\t\t\t--pitch9-primary-channel:   #00ffff;\r\n\t\t\t\t--pitch9-secondary-note:    #00ffff;\r\n\t\t\t\t--pitch9-primary-note:      #00ffff;\r\n\t\t\t\t--pitch10-secondary-channel:#00ffff;\r\n\t\t\t\t--pitch10-primary-channel:  #00ffff;\r\n\t\t\t\t--pitch10-secondary-note:   #00ffff;\r\n\t\t\t\t--pitch10-primary-note:     #00ffff;\r\n\t\t\t\t--noise1-secondary-channel: #991010;\r\n\t\t\t\t--noise1-primary-channel:   #ff1616;\r\n\t\t\t\t--noise1-secondary-note:    #991010;\r\n\t\t\t\t--noise1-primary-note:      #ff1616;\r\n\t\t\t\t--noise2-secondary-channel: #aaaaaa;\r\n\t\t\t\t--noise2-primary-channel:   #ffffff;\r\n\t\t\t\t--noise2-secondary-note:    #aaaaaa;\r\n\t\t\t\t--noise2-primary-note:      #ffffff;\r\n\t\t\t\t--noise3-secondary-channel: #991010;\r\n\t\t\t\t--noise3-primary-channel:   #ff1616;\r\n\t\t\t\t--noise3-secondary-note:    #991010;\r\n\t\t\t\t--noise3-primary-note:      #ff1616;\r\n\t\t\t\t--noise4-secondary-channel: #aaaaaa;\r\n\t\t\t\t--noise4-primary-channel:   #ffffff;\r\n\t\t\t\t--noise4-secondary-note:    #aaaaaa;\r\n\t\t\t\t--noise4-primary-note:      #ffffff;\r\n\t\t\t\t--noise5-secondary-channel: #991010;\r\n\t\t\t\t--noise5-primary-channel:   #ff1616;\r\n\t\t\t\t--noise5-secondary-note:    #991010;\r\n\t\t\t\t--noise5-primary-note:      #ff1616;\r\n         \t--mod1-secondary-channel: #00ffff;\r\n\t\t\t\t--mod1-primary-channel:   #00ffff;\r\n\t\t\t\t--mod1-secondary-note:    #00ffff;\r\n\t\t\t\t--mod1-primary-note:      #00ffff;\r\n\t\t\t\t--mod2-secondary-channel: #00d8d8;\r\n\t\t\t\t--mod2-primary-channel:   #00d8d8;\r\n\t\t\t\t--mod2-secondary-note:    #00d8d8;\r\n\t\t\t\t--mod2-primary-note:      #00d8d8;\r\n\t\t\t\t--mod3-secondary-channel: #00adad;\r\n\t\t\t\t--mod3-primary-channel:   #00adad;\r\n\t\t\t\t--mod3-secondary-note:    #00adad;\r\n\t\t\t\t--mod3-primary-note:      #00adad;\r\n\t\t\t\t-mod4-secondary-channel: #008c8c;\r\n\t\t\t\t--mod4-primary-channel:   #008c8c;\r\n\t\t\t\t--mod4-secondary-note:    #008c8c;\r\n\t\t\t\t--mod4-primary-note:      #008c8c;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\t\"brucebox\": `\r\n\t\t:root {\r\n\t\t\t\tfont: 16px/2 cursive;\r\n\t\t\t\t--page-margin: #4667CE;\r\n\t\t\t\t--editor-background: #4667CE;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #444;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #444;\r\n\t\t\t\t\t--pitch-channel-limit: 3;\r\n\t\t\t\t\t--noise-channel-limit: 1;\r\n\t\t\t\t--pitch1-secondary-channel: #bda822;\r\n\t\t\t\t--pitch1-primary-channel:   #fcdb00;\r\n\t\t\t\t--pitch1-secondary-note:    #bda822;\r\n\t\t\t\t--pitch1-primary-note:      #fcdb00;\r\n\t\t\t\t--pitch2-secondary-channel: #612278;\r\n\t\t\t\t--pitch2-primary-channel:   #bb00ff;\r\n\t\t\t\t--pitch2-secondary-note:    #612278;\r\n\t\t\t\t--pitch2-primary-note:      #bb00ff;\r\n\t\t\t\t--pitch3-secondary-channel: #8b4343;\r\n\t\t\t\t--pitch3-primary-channel:   #ff8844;\r\n\t\t\t\t--pitch3-secondary-note:    #8b4343;\r\n\t\t\t\t--pitch3-primary-note:      #ff8844;\r\n\t\t\t\t--pitch4-secondary-channel: #bda822;\r\n\t\t\t\t--pitch4-primary-channel:   #fcdb00;\r\n\t\t\t\t--pitch4-secondary-note:    #bda822;\r\n\t\t\t\t--pitch4-primary-note:      #fcdb00;\r\n\t\t\t\t--pitch5-secondary-channel: #612278;\r\n\t\t\t\t--pitch5-primary-channel:   #bb00ff;\r\n\t\t\t\t--pitch5-secondary-note:    #612278;\r\n\t\t\t\t--pitch5-primary-note:      #bb00ff;\r\n\t\t\t\t--pitch6-secondary-channel: #8b4343;\r\n\t\t\t\t--pitch6-primary-channel:   #ff8844;\r\n\t\t\t\t--pitch6-secondary-note:    #8b4343;\r\n\t\t\t\t--pitch6-primary-note:      #ff8844;\r\n\t\t\t\t--pitch7-secondary-channel: #bda822;\r\n\t\t\t\t--pitch7-primary-channel:   #fcdb00;\r\n\t\t\t\t--pitch7-secondary-note:    #bda822;\r\n\t\t\t\t--pitch7-primary-note:      #fcdb00;\r\n\t\t\t\t--pitch8-secondary-channel: #612278;\r\n\t\t\t\t--pitch8-primary-channel:   #bb00ff;\r\n\t\t\t\t--pitch8-secondary-note:    #612278;\r\n\t\t\t\t--pitch8-primary-note:      #bb00ff;\r\n\t\t\t\t--pitch9-secondary-channel: #8b4343;\r\n\t\t\t\t--pitch9-primary-channel:   #ff8844;\r\n\t\t\t\t--pitch9-secondary-note:    #8b4343;\r\n\t\t\t\t--pitch9-primary-note:      #ff8844;\r\n\t\t\t\t--pitch10-secondary-channel: #bda822;\r\n\t\t\t\t--pitch10-primary-channel:   #fcdb00;\r\n\t\t\t\t--pitch10-secondary-note:    #bda822;\r\n\t\t\t\t--pitch10-primary-note:      #fcdb00;\r\n\t\t\t\t--noise1-secondary-channel: #991010;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.trackContainer .noSelection {\r\n\t\t\t\tbackground: black !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tspan input, \r\n\t\t\t\tdiv.harmonics svg,\r\n\t\t\t\tdiv.spectrum svg,\r\n\t\t\t\tdiv.filterEditor svg,\r\n\t\t\t\tdiv.fadeInOut svg,\r\n\t\t\t\tdiv.loopEditor svg,\r\n\t\t\t\tsvg#firstImage,\r\n\t\t\t\tdiv.trackContainer div.noSelection\r\n\t\t\t\t{\r\n\t\t\t\t\tbackground: black !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinput, textarea {\r\n\t\t\t\t\tbackground-color: black !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t#text-content > section > h1 {\r\n\t\t\t\t\tcolor: white;\r\n\t\t\t\t}\r\n\r\n\t\t\t`,\r\n\t\t\t \"shitbox 2.0\": `\r\n\t\t\t:root {\r\n\t\t\t--page-margin: maroon;\r\n\t\t\t\t\t--playhead: firebrick;\r\n\t\t\t\t\t--primary-text: silver;\r\n\t\t\t\t--text-selection: rgba(139,69,19,0.99);\r\n\t\t\t\t\t--box-selection-fill: rgba(220,20,60,0.2);\r\n\t\t\t\t\t--loop-accent: #841;\r\n\t\t\t\t\t--link-accent: #841;\r\n\t\t\t\t\t--ui-widget-background: #800;\r\n\t\t\t\t\t--ui-widget-focus: #a00;\r\n\t\t\t\t\t--pitch-background: #700;\r\n\t\t\t\t\t--tonic: #522;\r\n\t\t\t\t\t--fifth-note: #f75;\r\n\t\t\t\t\t--pitch-channel-limit: 6;\r\n\t\t\t\t\t--noise-channel-limit: 3;\r\n\t\t\t\t--pitch1-secondary-channel: #7e4a35;\r\n\t\t\t\t\t--pitch1-primary-channel:   #c27251;\r\n\t\t\t\t\t--pitch1-secondary-note:    #7e4a35;\r\n\t\t\t\t\t--pitch1-primary-note:      #f09571;\r\n\t\t\t\t\t--pitch2-secondary-channel: #998a5c;\r\n\t\t\t\t\t--pitch2-primary-channel:   #d9c27c;\r\n\t\t\t\t\t--pitch2-secondary-note:    #998a5c;\r\n\t\t\t\t\t--pitch2-primary-note:      #fae196;\r\n\t\t\t\t\t--pitch3-secondary-channel: #9c927c;\r\n\t\t\t\t\t--pitch3-primary-channel:   #dbceb0;\r\n\t\t\t\t\t--pitch3-secondary-note:    #9c927c;\r\n\t\t\t\t\t--pitch3-primary-note:      #eddebb;\r\n\t\t\t\t\t--pitch4-secondary-channel: #838060;\r\n\t\t\t\t\t--pitch4-primary-channel:   #ccc795;\r\n\t\t\t\t\t--pitch4-secondary-note:    #838060;\r\n\t\t\t\t\t--pitch4-primary-note:      #f2ecb1;\r\n\t\t\t\t\t--pitch5-secondary-channel: #8b6f47;\r\n\t\t\t\t\t--pitch5-primary-channel:   #d1a76b;\r\n\t\t\t\t\t--pitch5-secondary-note:    #8b6f47;\r\n\t\t\t\t\t--pitch5-primary-note:      #ffcc82;\r\n\t\t\t\t\t--pitch6-secondary-channel: #a96e5b;\r\n\t\t\t\t\t--pitch6-primary-channel:   #e3967d;\r\n\t\t\t\t\t--pitch6-secondary-note:    #a96e5b;\r\n\t\t\t\t\t--pitch6-primary-note:      #ffa68a;\r\n\t\t\t\t\t\t--pitch7-secondary-channel: #7e4a35;\r\n\t\t\t\t\t--pitch7-primary-channel:   #c27251;\r\n\t\t\t\t\t--pitch7-secondary-note:    #7e4a35;\r\n\t\t\t\t\t--pitch7-primary-note:      #f09571;\r\n\t\t\t\t\t--pitch8-secondary-channel: #998a5c;\r\n\t\t\t\t\t--pitch8-primary-channel:   #d9c27c;\r\n\t\t\t\t\t--pitch8-secondary-note:    #998a5c;\r\n\t\t\t\t\t--pitch8-primary-note:      #fae196;\r\n\t\t\t\t\t--pitch9-secondary-channel: #9c927c;\r\n\t\t\t\t\t--pitch9-primary-channel:   #dbceb0;\r\n\t\t\t\t\t--pitch9-secondary-note:    #9c927c;\r\n\t\t\t\t\t--pitch9-primary-note:      #eddebb;\r\n\t\t\t\t\t--pitch10-secondary-channel: #838060;\r\n\t\t\t\t\t--pitch10-primary-channel:   #ccc795;\r\n\t\t\t\t\t--pitch10-secondary-note:    #838060;\r\n\t\t\t\t\t--pitch10-primary-note:      #f2ecb1;\r\n\t\t\t\t\t--noise4-secondary-channel: #6f6f6f;\r\n\t\t\t\t\t--noise4-primary-channel:   #aaaaaa;\r\n\t\t\t\t\t--noise4-secondary-note:    #a7a7a7;\r\n\t\t\t\t\t--noise4-primary-note:      #e0e0e0;\r\n\t\t\t\t\t--noise5-secondary-channel: #996633;\r\n\t\t\t\t\t--noise5-primary-channel:   #ddaa77;\r\n\t\t\t\t\t--noise5-secondary-note:    #cc9966;\r\n\t\t\t\t\t--noise5-primary-note:      #f0d0bb;\r\n         --mod1-secondary-channel: #7e4a35;\r\n\t\t\t\t\t--mod1-primary-channel:   #c27251;\r\n\t\t\t\t\t--mod1-secondary-note:    #7e4a35;\r\n\t\t\t\t\t--mod1-primary-note:      #f09571;\r\n\t\t\t\t\t--mod2-secondary-channel: #998a5c;\r\n\t\t\t\t\t--mod2-primary-channel:   #d9c27c;\r\n\t\t\t\t\t--mod2-secondary-note:    #998a5c;\r\n\t\t\t\t\t--mod2-primary-note:      #fae196;\r\n\t\t\t\t\t--mod3-secondary-channel: #9c927c;\r\n\t\t\t\t\t--mod3-primary-channel:   #dbceb0;\r\n\t\t\t\t\t--mod3-secondary-note:    #9c927c;\r\n\t\t\t\t\t--mod3-primary-note:      #eddebb;\r\n\t\t\t\t\t--mod4-secondary-channel: #838060;\r\n\t\t\t\t\t--mod4-primary-channel:   #ccc795;\r\n\t\t\t\t\t--mod4-secondary-note:    #838060;\r\n\t\t\t\t\t--mod4-primary-note:      #f2ecb1;\r\n\t\t\t\t\t--note-flash: firebrick;\r\n  \t\t\t\t\t--note-flash-secondary: firebrick;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\t \"shitbox 3.0\": `\r\n\t\t\t\r\n\t\t\t:root {\r\n\t\t\t\tfont: 20px/2 monospace;\r\n\t\t\t\t--page-margin: #252525;\r\n\t\t\t\t--editor-background: #252525;\r\n\t\t\t\t--primary-text: #C8C8C8;\r\n\t\t\t\t--link-accent: #945800;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #444;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #444;\r\n\t\t\t\t\t--pitch-channel-limit: 6;\r\n\t\t\t\t\t--noise-channel-limit: 3;\r\n\t\t\t\t\t--text-disabled-icon: ✗ ;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.beepboxEditor input[type=\"range\"]::-moz-range-thumb {\r\n\t\t\t\t\twidth: 8px !important;\r\n\t\t\t\t  }\r\n\r\n\t\t\t\tbutton.playButton {\r\n\t\t\t\t\twidth: 80px;\r\n\t\t\t\t}\r\n\t\t\t\tbutton.prevBarButton {\r\n\t\t\t\t\twidth: 40px;\r\n\t\t\t\t\tleft:-5px;\r\n\t\t\t\t}\r\n\t\t\t\tbutton.nextBarButton {\r\n\t\t\t\t\twidth: 40px;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.trackContainer .noSelection {\r\n\t\t\t\tbackground: black !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tspan input, \r\n\t\t\t\tdiv.harmonics svg,\r\n\t\t\t\tdiv.spectrum svg,\r\n\t\t\t\tdiv.filterEditor svg,\r\n\t\t\t\tdiv.fadeInOut svg,\r\n\t\t\t\tdiv.loopEditor svg,\r\n\t\t\t\tsvg#firstImage \r\n\t\t\t\t{\r\n\t\t\t\t\tbackground: black !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.beepboxEditor {\r\n\t\t\t\t\tline-height: 1.25;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t#text-content {\r\n\t\t\t\t\tfont-size: 32px;\r\n\t\t\t\t\tline-height: 40px;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t#text-content > section > h1 {\r\n\t\t\t\t\tcolor: #C8C8C8;\r\n\t\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\t\"nerdbox\": `\r\n\t\t\t:root {\r\n\t\t\t\t\t--pitch-channel-limit: 9;\r\n\t\t\t\t\t--noise-channel-limit: 3;\r\n\t\t\t\t--pitch1-secondary-channel: #139620;\r\n\t\t\t\t--pitch1-primary-channel:   #25ff3a;\r\n\t\t\t\t--pitch1-secondary-note:    #139620;\r\n\t\t\t\t--pitch1-primary-note:      #25ff3a;\r\n\t\t\t\t--pitch2-secondary-channel: #109986;\r\n\t\t\t\t--pitch2-primary-channel:   #1cffe0;\r\n\t\t\t\t--pitch2-secondary-note:    #109986;\r\n\t\t\t\t--pitch2-primary-note:      #1cffe0;\r\n\t\t\t\t--pitch3-secondary-channel: #127296;\r\n\t\t\t\t--pitch3-primary-channel:   #21c3ff;\r\n\t\t\t\t--pitch3-secondary-note:    #127296;\r\n\t\t\t\t--pitch3-primary-note:      #21c3ff;\r\n\t\t\t\t--pitch4-secondary-channel: #6038a5;\r\n\t\t\t\t--pitch4-primary-channel:   #9456ff;\r\n\t\t\t\t--pitch4-secondary-note:    #6038a5;\r\n\t\t\t\t--pitch4-primary-note:      #ff35e0;\r\n\t\t\t\t--pitch5-secondary-channel: #a52491;\r\n\t\t\t\t--pitch5-primary-channel:   #ff35e0;\r\n\t\t\t\t--pitch5-secondary-note:    #a52491;\r\n\t\t\t\t--pitch5-primary-note:      #af3221;\r\n\t\t\t\t--pitch6-secondary-channel: #af3221;\r\n\t\t\t\t--pitch6-primary-channel:   #ff4a32;\r\n\t\t\t\t--pitch6-secondary-note:    #af3221;\r\n\t\t\t\t--pitch6-primary-note:      #ff4a32;\r\n\t\t\t\t--pitch7-secondary-channel: #ad6e0f;\r\n\t\t\t\t--pitch7-primary-channel:   #ffa216;\r\n\t\t\t\t--pitch7-secondary-note:    #ad6e0f;\r\n\t\t\t\t--pitch7-primary-note:      #ffa216;\r\n\t\t\t\t--pitch8-secondary-channel: #ad6e0f;\r\n\t\t\t\t--pitch8-primary-channel:   #ffa216;\r\n\t\t\t\t--pitch8-secondary-note:    #ad6e0f;\r\n\t\t\t\t--pitch8-primary-note:      #ffa216;\r\n\t\t\t\t--pitch9-secondary-channel: #a7b512;\r\n\t\t\t\t--pitch9-primary-channel:   #ebff19;\r\n\t\t\t\t--pitch9-secondary-note:    #a7b512;\r\n\t\t\t\t--pitch9-primary-note:      #ebff19;\r\n\t\t\t\t--pitch10-secondary-channel:#70ad1b;\r\n\t\t\t\t--pitch10-primary-channel:  #a4ff26;\r\n\t\t\t\t--pitch10-secondary-note:   #70ad1b;\r\n\t\t\t\t--pitch10-primary-note:     #a4ff26;\r\n\t\t\t\t--noise1-secondary-channel: #68706f;\r\n\t\t\t\t--noise1-primary-channel:   #a6b2b1;\r\n\t\t\t\t--noise1-secondary-note:    #68706f;\r\n\t\t\t\t--noise1-primary-note:      #a6b2b1;\r\n\t\t\t\t--noise2-secondary-channel: #665c64;\r\n\t\t\t\t--noise2-primary-channel:   #a396a1;\r\n\t\t\t\t--noise2-secondary-note:    #665c64;\r\n\t\t\t\t--noise2-primary-note:      #a396a1;\r\n\t\t\t\t--noise3-secondary-channel: #60605a;\r\n\t\t\t\t--noise3-primary-channel:   #afaea3;\r\n\t\t\t\t--noise3-secondary-note:    #60605a;\r\n\t\t\t\t--noise3-primary-note:      #afaea3;\r\n\t\t\t--noise4-secondary-channel: #665c64;\r\n\t\t\t--noise4-primary-channel:   #a396a1;\r\n\t\t\t\t--noise4-secondary-note:    #665c64;\r\n\t\t\t\t--noise4-primary-note:      #a396a1;\r\n\t\t\t\t--noise5-secondary-channel: #60605a;\r\n\t\t\t\t--noise5-primary-channel:   #afaea3;\r\n\t\t\t\t--noise5-secondary-note:    #60605a;\r\n\t\t\t\t--noise5-primary-note:      #afaea3;\r\n         --mod1-secondary-channel: #139620;\r\n\t\t\t\t--mod1-primary-channel:   #25ff3a;\r\n\t\t\t\t--mod1-secondary-note:    #139620;\r\n\t\t\t\t--mod1-primary-note:      #25ff3a;\r\n\t\t\t\t--mod2-secondary-channel: #109986;\r\n\t\t\t\t--mod2-primary-channel:   #1cffe0;\r\n\t\t\t\t--mod2-secondary-note:    #109986;\r\n\t\t\t\t--mod2-primary-note:      #1cffe0;\r\n\t\t\t\t--mod3-secondary-channel: #127296;\r\n\t\t\t\t--mod3-primary-channel:   #21c3ff;\r\n\t\t\t\t--mod3-secondary-note:    #127296;\r\n\t\t\t\t--mod3-primary-note:      #21c3ff;\r\n\t\t\t\t--mod4-secondary-channel: #6038a5;\r\n\t\t\t\t--mod4-primary-channel:   #9456ff;\r\n\t\t\t\t--mod4-secondary-note:    #6038a5;\r\n\t\t\t\t--mod4-primary-note:      #ff35e0;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\t\"nepbox\": `\r\n\t\t\t:root {\r\n\t\t\t\t--page-margin: #000;\r\n\t\t\t\t--editor-background: #060606;\r\n\t\t\t\t--hover-preview: #fff;\r\n\t\t\t\t--playhead: rgb(0, 242, 255);\r\n\t\t\t\t--primary-text: #00fff5;\r\n\t\t\t\t--secondary-text: #a82f2f;\r\n\t\t\t\t--inverted-text: #000;\r\n\t\t\t\t--text-selection: rgba(98, 46, 164, .99);\r\n\t\t\t\t--box-selection-fill: #b74a4a;\r\n\t\t\t\t--loop-accent: #7744FF;\r\n\t\t\t\t--link-accent: #ff00e1;\r\n\t\t\t\t--ui-widget-background: #484848;\r\n\t\t\t\t--ui-widget-focus: #3e3e3e;\r\n\t\t\t\t--pitch-background: #0a2d44;\r\n\t\t\t\t--tonic: #9150ff;\r\n\t\t\t\t--fifth-note: #900;\r\n\t\t\t\t--white-piano-key: #353535;\r\n\t\t\t\t--black-piano-key: #fff;\r\n\t\t\t\t--white-piano-key-text: #fff;\r\n\t\t\t\t--black-piano-key-text: #000;\r\n\t\t\t\t--track-editor-bg-pitch: #424242;\r\n\t\t\t\t--track-editor-bg-pitch-dim: #000;\r\n\t\t\t\t--track-editor-bg-noise: #424242;\r\n\t\t\t\t--track-editor-bg-noise-dim: #000;\r\n\t\t\t\t--track-editor-bg-mod: #3c3c3c;\r\n\t\t\t\t--track-editor-bg-mod-dim: #000;\r\n\t\t\t\t--multiplicative-mod-slider: #fff;\r\n\t\t\t\t--overwriting-mod-slider: #9d9d9d;\r\n\t\t\t\t--indicator-primary: #f00;\r\n\t\t\t\t--indicator-secondary: #919191;\r\n\t\t\t\t--select2-opt-group: #5d576f;\r\n\t\t\t\t--input-box-outline: #626262;\r\n\t\t\t\t--mute-button-normal: #9a00ff;\r\n\t\t\t\t--mute-button-mod: #00fff7;\r\n\t\t\t\t--mod-label-primary: #2b2b2b;\r\n\t\t\t\t--pitch-channel-limit: 4;\r\n\t\t\t\t--noise-channel-limit: 2;\r\n\r\n\t\t\t\t--pitch1-secondary-channel: #c13cbf;\r\n\t\t\t\t--pitch1-primary-channel: #f75dff;\r\n\t\t\t\t--pitch1-secondary-note: #b930a2;\r\n\t\t\t\t--pitch1-primary-note: #fca5ff;\r\n\t\t\t\t--pitch2-secondary-channel: #800000;\r\n\t\t\t\t--pitch2-primary-channel: #f00;\r\n\t\t\t\t--pitch2-secondary-note: #8c2121;\r\n\t\t\t\t--pitch2-primary-note: #ff5252;\r\n\t\t\t\t--pitch3-secondary-channel: #004bb3;\r\n\t\t\t\t--pitch3-primary-channel: #1792ff;\r\n\t\t\t\t--pitch3-secondary-note: #005cb3;\r\n\t\t\t\t--pitch3-primary-note: #00ffe9;\r\n\t\t\t\t--pitch4-secondary-channel: #a48800;\r\n\t\t\t\t--pitch4-primary-channel: #fb0;\r\n\t\t\t\t--pitch4-secondary-note: #9c4100;\r\n\t\t\t\t--pitch4-primary-note: #ffd84e;\r\n\t\t\t\t--noise1-secondary-channel: #868686;\r\n\t\t\t\t--noise1-primary-channel: #fff;\r\n\t\t\t\t--noise1-secondary-note: #868686;\r\n\t\t\t\t--noise1-primary-note: #fff;\r\n\t\t\t\t--noise2-secondary-channel: #805300;\r\n\t\t\t\t--noise2-primary-channel: #ff8c00;\r\n\t\t\t\t--noise2-secondary-note: #6a3500;\r\n\t\t\t\t--noise2-primary-note: #a85400;\r\n\t\t\t\t--mod1-secondary-channel: #6c0000;\r\n\t\t\t\t--mod1-primary-channel: #ff3e3e;\r\n\t\t\t\t--mod1-secondary-note: #6c0000;\r\n\t\t\t\t--mod1-primary-note: #ff3e3e;\r\n\t\t\t\t--mod2-secondary-channel: #d25a00;\r\n\t\t\t\t--mod2-primary-channel: #fdff00;\r\n\t\t\t\t--mod2-secondary-note: #d25a00;\r\n\t\t\t\t--mod2-primary-note: #fdff00;\r\n\t\t\t\t--mod3-secondary-channel: #046000;\r\n\t\t\t\t--mod3-primary-channel: #23ff1b;\r\n\t\t\t\t--mod3-secondary-note: #046000;\r\n\t\t\t\t--mod3-primary-note: #23ff1b;\r\n\t\t\t\t--mod4-secondary-channel: #3b2bae;\r\n\t\t\t\t--mod4-primary-channel: #0c79ff;\r\n\t\t\t\t--mod4-secondary-note: #3b2bae;\r\n\t\t\t\t--mod4-primary-note: #0c79ff;\r\n\t\t\t\t--disabled-note-secondary: #696969;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\t \"cardboardbox classic\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #0f0700;\r\n--editor-background: #0f0700;\r\n--hover-preview: #75461d;\r\n--playhead: #75461d;\r\n--primary-text: #ddd;\r\n--secondary-text: #8e695b;\r\n--text-selection: #75461d;\r\n--box-selection-fill: rgba(117, 70, 29,0.5);\r\n--loop-accent: #75461d;\r\n--link-accent: #75461d;\r\n--ui-widget-background: #574a3e;\r\n--ui-widget-focus: #756453;\r\n--pitch-background: #361900;\r\n--tonic: #fdba9a;\r\n--fifth-note: #7f78d2;\r\n--pitch1-secondary-channel: #798566;\r\n--pitch1-primary-channel: #9dab86;\r\n--pitch1-secondary-note: #798566;\r\n--pitch1-primary-note: #9dab86;\r\n--pitch2-secondary-channel: #a6733d;\r\n--pitch2-primary-channel: #e6a157;\r\n--pitch2-secondary-note: #a6733d;\r\n--pitch2-primary-note: #e6a157;\r\n--pitch3-secondary-channel: #874c27;\r\n--pitch3-primary-channel: #eb8242;\r\n--pitch3-secondary-note: #874c27;\r\n--pitch3-primary-note: #eb8242;\r\n--pitch4-secondary-channel: #395866;\r\n--pitch4-primary-channel: #537d91;\r\n--pitch4-secondary-note: #395866;\r\n--pitch4-primary-note: #537d91;\r\n--pitch5-secondary-channel: #779992;\r\n--pitch5-primary-channel: #a4d1c8;\r\n--pitch5-secondary-note: #779992;\r\n--pitch5-primary-note: #a4d1c8;\r\n--pitch7-secondary-channel: #300707;\r\n--pitch7-primary-channel: #560d0d;\r\n--pitch7-secondary-note: #300707;\r\n--pitch7-primary-note: #560d0d;\r\n--pitch8-secondary-channel: #486312;\r\n--pitch8-primary-channel: #76a21e;\r\n--pitch8-secondary-note: #486312;\r\n--pitch8-primary-note: #76a21e;\r\n--pitch9-secondary-channel: #4a1242;\r\n--pitch9-primary-channel: #721b65;\r\n--pitch9-secondary-note: #4a1242;\r\n--pitch9-primary-note: #721b65;\r\n--pitch10-secondary-channel: #7a312d;\r\n--pitch10-primary-channel: #f8615a;\r\n--pitch10-secondary-note: #7a312d;\r\n--pitch10-primary-note: #f8615a;\r\n--noise1-secondary-channel: #5f6582;\r\n--noise1-primary-channel: #a6b1e1;\r\n--noise1-secondary-note: #5f6582;\r\n--noise1-primary-note: #a6b1e1;\r\n--noise4-secondary-channel: #6B3E8E;\r\n--noise5-secondary-channel: #996633;\r\n--noise5-primary-channel: #ddaa77;\r\n--noise5-secondary-note: #cc9966;\r\n--noise5-primary-note: #f0d0bb;\r\n--mod1-secondary-channel: #339955;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\t\"blubox classic\": `\r\n\t\t\t:root {\r\n\t\t\t\t--page-margin: #040410;\r\n\t\t\t\t\t--editor-background: #040410;\r\n\t\t\t\t\t--secondary-text: #84859a;\r\n\t\t\t\t\t--box-selection-fill: #044b94;\r\n\t\t\t\t\t--link-accent: #024ACA;\r\n\t\t\t\t\t--ui-widget-background: #393e4f;\r\n\t\t\t\t\t--ui-widget-focus: #6d6886;\r\n\t\t\t\t\t--pitch-background: #393e4f;\r\n\t\t\t\t\t--tonic: #725491;\r\n\t\t\t\t\t--fifth-note: #54547a;\r\n\t\t\t\t\t--track-editor-bg-pitch: #393e4f;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\r\n\t\t\t\t\t--track-editor-bg-noise: #3d3535;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #161313;\r\n\t\t\t\t\t--track-editor-bg-mod: #283560;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a101f;\r\n\t\t\t\t\t--multiplicative-mod-slider: #606c9f;\r\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\r\n\t\t\t\t\t--indicator-primary: #9c64f7;\r\n\t\t\t\t\t--indicator-secondary: #393e4f;\r\n\t\t\t\t\t--select2-opt-group: #5d576f;\r\n\t\t\t\t\t--input-box-outline: #222;\r\n\t\t\t\t\t--mute-button-normal: #886eae;\r\n\t\t\t\t\t--pitch1-secondary-channel: #0A89FF;\r\n\t\t\t\t\t--pitch1-primary-channel:   #024ACA;\r\n\t\t\t\t\t--pitch1-secondary-note:    #0A89FF;\r\n\t\t\t\t\t--pitch1-primary-note:      #024ACA;\r\n\t\t\t\t\t--pitch2-secondary-channel: #0A89FF;\r\n\t\t\t\t\t--pitch2-primary-channel:   #024ACA;\r\n\t\t\t\t\t--pitch2-secondary-note:    #0A89FF;\r\n\t\t\t\t\t--pitch2-primary-note:      #024ACA;\r\n\t\t\t\t\t--pitch3-secondary-channel: #0A89FF;\r\n\t\t\t\t\t--pitch3-primary-channel:   #024ACA;\r\n\t\t\t\t\t--pitch3-secondary-note:    #0A89FF;\r\n\t\t\t\t\t--pitch3-primary-note:      #024ACA;\r\n\t\t\t\t\t--pitch4-secondary-channel: #0A89FF;\r\n\t\t\t\t\t--pitch4-primary-channel:   #024ACA;\r\n\t\t\t\t\t--pitch4-secondary-note:    #0A89FF;\r\n\t\t\t\t\t--pitch4-primary-note:      #024ACA;\r\n\t\t\t\t\t--pitch5-secondary-channel: #0A89FF;\r\n\t\t\t\t\t--pitch5-primary-channel:   #024ACA;\r\n\t\t\t\t\t--pitch5-secondary-note:    #0A89FF;\r\n\t\t\t\t\t--pitch5-primary-note:      #024ACA;\r\n\t\t\t\t\t--pitch6-secondary-channel: #0A89FF;\r\n\t\t\t\t\t--pitch6-primary-channel:   #024ACA;\r\n\t\t\t\t\t--pitch6-secondary-note:    #0A89FF;\r\n\t\t\t\t\t--pitch6-primary-note:      #024ACA;\r\n\t\t\t\t\t--pitch7-secondary-channel: #0A89FF;\r\n\t\t\t\t\t--pitch7-primary-channel:   #024ACA;\r\n\t\t\t\t\t--pitch7-secondary-note:\t  #0A89FF;\r\n\t\t\t\t\t--pitch7-primary-note:\t\t\t#024ACA;\r\n\t\t\t\t\t--pitch8-secondary-channel: #0A89FF;\r\n\t\t\t\t\t--pitch8-primary-channel:   #024ACA;\r\n\t\t\t\t\t--pitch8-secondary-note:    #0A89FF;\r\n\t\t\t\t\t--pitch8-primary-note:      #024ACA;\r\n\t\t\t\t\t--pitch9-secondary-channel: #0A89FF;\r\n\t\t\t\t\t--pitch9-primary-channel:   #024ACA;\r\n\t\t\t\t\t--pitch9-secondary-note:    #0A89FF;\r\n\t\t\t\t\t--pitch9-primary-note:\t\t\t#024ACA;\r\n\t\t\t\t\t--pitch10-secondary-channel:#0A89FF;\r\n\t\t\t\t\t--pitch10-primary-channel:  #024ACA;\r\n\t\t\t\t\t--pitch10-secondary-note:   #0A89FF;\r\n\t\t\t\t\t--pitch10-primary-note:     #024ACA;\r\n\t\t\t\t\t--noise1-secondary-channel: #0A89FF;\r\n\t\t\t\t\t--noise1-primary-channel:   #024ACA;\r\n\t\t\t\t\t--noise1-secondary-note:    #0A89FF;\r\n\t\t\t\t\t--noise1-primary-note:      #024ACA;\r\n\t\t\t\t\t--noise2-secondary-channel: #0A89FF;\r\n\t\t\t\t\t--noise2-primary-channel:   #024ACA;\r\n\t\t\t\t\t--noise2-secondary-note:    #0A89FF;\r\n\t\t\t\t\t--noise2-primary-note:      #024ACA;\r\n\t\t\t\t\t--noise3-secondary-channel: #0A89FF;\r\n\t\t\t\t\t--noise3-primary-channel:   #024ACA;\r\n\t\t\t\t\t--noise3-secondary-note:    #0A89FF;\r\n\t\t\t\t\t--noise3-primary-note:      #024ACA;\r\n\t\t\t\t\t--noise4-secondary-channel: #0A89FF;\r\n\t\t\t\t\t--noise4-primary-channel:   #024ACA;\r\n\t\t\t\t\t--noise4-secondary-note:    #0A89FF;\r\n\t\t\t\t\t--noise4-primary-note:      #024ACA;\r\n\t\t\t\t\t--mod1-secondary-channel:   #0A89FF;\r\n\t\t\t\t\t--mod1-primary-channel:     #024ACA;\r\n\t\t\t\t\t--mod1-secondary-note:      #0A89FF;\r\n\t\t\t\t\t--mod1-primary-note:        #024ACA;\r\n\t\t\t\t\t--mod2-secondary-channel:   #0A89FF;\r\n\t\t\t\t\t--mod2-primary-channel:     #024ACA;\r\n\t\t\t\t\t--mod2-secondary-note:      #0A89FF;\r\n\t\t\t\t\t--mod2-primary-note:        #024ACA;\r\n\t\t\t\t\t--mod3-secondary-channel:   #0A89FF;\r\n\t\t\t\t\t--mod3-primary-channel:     #024ACA;\r\n\t\t\t\t\t--mod3-secondary-note:      #0A89FF;\r\n\t\t\t\t\t--mod3-primary-note:\t\t\t  #024ACA;\r\n\t\t\t\t\t--mod4-secondary-channel:   #0A89FF;\r\n\t\t\t\t\t--mod4-primary-channel:     #024ACA;\r\n\t\t\t\t\t--mod4-secondary-note:      #0A89FF;\r\n\t\t\t\t\t--mod4-primary-note:        #024ACA;\r\n\t\t\t\t\t--mod-label-primary:        #282840;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\r\n\t\t\t\t\t--mod-label-primary-text:   white;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"dogebox classic\": `\r\n\t\t\t\t:root {\r\n\t\t\t--page-margin: #0d0063;\r\n\t\t\t--editor-background: #0D0063;\r\n\t\t\t--pitch-background: #322c59;\r\n\t\t\t--tonic: #1c1933;\r\n\t\t\t--fifth-note: #7b74ad;\r\n\t\t\t--pitch-channel-limit: 6;\r\n\t\t\t--noise-channel-limit: 3;\r\n\t\t\t--pitch1-secondary-channel: #c7ac00;\r\n\t\t\t--pitch1-primary-channel: #fcf403;\r\n\t\t\t--pitch1-secondary-note: #c7c700;\r\n\t\t\t--pitch1-primary-note: #fcf403;\r\n\t\t\t--pitch2-secondary-channel: #9400b5;\r\n\t\t\t--pitch2-primary-channel: #ff00ee;\r\n\t\t\t--pitch2-secondary-note: #9400b5;\r\n\t\t\t--pitch2-primary-note: #ff00ee;\r\n\t\t\t--pitch3-secondary-channel: #b37466;\r\n\t\t\t--pitch3-primary-channel: #ffc6a1;\r\n\t\t\t--pitch3-secondary-note: #b37466;\r\n\t\t\t--pitch3-primary-note: #ffc6a1;\r\n\t\t\t--pitch7-secondary-channel: #c7ac00;\r\n\t\t\t--pitch7-primary-channel: #fcf403;\r\n\t\t\t--pitch7-secondary-note: #c7c700;\r\n\t\t\t--pitch7-primary-note: #fcf403;\r\n\t\t\t--pitch8-secondary-channel: #9400b5;\r\n\t\t\t--pitch8-primary-channel: #ff00ee;\r\n\t\t\t--pitch8-secondary-note: #9400b5;\r\n\t\t\t--pitch8-primary-note: #ff00ee;\r\n\t\t\t--pitch9-secondary-channel: #b37466;\r\n\t\t\t--pitch9-primary-channel: #ffc6a1;\r\n\t\t\t--pitch9-secondary-note: #b37466;\r\n\t\t\t--pitch9-primary-note: #ffc6a1;\r\n\t\t\t--pitch10-secondary-channel: #00a100;\r\n\t\t\t--pitch10-primary-channel: #50ff50;\r\n\t\t\t--pitch10-secondary-note: #00c700;\r\n\t\t\t--pitch10-primary-note: #a0ffa0;\r\n\t\t\t--noise1-secondary-channel: #95acad;\r\n\t\t\t--noise1-primary-channel: #cee9eb;\r\n\t\t\t--noise1-secondary-note: #95acad;\r\n\t\t\t--noise1-primary-note: #cee9eb;\r\n\t\t\t--noise4-secondary-channel: #7c9b42;\r\n\t\t\t--noise4-primary-channel:   #a5ff00;\r\n\t\t\t--noise4-secondary-note:    #7c9b42;\r\n\t\t\t--noise4-primary-note:      #a5ff00;\r\n\t\t\t--noise5-secondary-channel: #7c9b42;\r\n      \t \t--mod1-secondary-channel: #c7ac00;\r\n\t\t\t--mod1-primary-channel: #fcf403;\r\n\t\t\t--mod1-secondary-note: #c7c700;\r\n\t\t\t--mod1-primary-note: #fcf403;\r\n\t\t\t--mod2-secondary-channel: #9400b5;\r\n\t\t\t--mod2-primary-channel: #ff00ee;\r\n\t\t\t--mod2-secondary-note: #9400b5;\r\n\t\t\t--mod2-primary-note: #ff00ee;\r\n\t\t\t--mod3-secondary-channel: #b37466;\r\n\t\t\t--mod3-primary-channel: #ffc6a1;\r\n\t\t\t--mod3-secondary-note: #b37466;\r\n\t\t\t--mod3-primary-note: #ffc6a1;\r\n\t\t\t--mod4-secondary-channel: #00a100;\r\n\t\t\t--mod4-primary-channel: #50ff50;\r\n\t\t\t--mod4-secondary-note: #00c700;\r\n\t\t\t--mod4-primary-note: #a0ffa0;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t  \"dogebox dark\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #0d0063;\r\n\t\t\t\t\t--editor-background: #0D0063;\r\n\t\t\t\t\t--pitch-background: #322c59;\r\n\t\t\t\t\t--tonic: #1c1933;\r\n\t\t\t\t\t--fifth-note: #7b74ad;\r\n\t\t\t\t\t--pitch1-secondary-channel: #c7ac00;\r\n\t\t\t\t\t--pitch1-primary-channel:   #fcf403;\r\n\t\t\t\t\t--pitch1-secondary-note:    #c7c700;\r\n\t\t\t\t\t--pitch1-primary-note:      #fcf403;\r\n\t\t\t\t\t--pitch2-secondary-channel: #9400b5;\r\n\t\t\t\t\t--pitch2-primary-channel:   #ff00ee;\r\n\t\t\t\t\t--pitch2-secondary-note:    #9400b5;\r\n\t\t\t\t\t--pitch2-primary-note:      #ff00ee;\r\n\t\t\t\t\t--pitch3-secondary-channel: #b37466;\r\n\t\t\t\t\t--pitch3-primary-channel:   #ffc6a1;\r\n\t\t\t\t\t--pitch3-secondary-note:    #b37466;\r\n\t\t\t\t\t--pitch3-primary-note:      #ffc6a1;\r\n\t\t\t\t\t--noise1-secondary-channel: #95acad;\r\n\t\t\t\t\t--noise1-primary-channel:   #cee9eb;\r\n\t\t\t\t\t--noise1-secondary-note:    #95acad;\r\n\t\t\t\t\t--noise1-primary-note:      #cee9eb;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"todbox dark mode\": `\r\n\t\t\t:root {\r\n\t\t\t\t-webkit-text-stroke-width: 0.5px;\r\n\t\t\t\t\t--hover-preview: #999999;\r\n\t\t\t\t\t--playhead: #999999;\r\n\t\t\t\t\t--primary-text: #999999;\r\n\t\t\t\t\t--secondary-text: #444444;\r\n\t\t\t\t--text-selection: #999999;\r\n\t\t\t\t\t--box-selection-fill: #999999;\r\n\t\t\t\t\t--loop-accent: #999999;\r\n\t\t\t\t\t--link-accent: #999999;\r\n\t\t\t\t\t--ui-widget-background: #222222;\r\n\t\t\t\t\t--ui-widget-focus: #444444;\r\n\t\t\t\t--pitch-background: #101010;\r\n\t\t\t\t\t--tonic: #404040;\r\n\t\t\t\t\t--fifth-note: #202020;\r\n\t\t\t\t\t--white-piano-key: #999999;\r\n\t\t\t\t\t--black-piano-key: #101010;\r\n\t\t\t\t\t--pitch-channel-limit: 6;\r\n\t\t\t\t\t--noise-channel-limit: 3;\r\n\t\t\t\t\t--pitch1-secondary-channel: #004444;\r\n\t\t\t\t\t--pitch1-primary-channel:   #009999;\r\n\t\t\t\t\t--pitch1-secondary-note:    #004444;\r\n\t\t\t\t\t--pitch1-primary-note:      #009999;\r\n\t\t\t\t\t--pitch2-secondary-channel: #444400;\r\n\t\t\t\t\t--pitch2-primary-channel:   #999900;\r\n\t\t\t\t\t--pitch2-secondary-note:    #444400;\r\n\t\t\t\t\t--pitch2-primary-note:      #999900;\r\n\t\t\t\t\t--pitch3-secondary-channel: #443300;\r\n\t\t\t\t\t--pitch3-primary-channel:   #996600;\r\n\t\t\t\t\t--pitch3-secondary-note:    #443300;\r\n\t\t\t\t\t--pitch3-primary-note:      #996600;\r\n\t\t\t\t\t--pitch4-secondary-channel: #004400;\r\n\t\t\t\t\t--pitch4-primary-channel:   #009900;\r\n\t\t\t\t\t--pitch4-secondary-note:    #004400;\r\n\t\t\t\t\t--pitch4-primary-note:      #009900;\r\n\t\t\t\t\t--pitch5-secondary-channel: #440044;\r\n\t\t\t\t\t--pitch5-primary-channel:   #990099;\r\n\t\t\t\t\t--pitch5-secondary-note:    #440044;\r\n\t\t\t\t\t--pitch5-primary-note:      #990099;\r\n\t\t\t\t\t--pitch6-secondary-channel: #333344;\r\n\t\t\t\t\t--pitch6-primary-channel:   #666699;\r\n\t\t\t\t\t--pitch6-secondary-note:    #333344;\r\n\t\t\t\t\t--pitch6-primary-note:      #666699;\r\n\t\t\t\t\t--pitch7-secondary-channel: #444400;\r\n\t\t\t\t\t--pitch7-primary-channel:   #999900;\r\n\t\t\t\t\t--pitch7-secondary-note:    #444400;\r\n\t\t\t\t\t--pitch7-primary-note:      #999900;\r\n\t\t\t\t\t--pitch8-secondary-channel: #824E54;\r\n\t\t\t\t\t--pitch8-primary-channel:   #C4757E;\r\n\t\t\t\t\t--pitch8-secondary-note:    #824E54;\r\n\t\t\t\t\t--pitch8-primary-note:      #C4757E;\r\n\t\t\t\t\t--pitch9-secondary-channel: #006342;\r\n\t\t\t\t\t--pitch9-primary-channel:   #008E5F;\r\n\t\t\t\t\t--pitch9-secondary-note:    #006342;\r\n\t\t\t\t\t--pitch9-primary-note:      #008E5F;\r\n\t\t\t\t\t--pitch10-secondary-channel: #561291;\r\n\t\t\t\t\t--pitch10-primary-channel:   #7819C1;\r\n\t\t\t\t\t--pitch10-secondary-note:    #561291;\r\n\t\t\t\t\t--pitch10-primary-note:      #7819C1;\r\n\t\t\t\t\t--noise1-secondary-channel: #444444;\r\n\t\t\t\t\t--noise1-primary-channel:   #999999;\r\n\t\t\t\t\t--noise1-secondary-note:    #444444;\r\n\t\t\t\t\t--noise1-primary-note:      #999999;\r\n\t\t\t\t\t--noise2-secondary-channel: #443311;\r\n\t\t\t\t\t--noise2-primary-channel:   #996633;\r\n\t\t\t\t\t--noise2-secondary-note:    #443311;\r\n\t\t\t\t\t--noise2-primary-note:      #996633;\r\n\t\t\t\t\t--noise3-secondary-channel: #113344;\r\n\t\t\t\t\t--noise3-primary-channel:   #336699;\r\n\t\t\t\t\t--noise3-secondary-note:    #113344;\r\n\t\t\t\t\t--noise3-primary-note:      #336699;\r\n\t\t\t\t\t--noise4-secondary-channel: #444444;\r\n\t\t\t\t\t--noise4-primary-channel:   #999999;\r\n\t\t\t\t\t--noise4-secondary-note:    #444444;\r\n\t\t\t\t\t--noise4-primary-note:      #999999;\r\n\t\t\t\t\t--noise5-secondary-channel: #443311;\r\n\t\t\t\t\t--noise5-primary-channel:   #996633;\r\n\t\t\t\t\t--noise5-secondary-note:    #443311;\r\n\t\t\t\t\t--noise5-primary-note:      #996633;\r\n          --mod1-secondary-channel: #004444;\r\n\t\t\t\t\t--mod1-primary-channel:   #009999;\r\n\t\t\t\t\t--mod1-secondary-note:    #004444;\r\n\t\t\t\t\t--mod1-primary-note:      #009999;\r\n\t\t\t\t\t--mod2-secondary-channel: #444400;\r\n\t\t\t\t\t--mod2-primary-channel:   #999900;\r\n\t\t\t\t\t--mod2-secondary-note:    #444400;\r\n\t\t\t\t\t--mod2-primary-note:      #999900;\r\n\t\t\t\t\t--mod3-secondary-channel: #443300;\r\n\t\t\t\t\t--mod3-primary-channel:   #996600;\r\n\t\t\t\t\t--mod3-secondary-note:    #443300;\r\n\t\t\t\t\t--mod3-primary-note:      #996600;\r\n\t\t\t\t\t--mod4-secondary-channel: #004400;\r\n\t\t\t\t\t--mod4-primary-channel:   #009900;\r\n\t\t\t\t\t--mod4-secondary-note:    #004400;\r\n\t\t\t\t\t--mod4-primary-note:      #009900;\r\n\t\t\t\t}\r\n\t\t\t\t.beepboxEditor button, .beepboxEditor select {\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\t\"mainbox 1.0\": `\r\n\t\t\t:root {\r\n\t\t\t\t--loop-accent: #2F1C40;\r\n\t\t\t\t--link-accent: #543873;\r\n\t\t\t\t--ui-widget-background: #2F1C40;\r\n\t\t\t\t--ui-widget-focus: #543873;\r\n\t\t\t\t--pitch-background: #2F1C40;\r\n\t\t\t\t--tonic: #42286D;\r\n\t\t\t\t--fifth-note: #37416B;\r\n\t\t\t\t--white-piano-key: #156CB6;\r\n\t\t\t\t--black-piano-key: #130D14;\r\n\t\t\t\t\t--pitch-channel-limit: 6;\r\n\t\t\t\t\t--noise-channel-limit: 3;\r\n\t\t\t\t\t--pitch1-secondary-channel: #156C99;\r\n\t\t\t\t\t--pitch1-primary-channel:   #00CFDF;\r\n\t\t\t\t\t--pitch1-secondary-note:    #0080A8;\r\n\t\t\t\t\t--pitch1-primary-note:      #009FC6;\r\n\t\t\t\t\t--pitch2-secondary-channel: #AD923A;\r\n\t\t\t\t\t--pitch2-primary-channel:   #FFD552;\r\n\t\t\t\t\t--pitch2-secondary-note:    #C49736;\r\n\t\t\t\t\t--pitch2-primary-note:      #EFC742;\r\n\t\t\t\t\t--pitch3-secondary-channel: #7A401E;\r\n\t\t\t\t\t--pitch3-primary-channel:   #C14E30;\r\n\t\t\t\t\t--pitch3-secondary-note:    #89381B;\r\n\t\t\t\t\t--pitch3-primary-note:      #E15427;\r\n\t\t\t\t\t--pitch4-secondary-channel: #0B6030;\r\n\t\t\t\t\t--pitch4-primary-channel:   #00915C;\r\n\t\t\t\t\t--pitch4-secondary-note:    #004337;\r\n\t\t\t\t\t--pitch4-primary-note:      #00915E;\r\n\t\t\t\t\t--pitch5-secondary-channel: #543873;\r\n\t\t\t\t\t--pitch5-primary-channel:   #695B95;\r\n\t\t\t\t\t--pitch5-secondary-note:    #8188BE;\r\n\t\t\t\t\t--pitch5-primary-note:      #848ED8;\r\n\t\t\t\t\t--pitch6-secondary-channel: #585882;\r\n\t\t\t\t\t--pitch6-primary-channel:   #5A72DD;\r\n\t\t\t\t\t--pitch7-secondary-channel: #7D7C2E;\r\n\t\t\t\t\t--pitch7-primary-channel:   #B0C952;\r\n\t\t\t\t\t--pitch7-secondary-note:    #7D7C2E;\r\n\t\t\t\t\t--pitch7-primary-note:      #B0C952;\r\n\t\t\t\t\t--pitch8-secondary-channel: #7F426A;\r\n\t\t\t\t\t--pitch8-primary-channel:   #B75297;\r\n\t\t\t\t\t--pitch8-secondary-note:    #7F426A;\r\n\t\t\t\t\t--pitch8-primary-note:      #B75297;\r\n\t\t\t\t\t--pitch9-secondary-channel: #2A6B65;\r\n\t\t\t\t\t--pitch9-primary-channel:   #3BA590;\r\n\t\t\t\t\t--pitch9-secondary-note:    #2A6B65;\r\n\t\t\t\t\t--pitch9-primary-note:      #3BA590;\r\n\t\t\t\t\t--pitch10-secondary-channel: #713EA0;\r\n\t\t\t\t\t--pitch10-primary-channel:   #925EC9;\r\n\t\t\t\t\t--pitch10-secondary-note:    #713EA0;\r\n\t\t\t\t\t--pitch10-primary-note:      #925EC9;\r\n\t\t\t\t\t--noise1-secondary-channel: #6C6C8E;\r\n\t\t\t\t\t--noise1-primary-channel:   #8A7F96;\r\n\t\t\t\t\t--noise1-secondary-note:    #A1A3B7;\r\n\t\t\t\t\t--noise1-primary-note:      #DDBADD;\r\n\t\t\t\t\t--noise2-secondary-channel: #865E40;\r\n\t\t\t\t\t--noise2-secondary-note:    #C7B47A;\r\n\t\t\t\t\t--noise2-primary-note:      #CFC587;\r\n\t\t\t\t\t--noise3-secondary-channel: #7E7068;\r\n\t\t\t\t\t--noise3-primary-channel:   #B19998;\r\n\t\t\t\t\t--noise3-secondary-note:    #BAA6BC;\r\n\t\t\t\t\t--noise3-primary-note:      #EDDCEC;\r\n          --mod1-secondary-channel: #156C99;\r\n\t\t\t\t\t--mod1-primary-channel:   #00CFDF;\r\n\t\t\t\t\t--mod1-secondary-note:    #0080A8;\r\n\t\t\t\t\t--mod1-primary-note:      #009FC6;\r\n\t\t\t\t\t--mod2-secondary-channel: #AD923A;\r\n\t\t\t\t\t--mod2-primary-channel:   #FFD552;\r\n\t\t\t\t\t--mod2-secondary-note:    #C49736;\r\n\t\t\t\t\t--mod2-primary-note:      #EFC742;\r\n\t\t\t\t\t--mod3-secondary-channel: #7A401E;\r\n\t\t\t\t\t--mod3-primary-channel:   #C14E30;\r\n\t\t\t\t\t--mod3-secondary-note:    #89381B;\r\n\t\t\t\t\t--mod3-primary-note:      #E15427;\r\n\t\t\t\t\t--mod4-secondary-channel: #0B6030;\r\n\t\t\t\t\t--mod4-primary-channel:   #00915C;\r\n\t\t\t\t\t--mod4-secondary-note:    #004337;\r\n\t\t\t\t\t--mod4-primary-note:      #00915E;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\t\"foxbox\": `\r\n\t\t\t:root {\r\n\t\t\t\t--page-margin: #ADD8E6;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\t \"wackybox\": `\r\n\t\t\t\r\n\t\t\t:root {\r\n\t\t\t\t--page-margin: #050000;\r\n\t\t\t\t--editor-background: #050000;\r\n\t\t\t\t\t--pitch-channel-limit: 6;\r\n\t\t\t\t\t--noise-channel-limit: 3;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t* {\r\n\t\t\t\t\tcursor: url(\"theme_resources/wackybox_cursor.png\"), auto !important;\r\n\t\t\t\t}\r\n\t\t\t\t#Hotdog {\r\n\t\t\t\t\tdisplay: inline !important;\r\n\t\t\t\t\tcontent: url(\"theme_resources/hotdog.png\") !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t`,\r\n\t\t\t \"microbox\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #000000;\r\n\t\t\t\t\t--editor-background: #000000;\r\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t\t\t--secondary-text: #93B6AD;\r\n\t\t\t\t\t--text-selection: rgba(47,255,250,0.99);\r\n\t\t\t\t\t--box-selection-fill: #03B068;\r\n\t\t\t\t\t--loop-accent: #FF0061;\r\n\t\t\t\t\t--link-accent: #FFC800;\r\n\t\t\t\t\t--ui-widget-background: #38554E;\r\n\t\t\t\t\t--ui-widget-focus: #2A7E69;\r\n\t\t\t\t\t--pitch-background: #281F23;\r\n\t\t\t\t\t--tonic: #004634;\r\n\t\t\t\t\t--fifth-note: #463400;\r\n\t\t\t\t\t--white-piano-key: #edc;\r\n\t\t\t\t\t--black-piano-key: #456;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #333333;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #000000;\r\n\t\t\t\t\t--track-editor-bg-noise: #463400;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #000000;\r\n\t\t\t\t\t--track-editor-bg-mod: #004634;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #000000;\r\n\t\t\t\t\t--multiplicative-mod-slider: #FFC800;\r\n\t\t\t\t\t--overwriting-mod-slider: #00ffc0;\r\n\t\t\t\t\t--indicator-primary: #00ffc0;\r\n\t\t\t\t\t--indicator-secondary: #333333;\r\n\t\t\t\t\t--select2-opt-group: #2B2B2B;\r\n\t\t\t\t\t--input-box-outline: #69BFC6;\r\n\t\t\t\t\t--mute-button-normal: #00ffc0;\r\n\t\t\t\t\t--mute-button-mod: #FFC800;\r\n\t\t\t\t\t--mod-label-primary: #38554E;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(0, 43, 45);\r\n\t\t\t\t\t--mod-label-primary-text: white;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 0;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 0;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 192;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 192;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 192;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 45;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 192;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\t\"paandorasbox\": `\r\n\t\t\t:root {\r\n\t\t\t --page-margin: #200000;\r\n\t\t\t  --editor-background: #200000;\r\n\t\t\t  --text-selection: #FF5100;\r\n\t\t\t  --loop-accent: #FF5100;\r\n\t\t\t  --link-accent: #0F0;\r\n\t\t\t  --ui-widget-background: #562334;\r\n\t\t\t  --ui-widget-focus: #6D1B36;\r\n\t\t\t  --pitch-background: #6D1B36;\r\n\t\t\t  --tonic: #FF5100;\r\n\t\t\t  --fifth-note: #00B6FF;\r\n\t\t\t  --track-editor-bg-pitch: #380C14;\r\n\t\t\t  --track-editor-bg-pitch-dim: #200000;\r\n\t\t\t  --track-editor-bg-noise: #233323;\r\n\t\t\t  --track-editor-bg-noise-dim: #101A0F;\r\n\t\t\t  --track-editor-bg-mod: #234C82;\r\n\t\t\t  --track-editor-bg-mod-dim: #0D1D33;\r\n\t\t\t  --indicator-primary: #FF5100;\r\n\t\t\t  --pitch1-secondary-channel: #00B200;\r\n\t\t\t  --pitch1-primary-channel: #0F0;\r\n\t\t\t  --pitch1-secondary-note: #00B200;\r\n\t\t\t  --pitch1-primary-note: #0F0;\r\n\t\t\t  --pitch2-secondary-channel: #00B282;\r\n\t\t\t  --pitch2-primary-channel: #00FFBF;\r\n\t\t\t  --pitch2-secondary-note: #00B282;\r\n\t\t\t  --pitch2-primary-note: #00FFBF;\r\n\t\t\t  --pitch3-secondary-channel: #00B2B2;\r\n\t\t\t  --pitch3-primary-channel: #0FF;\r\n\t\t\t  --pitch3-secondary-note: #00B2B2;\r\n\t\t\t  --pitch3-primary-note: #0FF;\r\n\t\t\t  --pitch4-secondary-channel: #2623B2;\r\n\t\t\t  --pitch4-primary-channel: #3631FF;\r\n\t\t\t  --pitch4-secondary-note: #2623B2;\r\n\t\t\t  --pitch4-primary-note: #3631FF;\r\n\t\t\t  --pitch5-secondary-channel: #7700B2;\r\n\t\t\t  --pitch5-primary-channel: #A0F;\r\n\t\t\t  --pitch5-secondary-note: #7700B2;\r\n\t\t\t  --pitch5-primary-note: #A0F;\r\n\t\t\t  --pitch6-secondary-channel: #B200B2;\r\n\t\t\t  --pitch6-primary-channel: #F0F;\r\n\t\t\t  --pitch6-secondary-note: #B200B2;\r\n\t\t\t  --pitch6-primary-note: #F0F;\r\n\t\t\t  --pitch7-secondary-channel: #B20000;\r\n\t\t\t  --pitch7-primary-channel: #F00;\r\n\t\t\t  --pitch7-secondary-note: #B20000;\r\n\t\t\t  --pitch7-primary-note: #F00;\r\n\t\t\t  --pitch8-secondary-channel: #00B200;\r\n\t\t\t  --pitch8-primary-channel: #0F0;\r\n\t\t\t  --pitch8-secondary-note: #00B200;\r\n\t\t\t  --pitch8-primary-note: #0F0;\r\n\t\t\t  --pitch9-secondary-channel: #00B282;\r\n\t\t\t  --pitch9-primary-channel: #0FF;\r\n\t\t\t  --pitch9-secondary-note: #00B282;\r\n\t\t\t  --pitch9-primary-note: #0FF;\r\n\t\t\t  --pitch10-secondary-channel: #0071B2;\r\n\t\t\t  --pitch10-primary-channel: #009EFF;\r\n\t\t\t  --pitch10-secondary-note: #0071B2;\r\n\t\t\t  --pitch10-primary-note: #009EFF;\r\n\t\t\t  --noise1-secondary-channel: #32B221;\r\n\t\t\t  --noise1-primary-channel: #44FF2F;\r\n\t\t\t  --noise1-secondary-note: #32B221;\r\n\t\t\t  --noise1-primary-note: #44FF2F;\r\n\t\t\t  --noise2-secondary-channel: #216FB2;\r\n\t\t\t  --noise2-primary-channel: #2F9DFF;\r\n\t\t\t  --noise2-secondary-note: #216FB2;\r\n\t\t\t  --noise2-primary-note: #2F9DFF;\r\n\t\t\t  --noise3-secondary-channel: #2623B2;\r\n\t\t\t  --noise3-primary-channel: #3631FF;\r\n\t\t\t  --noise3-secondary-note: #2623B2;\r\n\t\t\t  --noise3-primary-note: #3631FF;\r\n\t\t\t  --noise4-secondary-channel: #7223B2;\r\n\t\t\t  --noise4-primary-channel: #A531FF;\r\n\t\t\t  --noise4-secondary-note: #7223B2;\r\n\t\t\t  --noise4-primary-note: #A531FF;\r\n\t\t\t  --noise5-secondary-channel: #B2235A;\r\n\t\t\t  --noise5-primary-channel: #FF317E;\r\n\t\t\t  --noise5-secondary-note: #B2235A;\r\n\t\t\t  --noise5-primary-note: #FF317E;\r\n\t\t\t  --mod1-secondary-channel: #17B274;\r\n\t\t\t  --mod1-primary-channel: #21FFA8;\r\n\t\t\t  --mod1-secondary-note: #17B274;\r\n\t\t\t  --mod1-primary-note: #21FFA8;\r\n\t\t\t  --mod2-secondary-channel: #1783B2;\r\n\t\t\t  --mod2-primary-channel: #1FBAFF;\r\n\t\t\t  --mod2-secondary-note: #1783B2;\r\n\t\t\t  --mod2-primary-note: #1FBAFF;\r\n\t\t\t  --mod4-secondary-channel: #B20E6B;\r\n\t\t\t  --mod4-primary-channel: #FF1291;\r\n\t\t\t  --mod4-secondary-note: #B20E6B;\r\n\t\t\t  --mod4-primary-note: #FF1291;\r\n\t\t\t  --mod-label-primary: #994038;\r\n\t\t\t  --mod-label-secondary-text: #331512;\r\n\t\t\t  --mod-label-primary-text: #331512;\r\n\t\t\t  --disabled-note-primary: #994038;\r\n\t\t\t  --disabled-note-secondary: #331512;\r\n\t\t\t}\r\n\t\t\t`,\r\n\t\t\t\"midbox\":\r\n\t\t\t`:root {\r\n\t\t\t--page-margin: #010a1e;\r\n\t\t\t--editor-background: #010a1e;\r\n\t\t\t--hover-preview: #dfe9fe;\r\n\t\t\t--playhead: #e7f5f6;\r\n\t\t\t--primary-text: #f0fdff;\r\n\t\t\t--secondary-text: #c4c7d7;\r\n\t\t\t--inverted-text: #0f0623;\r\n\t\t\t--text-selection: #3f0ab4;\r\n\t\t\t--box-selection-fill: #32afb3;\r\n\t\t\t--loop-accent: #1719ff;\r\n\t\t\t--link-accent: #83a6ed;\r\n\t\t\t--ui-widget-background: #222856;\r\n\t\t\t--ui-widget-focus: #21417c;\r\n\t\t\t--pitch-background: #10264a;\r\n\t\t\t--tonic: #0797ce;\r\n\t\t\t--fifth-note: #3e2fb5;\r\n\t\t\t--white-piano-key: #ebf3f4;\r\n\t\t\t--black-piano-key: #253353;\r\n\t\t\t--white-piano-key-text: black;\r\n\t\t\t--black-piano-key-text: white;\r\n\t\t\t--oscilloscope-line-L: #72dcfc;\r\n\t\t\t--oscilloscope-line-R: #304eff;\r\n\t\t\t--mod-title: #1b2fff;\r\n\t\t\t--use-color-formula: true;\r\n\t\t\t--track-editor-bg-pitch: #183b65; \r\n\t\t\t--track-editor-bg-pitch-dim: #1f2c3d;\r\n\t\t\t--track-editor-bg-noise: #2e196d;\r\n\t\t\t--track-editor-bg-noise-dim: #212038;\r\n\t\t\t--track-editor-bg-mod: #066433;\r\n\t\t\t--track-editor-bg-mod-dim: #152b1f;\r\n\t\t\t--multiplicative-mod-slider: #1242a4;\r\n\t\t\t--overwriting-mod-slider: #2218db;\r\n\t\t\t--indicator-primary: #1698d3;\r\n\t\t\t--indicator-secondary: #1b478e;\r\n\t\t\t--select2-opt-group: #312f6d;\r\n\t\t\t--input-box-outline: #788b96;\r\n\t\t\t--mute-button-normal: #1d34f2;\r\n\t\t\t--mute-button-mod: #06bad6;\r\n\t\t\t--mod-label-primary: #14383f;\r\n\t\t\t--mod-label-secondary-text: #1d7080;\r\n\t\t\t--mod-label-primary-text: #b7e9f2;\r\n\t\t\t--pitch-secondary-channel-hue: 190;\r\n\t\t\t--pitch-secondary-channel-hue-scale: 2.5;\r\n\t\t\t--pitch-secondary-channel-sat: 80;\r\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-channel-lum: 50;\r\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-channel-hue: 190;\r\n\t\t\t--pitch-primary-channel-hue-scale: 2.5;\r\n\t\t\t--pitch-primary-channel-sat: 100;\r\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-primary-channel-lum: 76.5;\r\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-secondary-note-hue: 190;\r\n\t\t\t--pitch-secondary-note-hue-scale: 2.5;\r\n\t\t\t--pitch-secondary-note-sat: 90;\r\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-note-lum: 30;\r\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-note-hue: 190;\r\n\t\t\t--pitch-primary-note-hue-scale: 2.5;\r\n\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t--pitch-primary-note-lum: 85;\r\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t--noise-secondary-channel-hue: 200;\r\n\t\t\t--noise-secondary-channel-hue-scale: 2.5;\r\n\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t--noise-primary-channel-hue: 200;\r\n\t\t\t--noise-primary-channel-hue-scale: 2.5;\r\n\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t--noise-secondary-note-hue: 200;\r\n\t\t\t--noise-secondary-note-hue-scale: 2.5;\r\n\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t--noise-primary-note-hue: 200;\r\n\t\t\t--noise-primary-note-hue-scale: 2.5;\r\n\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t--mod-secondary-channel-hue: 140;\r\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-channel-sat: 90;\r\n\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t--mod-secondary-channel-lum: 55;\r\n\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t--mod-primary-channel-hue: 140;\r\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-primary-channel-sat: 100;\r\n\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t--mod-primary-channel-lum: 85;\r\n\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t--mod-secondary-note-hue: 140;\r\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-note-sat: 95;\r\n\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t--mod-secondary-note-lum: 50;\r\n\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t--mod-primary-note-hue: 140;\r\n\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t--mod-primary-note-sat: 100;\r\n\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t--mod-primary-note-lum: 90;\r\n\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t--disabled-note-primary:    #53527b;\r\n\t\t\t--disabled-note-secondary:  #1c1b30;\r\n\t\t}\r\n\t\t`,\r\n\t\t\"dogebox2\": `\r\n\t\t\t:root {\r\n\t\t\t\t--page-margin: #000015;\r\n\t\t\t\t--editor-background: #000015;\r\n\t\t\t\t--hover-preview: #00ffff;\r\n\t\t\t\t--playhead: #00ffff;\r\n\t\t\t\t--text-selection: rgba(255, 127, 80, 0.99);\r\n\t\t\t\t--box-selection-fill: rgba(255, 255, 255, 0.2);\r\n\t\t\t\t--loop-accent: #ff00ff;\r\n\t\t\t\t--link-accent: #00ffff;\r\n\t\t\t\t--ui-widget-background: #222222;\r\n\t\t\t\t--ui-widget-focus: #444444;\r\n\t\t\t\t--pitch-background: #222222;\r\n\t\t\t\t--tonic: #ab382c;\r\n\t\t\t\t--fifth-note: #2a76a8;\r\n\t\t\t\t--white-piano-key: #ffffff;\r\n\t\t\t\t--black-piano-key: #222222;\r\n\t\t\t\t--white-piano-key-text: #000000;\r\n\t\t\t\t--track-editor-bg-pitch: #222222;\r\n\t\t\t\t--track-editor-bg-pitch-dim: #111111;\r\n\t\t\t\t--track-editor-bg-noise: #222222;\r\n\t\t\t\t--track-editor-bg-noise-dim: #111111;\r\n\t\t\t\t--track-editor-bg-mod: #333333;\r\n\t\t\t\t--track-editor-bg-mod-dim: #111111;\r\n\t\t\t\t--multiplicative-mod-slider: #666666;\r\n\t\t\t\t--overwriting-mod-slider: #666666;\r\n\t\t\t\t--indicator-primary: #ff00ff;\r\n\t\t\t\t--indicator-secondary: #00ffff;\r\n\t\t\t\t--select2-opt-group: #333333;\r\n\t\t\t\t--input-box-outline: #444444;\r\n\t\t\t\t--mute-button-normal: #ff00ff;\r\n\t\t\t\t--mute-button-mod: #00ffff;\r\n\t\t\t\t--mod-label-primary: #282840;\r\n\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\r\n\t\t\t\t--mod-label-primary-text: white;\r\n\t\t\t\t--pitch1-secondary-channel: #bd9909;\r\n\t\t\t\t--pitch1-primary-channel: #fbff8e;\r\n\t\t\t\t--pitch1-secondary-note: #c79d3a;\r\n\t\t\t\t--pitch1-primary-note: #fdffb2;\r\n\t\t\t\t--pitch2-secondary-channel: #b86e0d;\r\n\t\t\t\t--pitch2-primary-channel: #ffb28e;\r\n\t\t\t\t--pitch2-secondary-note: #ba643a;\r\n\t\t\t\t--pitch2-primary-note: #fbac92;\r\n\t\t\t\t--pitch3-secondary-channel: #a81b08;\r\n\t\t\t\t--pitch3-primary-channel: #f56c67;\r\n\t\t\t\t--pitch3-secondary-note: #94352b;\r\n\t\t\t\t--pitch3-primary-note: #f56147;\r\n\t\t\t\t--pitch4-secondary-channel: #2a7722;\r\n\t\t\t\t--pitch4-primary-channel: #6ebf5e;\r\n\t\t\t\t--pitch4-secondary-note: #1c5c18;\r\n\t\t\t\t--pitch4-primary-note: #88cf82;\r\n\t\t\t\t--pitch5-secondary-channel: #8c8b3c;\r\n\t\t\t\t--pitch5-primary-channel: #c3c168;\r\n\t\t\t\t--pitch5-secondary-note: #747330;\r\n\t\t\t\t--pitch5-primary-note: #d4d394;\r\n\t\t\t\t--pitch6-secondary-channel: #3f9577;\r\n\t\t\t\t--pitch6-primary-channel: #6fc4b4;\r\n\t\t\t\t--pitch6-secondary-note: #2c6a5c;\r\n\t\t\t\t--pitch6-primary-note: #8fdad0;\r\n\t\t\t\t--pitch7-secondary-channel: #204a80;\r\n\t\t\t\t--pitch7-primary-channel: #6d9fc2;\r\n\t\t\t\t--pitch7-secondary-note: #132f5a;\r\n\t\t\t\t--pitch7-primary-note: #9dbed8;\r\n\t\t\t\t--pitch8-secondary-channel: #a531ad;\r\n\t\t\t\t--pitch8-primary-channel: #db68e3;\r\n\t\t\t\t--pitch8-secondary-note: #8d2f94;\r\n\t\t\t\t--pitch8-primary-note: #e66cbf;\r\n\t\t\t\t--pitch9-secondary-channel: #03a1a1;\r\n\t\t\t\t--pitch9-primary-channel: #52fffb;\r\n\t\t\t\t--pitch9-secondary-note: #34baba;\r\n\t\t\t\t--pitch9-primary-note: #60fbfb;\r\n\t\t\t\t--pitch10-secondary-channel: #4208a1;\r\n\t\t\t\t--pitch10-primary-channel: #9282ff;\r\n\t\t\t\t--pitch10-secondary-note: #5735b5;\r\n\t\t\t\t--pitch10-primary-note: #ab52fb;\r\n\t\t\t\t--noise1-secondary-channel: #2a5555;\r\n\t\t\t\t--noise1-primary-channel: #4c7878;\r\n\t\t\t\t--noise1-secondary-note: #6e9a9a;\r\n\t\t\t\t--noise1-primary-note: #90bcbc;\r\n\t\t\t\t--noise2-secondary-channel: #553355;\r\n\t\t\t\t--noise2-primary-channel: #775577;\r\n\t\t\t\t--noise2-secondary-note: #997799;\r\n\t\t\t\t--noise2-primary-note: #bbaa99;\r\n\t\t\t\t--noise3-secondary-channel: #2a6622;\r\n\t\t\t\t--noise3-primary-channel: #4c8844;\r\n\t\t\t\t--noise3-secondary-note: #6eaa66;\r\n\t\t\t\t--noise3-primary-note: #90cc88;\r\n\t\t\t\t--noise4-secondary-channel: #664400;\r\n\t\t\t\t--noise4-primary-channel: #886600;\r\n\t\t\t\t--noise4-secondary-note: #aa8800;\r\n\t\t\t\t--noise4-primary-note: #cccc00;\r\n\t\t\t\t--noise5-secondary-channel: #006633;\r\n\t\t\t\t--noise5-primary-channel: #008855;\r\n\t\t\t\t--noise5-secondary-note: #00aa77;\r\n\t\t\t\t--noise5-primary-note: #00cc99;\r\n\t\t\t\t--mod1-secondary-channel: #fe00ff;\r\n\t\t\t\t--mod1-primary-channel: #ff72ff;\r\n\t\t\t\t--mod1-secondary-note: #ff92ff;\r\n\t\t\t\t--mod1-primary-note: #ffb2fb;\r\n\t\t\t\t--mod2-secondary-channel: #00fe00;\r\n\t\t\t\t--mod2-primary-channel: #8eff8e;\r\n\t\t\t\t--mod2-secondary-note: #92ff92;\r\n\t\t\t\t--mod2-primary-note: #b2ffb2;\r\n\t\t\t\t--mod3-secondary-channel: #feff00;\r\n\t\t\t\t--mod3-primary-channel: #fffb8e;\r\n\t\t\t\t--mod3-secondary-note: #fffd92;\r\n\t\t\t\t--mod3-primary-note: #fffe92;\r\n\t\t\t\t--mod4-secondary-channel: #00fffe;\r\n\t\t\t\t--mod4-primary-channel: #82fffb;\r\n\t\t\t\t--mod4-secondary-note: #92ffff;\r\n\t\t\t\t--mod4-primary-note: #b2fffb;\r\n\t\t\t\t--disabled-note-primary: #c6c6c6;\r\n\t\t\t\t--disabled-note-secondary: #8c8c8c;\r\n\t\t\t\t--note-flash: #ffffff;\r\n\t\t\t\t--note-flash-secondary: #ffffff77;\r\n\t\t\t\t}`,\r\n\t\t\t\t\"abyssbox classic\": `\r\n\t\t\t\t:root {\t\t\r\n\t\t\t\t--page-margin: #1e0915; \t\t\r\n\t\t\t\t--editor-background: #1e0915; \t\t\r\n\t\t\t\t--playhead: rgba(255, 255, 255, 0.9); \t\t\r\n\t\t\t\t--secondary-text: #ffcedd; \t\t\r\n\t\t\t\t--box-selection-fill: #1e0915; \t\t\r\n\t\t\t\t--loop-accent: #873a51; \t\t\r\n\t\t\t\t--link-accent: #df88ff; \t\t\r\n\t\t\t\t--ui-widget-background: #581b3e; \t\t\r\n\t\t\t\t--ui-widget-focus: #762b4c; \t\t\r\n\t\t\t\t--pitch-background: #381d24; \t\t\r\n\t\t\t\t--tonic: #873a51; \t\t\r\n\t\t\t\t--fifth-note: #75001e; \t\t\r\n\t\t\t\t--white-piano-key: #cca5c7; \t\t\r\n\t\t\t\t--black-piano-key: #402f2f;\r\n\t\t\t\t--use-color-formula: true; \t\t\r\n\t\t\t\t--track-editor-bg-pitch: #571c40; \t\t\r\n\t\t\t\t--track-editor-bg-pitch-dim: #290d0d; \t\t\r\n\t\t\t\t--track-editor-bg-noise: #571131; \t\t\r\n\t\t\t\t--track-editor-bg-noise-dim: #330a28; \t\t\r\n\t\t\t\t--track-editor-bg-mod: #54083c; \t\t\r\n\t\t\t\t--track-editor-bg-mod-dim: #360426; \t\t\r\n\t\t\t\t--multiplicative-mod-slider: #9f6082; \t\t\r\n\t\t\t\t--overwriting-mod-slider: #9e3470; \t\t\r\n\t\t\t\t--indicator-primary: #b3498f; \t\t\r\n\t\t\t\t--indicator-secondary: #541d40; \t\t\r\n\t\t\t\t--select2-opt-group: #4f191e; \t\t\r\n\t\t\t\t--input-box-outline: #18041a; \t\t\r\n\t\t\t\t--mute-button-normal: #dd5d94;\t \t\t\r\n\t\t\t\t--mute-button-mod: #ba364c; \t\t\r\n\t\t\t\t--mod-label-primary: #541625; \t\t\r\n\t\t\t\t--mod-label-secondary-text: rgb(120, 87, 86); \r\n\t\t\t\t--mod-label-primary-text: gray; \r\n\t\t\t\r\n\t\t\t\t--pitch-secondary-channel-hue: -80; \t\t\r\n\t\t\t\t--pitch-secondary-channel-hue-scale 0; \t\t\r\n\t\t\t\t--pitch-secondary-channel-sat: 43; \t\t\r\n\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1; \t\t\r\n\t\t\t\t--pitch-secondary-channel-lum: 40; \t\t\r\n\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05; \r\n\t\t\t\r\n\t\t\t\t--pitch-primary-channel-hue: -53; \t\t\r\n\t\t\t\t--pitch-primary-channel-hue-scale: 6.1; \t\t\r\n\t\t\t\t--pitch-primary-channel-sat: 75; \t\t\r\n\t\t\t\t--pitch-primary-channel-sat-scale: 0.1; \t\t\r\n\t\t\t\t--pitch-primary-channel-lum: 67.5; \t\t\r\n\t\t\t\t--pitch-primary-channel-lum-scale: 0.05; \t\r\n\t\t\r\n\t\t\t\t--pitch-secondary-note-hue: -34; \t\t\r\n\t\t\t\t--pitch-secondary-note-hue-scale: 6.1; \t\t\r\n\t\t\t\t--pitch-secondary-note-sat: 93.9; \t\t\r\n\t\t\t\t--pitch-secondary-note-sat-scale: 0.1; \t\t\r\n\t\t\t\t--pitch-secondary-note-lum: 25; \t\t\r\n\t\t\t\t--pitch-secondary-note-lum-scale: 0.05; \r\n\t\t\t\r\n\t\t\t\t--pitch-primary-note-hue: -53; \t\t\r\n\t\t\t\t--pitch-primary-note-hue-scale: 6.1; \t\t\r\n\t\t\t\t--pitch-primary-note-sat: 100; \t\t\r\n\t\t\t\t--pitch-primary-note-sat-scale: 0.05; \t\t\r\n\t\t\t\t--pitch-primary-note-lum: 85.6; \t\t\r\n\t\t\t\t--pitch-primary-note-lum-scale: 0.025; \r\n\t\t\t\r\n\t\t\t\t--noise-secondary-channel-hue: 0; \t\t\r\n\t\t\t\t--noise-secondary-channel-hue-scale: 2; \t\t\r\n\t\t\t\t--noise-secondary-channel-sat: 65; \t\t\r\n\t\t\t\t--noise-secondary-channel-sat-scale: 0; \t\t\r\n\t\t\t\t--noise-secondary-channel-lum: 42; \t\t\r\n\t\t\t\t--noise-secondary-channel-lum-scale: 0; \r\n\t\t\t\r\n\t\t\t\t--noise-primary-channel-hue: 0; \t\t\r\n\t\t\t\t--noise-primary-channel-hue-scale: 1; \t\t\r\n\t\t\t\t--noise-primary-channel-sat: 100; \t\t\r\n\t\t\t\t--noise-primary-channel-sat-scale: 1; \t\t\r\n\t\t\t\t--noise-primary-channel-lum: 63.5; \t\t\r\n\t\t\t\t--noise-primary-channel-lum-scale: 0; \r\n\t\t\t\r\n\t\t\t\t--noise-secondary-note-hue: 24; \t\t\r\n\t\t\t\t--noise-secondary-note-hue-scale: 2; \t\t\r\n\t\t\t\t--noise-secondary-note-sat: 100; \t\t\r\n\t\t\t\t--noise-secondary-note-sat-scale: 0; \t\t\r\n\t\t\t\t--noise-secondary-note-lum: 35; \t\t\r\n\t\t\t\t--noise-secondary-note-lum-scale: 0; \t\r\n\t\t\r\n\t\t\t\t--noise-primary-note-hue: 24; \t\t\r\n\t\t\t\t--noise-primary-note-hue-scale: 2; \t\t\r\n\t\t\t\t--noise-primary-note-sat: 100; \t\t\r\n\t\t\t\t--noise-primary-note-sat-scale: 1; \t\t\r\n\t\t\t\t--noise-primary-note-lum: 60; \t\t\r\n\t\t\t\t--noise-primary-note-lum-scale: 1; \t\r\n\t\t\r\n\t\t\t\t--mod-secondary-channel-hue: 55; \t\t\r\n\t\t\t\t--mod-secondary-channel-hue-scale: 1.5; \t\t\r\n\t\t\t\t--mod-secondary-channel-sat: 100; \t\t\r\n\t\t\t\t--mod-secondary-channel-sat-scale: 0; \t\t\r\n\t\t\t\t--mod-secondary-channel-lum: 20; \t\t\r\n\t\t\t\t--mod-secondary-channel-lum-scale: 0; \r\n\t\t\t\r\n\t\t\t\t--mod-primary-channel-hue: 55; \t\t\r\n\t\t\t\t--mod-primary-channel-hue-scale: 1.5; \t\t\r\n\t\t\t\t--mod-primary-channel-sat: 96; \t\t\r\n\t\t\t\t--mod-primary-channel-sat-scale: 0; \t\t\r\n\t\t\t\t--mod-primary-channel-lum: 50; \t\t\r\n\t\t\t\t--mod-primary-channel-lum-scale: 0; \r\n\t\t\t\r\n\t\t\t\t--mod-secondary-note-hue: 55; \t\t\r\n\t\t\t\t--mod-secondary-note-hue-scale: 1.5; \t\t\r\n\t\t\t\t--mod-secondary-note-sat: 92; \t\t\r\n\t\t\t\t--mod-secondary-note-sat-scale: 0; \t\t\r\n\t\t\t\t--mod-secondary-note-lum: 45; \t\t\r\n\t\t\t\t--mod-secondary-note-lum-scale: 0; \r\n\t\t\t\r\n\t\t\t\t--mod-primary-note-hue: 55; \t\t\r\n\t\t\t\t--mod-primary-note-hue-scale: 1.5; \t\t\r\n\t\t\t\t--mod-primary-note-sat: 96; \t\t\r\n\t\t\t\t--mod-primary-note-sat-scale: 0; \t\t\r\n\t\t\t\t--mod-primary-note-lum: 85; \t\t\r\n\t\t\t\t--mod-primary-note-lum-scale: 0; \t\r\n\t\r\n\t\t\t\t--note-flash: #ffffff;\r\n\t\t\t\t--note-flash-secondary: #ffffff77;\r\n\t\t\t\t\r\n\t\t\t\t--oscilloscope-line-R: var(--ui-widget-background);\r\n\t\t\t\t--oscilloscope-line-L: var(--secondary-text);\r\n\t\t\t\t--text-spacing-icon: > ;\r\n\t\t\t\t--scrollbar-color: #bf2c5d;\r\n\t\t\t\t\r\n\t\t\t\t--file-page-symbol: url(\"theme_resources/icon-file.png\");\r\n\t\t\t\t--edit-pencil-symbol: url(\"theme_resources/icon-edit.png\");\r\n\t\t\t\t--preferences-gear-symbol: url(\"theme_resources/icon-preferences.png\");\r\n\t\t\t\t--instrument-copy-symbol: url(\"theme_resources/icon-copy.png\");\r\n\t\t\t\t--instrument-paste-symbol: url(\"theme_resources/icon-paste.png\");\r\n\t\t\t\t--play-symbol: url(\"theme_resources/icon-play.png\");\r\n\t\t\t\t--pause-symbol: url(\"theme_resources/icon-pause.png\");\r\n\t\t\t\t--record-symbol: url(\"theme_resources/icon-record.png\");\r\n\t\t\t\t--stop-symbol: url(\"theme_resources/icon-stop.png\");\r\n\t\t\t\t--prev-bar-symbol: url(\"theme_resources/icon-prev.png\");\r\n\t\t\t\t--next-bar-symbol: url(\"theme_resources/icon-next.png\");\r\n\t\t\t\t--muted-symbol: url(\"theme_resources/icon-speakerMuted.png\");\r\n\t\t\t\t--unmuted-symbol: url(\"theme_resources/icon-speaker.png\");\r\n\t\t\t\t--volume-symbol: url(\"theme_resources/icon-speaker.png\");\r\n\t\t\t\t--zoom-in-symbol: url(\"theme_resources/icon-zoomIn.png\");\r\n\t\t\t\t--zoom-out-symbol: url(\"theme_resources/icon-zoomOut.png\");\r\n\t\t\t\t--export-symbol: url(\"theme_resources/icon-export.png\");\r\n\t\t\t\t\t}\r\n\t\t\t* {\r\n\t\t\tcursor: url(\"theme_resources/abyssbox_cursor.png\"), auto;\r\n\t\t\t}\r\n\t\t\t#Hotdog {\r\n\t\t\t\tdisplay: inline !important;\r\n\t\t\t\tcontent: url(\"theme_resources/hotdog.png\") !important;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\t@font-face {\r\n\t\t\t   font-family: \"AbyssType\";\r\n\t\t\t   src:\r\n\t\t\t\turl(\"theme_resources/abysstype.otf\") format(\"opentype\") tech(color-COLRv1),\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t/* sets background image */\r\n\t\t\t\tbody {\r\n\t\t\t\tbackground-image: url(\"theme_resources/stripesbg.gif\") !important;\r\n\t\t\t\tbackground-position: center;\r\n\t\t\t\tbackground-repeat: repeat;\r\n\t\r\n\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\r\n\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\r\n\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\r\n\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\r\n\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t#text-content {\r\n\t\t\t\t\t\tborder-image-source: url(\"theme_resources/abyssbox_border.png\");\r\n\t\t\t\t\t\tborder-image-slice: 4 fill; \r\n\t\t\t\t\t   border-image-width: 8px; \r\n\t\t\t\t\tborder-image-repeat: stretch; \r\n\t\t\t\t\t\tpadding: 12px; \r\n\t\r\n\t\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\r\n\t\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\r\n\t\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\r\n\t\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\r\n\t\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */\r\n\t\t\t\t\t}\r\n\t\t\t\t#beepboxEditorContainer {\r\n\t\t\t\t\t\tborder-image-source: url(\"theme_resources/abyssbox_border.png\");\r\n\t\t\t\t\t\tborder-image-slice: 4 fill; \r\n\t\t\t\t\t   \tborder-image-width: 8px; \r\n\t\t\t\t\t\tborder-image-repeat: stretch;\r\n\t\t\t\t\t\tpadding: 12px;\r\n\t\r\n\t\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\r\n\t\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\r\n\t\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\r\n\t\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\r\n\t\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */ \r\n\t\t\t\t\t}\r\n\t\t\t\t.beepboxEditor button,\r\n\t\t\t\tbutton.playButton,\r\n\t\t\t\tbutton.pauseButton, \r\n\t\t\t\tbutton.recordButton, \r\n\t\t\t\tbutton.stopButton,\r\n\t\t\t\tbutton.nextBarButton, \r\n\t\t\t\tbutton.prevBarButton, \r\n\t\t\t\tbutton.copyButton, \r\n\t\t\t\tbutton.pasteButton, \r\n\t\t\t\tbutton.exportInstrumentButton, \r\n\t\t\t\tbutton.importInstrumentButton, \r\n\t\t\t\t.beepboxEditor select, \r\n\t\t\t\t.beepboxEditor .select2-selection__rendered {\r\n\t\t\t\t\t\tborder-image-source: url(\"theme_resources/abyssbox_border.png\") !important;\r\n\t\t\t\t\t\tborder-image-slice: 4 fill !important; \r\n\t\t\t\t\t   border-image-width: 4px !important; \r\n\t\t\t\t\tborder-image-repeat: stretch !important;\r\n\t\t\t\t\t\tpadding: 4px !important; \r\n\t\r\n\t\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\r\n\t\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\r\n\t\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\r\n\t\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\r\n\t\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */\r\n\t\r\n\t\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\tdiv.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {\r\n\t\t\t\t\t--ui-widget-background: #1e0915 !important;\r\n\t\t\t\t\tborder-image-source:none !important;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t\tselect.trackSelectBox {\r\n\t\t\t\t\t\tborder-image: none !important;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t@font-face {\r\n\t\t\t   font-family: \"AbyssType_small\";\r\n\t\t\t   src:\r\n\t\t\t\turl(\"theme_resources/abysstype_small.otf\") format(\"opentype\") tech(color-COLRv1),\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\thtml {\r\n\t\t\t\t\tfont-family: 'AbyssType';\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tdiv.channelBoxLabel {\r\n\t\t\t\t\tfont-family: 'AbyssType_small' !important;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t.beepboxEditor input[type=\"range\"]::-webkit-slider-thumb\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]::-webkit-slider-runnable-track\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]:focus::-webkit-slider-runnable-track\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]::-ms-thumb\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]::-ms-track\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]:focus::-ms-track\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]::-moz-range-thumb\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]::-moz-range-track\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]:focus::-moz-range-track\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"text\"],\r\n\t\t\t\t.beepboxEditor input[type=\"number\"]\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"checkbox\"]\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"checkbox\"]:checked\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"checkbox\"]:checked:after\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tdiv.selectRow span {\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t`,\r\n\t\t\"abyssbox light\": `\r\n\t\t\t:root { \t\t\r\n\t\t\t\t--page-margin: #e0adbc; \t\t\r\n\t\t\t\t--editor-background: #e0adbc; \t\t\r\n\t\t\t\t--playhead: rgba(255, 255, 255, 0.9); \t\t\r\n\t\t\t\t--primary-text: #6110d9; \t\t\r\n\t\t\t\t--secondary-text: #cc1338;\t\r\n\t\t\t\t--inverted-text:  #e8bcc9;\t \t\t\r\n\t\t\t\t--box-selection-fill: #bf2c5d; \t\t\r\n\t\t\t\t--loop-accent: #8c346a; \t\t\r\n\t\t\t\t--link-accent: #8c346a; \t\t\r\n\t\t\t\t--ui-widget-background: #f5e9f0;\t\t\r\n\t\t\t\t--ui-widget-focus: #f5e9f0; \t\t\r\n\t\t\t\t--pitch-background: #eddadf; \t\t\r\n\t\t\t\t--tonic: #f5f0f1; \t\t\r\n\t\t\t\t--fifth-note: #ffb5c9; \t\t\r\n\t\t\t\t--white-piano-key: #cca5c7; \t\t\r\n\t\t\t\t--black-piano-key: #402f2f;\r\n\t\t\t\t--use-color-formula: true; \t\t\r\n\t\t\t\t--track-editor-bg-pitch: #edbecc; \t\t\r\n\t\t\t\t--track-editor-bg-pitch-dim: #e0adbc; \t\t\r\n\t\t\t\t--track-editor-bg-noise: #edbecc; \t\t\r\n\t\t\t\t--track-editor-bg-noise-dim: #e0adbc; \t\t\r\n\t\t\t\t--track-editor-bg-mod: #edbecc; \t\t\r\n\t\t\t\t--track-editor-bg-mod-dim: #e0adbc; \t\t\r\n\t\t\t\t--multiplicative-mod-slider: #9f6082; \t\t\r\n\t\t\t\t--overwriting-mod-slider: #9e3470; \t\t\r\n\t\t\t\t--indicator-primary: #b3498f; \t\t\r\n\t\t\t\t--indicator-secondary: #541d40; \t\t\r\n\t\t\t\t--select2-opt-group: #4f191e; \t\t\r\n\t\t\t\t--input-box-outline: #18041a; \t\t\r\n\t\t\t\t--mute-button-normal: #dd5d94;\t \t\t\r\n\t\t\t\t--mute-button-mod: #ba364c; \t\t\r\n\t\t\t\t--mod-label-primary: #541625; \t\t\r\n\t\t\t\t--mod-label-secondary-text: rgb(120, 87, 86); \r\n\t\t\t\t--mod-label-primary-text: gray;\r\n\t\t\t\t--mod-title: #cc1338; \r\n\t\t\t\r\n\t\t\t\t--pitch-secondary-channel-hue: -80; \t\t\r\n\t\t\t\t--pitch-secondary-channel-hue-scale 0; \t\t\r\n\t\t\t\t--pitch-secondary-channel-sat: 255; \t\t\r\n\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1; \t\t\r\n\t\t\t\t--pitch-secondary-channel-lum: 30; \t\t\r\n\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05; \r\n\t\t\t\r\n\t\t\t\t--pitch-primary-channel-hue: -53; \t\t\r\n\t\t\t\t--pitch-primary-channel-hue-scale: 6.1; \t\t\r\n\t\t\t\t--pitch-primary-channel-sat: 255; \t\t\r\n\t\t\t\t--pitch-primary-channel-sat-scale: 0.1; \t\t\r\n\t\t\t\t--pitch-primary-channel-lum: 60; \t\t\r\n\t\t\t\t--pitch-primary-channel-lum-scale: 0.05; \t\r\n\t\t\r\n\t\t\t\t--pitch-secondary-note-hue: -34; \t\t\r\n\t\t\t\t--pitch-secondary-note-hue-scale: 6.1; \t\t\r\n\t\t\t\t--pitch-secondary-note-sat: 255; \t\t\r\n\t\t\t\t--pitch-secondary-note-sat-scale: 0.1; \t\t\r\n\t\t\t\t--pitch-secondary-note-lum: 30; \t\t\r\n\t\t\t\t--pitch-secondary-note-lum-scale: 0.05; \r\n\t\t\t\r\n\t\t\t\t--pitch-primary-note-hue: -53; \t\t\r\n\t\t\t\t--pitch-primary-note-hue-scale: 6.1; \t\t\r\n\t\t\t\t--pitch-primary-note-sat: 255; \t\t\r\n\t\t\t\t--pitch-primary-note-sat-scale: 0.05; \t\t\r\n\t\t\t\t--pitch-primary-note-lum: 60; \t\t\r\n\t\t\t\t--pitch-primary-note-lum-scale: 0.025; \r\n\t\t\t\r\n\t\t\t\t--noise-secondary-channel-hue: 0; \t\t\r\n\t\t\t\t--noise-secondary-channel-hue-scale: 2; \t\t\r\n\t\t\t\t--noise-secondary-channel-sat: 255; \t\t\r\n\t\t\t\t--noise-secondary-channel-sat-scale: 0; \t\t\r\n\t\t\t\t--noise-secondary-channel-lum: 30; \t\t\r\n\t\t\t\t--noise-secondary-channel-lum-scale: 0; \r\n\t\t\t\r\n\t\t\t\t--noise-primary-channel-hue: 0; \t\t\r\n\t\t\t\t--noise-primary-channel-hue-scale: 1; \t\t\r\n\t\t\t\t--noise-primary-channel-sat: 255; \t\t\r\n\t\t\t\t--noise-primary-channel-sat-scale: 1; \t\t\r\n\t\t\t\t--noise-primary-channel-lum: 60; \t\t\r\n\t\t\t\t--noise-primary-channel-lum-scale: 0; \r\n\t\t\t\r\n\t\t\t\t--noise-secondary-note-hue: 24; \t\t\r\n\t\t\t\t--noise-secondary-note-hue-scale: 2; \t\t\r\n\t\t\t\t--noise-secondary-note-sat: 255; \t\t\r\n\t\t\t\t--noise-secondary-note-sat-scale: 0; \t\t\r\n\t\t\t\t--noise-secondary-note-lum: 30; \t\t\r\n\t\t\t\t--noise-secondary-note-lum-scale: 0; \t\r\n\t\t\r\n\t\t\t\t--noise-primary-note-hue: 24; \t\t\r\n\t\t\t\t--noise-primary-note-hue-scale: 2; \t\t\r\n\t\t\t\t--noise-primary-note-sat: 255; \t\t\r\n\t\t\t\t--noise-primary-note-sat-scale: 1; \t\t\r\n\t\t\t\t--noise-primary-note-lum: 60; \t\t\r\n\t\t\t\t--noise-primary-note-lum-scale: 1; \t\r\n\t\t\r\n\t\t\t\t--mod-secondary-channel-hue: 55; \t\t\r\n\t\t\t\t--mod-secondary-channel-hue-scale: 1.5; \t\t\r\n\t\t\t\t--mod-secondary-channel-sat: 255; \t\t\r\n\t\t\t\t--mod-secondary-channel-sat-scale: 0; \t\t\r\n\t\t\t\t--mod-secondary-channel-lum: 30; \t\t\r\n\t\t\t\t--mod-secondary-channel-lum-scale: 0; \r\n\t\t\t\r\n\t\t\t\t--mod-primary-channel-hue: 55; \t\t\r\n\t\t\t\t--mod-primary-channel-hue-scale: 1.5; \t\t\r\n\t\t\t\t--mod-primary-channel-sat: 255; \t\t\r\n\t\t\t\t--mod-primary-channel-sat-scale: 0; \t\t\r\n\t\t\t\t--mod-primary-channel-lum: 60; \t\t\r\n\t\t\t\t--mod-primary-channel-lum-scale: 0; \r\n\t\t\t\r\n\t\t\t\t--mod-secondary-note-hue: 55; \t\t\r\n\t\t\t\t--mod-secondary-note-hue-scale: 1.5; \t\t\r\n\t\t\t\t--mod-secondary-note-sat: 255; \t\t\r\n\t\t\t\t--mod-secondary-note-sat-scale: 0; \t\t\r\n\t\t\t\t--mod-secondary-note-lum: 30; \t\t\r\n\t\t\t\t--mod-secondary-note-lum-scale: 0; \r\n\t\t\t\r\n\t\t\t\t--mod-primary-note-hue: 55; \t\t\r\n\t\t\t\t--mod-primary-note-hue-scale: 1.5; \t\t\r\n\t\t\t\t--mod-primary-note-sat: 255; \t\t\r\n\t\t\t\t--mod-primary-note-sat-scale: 0; \t\t\r\n\t\t\t\t--mod-primary-note-lum: 60; \t\t\r\n\t\t\t\t--mod-primary-note-lum-scale: 0; \r\n\r\n\t\t\t\t--note-flash: #ffffff;\r\n\t\t\t\t--note-flash-secondary: #ffffff77;\r\n\r\n\t\t\t\t--oscilloscope-line-R: var(--ui-widget-background);\r\n\t\t\t\t--oscilloscope-line-L: var(--secondary-text);\r\n\t\t\t\t--text-spacing-icon: > ;\r\n\t\t\t\t--scrollbar-color: #bf2c5d;\r\n\r\n\t\t\t\t--file-page-symbol: url(\"theme_resources/icon-file.png\");\r\n\t\t\t\t--edit-pencil-symbol: url(\"theme_resources/icon-edit.png\");\r\n\t\t\t\t--preferences-gear-symbol: url(\"theme_resources/icon-preferences.png\");\r\n\t\t\t\t--instrument-copy-symbol: url(\"theme_resources/icon-copy.png\");\r\n\t\t\t\t--instrument-paste-symbol: url(\"theme_resources/icon-paste.png\");\r\n\t\t\t\t--play-symbol: url(\"theme_resources/icon-play.png\");\r\n\t\t\t\t--pause-symbol: url(\"theme_resources/icon-pause.png\");\r\n\t\t\t\t--record-symbol: url(\"theme_resources/icon-record.png\");\r\n\t\t\t\t--stop-symbol: url(\"theme_resources/icon-stop.png\");\r\n\t\t\t\t--prev-bar-symbol: url(\"theme_resources/icon-prev.png\");\r\n\t\t\t\t--next-bar-symbol: url(\"theme_resources/icon-next.png\");\r\n\t\t\t\t--muted-symbol: url(\"theme_resources/icon-speakerMuted.png\");\r\n\t\t\t\t--unmuted-symbol: url(\"theme_resources/icon-speaker.png\");\r\n\t\t\t\t--volume-symbol: url(\"theme_resources/icon-speaker.png\");\r\n\t\t\t\t--zoom-in-symbol: url(\"theme_resources/icon-zoomIn.png\");\r\n\t\t\t\t--zoom-out-symbol: url(\"theme_resources/icon-zoomOut.png\");\r\n\t\t\t\t--export-symbol: url(\"theme_resources/icon-export.png\");\r\n\t\t\t}\r\n\t\t\t\t\t/* sets background image */\r\n\t\t\t\t\tbody {\r\n\t\t\t\t\tbackground-image: url(\"theme_resources/stripesbg_light.gif\") !important;\r\n\t\t\t\t\tbackground-position: center;\r\n\t\t\t\t\tbackground-repeat: repeat;\r\n\t\t\r\n\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\r\n\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\r\n\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\r\n\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\r\n\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */\r\n\t\t\t\t\t\t}\t\t\r\n\t\t\t\t#text-content {\r\n\t\t\t\t\t\tborder-image-source: url(\"theme_resources/abyssbox_border_light.png\");\r\n\t\t\t\t\t\tborder-image-slice: 4 fill; \r\n\t\t\t\t\t   border-image-width: 8px; \r\n\t\t\t\t\tborder-image-repeat: stretch; \r\n\t\t\t\t\t\tpadding: 12px; \r\n\t\r\n\t\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\r\n\t\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\r\n\t\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\r\n\t\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\r\n\t\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */\r\n\t\t\t\t\t}\r\n\t\t\t\t#beepboxEditorContainer {\r\n\t\t\t\t\t\tborder-image-source: url(\"theme_resources/abyssbox_border_light.png\");\r\n\t\t\t\t\t\tborder-image-slice: 4 fill; \r\n\t\t\t\t\t   border-image-width: 8px; \r\n\t\t\t\t\tborder-image-repeat: stretch;\r\n\t\t\t\t\t\tpadding: 12px;\r\n\t\r\n\t\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\r\n\t\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\r\n\t\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\r\n\t\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\r\n\t\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */ \r\n\t\t\t\t\t}\r\n\t\t\t\t\t.beepboxEditor button,\r\n\t\t\t\t\tbutton.playButton,\r\n\t\t\t\t\tbutton.pauseButton, \r\n\t\t\t\t\tbutton.recordButton, \r\n\t\t\t\t\tbutton.stopButton,\r\n\t\t\t\t\tbutton.nextBarButton, \r\n\t\t\t\t\tbutton.prevBarButton, \r\n\t\t\t\t\tbutton.copyButton, \r\n\t\t\t\t\tbutton.pasteButton, \r\n\t\t\t\t\tbutton.exportInstrumentButton, \r\n\t\t\t\t\tbutton.importInstrumentButton, \r\n\t\t\t\t\t.beepboxEditor select, \r\n\t\t\t\t\t.beepboxEditor .select2-selection__rendered {\r\n\t\t\t\t\t\t\tborder-image-source: url(\"theme_resources/abyssbox_border_light.png\") !important;\r\n\t\t\t\t\t\t\tborder-image-slice: 4 fill !important; \r\n\t\t\t\t\t\t   border-image-width: 4px !important; \r\n\t\t\t\t\t\tborder-image-repeat: stretch !important;\r\n\t\t\t\t\t\t\tpadding: 4px !important; \r\n\t\t\r\n\t\t\t\t\t\t\timage-rendering: -moz-crisp-edges !important;         /* Firefox */\r\n\t\t\t\t\t\t\timage-rendering: -webkit-optimize-contrast !important; /* Webkit (Chrome/Safari) */\r\n\t\t\t\t\t\t\timage-rendering: -o-crisp-edges !important;            /* Opera */\r\n\t\t\t\t\t\t\timage-rendering: pixelated !important;                 /* Future browsers */\r\n\t\t\t\t\t\t\timage-rendering: optimizeSpeed !important;             /* IE */\r\n\t\t\r\n\t\t\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\tdiv.selectRow button:not(.copyButton,.pasteButton,.exportInstrumentButton,.importInstrumentButton) {\r\n\t\t\t\t\t\t--ui-widget-background: var(--editor-background) !important;\r\n\t\t\t\t\t\tborder-image-source:none !important;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tselect.trackSelectBox {\r\n\t\t\t\t\t\tborder-image: none !important;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t/* sets cursor */ \r\n\t\t\t* {\r\n\t\t\tcursor: url(\"theme_resources/abyssbox_cursor.png\"), auto !important;\r\n\t\t\t}\r\n\t\t\t#Hotdog {\r\n\t\t\t\tdisplay: inline !important;\r\n\t\t\t\tcontent: url(\"theme_resources/hotdog.png\") !important;\r\n\t\t\t}\r\n\t\t\t\t@font-face {\r\n\t\t\t   font-family: \"AbyssType\";\r\n\t\t\t   src:\r\n\t\t\t\turl(\"theme_resources/abysstype.otf\") format(\"opentype\") tech(color-COLRv1),\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t@font-face {\r\n\t\t\t   font-family: \"AbyssType_small\";\r\n\t\t\t   src:\r\n\t\t\t\turl(\"theme_resources/abysstype_small.otf\") format(\"opentype\") tech(color-COLRv1),\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\thtml {\r\n\t\t\t\tfont-family: 'AbyssType';\r\n\t\t\t\t}\r\n\t\t\t\tdiv.channelBoxLabel {\r\n\t\t\t\t\tfont-family: 'AbyssType_small' !important;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t.beepboxEditor input[type=\"range\"]::-webkit-slider-thumb\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]::-webkit-slider-runnable-track\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]:focus::-webkit-slider-runnable-track\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]::-ms-thumb\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]::-ms-track\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]:focus::-ms-track\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]::-moz-range-thumb\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]::-moz-range-track\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"range\"]:focus::-moz-range-track\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"text\"],\r\n\t\t\t\t.beepboxEditor input[type=\"number\"]\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"checkbox\"]\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"checkbox\"]:checked\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\t\t\t \r\n\t\t\t\t.beepboxEditor input[type=\"checkbox\"]:checked:after\r\n\t\t\t\t{\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tdiv.selectRow span {\r\n\t\t\t\t\tcursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t`,\r\n\t\"slarmoosbox\": `\r\n\t\t:root {\r\n\t\t\t--page-margin: #14051a;\r\n\t\t\t--editor-background: #14051a;\r\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t--primary-text: #71eee5;\r\n\t\t\t--secondary-text: #3abbb2;\r\n\t\t\t--inverted-text: #13695e;\r\n\t\t\t--box-selection-fill: #36c71c;\r\n\t\t\t--loop-accent: #36c71c;\r\n\t\t\t--link-accent: white;\r\n\t\t\t--ui-widget-background: #183d05;\r\n\t\t\t--ui-widget-focus: #247d0d;\r\n\t\t\t--pitch-background: #2e0e51;\r\n\t\t\t--tonic: #247d0d;\r\n\t\t\t--fifth-note: #3abbb2;\r\n\t\t\t--white-piano-key: #ffffff;\r\n\t\t\t--black-piano-key: #061705;\r\n\t\t\t--white-piano-key-text: #061705;\r\n\t\t\t--use-color-formula: true;\r\n\t\t\t--track-editor-bg-pitch: #09382b;\r\n\t\t\t--track-editor-bg-pitch-dim: #14051a;\r\n\t\t\t--track-editor-bg-noise: #40400b;\r\n\t\t\t--track-editor-bg-noise-dim: #14051a;\r\n\t\t\t--track-editor-bg-mod: #0a2c08;\r\n\t\t\t--track-editor-bg-mod-dim: #14051a;\r\n\t\t\t--multiplicative-mod-slider: #3abb22;\r\n\t\t\t--overwriting-mod-slider: #71eee5;\r\n\t\t\t--indicator-primary: #a773e5;\r\n\t\t\t--indicator-secondary: #4c1c89;\r\n\t\t\t--select2-opt-group: #183d05;\r\n\t\t\t--input-box-outline: #18040a;\r\n\t\t\t--mute-button-normal: #36c71c;\r\n\t\t\t--mute-button-mod: #a773e5;\r\n\t\t\t--mod-label-primary: #a773e5;\r\n\t\t\t--mod-label-secondary-text: #6b29bf;\r\n\t\t\t--mod-label-primary-text: #14051a;\r\n\t\t\t--mod-title: #247d1d;\r\n\t\t\t--pitch-secondary-channel-hue: 100;\r\n\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\r\n\t\t\t--pitch-secondary-channel-sat: 100.0;\r\n\t\t\t--pitch-secondary-channel-sat-scale: 0.15;\r\n\t\t\t--pitch-secondary-channel-lum: 60.0;\r\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-channel-hue: 100;\r\n\t\t\t--pitch-primary-channel-hue-scale: 6.1;\r\n\t\t\t--pitch-primary-channel-sat: 100;\r\n\t\t\t--pitch-primary-channel-sat-scale: 0.15;\r\n\t\t\t--pitch-primary-channel-lum: 75.0;\r\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-secondary-note-hue: 100;\r\n\t\t\t--pitch-secondary-note-hue-scale: 6.1;\r\n\t\t\t--pitch-secondary-note-sat: 95.0;\r\n\t\t\t--pitch-secondary-note-sat-scale: 0.15;\r\n\t\t\t--pitch-secondary-note-lum: 40;\r\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-note-hue: 100;\r\n\t\t\t--pitch-primary-note-hue-scale: 6.1;\r\n\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t--pitch-primary-note-sat-scale: 0.15;\r\n\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t--noise-secondary-channel-hue: 65;\r\n\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t--noise-secondary-channel-sat: 55;\r\n\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t--noise-primary-channel-hue: 65;\r\n\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t--noise-primary-channel-sat: 66;\r\n\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t--noise-secondary-note-hue: 65;\r\n\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t--noise-secondary-note-sat: 66;\r\n\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t--noise-primary-note-hue: 65;\r\n\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t--noise-primary-note-sat: 70;\r\n\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t--mod-secondary-channel-hue: 192;\r\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t--mod-primary-channel-hue: 192;\r\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t--mod-secondary-note-hue: 192;\r\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t--mod-secondary-note-lum: 45;\r\n\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t--mod-primary-note-hue: 192;\r\n\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t--oscilloscope-line-R: white;\r\n\t\t\t--oscilloscope-line-L: var(--secondary-text);\r\n\t\t}`,\r\n\t\t\"azur lane\":`\r\n\t\t:root {\r\n\t\t\t--page-margin: #19337e;\r\n\t\t\t--editor-background: #000333cf;\r\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t--primary-text: #9af9ff;\r\n\t\t\t--secondary-text: #4072dd;\r\n\t\t\t--box-selection-fill: #044b94;\r\n\t\t\t--loop-accent: #950d0d;\r\n\t\t\t--link-accent: #0072ff;\r\n\t\t\t--ui-widget-background: #255bb3;\r\n\t\t\t--ui-widget-focus: #757575;\r\n\t\t\t--pitch-background: #20468b73;\r\n\t\t\t--tonic: #c9c9c9;\r\n\t\t\t--fifth-note: #731d1d;\r\n\t\t\t--white-piano-key: #eee;\r\n\t\t\t--black-piano-key: #000;\r\n\t\t\t--track-editor-bg-pitch: #535a73;\r\n\t\t\t--track-editor-bg-pitch-dim: #353643;\r\n\t\t\t--track-editor-bg-noise: #770000;\r\n\t\t\t--track-editor-bg-noise-dim: #430000;\r\n\t\t\t--track-editor-bg-mod: #5d1d06;\r\n\t\t\t--track-editor-bg-mod-dim: #270000;\r\n\t\t\t--multiplicative-mod-slider: #bb0000;\r\n\t\t\t--overwriting-mod-slider: #ad0000;\r\n\t\t\t--indicator-primary: #9c64f7;\r\n\t\t\t--indicator-secondary: #393e4f;\r\n\t\t\t--select2-opt-group: #5d576f;\r\n\t\t\t--input-box-outline: #002957;\r\n\t\t\t--mute-button-normal: #ffffff;\r\n\t\t\t--mute-button-mod: #4f4f4f;\r\n\t\t\t--mod-label-primary: #531313;\r\n\t\t\t--pitch1-secondary-channel: #80858d;\r\n\t\t  --pitch1-primary-channel: #f2f7ff;\r\n\t\t  --pitch1-secondary-note: #80858d;\r\n\t\t  --pitch1-primary-note: #f2f7ff;\r\n\t\t  --pitch2-secondary-channel: #7392ad;\r\n\t\t  --pitch2-primary-channel: #a8d6ff;\r\n\t\t  --pitch2-secondary-note: #7392ad;\r\n\t\t  --pitch2-primary-note: #a8d6ff;\r\n\t\t  --pitch3-secondary-channel: #4b7eaa;\r\n\t\t  --pitch3-primary-channel: #71bdff;\r\n\t\t  --pitch3-secondary-note: #4b7eaa;\r\n\t\t  --pitch3-primary-note: #71bdff;\r\n\t\t  --pitch4-secondary-channel: #3594b1;\r\n\t\t  --pitch4-primary-channel: #48d4ff;\r\n\t\t  --pitch4-secondary-note: #3594b1;\r\n\t\t  --pitch4-primary-note: #48d4ff;\r\n\t\t  --pitch5-secondary-channel: #1b98b1;\r\n\t\t  --pitch5-primary-channel: #30f1ff;\r\n\t\t  --pitch5-secondary-note: #1b98b1;\r\n\t\t  --pitch5-primary-note: #30f1ff;\r\n\t\t  --pitch6-secondary-channel: #9e0000;\r\n\t\t  --pitch6-primary-channel: #db0000;\r\n\t\t  --pitch6-secondary-note: #9e0000;\r\n\t\t  --pitch6-primary-note: #db0000;\r\n\t\t  --pitch7-secondary-channel: #7c1717;\r\n\t\t  --pitch7-primary-channel: #9e0000;\r\n\t\t  --pitch7-secondary-note: #7c1717;\r\n\t\t  --pitch7-primary-note: #9e0000;\r\n\t\t  --pitch8-secondary-channel: #5c1f1f;\r\n\t\t  --pitch8-primary-channel: #7c1717;\r\n\t\t  --pitch8-secondary-note: #5c1f1f;\r\n\t\t  --pitch8-primary-note: #7c1717;\r\n\t\t  --pitch9-secondary-channel: #3e2020;\r\n\t\t  --pitch9-primary-channel: #5c1f1f;\r\n\t\t  --pitch9-secondary-note: #3e2020;\r\n\t\t  --pitch9-primary-note: #5c1f1f;\r\n\t\t  --pitch10-secondary-channel: #2f1c1c;\r\n\t\t  --pitch10-primary-channel: #5c1f1f;\r\n\t\t  --pitch10-secondary-note: #2f1c1c;\r\n\t\t  --pitch10-primary-note: #5c1f1f;\r\n\t\t  --noise1-secondary-channel: #828282;\r\n\t\t  --noise1-primary-channel: #cacaca;\r\n\t\t  --noise1-secondary-note: #828282;\r\n\t\t  --noise1-primary-note: #cacaca;\r\n\t\t  --noise2-secondary-channel: #2f8baf;\r\n\t\t  --noise2-primary-channel: #3de2ff;\r\n\t\t  --noise2-secondary-note: #2f8baf;\r\n\t\t  --noise2-primary-note: #3de2ff;\r\n\t\t  --noise3-secondary-channel: #6f50b1;\r\n\t\t  --noise3-primary-channel: #8567ff;\r\n\t\t  --noise3-secondary-note: #6f50b1;\r\n\t\t  --noise3-primary-note: #8567ff;\r\n\t\t  --noise4-secondary-channel: #d38900;\r\n\t\t  --noise4-primary-channel: #ffb500;\r\n\t\t  --noise4-secondary-note: #d38900;\r\n\t\t  --noise4-primary-note: #ffb500;\r\n\t\t  --noise5-secondary-channel: #af0008;\r\n\t\t  --noise5-primary-channel: #00d70e;\r\n\t\t  --noise5-secondary-note: #29b700;\r\n\t\t  --noise5-primary-note: #00f7ff;\r\n\t\t  --mod1-secondary-channel: #9d5bb9;\r\n\t\t  --mod1-primary-channel: #e16bff;\r\n\t\t  --mod1-secondary-note: #3a3ea4;\r\n\t\t  --mod1-primary-note: #fff;\r\n\t\t  --mod2-secondary-channel: #3a8d58;\r\n\t\t  --mod2-primary-channel: #42ffff;\r\n\t\t  --mod2-secondary-note: #3a8d58;\r\n\t\t  --mod2-primary-note: #42ffff;\r\n\t\t  --mod3-secondary-channel: #af6c00;\r\n\t\t  --mod3-primary-channel: #fa0;\r\n\t\t  --mod3-secondary-note: #0001a2;\r\n\t\t  --mod3-primary-note: #970000;\r\n\t\t  --mod4-secondary-channel: #d3d3d3;\r\n\t\t  --mod4-primary-channel: #759bff;\r\n\t\t  --mod4-secondary-note: #a00000;\r\n\t\t  --mod4-primary-note: #fff;\r\n\t\t  --disabled-note-primary: #3a3a3a;\r\n\t\t  --disabled-note-secondary: #000;\r\n\t\t\t}\r\n\t\t/* replaces hotdog (in a hacky way) with an image of the girls using the same scratch sprites from the 404 page*/\r\n\t\t#Hotdog {\r\n\t\tdisplay: none;\r\n\t\t}\r\n\t\t.instructions-column > section:first-of-type > p:first-of-type:after {\r\n\t\tdisplay: block;\r\n\t\tcontent: url(\"theme_resources/AzurLaneThemeStarterSquad.png\");\r\n\t\twidth: 100%;\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 25px;\r\n\t\t}\r\n\t\t/* sets cursor */\r\n\t\t* {\r\n\t\tcursor: url(\"theme_resources/AzurLaneThemeMouse.png\"), auto !important;\r\n\t\t}\r\n\t\t/* sets background image */\r\n\t\tbody {\r\n\t\tbackground-image: url(\"theme_resources/AzurLaneThemeMemoryTaskBackground.png\") !important;\r\n\t\tbackground-size: cover;\r\n\t\tbackground-position: center;\r\n\t\tbackground-repeat: no-repeat;\r\n\t\t\t}\r\n\t\t\t/* make editor background transparent */\r\n\t\t#beepboxEditorContainer, .beepboxEditor, #text-content {\r\n\t\tbackground: #0400257d !important;\r\n\t\t}\r\n\t\t\t#text-content > section > h1 > font {\r\n\t\tdisplay: none;\r\n\t\t}\r\n\t\t#text-content > section > h1 {\r\n\t\tmargin: auto;\r\n\t\tcontent: url(\"theme_resources/AzurLaneThemeLogo.png\");\r\n\t\t}\r\n\t\t.promptContainerBG::before {\r\n\t\t\tbox-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);\r\n\t\t}\r\n\t}`,\r\n\t\"custom\": `${localStorage.getItem(\"customColors\") || `:root {  }`}`,\r\n    };\r\n\r\n    public static readonly pageMargin: string = \"var(--page-margin, black)\";\r\n    public static readonly editorBackground: string = \"var(--editor-background, black)\";\r\n    public static readonly hoverPreview: string = \"var(--hover-preview, white)\";\r\n    public static readonly playhead: string = \"var(--playhead, white)\";\r\n    public static readonly primaryText: string = \"var(--primary-text, white)\";\r\n    public static readonly secondaryText: string = \"var(--secondary-text, #999)\";\r\n    public static readonly invertedText: string = \"var(--inverted-text, black)\";\r\n    public static readonly textSelection: string = \"var(--text-selection, rgba(119,68,255,0.99))\";\r\n    public static readonly boxSelectionFill: string = \"var(--box-selection-fill, rgba(255,255,255,0.2))\";\r\n    public static readonly loopAccent: string = \"var(--loop-accent, #74f)\";\r\n    public static readonly linkAccent: string = \"var(--link-accent, #98f)\";\r\n    public static readonly uiWidgetBackground: string = \"var(--ui-widget-background, #444)\";\r\n    public static readonly uiWidgetFocus: string = \"var(--ui-widget-focus, #777)\";\r\n    public static readonly pitchBackground: string = \"var(--pitch-background, #444)\";\r\n    public static readonly tonic: string = \"var(--tonic, #864)\";\r\n    public static readonly fifthNote: string = \"var(--fifth-note, #468)\";\r\n    public static readonly whitePianoKey: string = \"var(--white-piano-key, #bbb)\";\r\n    public static readonly blackPianoKey: string = \"var(--black-piano-key, #444)\";\r\n    public static readonly whitePianoKeyText: string = \"var(--white-piano-key-text, #131200)\";\r\n    public static readonly blackPianoKeyText: string = \"var(--black-piano-key-text, #fff)\";\r\n\t//public static readonly oscilloscopeLineL: string = \"var(--oscilloscope-line-L, var(--primary-text, white))\";\r\n\t//public static readonly oscilloscopeLineR: string = \"var(--oscilloscope-line-R, var(--text-selection, rgba(119,68,255,0.99)))\";\r\n\t// modTitle can stay uncommented until it's used somwhere that's not index.html\r\n\t// public static readonly modTitle: string = \"var(--mod-title)\";\r\n    public static readonly useColorFormula: string = \"var(--use-color-formula, false)\";\r\n\t// public static readonly pitchLimit: string = \"var(--pitch-channel-limit)\";\r\n\t// public static readonly noiseLimit: string = \"var(--noise-channel-limit)\";\r\n\t// public static readonly modLimit: string = \"var(--mod-channel-limit)\";\r\n\t// public static readonly colorFormulaPitchLimit: string = \"var(--formula-pitch-channel-limit)\";\r\n\t// public static readonly colorFormulaNoiseLimit: string = \"var(--formula-noise-channel-limit)\";\r\n\t// public static readonly colorFormulaModLimit: string = \"var(--formula-mod-channel-limit)\";\r\n    public static readonly pitchSecondaryChannelHue: string = \"var(--pitch-secondary-channel-hue)\";\r\n    public static readonly pitchSecondaryChannelHueScale: string = \"var(--pitch-secondary-channel-hue-scale)\";\r\n    public static readonly pitchSecondaryChannelSat: string = \"var(--pitch-secondary-channel-sat)\";\r\n    public static readonly pitchSecondaryChannelSatScale: string = \"var(--pitch-secondary-channel-sat-scale)\";\r\n    public static readonly pitchSecondaryChannelLum: string = \"var(--pitch-secondary-channel-lum)\";\r\n    public static readonly pitchSecondaryChannelLumScale: string = \"var(--pitch-secondary-channel-lum-scale)\";\r\n    public static readonly pitchPrimaryChannelHue: string = \"var(--pitch-primary-channel-hue)\";\r\n    public static readonly pitchPrimaryChannelHueScale: string = \"var(--pitch-primary-channel-hue-scale)\";\r\n    public static readonly pitchPrimaryChannelSat: string = \"var(--pitch-primary-channel-sat)\";\r\n    public static readonly pitchPrimaryChannelSatScale: string = \"var(--pitch-primary-channel-sat-scale)\";\r\n    public static readonly pitchPrimaryChannelLum: string = \"var(--pitch-primary-channel-lum)\";\r\n    public static readonly pitchPrimaryChannelLumScale: string = \"var(--pitch-primary-channel-lum-scale)\";\r\n    public static readonly pitchSecondaryNoteHue: string = \"var(--pitch-secondary-note-hue)\";\r\n    public static readonly pitchSecondaryNoteHueScale: string = \"var(--pitch-secondary-note-hue-scale)\";\r\n    public static readonly pitchSecondaryNoteSat: string = \"var(--pitch-secondary-note-sat)\";\r\n    public static readonly pitchSecondaryNoteSatScale: string = \"var(--pitch-secondary-note-sat-scale)\";\r\n    public static readonly pitchSecondaryNoteLum: string = \"var(--pitch-secondary-note-lum)\";\r\n    public static readonly pitchSecondaryNoteLumScale: string = \"var(--pitch-secondary-note-lum-scale)\";\r\n    public static readonly pitchPrimaryNoteHue: string = \"var(--pitch-primary-note-hue)\";\r\n    public static readonly pitchPrimaryNoteHueScale: string = \"var(--pitch-primary-note-hue-scale)\";\r\n    public static readonly pitchPrimaryNoteSat: string = \"var(--pitch-primary-note-sat)\";\r\n    public static readonly pitchPrimaryNoteSatScale: string = \"var(--pitch-primary-note-sat-scale)\";\r\n    public static readonly pitchPrimaryNoteLum: string = \"var(--pitch-primary-note-lum)\";\r\n    public static readonly pitchPrimaryNoteLumScale: string = \"var(--pitch-primary-note-lum-scale)\";\r\n    public static readonly modSecondaryChannelHue: string = \"var(--mod-secondary-channel-hue)\";\r\n    public static readonly modSecondaryChannelHueScale: string = \"var(--mod-secondary-channel-hue-scale)\";\r\n    public static readonly modSecondaryChannelSat: string = \"var(--mod-secondary-channel-sat)\";\r\n    public static readonly modSecondaryChannelSatScale: string = \"var(--mod-secondary-channel-sat-scale)\";\r\n    public static readonly modSecondaryChannelLum: string = \"var(--mod-secondary-channel-lum)\";\r\n    public static readonly modSecondaryChannelLumScale: string = \"var(--mod-secondary-channel-lum-scale)\";\r\n    public static readonly modPrimaryChannelHue: string = \"var(--mod-primary-channel-hue)\";\r\n    public static readonly modPrimaryChannelHueScale: string = \"var(--mod-primary-channel-hue-scale)\";\r\n    public static readonly modPrimaryChannelSat: string = \"var(--mod-primary-channel-sat)\";\r\n    public static readonly modPrimaryChannelSatScale: string = \"var(--mod-primary-channel-sat-scale)\";\r\n    public static readonly modPrimaryChannelLum: string = \"var(--mod-primary-channel-lum)\";\r\n    public static readonly modPrimaryChannelLumScale: string = \"var(--mod-primary-channel-lum-scale)\";\r\n    public static readonly modSecondaryNoteHue: string = \"var(--mod-secondary-note-hue)\";\r\n    public static readonly modSecondaryNoteHueScale: string = \"var(--mod-secondary-note-hue-scale)\";\r\n    public static readonly modSecondaryNoteSat: string = \"var(--mod-secondary-note-sat)\";\r\n    public static readonly modSecondaryNoteSatScale: string = \"var(--mod-secondary-note-sat-scale)\";\r\n    public static readonly modSecondaryNoteLum: string = \"var(--mod-secondary-note-lum)\";\r\n    public static readonly modSecondaryNoteLumScale: string = \"var(--mod-secondary-note-lum-scale)\";\r\n    public static readonly modPrimaryNoteHue: string = \"var(--mod-primary-note-hue)\";\r\n    public static readonly modPrimaryNoteHueScale: string = \"var(--mod-primary-note-hue-scale)\";\r\n    public static readonly modPrimaryNoteSat: string = \"var(--mod-primary-note-sat)\";\r\n    public static readonly modPrimaryNoteSatScale: string = \"var(--mod-primary-note-sat-scale)\";\r\n    public static readonly modPrimaryNoteLum: string = \"var(--mod-primary-note-lum)\";\r\n    public static readonly modPrimaryNoteLumScale: string = \"var(--mod-primary-note-lum-scale)\";\r\n    public static readonly noiseSecondaryChannelHue: string = \"var(--noise-secondary-channel-hue)\";\r\n    public static readonly noiseSecondaryChannelHueScale: string = \"var(--noise-secondary-channel-hue-scale)\";\r\n    public static readonly noiseSecondaryChannelSat: string = \"var(--noise-secondary-channel-sat)\";\r\n    public static readonly noiseSecondaryChannelSatScale: string = \"var(--noise-secondary-channel-sat-scale)\";\r\n    public static readonly noiseSecondaryChannelLum: string = \"var(--noise-secondary-channel-lum)\";\r\n    public static readonly noiseSecondaryChannelLumScale: string = \"var(--noise-secondary-channel-lum-scale)\";\r\n    public static readonly noisePrimaryChannelHue: string = \"var(--noise-primary-channel-hue)\";\r\n    public static readonly noisePrimaryChannelHueScale: string = \"var(--noise-primary-channel-hue-scale)\";\r\n    public static readonly noisePrimaryChannelSat: string = \"var(--noise-primary-channel-sat)\";\r\n    public static readonly noisePrimaryChannelSatScale: string = \"var(--noise-primary-channel-sat-scale)\";\r\n    public static readonly noisePrimaryChannelLum: string = \"var(--noise-primary-channel-lum)\";\r\n    public static readonly noisePrimaryChannelLumScale: string = \"var(--noise-primary-channel-lum-scale)\";\r\n    public static readonly noiseSecondaryNoteHue: string = \"var(--noise-secondary-note-hue)\";\r\n    public static readonly noiseSecondaryNoteHueScale: string = \"var(--noise-secondary-note-hue-scale)\";\r\n    public static readonly noiseSecondaryNoteSat: string = \"var(--noise-secondary-note-sat)\";\r\n    public static readonly noiseSecondaryNoteSatScale: string = \"var(--noise-secondary-note-sat-scale)\";\r\n    public static readonly noiseSecondaryNoteLum: string = \"var(--noise-secondary-note-lum)\";\r\n    public static readonly noiseSecondaryNoteLumScale: string = \"var(--noise-secondary-note-lum-scale)\";\r\n    public static readonly noisePrimaryNoteHue: string = \"var(--noise-primary-note-hue)\";\r\n    public static readonly noisePrimaryNoteHueScale: string = \"var(--noise-primary-note-hue-scale)\";\r\n    public static readonly noisePrimaryNoteSat: string = \"var(--noise-primary-note-sat)\";\r\n    public static readonly noisePrimaryNoteSatScale: string = \"var(--noise-primary-note-sat-scale)\";\r\n    public static readonly noisePrimaryNoteLum: string = \"var(--noise-primary-note-lum)\";\r\n    public static readonly noisePrimaryNoteLumScale: string = \"var(--noise-primary-note-lum-scale)\";\r\n    public static readonly trackEditorBgPitch: string = \"var(--track-editor-bg-pitch, #444)\";\r\n    public static readonly trackEditorBgPitchDim: string = \"var(--track-editor-bg-pitch-dim, #333)\";\r\n    public static readonly trackEditorBgNoise: string = \"var(--track-editor-bg-noise, #444)\";\r\n    public static readonly trackEditorBgNoiseDim: string = \"var(--track-editor-bg-noise-dim, #333)\";\r\n    public static readonly trackEditorBgMod: string = \"var(--track-editor-bg-mod, #234)\";\r\n    public static readonly trackEditorBgModDim: string = \"var(--track-editor-bg-mod-dim, #123)\";\r\n    public static readonly multiplicativeModSlider: string = \"var(--multiplicative-mod-slider, #456;)\";\r\n    public static readonly overwritingModSlider: string = \"var(--overwriting-mod-slider, #654)\";\r\n    public static readonly indicatorPrimary: string = \"var(--indicator-primary, #74f)\";\r\n    public static readonly indicatorSecondary: string = \"var(--indicator-secondary, #444)\";\r\n    public static readonly select2OptGroup: string = \"var(--select2-opt-group, #585858)\";\r\n    public static readonly inputBoxOutline: string = \"var(--input-box-outline, #333)\";\r\n    public static readonly muteButtonNormal: string = \"var(--mute-button-normal, #ffa033)\";\r\n    public static readonly muteButtonMod: string = \"var(--mute-button-mod, #9a6bff)\";\r\n    public static readonly modLabelPrimary: string = \"var(--mod-label-primary, #999)\";\r\n    public static readonly modLabelSecondaryText: string = \"var(--mod-label-secondary-text, #333)\";\r\n    public static readonly modLabelPrimaryText: string = \"var(--mod-label-primary-text, black)\";\r\n    public static readonly disabledNotePrimary: string = \"var(--disabled-note-primary, #999)\";\r\n    public static readonly disabledNoteSecondary: string = \"var(--disabled-note-secondary, #666)\";\r\n\r\n\tpublic static c_pitchSecondaryChannelHue: number = 0;\r\n\tpublic static c_pitchSecondaryChannelHueScale: number = 0;\r\n\tpublic static c_pitchSecondaryChannelSat: number = 0;\r\n\tpublic static c_pitchSecondaryChannelSatScale: number = 0;\r\n\tpublic static c_pitchSecondaryChannelLum: number = 0;\r\n\tpublic static c_pitchSecondaryChannelLumScale: number = 0;\r\n\tpublic static c_pitchPrimaryChannelHue: number = 0;\r\n\tpublic static c_pitchPrimaryChannelHueScale: number = 0;\r\n\tpublic static c_pitchPrimaryChannelSat: number = 0;\r\n\tpublic static c_pitchPrimaryChannelSatScale: number = 0;\r\n\tpublic static c_pitchPrimaryChannelLum: number = 0;\r\n\tpublic static c_pitchPrimaryChannelLumScale: number = 0;\r\n\tpublic static c_pitchSecondaryNoteHue: number = 0;\r\n\tpublic static c_pitchSecondaryNoteHueScale: number = 0;\r\n\tpublic static c_pitchSecondaryNoteSat: number = 0;\r\n\tpublic static c_pitchSecondaryNoteSatScale: number = 0;\r\n\tpublic static c_pitchSecondaryNoteLum: number = 0;\r\n\tpublic static c_pitchSecondaryNoteLumScale: number = 0;\r\n\tpublic static c_pitchPrimaryNoteHue: number = 0;\r\n\tpublic static c_pitchPrimaryNoteHueScale: number = 0;\r\n\tpublic static c_pitchPrimaryNoteSat: number = 0;\r\n\tpublic static c_pitchPrimaryNoteSatScale: number = 0;\r\n\tpublic static c_pitchPrimaryNoteLum: number = 0;\r\n\tpublic static c_pitchPrimaryNoteLumScale: number = 0;\r\n\tpublic static c_modSecondaryChannelHue: number = 0;\r\n\tpublic static c_modSecondaryChannelHueScale: number = 0;\r\n\tpublic static c_modSecondaryChannelSat: number = 0;\r\n\tpublic static c_modSecondaryChannelSatScale: number = 0;\r\n\tpublic static c_modSecondaryChannelLum: number = 0;\r\n\tpublic static c_modSecondaryChannelLumScale: number = 0;\r\n\tpublic static c_modPrimaryChannelHue: number = 0;\r\n\tpublic static c_modPrimaryChannelHueScale: number = 0;\r\n\tpublic static c_modPrimaryChannelSat: number = 0;\r\n\tpublic static c_modPrimaryChannelSatScale: number = 0;\r\n\tpublic static c_modPrimaryChannelLum: number = 0;\r\n\tpublic static c_modPrimaryChannelLumScale: number = 0;\r\n\tpublic static c_modSecondaryNoteHue: number = 0;\r\n\tpublic static c_modSecondaryNoteHueScale: number = 0;\r\n\tpublic static c_modSecondaryNoteSat: number = 0;\r\n\tpublic static c_modSecondaryNoteSatScale: number = 0;\r\n\tpublic static c_modSecondaryNoteLum: number = 0;\r\n\tpublic static c_modSecondaryNoteLumScale: number = 0;\r\n\tpublic static c_modPrimaryNoteHue: number = 0;\r\n\tpublic static c_modPrimaryNoteHueScale: number = 0;\r\n\tpublic static c_modPrimaryNoteSat: number = 0;\r\n\tpublic static c_modPrimaryNoteSatScale: number = 0;\r\n\tpublic static c_modPrimaryNoteLum: number = 0;\r\n\tpublic static c_modPrimaryNoteLumScale: number = 0;\r\n\tpublic static c_noiseSecondaryChannelHue: number = 0;\r\n\tpublic static c_noiseSecondaryChannelHueScale: number = 0;\r\n\tpublic static c_noiseSecondaryChannelSat: number = 0;\r\n\tpublic static c_noiseSecondaryChannelSatScale: number = 0;\r\n\tpublic static c_noiseSecondaryChannelLum: number = 0;\r\n\tpublic static c_noiseSecondaryChannelLumScale: number = 0;\r\n\tpublic static c_noisePrimaryChannelHue: number = 0;\r\n\tpublic static c_noisePrimaryChannelHueScale: number = 0;\r\n\tpublic static c_noisePrimaryChannelSat: number = 0;\r\n\tpublic static c_noisePrimaryChannelSatScale: number = 0;\r\n\tpublic static c_noisePrimaryChannelLum: number = 0;\r\n\tpublic static c_noisePrimaryChannelLumScale: number = 0;\r\n\tpublic static c_noiseSecondaryNoteHue: number = 0;\r\n\tpublic static c_noiseSecondaryNoteHueScale: number = 0;\r\n\tpublic static c_noiseSecondaryNoteSat: number = 0;\r\n\tpublic static c_noiseSecondaryNoteSatScale: number = 0;\r\n\tpublic static c_noiseSecondaryNoteLum: number = 0;\r\n\tpublic static c_noiseSecondaryNoteLumScale: number = 0;\r\n\tpublic static c_noisePrimaryNoteHue: number = 0;\r\n\tpublic static c_noisePrimaryNoteHueScale: number = 0;\r\n\tpublic static c_noisePrimaryNoteSat: number = 0;\r\n\tpublic static c_noisePrimaryNoteSatScale: number = 0;\r\n\tpublic static c_noisePrimaryNoteLum: number = 0;\r\n\tpublic static c_noisePrimaryNoteLumScale: number = 0;\r\n\r\n\tpublic static c_pitchChannelCountOverride: number = 40;\r\n\tpublic static c_noiseChannelCountOverride: number = 16;\r\n\tpublic static c_modChannelCountOverride: number = 12;\r\n\r\n\tpublic static c_invertedText: string = \"\";\r\n\tpublic static c_trackEditorBgNoiseDim: string = \"\";\r\n\tpublic static c_trackEditorBgNoise: string = \"\";\r\n\tpublic static c_trackEditorBgModDim: string = \"\";\r\n\tpublic static c_trackEditorBgMod: string = \"\";\r\n\tpublic static c_trackEditorBgPitchDim: string = \"\";\r\n\tpublic static c_trackEditorBgPitch: string = \"\";\r\n\r\n    public static readonly pitchChannels: DictionaryArray<ChannelColors> = toNameMap([\r\n        {\r\n            name: \"pitch1\", // cyan\r\n            secondaryChannel: \"var(--pitch1-secondary-channel, #0099A1)\",\r\n            primaryChannel: \"var(--pitch1-primary-channel, #25F3FF)\",\r\n            secondaryNote: \"var(--pitch1-secondary-note, #00BDC7)\",\r\n            primaryNote: \"var(--pitch1-primary-note, #92F9FF)\",\r\n        }, {\r\n            name: \"pitch2\", // yellow\r\n            secondaryChannel: \"var(--pitch2-secondary-channel, #A1A100)\",\r\n            primaryChannel: \"var(--pitch2-primary-channel, #FFFF25)\",\r\n            secondaryNote: \"var(--pitch2-secondary-note, #C7C700)\",\r\n            primaryNote: \"var(--pitch2-primary-note, #FFFF92)\",\r\n        }, {\r\n            name: \"pitch3\", // orange\r\n            secondaryChannel: \"var(--pitch3-secondary-channel, #C75000)\",\r\n            primaryChannel: \"var(--pitch3-primary-channel, #FF9752)\",\r\n            secondaryNote: \"var(--pitch3-secondary-note, #FF771C)\",\r\n            primaryNote: \"var(--pitch3-primary-note, #FFCDAB)\",\r\n        }, {\r\n            name: \"pitch4\", // green\r\n            secondaryChannel: \"var(--pitch4-secondary-channel, #00A100)\",\r\n            primaryChannel: \"var(--pitch4-primary-channel, #50FF50)\",\r\n            secondaryNote: \"var(--pitch4-secondary-note, #00C700)\",\r\n            primaryNote: \"var(--pitch4-primary-note, #A0FFA0)\",\r\n        }, {\r\n            name: \"pitch5\", // magenta\r\n            secondaryChannel: \"var(--pitch5-secondary-channel, #D020D0)\",\r\n            primaryChannel: \"var(--pitch5-primary-channel, #FF90FF)\",\r\n            secondaryNote: \"var(--pitch5-secondary-note, #E040E0)\",\r\n            primaryNote: \"var(--pitch5-primary-note, #FFC0FF)\",\r\n        }, {\r\n            name: \"pitch6\", // blue\r\n            secondaryChannel: \"var(--pitch6-secondary-channel, #7777B0)\",\r\n            primaryChannel: \"var(--pitch6-primary-channel, #A0A0FF)\",\r\n            secondaryNote: \"var(--pitch6-secondary-note, #8888D0)\",\r\n            primaryNote: \"var(--pitch6-primary-note, #D0D0FF)\",\r\n        }, {\r\n            name: \"pitch7\", // olive\r\n            secondaryChannel: \"var(--pitch7-secondary-channel, #8AA100)\",\r\n            primaryChannel: \"var(--pitch7-primary-channel, #DEFF25)\",\r\n            secondaryNote: \"var(--pitch7-secondary-note, #AAC700)\",\r\n            primaryNote: \"var(--pitch7-primary-note, #E6FF92)\",\r\n        }, {\r\n            name: \"pitch8\", // red\r\n            secondaryChannel: \"var(--pitch8-secondary-channel, #DF0019)\",\r\n            primaryChannel: \"var(--pitch8-primary-channel, #FF98A4)\",\r\n            secondaryNote: \"var(--pitch8-secondary-note, #FF4E63)\",\r\n            primaryNote: \"var(--pitch8-primary-note, #FFB2BB)\",\r\n        }, {\r\n            name: \"pitch9\", // teal\r\n            secondaryChannel: \"var(--pitch9-secondary-channel, #00A170)\",\r\n            primaryChannel: \"var(--pitch9-primary-channel, #50FFC9)\",\r\n            secondaryNote: \"var(--pitch9-secondary-note, #00C78A)\",\r\n            primaryNote: \"var(--pitch9-primary-note, #83FFD9)\",\r\n        }, {\r\n            name: \"pitch10\", // purple\r\n            secondaryChannel: \"var(--pitch10-secondary-channel, #A11FFF)\",\r\n            primaryChannel: \"var(--pitch10-primary-channel, #CE8BFF)\",\r\n            secondaryNote: \"var(--pitch10-secondary-note, #B757FF)\",\r\n            primaryNote: \"var(--pitch10-primary-note, #DFACFF)\",\r\n        },\r\n    ]);\r\n    public static readonly noiseChannels: DictionaryArray<ChannelColors> = toNameMap([\r\n        {\r\n            name: \"noise1\", // gray\r\n            secondaryChannel: \"var(--noise1-secondary-channel, #6F6F6F)\",\r\n            primaryChannel: \"var(--noise1-primary-channel, #AAAAAA)\",\r\n            secondaryNote: \"var(--noise1-secondary-note, #A7A7A7)\",\r\n            primaryNote: \"var(--noise1-primary-note, #E0E0E0)\",\r\n        }, {\r\n            name: \"noise2\", // brown\r\n            secondaryChannel: \"var(--noise2-secondary-channel, #996633)\",\r\n            primaryChannel: \"var(--noise2-primary-channel, #DDAA77)\",\r\n            secondaryNote: \"var(--noise2-secondary-note, #CC9966)\",\r\n            primaryNote: \"var(--noise2-primary-note, #F0D0BB)\",\r\n        }, {\r\n            name: \"noise3\", // azure\r\n            secondaryChannel: \"var(--noise3-secondary-channel, #4A6D8F)\",\r\n            primaryChannel: \"var(--noise3-primary-channel, #77AADD)\",\r\n            secondaryNote: \"var(--noise3-secondary-note, #6F9FCF)\",\r\n            primaryNote: \"var(--noise3-primary-note, #BBD7FF)\",\r\n        }, {\r\n            name: \"noise4\", // purple\r\n            secondaryChannel: \"var(--noise4-secondary-channel, #7A4F9A)\",\r\n            primaryChannel: \"var(--noise4-primary-channel, #AF82D2)\",\r\n            secondaryNote: \"var(--noise4-secondary-note, #9E71C1)\",\r\n            primaryNote: \"var(--noise4-primary-note, #D4C1EA)\",\r\n        }, {\r\n            name: \"noise5\", // sage\r\n            secondaryChannel: \"var(--noise5-secondary-channel, #607837)\",\r\n            primaryChannel: \"var(--noise5-primary-channel, #A2BB77)\",\r\n            secondaryNote: \"var(--noise5-secondary-note, #91AA66)\",\r\n            primaryNote: \"var(--noise5-primary-note, #C5E2B2)\",\r\n        },\r\n    ]);\r\n    public static readonly modChannels: DictionaryArray<ChannelColors> = toNameMap([\r\n        {\r\n            name: \"mod1\",\r\n            secondaryChannel: \"var(--mod1-secondary-channel, #339955)\",\r\n            primaryChannel: \"var(--mod1-primary-channel, #77fc55)\",\r\n            secondaryNote: \"var(--mod1-secondary-note, #77ff8a)\",\r\n            primaryNote: \"var(--mod1-primary-note, #cdffee)\",\r\n        }, {\r\n            name: \"mod2\",\r\n            secondaryChannel: \"var(--mod2-secondary-channel, #993355)\",\r\n            primaryChannel: \"var(--mod2-primary-channel, #f04960)\",\r\n            secondaryNote: \"var(--mod2-secondary-note, #f057a0)\",\r\n            primaryNote: \"var(--mod2-primary-note, #ffb8de)\",\r\n        }, {\r\n            name: \"mod3\",\r\n            secondaryChannel: \"var(--mod3-secondary-channel, #553399)\",\r\n            primaryChannel: \"var(--mod3-primary-channel, #8855fc)\",\r\n            secondaryNote: \"var(--mod3-secondary-note, #aa64ff)\",\r\n            primaryNote: \"var(--mod3-primary-note, #f8ddff)\",\r\n        }, {\r\n            name: \"mod4\",\r\n            secondaryChannel: \"var(--mod4-secondary-channel, #a86436)\",\r\n            primaryChannel: \"var(--mod4-primary-channel, #c8a825)\",\r\n            secondaryNote: \"var(--mod4-secondary-note, #e8ba46)\",\r\n            primaryNote: \"var(--mod4-primary-note, #fff6d3)\",\r\n        },\r\n    ]);\r\n\r\n    public static resetColors() {\r\n        this.colorLookup.clear();\r\n    }\r\n\r\n\tpublic static getArbitaryChannelColor(type: string, channel: number): ChannelColors {\r\n\r\n        if (!this.usesColorFormula) {\r\n            let base: ChannelColors;\r\n            switch (type) {\r\n                case (\"noise\"): {\r\n                    base = ColorConfig.noiseChannels[(channel % +ColorConfig.getComputed(\"--noise-channel-limit\")) % ColorConfig.noiseChannels.length];\r\n                    break;\r\n                }\r\n                case (\"mod\"): {\r\n                    base = ColorConfig.modChannels[(channel % +ColorConfig.getComputed(\"--mod-channel-limit\")) % ColorConfig.modChannels.length];\r\n                    break;\r\n                }\r\n                case (\"pitch\"):\r\n                default: {\r\n                    base = ColorConfig.pitchChannels[(channel % +ColorConfig.getComputed(\"--pitch-channel-limit\")) % ColorConfig.pitchChannels.length];\r\n                    break;\r\n                }\r\n            }\r\n            var regex = /\\(([^\\,)]+)/;\r\n            let newChannelSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryChannel) as RegExpExecArray)[1] as string);\r\n            let newChannelPrimary: string = ColorConfig.getComputed((regex.exec(base.primaryChannel) as RegExpExecArray)[1] as string);\r\n            let newNoteSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryNote) as RegExpExecArray)[1] as string);\r\n            let newNotePrimary: string = ColorConfig.getComputed((regex.exec(base.primaryNote) as RegExpExecArray)[1] as string);\r\n            return <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n        }\r\n\t\tlet colorFormulaPitchLimit: number = +ColorConfig.getComputed(\"--formula-pitch-channel-limit\");\r\n\t\tlet colorFormulaNoiseLimit: number = +ColorConfig.getComputed(\"--formula-noise-channel-limit\");\r\n\t\tlet colorFormulaModLimit: number = +ColorConfig.getComputed(\"--formula-mod-channel-limit\");\r\n        switch (type) {\r\n            case (\"noise\"): {\r\n\t\t\t\t// Noise formula\r\n\r\n                let newChannelSecondary: string = \"hsl(\" + ((this.c_noiseSecondaryChannelHue + ((channel * this.c_noiseSecondaryChannelHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\r\n                    + (this.c_noiseSecondaryChannelSat + channel * this.c_noiseSecondaryChannelSatScale) + \"%,\"\r\n                    + (this.c_noiseSecondaryChannelLum + channel * this.c_noiseSecondaryChannelLumScale) + \"%)\";\r\n                let newChannelPrimary: string = \"hsl(\" + ((this.c_noisePrimaryChannelHue + ((channel * this.c_noisePrimaryChannelHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\r\n                    + (this.c_noisePrimaryChannelSat + channel * this.c_noisePrimaryChannelSatScale) + \"%,\"\r\n                    + (this.c_noisePrimaryChannelLum + channel * this.c_noisePrimaryChannelLumScale) + \"%)\";\r\n                let newNoteSecondary: string = \"hsl(\" + ((this.c_noiseSecondaryNoteHue + ((channel * this.c_noiseSecondaryNoteHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\r\n                    + (this.c_noiseSecondaryNoteSat + channel * this.c_noiseSecondaryNoteSatScale) + \"%,\"\r\n                    + (this.c_noiseSecondaryNoteLum + channel * this.c_noiseSecondaryNoteLumScale) + \"%)\";\r\n                let newNotePrimary: string = \"hsl(\" + ((this.c_noisePrimaryNoteHue + ((channel * this.c_noisePrimaryNoteHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\r\n                    + (this.c_noisePrimaryNoteSat + channel * this.c_noisePrimaryNoteSatScale) + \"%,\"\r\n                    + (this.c_noisePrimaryNoteLum + channel * this.c_noisePrimaryNoteLumScale) + \"%)\";\r\n\r\n                let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n                return newChannelColors;\r\n            } case (\"mod\"): {\r\n                // Mod formula\r\n\r\n                let newChannelSecondary: string = \"hsl(\" + ((this.c_modSecondaryChannelHue + ((channel * this.c_modSecondaryChannelHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\r\n                    + (this.c_modSecondaryChannelSat + channel * this.c_modSecondaryChannelSatScale) + \"%,\"\r\n                    + (this.c_modSecondaryChannelLum + channel * this.c_modSecondaryChannelLumScale) + \"%)\";\r\n                let newChannelPrimary: string = \"hsl(\" + ((this.c_modPrimaryChannelHue + ((channel * this.c_modPrimaryChannelHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\r\n                    + (this.c_modPrimaryChannelSat + channel * this.c_modPrimaryChannelSatScale) + \"%,\"\r\n                    + (this.c_modPrimaryChannelLum + channel * this.c_modPrimaryChannelLumScale) + \"%)\";\r\n                let newNoteSecondary: string = \"hsl(\" + ((this.c_modSecondaryNoteHue + ((channel * this.c_modSecondaryNoteHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\r\n                    + (this.c_modSecondaryNoteSat + channel * this.c_modSecondaryNoteSatScale) + \"%,\"\r\n                    + (this.c_modSecondaryNoteLum + channel * this.c_modSecondaryNoteLumScale) + \"%)\";\r\n                let newNotePrimary: string = \"hsl(\" + ((this.c_modPrimaryNoteHue + ((channel * this.c_modPrimaryNoteHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\r\n                    + (this.c_modPrimaryNoteSat + channel * this.c_modPrimaryNoteSatScale) + \"%,\"\r\n                    + (this.c_modPrimaryNoteLum + channel * this.c_modPrimaryNoteLumScale) + \"%)\";\r\n\r\n                let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n                return newChannelColors;\r\n            }\r\n            case (\"pitch\"):\r\n            default: {\r\n\t\t\t\t// Pitch formula\r\n\r\n                let newChannelSecondary: string = \"hsl(\" + ((this.c_pitchSecondaryChannelHue + (channel * this.c_pitchSecondaryChannelHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\r\n                    + (this.c_pitchSecondaryChannelSat * (1 - (this.c_pitchSecondaryChannelSatScale * Math.floor(channel / 7)))) + \"%,\"\r\n                    + (this.c_pitchSecondaryChannelLum * (1 - (this.c_pitchSecondaryChannelLumScale * Math.floor(channel / 7)))) + \"%)\";\r\n                let newChannelPrimary: string = \"hsl(\" + ((this.c_pitchPrimaryChannelHue + (channel * this.c_pitchPrimaryChannelHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\r\n                    + (this.c_pitchPrimaryChannelSat * (1 - (this.c_pitchPrimaryChannelSatScale * Math.floor(channel / 7)))) + \"%,\"\r\n                    + (this.c_pitchPrimaryChannelLum * (1 - (this.c_pitchPrimaryChannelLumScale * Math.floor(channel / 7)))) + \"%)\";\r\n                let newNoteSecondary: string = \"hsl(\" + ((this.c_pitchSecondaryNoteHue + (channel * this.c_pitchSecondaryNoteHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\r\n                    + (this.c_pitchSecondaryNoteSat * (1 - (this.c_pitchSecondaryNoteSatScale * Math.floor(channel / 7)))) + \"%,\"\r\n                    + (this.c_pitchSecondaryNoteLum * (1 - (this.c_pitchSecondaryNoteLumScale * Math.floor(channel / 7)))) + \"%)\";\r\n                let newNotePrimary: string = \"hsl(\" + ((this.c_pitchPrimaryNoteHue + (channel * this.c_pitchPrimaryNoteHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\r\n                    + (this.c_pitchPrimaryNoteSat * (1 - (this.c_pitchPrimaryNoteSatScale * Math.floor(channel / 7)))) + \"%,\"\r\n                    + (this.c_pitchPrimaryNoteLum * (1 - (this.c_pitchPrimaryNoteLumScale * Math.floor(channel / 7)))) + \"%)\";\r\n\r\n                let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n                return newChannelColors;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Same as below, but won't return var colors\r\n    public static getComputedChannelColor(song: Song, channel: number): ChannelColors {\r\n\t\tif (!this.usesColorFormula) {\r\n            let base: ChannelColors = ColorConfig.getChannelColor(song, channel);\r\n            // Trim away \"var(...)\"\r\n            var regex = /\\(([^\\,)]+)/;\r\n            let newChannelSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryChannel) as RegExpExecArray)[1] as string);\r\n            let newChannelPrimary: string = ColorConfig.getComputed((regex.exec(base.primaryChannel) as RegExpExecArray)[1] as string);\r\n            let newNoteSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryNote) as RegExpExecArray)[1] as string);\r\n            let newNotePrimary: string = ColorConfig.getComputed((regex.exec(base.primaryNote) as RegExpExecArray)[1] as string);\r\n            return <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n        }\r\n        else {\r\n            return ColorConfig.getChannelColor(song, channel);\r\n        }\r\n    };\r\n\r\n    public static getChannelColor(song: Song, channel: number): ChannelColors {\r\n\t\tif (!this.usesColorFormula) {\r\n            // Set colors, not defined by formula\r\n            if (channel < song.pitchChannelCount) {\r\n\t\t\t\treturn ColorConfig.pitchChannels[(channel % +(ColorConfig.getComputed(\"--pitch-channel-limit\"))) % ColorConfig.pitchChannels.length];\r\n            } else if (channel < song.pitchChannelCount + song.noiseChannelCount) {\r\n                return ColorConfig.noiseChannels[((channel - song.pitchChannelCount) % +(ColorConfig.getComputed(\"--noise-channel-limit\"))) % ColorConfig.noiseChannels.length];\r\n            } else {\r\n                return ColorConfig.modChannels[((channel - song.pitchChannelCount - song.noiseChannelCount) % +(ColorConfig.getComputed(\"--mod-channel-limit\"))) % ColorConfig.modChannels.length];\r\n            }\r\n        }\r\n        else {\r\n            // Determine if color is cached\r\n            if (ColorConfig.colorLookup.has(channel)) {\r\n                return ColorConfig.colorLookup.get(channel) as ChannelColors;\r\n            }\r\n            else {\r\n                // Formulaic color definition\r\n\t\t\t\tlet colorFormulaPitchLimit: number = +ColorConfig.getComputed(\"--formula-pitch-channel-limit\");\r\n\t\t\t\tlet colorFormulaNoiseLimit: number = +ColorConfig.getComputed(\"--formula-noise-channel-limit\");\r\n\t\t\t\tlet colorFormulaModLimit: number = +ColorConfig.getComputed(\"--formula-mod-channel-limit\");\r\n                if (channel < song.pitchChannelCount) {\r\n                    // Pitch formula\r\n\r\n\t\t\t\tlet newChannelSecondary: string = \"hsl(\" + ((this.c_pitchSecondaryChannelHue + (channel * this.c_pitchSecondaryChannelHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\r\n\t\t\t\t\t+ (this.c_pitchSecondaryChannelSat * (1 - (this.c_pitchSecondaryChannelSatScale * Math.floor(channel / 9)))) + \"%,\"\r\n\t\t\t\t\t+ (this.c_pitchSecondaryChannelLum * (1 - (this.c_pitchSecondaryChannelLumScale * Math.floor(channel / 9)))) + \"%)\";\r\n\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((this.c_pitchPrimaryChannelHue + (channel * this.c_pitchPrimaryChannelHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\r\n\t\t\t\t\t+ (this.c_pitchPrimaryChannelSat * (1 - (this.c_pitchPrimaryChannelSatScale * Math.floor(channel / 9)))) + \"%,\"\r\n\t\t\t\t\t+ (this.c_pitchPrimaryChannelLum * (1 - (this.c_pitchPrimaryChannelLumScale * Math.floor(channel / 9)))) + \"%)\";\r\n\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((this.c_pitchSecondaryNoteHue + (channel * this.c_pitchSecondaryNoteHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\r\n\t\t\t\t\t+ (this.c_pitchSecondaryNoteSat * (1 - (this.c_pitchSecondaryNoteSatScale * Math.floor(channel / 9)))) + \"%,\"\r\n\t\t\t\t\t+ (this.c_pitchSecondaryNoteLum * (1 - (this.c_pitchSecondaryNoteLumScale * Math.floor(channel / 9)))) + \"%)\";\r\n\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((this.c_pitchPrimaryNoteHue + (channel * this.c_pitchPrimaryNoteHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\r\n\t\t\t\t\t+ (this.c_pitchPrimaryNoteSat * (1 - (this.c_pitchPrimaryNoteSatScale * Math.floor(channel / 9)))) + \"%,\"\r\n\t\t\t\t\t+ (this.c_pitchPrimaryNoteLum * (1 - (this.c_pitchPrimaryNoteLumScale * Math.floor(channel / 9)))) + \"%)\";\r\n\r\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n                    ColorConfig.colorLookup.set(channel, newChannelColors);\r\n                    return newChannelColors;\r\n\r\n                }\r\n                else if (channel < song.pitchChannelCount + song.noiseChannelCount) {\r\n                    // Noise formula\r\n\t\t\t\t\t\r\n\t\t\t\tlet newChannelSecondary: string = \"hsl(\" + ((this.c_noiseSecondaryChannelHue + (((channel - song.pitchChannelCount) * this.c_noiseSecondaryChannelHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\r\n\t\t\t\t\t+ (this.c_noiseSecondaryChannelSat + channel * this.c_noiseSecondaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t+ (this.c_noiseSecondaryChannelLum + channel * this.c_noiseSecondaryChannelLumScale) + \"%)\";\r\n\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((this.c_noisePrimaryChannelHue + (((channel - song.pitchChannelCount) * this.c_noisePrimaryChannelHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\r\n\t\t\t\t\t+ (this.c_noisePrimaryChannelSat + channel * this.c_noisePrimaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t+ (this.c_noisePrimaryChannelLum + channel * this.c_noisePrimaryChannelLumScale) + \"%)\";\r\n\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((this.c_noiseSecondaryNoteHue + (((channel - song.pitchChannelCount) * this.c_noiseSecondaryNoteHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\r\n\t\t\t\t\t+ (this.c_noiseSecondaryNoteSat + channel * this.c_noiseSecondaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t+ (this.c_noiseSecondaryNoteLum + channel * this.c_noiseSecondaryNoteLumScale) + \"%)\";\r\n\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((this.c_noisePrimaryNoteHue + (((channel - song.pitchChannelCount) * this.c_noisePrimaryNoteHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\r\n\t\t\t\t\t+ (this.c_noisePrimaryNoteSat + channel * this.c_noisePrimaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t+ (this.c_noisePrimaryNoteLum + channel * this.c_noisePrimaryNoteLumScale) + \"%)\";\r\n\r\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n                    ColorConfig.colorLookup.set(channel, newChannelColors);\r\n                    return newChannelColors;\r\n                }\r\n                else {\r\n                    // Mod formula\r\n\r\n\t\t\t\t\tlet newChannelSecondary: string = \"hsl(\" + ((this.c_modSecondaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modSecondaryChannelHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\r\n\t\t\t\t\t\t+ (this.c_modSecondaryChannelSat + channel * this.c_modSecondaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_modSecondaryChannelLum + channel * this.c_modSecondaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((this.c_modPrimaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modPrimaryChannelHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\r\n\t\t\t\t\t\t+ (this.c_modPrimaryChannelSat + channel * this.c_modPrimaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_modPrimaryChannelLum + channel * this.c_modPrimaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((this.c_modSecondaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modSecondaryNoteHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\r\n\t\t\t\t\t\t+ (this.c_modSecondaryNoteSat + channel * this.c_modSecondaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_modSecondaryNoteLum + channel * this.c_modSecondaryNoteLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((this.c_modPrimaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modPrimaryNoteHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\r\n\t\t\t\t\t\t+ (this.c_modPrimaryNoteSat + channel * this.c_modPrimaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (this.c_modPrimaryNoteLum + channel * this.c_modPrimaryNoteLumScale) + \"%)\";\r\n\r\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n                    ColorConfig.colorLookup.set(channel, newChannelColors);\r\n                    return newChannelColors;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static readonly _styleElement: HTMLStyleElement = document.head.appendChild(HTML.style({ type: \"text/css\" }));\r\n\r\n    public static setTheme(name: string): void {\r\n\t\tlet theme: string = this.themes[name];\r\n\t\tif (theme == undefined) theme = ColorConfig.defaultTheme;\r\n\t\tthis._styleElement.textContent = theme;\r\n\r\n\t\t// for getComputed\r\n\t\tlet valuesToAdd: string = \":root{\";\r\n\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--oscilloscope-line-L\") == \"\") valuesToAdd += \"--oscilloscope-line-L:var(--primary-text,white);\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--oscilloscope-line-R\") == \"\") valuesToAdd += \"--oscilloscope-line-R:var(--text-selection,rgba(119,68,255,0.99));\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--text-enabled-icon\") == \"\") valuesToAdd += \"--text-enabled-icon:✓ ;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--text-disabled-icon\") == \"\") valuesToAdd += \"--text-disabled-icon:　;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--text-spacing-icon\") == \"\") valuesToAdd += \"--text-spacing-icon:　;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--note-flash\") == \"\") valuesToAdd += \"--note-flash:#ffffff;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--note-flash-secondary\") == \"\") valuesToAdd += \"--note-flash-secondary:#ffffff77;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-channel-limit\") == \"\") valuesToAdd += \"--pitch-channel-limit:\" + Config.pitchChannelCountMax + \";\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise-channel-limit\") == \"\") valuesToAdd += \"--noise-channel-limit:\" + Config.noiseChannelCountMax + \";\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod-channel-limit\") == \"\") valuesToAdd += \"--mod-channel-limit:\" + Config.modChannelCountMax + \";\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--formula-pitch-channel-limit\") == \"\") valuesToAdd += \"--formula-pitch-channel-limit:360;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--formula-noise-channel-limit\") == \"\") valuesToAdd += \"--formula-noise-channel-limit:360;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--formula-mod-channel-limit\") == \"\") valuesToAdd += \"--formula-mod-channel-limit:360;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--editor-background\") == \"\") valuesToAdd += \"--editor-background:black;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--ui-widget-background\") == \"\") valuesToAdd += \"--ui-widget-background:#444;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--loop-accent\") == \"\") valuesToAdd += \"--loop-accent:#74f;\";\r\n\t\t// if (getComputedStyle(this._styleElement).getPropertyValue(\"--link-accent\") == \"\") valuesToAdd += \"--link-accent:#9c64f7;\";\r\n\t\t// if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod-title\") == \"\") valuesToAdd += \"--mod-title:var(--link-accent);\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--box-selection-fill\") == \"\") valuesToAdd += \"--box-selection-fill:rgba(255,255,255,0.2);\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--primary-text\") == \"\") valuesToAdd += \"--primary-text:white;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--inverted-text\") == \"\") valuesToAdd += \"--inverted-text:black;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-pitch\") == \"\") valuesToAdd += \"--track-editor-bg-pitch:#444;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-pitch-dim\") == \"\") valuesToAdd += \"--track-editor-bg-pitch-dim:#333;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-noise\") == \"\") valuesToAdd += \"--track-editor-bg-noise:#444;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-noise-dim\") == \"\") valuesToAdd += \"--track-editor-bg-noise-dim:#333;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-mod\") == \"\") valuesToAdd += \"--track-editor-bg-mod:#234;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-mod-dim\") == \"\") valuesToAdd += \"--track-editor-bg-mod-dim:#123;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mute-button-normal\") == \"\") valuesToAdd += \"--mute-button-normal:#ffa033;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mute-button-mod\") == \"\") valuesToAdd += \"--mute-button-mod:#9a6bff;\";\r\n\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch1-secondary-channel\") == \"\") valuesToAdd += \"--pitch1-secondary-channel:#0099A1;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch1-primary-channel\") == \"\") valuesToAdd += \"--pitch1-primary-channel:#25F3FF;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch1-secondary-note\") == \"\") valuesToAdd += \"--pitch1-secondary-note:#00BDC7;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch1-primary-note\") == \"\") valuesToAdd += \"--pitch1-primary-note:#92F9FF;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch2-secondary-channel\") == \"\") valuesToAdd += \"--pitch2-secondary-channel:#A1A100;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch2-primary-channel\") == \"\") valuesToAdd += \"--pitch2-primary-channel:#FFFF25;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch2-secondary-note\") == \"\") valuesToAdd += \"--pitch2-secondary-note:#C7C700;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch2-primary-note\") == \"\") valuesToAdd += \"--pitch2-primary-note:#FFFF92;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch3-secondary-channel\") == \"\") valuesToAdd += \"--pitch3-secondary-channel:#C75000;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch3-primary-channel\") == \"\") valuesToAdd += \"--pitch3-primary-channel:#FF9752;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch3-secondary-note\") == \"\") valuesToAdd += \"--pitch3-secondary-note:#FF771C;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch3-primary-note\") == \"\") valuesToAdd += \"--pitch3-primary-note:#FFCDAB;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch4-secondary-channel\") == \"\") valuesToAdd += \"--pitch4-secondary-channel:#00A100;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch4-primary-channel\") == \"\") valuesToAdd += \"--pitch4-primary-channel:#50FF50;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch4-secondary-note\") == \"\") valuesToAdd += \"--pitch4-secondary-note:#00C700;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch4-primary-note\") == \"\") valuesToAdd += \"--pitch4-primary-note:#A0FFA0;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch5-secondary-channel\") == \"\") valuesToAdd += \"--pitch5-secondary-channel:#D020D0;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch5-primary-channel\") == \"\") valuesToAdd += \"--pitch5-primary-channel:#FF90FF;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch5-secondary-note\") == \"\") valuesToAdd += \"--pitch5-secondary-note:#E040E0;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch5-primary-note\") == \"\") valuesToAdd += \"--pitch5-primary-note:#FFC0FF;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch6-secondary-channel\") == \"\") valuesToAdd += \"--pitch6-secondary-channel:#7777B0;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch6-primary-channel\") == \"\") valuesToAdd += \"--pitch6-primary-channel:#A0A0FF;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch6-secondary-note\") == \"\") valuesToAdd += \"--pitch6-secondary-note:#8888D0;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch6-primary-note\") == \"\") valuesToAdd += \"--pitch6-primary-note:#D0D0FF;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch7-secondary-channel\") == \"\") valuesToAdd += \"--pitch7-secondary-channel:#8AA100;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch7-primary-channel\") == \"\") valuesToAdd += \"--pitch7-primary-channel:#DEFF25;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch7-secondary-note\") == \"\") valuesToAdd += \"--pitch7-secondary-note:#AAC700;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch7-primary-note\") == \"\") valuesToAdd += \"--pitch7-primary-note:#E6FF92;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch8-secondary-channel\") == \"\") valuesToAdd += \"--pitch8-secondary-channel:#DF0019;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch8-primary-channel\") == \"\") valuesToAdd += \"--pitch8-primary-channel:#FF98A4;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch8-secondary-note\") == \"\") valuesToAdd += \"--pitch8-secondary-note:#FF4E63;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch8-primary-note\") == \"\") valuesToAdd += \"--pitch8-primary-note:#FFB2BB;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch9-secondary-channel\") == \"\") valuesToAdd += \"--pitch9-secondary-channel:#00A170;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch9-primary-channel\") == \"\") valuesToAdd += \"--pitch9-primary-channel:#50FFC9;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch9-secondary-note\") == \"\") valuesToAdd += \"--pitch9-secondary-note:#00C78A;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch9-primary-note\") == \"\") valuesToAdd += \"--pitch9-primary-note:#83FFD9;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch10-secondary-channel\") == \"\") valuesToAdd += \"--pitch10-secondary-channel:#A11FFF;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch10-primary-channel\") == \"\") valuesToAdd += \"--pitch10-primary-channel:#CE8BFF;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch10-secondary-note\") == \"\") valuesToAdd += \"--pitch10-secondary-note:#B757FF;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch10-primary-note\") == \"\") valuesToAdd += \"--pitch10-primary-note:#DFACFF;\";\r\n\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise1-secondary-channel\") == \"\") valuesToAdd += \"--noise1-secondary-channel:#6F6F6F;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise1-primary-channel\") == \"\") valuesToAdd += \"--noise1-primary-channel:#AAAAAA;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise1-secondary-note\") == \"\") valuesToAdd += \"--noise1-secondary-note:#A7A7A7;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise1-primary-note\") == \"\") valuesToAdd += \"--noise1-primary-note:#E0E0E0;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise2-secondary-channel\") == \"\") valuesToAdd += \"--noise2-secondary-channel:#996633;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise2-primary-channel\") == \"\") valuesToAdd += \"--noise2-primary-channel:#DDAA77;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise2-secondary-note\") == \"\") valuesToAdd += \"--noise2-secondary-note:#CC9966;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise2-primary-note\") == \"\") valuesToAdd += \"--noise2-primary-note:#F0D0BB;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise3-secondary-channel\") == \"\") valuesToAdd += \"--noise3-secondary-channel:#4A6D8F;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise3-primary-channel\") == \"\") valuesToAdd += \"--noise3-primary-channel:#77AADD;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise3-secondary-note\") == \"\") valuesToAdd += \"--noise3-secondary-note:#6F9FCF;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise3-primary-note\") == \"\") valuesToAdd += \"--noise3-primary-note:#BBD7FF;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise4-secondary-channel\") == \"\") valuesToAdd += \"--noise4-secondary-channel:#7A4F9A;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise4-primary-channel\") == \"\") valuesToAdd += \"--noise4-primary-channel:#AF82D2;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise4-secondary-note\") == \"\") valuesToAdd += \"--noise4-secondary-note:#9E71C1;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise4-primary-note\") == \"\") valuesToAdd += \"--noise4-primary-note:#D4C1EA;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise5-secondary-channel\") == \"\") valuesToAdd += \"--noise5-secondary-channel:#607837;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise5-primary-channel\") == \"\") valuesToAdd += \"--noise5-primary-channel:#A2BB77;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise5-secondary-note\") == \"\") valuesToAdd += \"--noise5-secondary-note:#91AA66;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--noise5-primary-note\") == \"\") valuesToAdd += \"--noise5-primary-note:#C5E2B2;\";\r\n\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod1-secondary-channel\") == \"\") valuesToAdd += \"--mod1-secondary-channel:#339955;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod1-primary-channel\") == \"\") valuesToAdd += \"--mod1-primary-channel:#77fc55;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod1-secondary-note\") == \"\") valuesToAdd += \"--mod1-secondary-note:#77ff8a;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod1-primary-note\") == \"\") valuesToAdd += \"--mod1-primary-note:#cdffee;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod2-secondary-channel\") == \"\") valuesToAdd += \"--mod2-secondary-channel:#993355;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod2-primary-channel\") == \"\") valuesToAdd += \"--mod2-primary-channel:#f04960;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod2-secondary-note\") == \"\") valuesToAdd += \"--mod2-secondary-note:#f057a0;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod2-primary-note\") == \"\") valuesToAdd += \"--mod2-primary-note:#ffb8de;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod3-secondary-channel\") == \"\") valuesToAdd += \"--mod3-secondary-channel:#553399;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod3-primary-channel\") == \"\") valuesToAdd += \"--mod3-primary-channel:#8855fc;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod3-secondary-note\") == \"\") valuesToAdd += \"--mod3-secondary-note:#aa64ff;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod3-primary-note\") == \"\") valuesToAdd += \"--mod3-primary-note:#f8ddff;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod4-secondary-channel\") == \"\") valuesToAdd += \"--mod4-secondary-channel:#a86436;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod4-primary-channel\") == \"\") valuesToAdd += \"--mod4-primary-channel:#c8a825;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod4-secondary-note\") == \"\") valuesToAdd += \"--mod4-secondary-note:#e8ba46;\";\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--mod4-primary-note\") == \"\") valuesToAdd += \"--mod4-primary-note:#fff6d3;\";\r\n\r\n\t\tvaluesToAdd += \"}\";\r\n\t\tthis._styleElement.textContent = valuesToAdd + this._styleElement.textContent;\r\n\r\n        const themeColor = <HTMLMetaElement>document.querySelector(\"meta[name='theme-color']\");\r\n        if (themeColor != null) {\r\n            themeColor.setAttribute(\"content\", getComputedStyle(document.documentElement).getPropertyValue('--ui-widget-background'));\r\n        }\r\n\r\n        this.resetColors();\r\n\r\n\t\tthis.usesColorFormula = (getComputedStyle(this._styleElement).getPropertyValue(\"--use-color-formula\").trim() == \"true\");\r\n\r\n\t\tthis.c_invertedText = getComputedStyle(this._styleElement).getPropertyValue(\"--inverted-text\");\r\n\t\tthis.c_trackEditorBgNoiseDim = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-noise-dim\");\r\n\t\tthis.c_trackEditorBgNoise = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-noise\");\r\n\t\tthis.c_trackEditorBgModDim = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-mod-dim\");\r\n\t\tthis.c_trackEditorBgMod = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-mod\");\r\n\t\tthis.c_trackEditorBgPitchDim = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-pitch-dim\");\r\n\t\tthis.c_trackEditorBgPitch = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-pitch\");\r\n\r\n\t\tif (this.usesColorFormula) {\r\n\t\t\tthis.c_pitchSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue\");\r\n\t\t\tthis.c_pitchSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue-scale\");\r\n\t\t\tthis.c_pitchSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat\");\r\n\t\t\tthis.c_pitchSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat-scale\");\r\n\t\t\tthis.c_pitchSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum\");\r\n\t\t\tthis.c_pitchSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum-scale\");\r\n\t\t\tthis.c_pitchPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue\");\r\n\t\t\tthis.c_pitchPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue-scale\");\r\n\t\t\tthis.c_pitchPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat\");\r\n\t\t\tthis.c_pitchPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat-scale\");\r\n\t\t\tthis.c_pitchPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum\");\r\n\t\t\tthis.c_pitchPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum-scale\");\r\n\t\t\tthis.c_pitchSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue\");\r\n\t\t\tthis.c_pitchSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue-scale\");\r\n\t\t\tthis.c_pitchSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat\");\r\n\t\t\tthis.c_pitchSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat-scale\");\r\n\t\t\tthis.c_pitchSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum\");\r\n\t\t\tthis.c_pitchSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum-scale\");\r\n\t\t\tthis.c_pitchPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue\");\r\n\t\t\tthis.c_pitchPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue-scale\");\r\n\t\t\tthis.c_pitchPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat\");\r\n\t\t\tthis.c_pitchPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat-scale\");\r\n\t\t\tthis.c_pitchPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum\");\r\n\t\t\tthis.c_pitchPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum-scale\");\r\n\r\n\t\t\tthis.c_noiseSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue\");\r\n\t\t\tthis.c_noiseSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue-scale\");\r\n\t\t\tthis.c_noiseSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat\");\r\n\t\t\tthis.c_noiseSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat-scale\");\r\n\t\t\tthis.c_noiseSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum\");\r\n\t\t\tthis.c_noiseSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum-scale\");\r\n\t\t\tthis.c_noisePrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue\");\r\n\t\t\tthis.c_noisePrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue-scale\");\r\n\t\t\tthis.c_noisePrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat\");\r\n\t\t\tthis.c_noisePrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat-scale\");\r\n\t\t\tthis.c_noisePrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum\");\r\n\t\t\tthis.c_noisePrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum-scale\");\r\n\t\t\tthis.c_noiseSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue\");\r\n\t\t\tthis.c_noiseSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue-scale\");\r\n\t\t\tthis.c_noiseSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat\");\r\n\t\t\tthis.c_noiseSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat-scale\");\r\n\t\t\tthis.c_noiseSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum\");\r\n\t\t\tthis.c_noiseSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum-scale\");\r\n\t\t\tthis.c_noisePrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue\");\r\n\t\t\tthis.c_noisePrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue-scale\");\r\n\t\t\tthis.c_noisePrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat\");\r\n\t\t\tthis.c_noisePrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat-scale\");\r\n\t\t\tthis.c_noisePrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum\");\r\n\t\t\tthis.c_noisePrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum-scale\");\r\n\r\n\t\t\tthis.c_modSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue\");\r\n\t\t\tthis.c_modSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue-scale\");\r\n\t\t\tthis.c_modSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat\");\r\n\t\t\tthis.c_modSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat-scale\");\r\n\t\t\tthis.c_modSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum\");\r\n\t\t\tthis.c_modSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum-scale\");\r\n\t\t\tthis.c_modPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue\");\r\n\t\t\tthis.c_modPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue-scale\");\r\n\t\t\tthis.c_modPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat\");\r\n\t\t\tthis.c_modPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat-scale\");\r\n\t\t\tthis.c_modPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum\");\r\n\t\t\tthis.c_modPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum-scale\");\r\n\t\t\tthis.c_modSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue\");\r\n\t\t\tthis.c_modSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue-scale\");\r\n\t\t\tthis.c_modSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat\");\r\n\t\t\tthis.c_modSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat-scale\");\r\n\t\t\tthis.c_modSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum\");\r\n\t\t\tthis.c_modSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum-scale\");\r\n\t\t\tthis.c_modPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue\");\r\n\t\t\tthis.c_modPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue-scale\");\r\n\t\t\tthis.c_modPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat\");\r\n\t\t\tthis.c_modPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat-scale\");\r\n\t\t\tthis.c_modPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum\");\r\n\t\t\tthis.c_modPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum-scale\");\r\n\r\n\t\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--formula-pitch-channel-count-override\") != \"\") this.c_pitchChannelCountOverride = +getComputedStyle(this._styleElement).getPropertyValue(\"--formula-pitch-channel-count-override\");\r\n\t\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--formula-noise-channel-count-override\") != \"\") this.c_noiseChannelCountOverride = +getComputedStyle(this._styleElement).getPropertyValue(\"--formula-noise-channel-count-override\");\r\n\t\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--formula-mod-channel-count-override\") != \"\") this.c_modChannelCountOverride = +getComputedStyle(this._styleElement).getPropertyValue(\"--formula-mod-channel-count-override\");\r\n        }\r\n\r\n    }\r\n\r\n    public static getComputed(name: string): string {\r\n        return getComputedStyle(this._styleElement).getPropertyValue(name);\r\n    }\r\n}\r\n\r\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap, TypePresets } from \"../synth/SynthConfig\";\r\n\r\nexport interface PresetCategory extends BeepBoxOption {\r\n    readonly presets: DictionaryArray<Preset>;\r\n}\r\n\r\nexport interface Preset extends BeepBoxOption {\r\n    readonly isNoise?: boolean;\r\n    readonly isMod?: boolean;\r\n    readonly generalMidi?: boolean;\r\n    readonly midiProgram?: number;\r\n    readonly midiSubharmonicOctaves?: number;\r\n    readonly customType?: InstrumentType;\r\n    readonly settings?: any;\r\n}\r\n\r\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\r\n\r\nexport function prettyNumber(value: number): string {\r\n    return value.toFixed(2).replace(/\\.?0*$/, \"\");\r\n}\r\n\r\nexport class EditorConfig {\r\n    public static readonly version: string = \"\"; // Currently using patch versions in display (unlike JB)\r\n    public static readonly versionDisplayName: string = \"LemmBox \" + EditorConfig.version;\r\n\r\n    public static readonly releaseNotesURL: string = \"./patch_notes.html\";\r\n\r\n    public static readonly isOnMac: boolean = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent);\r\n    public static readonly ctrlSymbol: string = EditorConfig.isOnMac ? \"⌘\" : \"Ctrl+\";\r\n    public static readonly ctrlName: string = EditorConfig.isOnMac ? \"command\" : \"control\";\r\n\r\n    public static customSamples: string[] | null;\r\n\t\r\n    public static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\r\n        {\r\n        // The order of this array needs to line up with the order of the InstrumentType declarations in SynthConfig.ts. (changes.ts' random instrument generation relies on this, for one.)\r\n            name: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: TypePresets[InstrumentType.chip], customType: InstrumentType.chip },\r\n                { name: TypePresets[InstrumentType.fm], customType: InstrumentType.fm },\r\n                { name: TypePresets[InstrumentType.noise], customType: InstrumentType.noise },\r\n                { name: TypePresets[InstrumentType.spectrum], customType: InstrumentType.spectrum },\r\n                { name: TypePresets[InstrumentType.drumset], customType: InstrumentType.drumset },\r\n                { name: TypePresets[InstrumentType.harmonics], customType: InstrumentType.harmonics },\r\n                { name: TypePresets[InstrumentType.pwm], customType: InstrumentType.pwm },\r\n                { name: TypePresets[InstrumentType.pickedString], customType: InstrumentType.pickedString },\r\n                { name: TypePresets[InstrumentType.supersaw], customType: InstrumentType.supersaw },\r\n                { name: TypePresets[InstrumentType.customChipWave], customType: InstrumentType.customChipWave },\r\n                { name: TypePresets[InstrumentType.fm6op], customType: InstrumentType.fm6op },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"square\", \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"triangle\", \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"square\", \"unison\": \"hum\", \"envelopes\": [] } },\r\n                { name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"shimmer\", \"envelopes\": [] } },\r\n                { name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }], \"effects\": [\"vibrato\", \"aliasing\"], \"vibrato\": \"light\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [] } },\r\n                { name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": [\"aliasing\"], \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\r\n                { name: \"supersaw lead\",    midiProgram:  81, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":2}],\"effects\":[\"reverb\"],\"reverb\":67,\"fadeInSeconds\":0,\"fadeOutTicks\":-6,\"pulseWidth\":50,\"dynamism\":100,\"spread\":58,\"shape\":0,\"envelopes\":[]}},\r\n                { name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\r\n                { name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"20×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\r\n                { name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\r\n                { name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"2×\", \"amplitude\": 11 }], \"envelopes\": [] } },\r\n                { name: \"FM sine\", midiProgram: 55, settings: { \"type\": \"FM\",\"eqFilter\":[],\"eqFilterType\":true,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"envelopeSpeed\":12,\"discreteEnvelope\":false,\"effects\":[],\"panDelay\":10,\"fadeInSeconds\":0,\"fadeOutTicks\":-1,\"algorithm\":\"1 2 3 4\",\"feedbackType\":\"1⟲\",\"feedbackAmplitude\":0,\"operators\":[{\"frequency\":\"1×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\"},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\"},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\"},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\"}],\"envelopes\":[]} },\r\n                { name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"vibrato\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\r\n                { name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\r\n                { name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\r\n                { name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\r\n                { name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\r\n                { name: \"Sunsoft Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24] } },\r\n                \r\n            ])\r\n        },\r\n        {\r\n            name: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\r\n                { name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"envelopes\": [] } },\r\n                { name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"1/8 pulse\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43], \"unison\": \"honky tonk\", \"stringSustain\": 71, \"envelopes\": [] } },\r\n                { name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\r\n                { name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"16×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\r\n                { name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71], \"unison\": \"none\", \"stringSustain\": 79, \"envelopes\": [] } },\r\n                { name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.3536 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"8×\", \"amplitude\": 4 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }] } },\r\n                { name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [] } },\r\n                { name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\r\n                { name: \"grand piano 3\",  midiProgram: 0, generalMidi: true, settings: {\"type\":\"Picked String\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":148.65,\"linearGain\":0.7071},{\"type\":\"peak\",\"cutoffHz\":1681.79,\"linearGain\":4},{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":0.1768},{\"type\":\"peak\",\"cutoffHz\":3363.59,\"linearGain\":4},{\"type\":\"peak\",\"cutoffHz\":2378.41,\"linearGain\":0.25}],\"effects\":[\"note filter\",\"reverb\"],\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":4756.83,\"linearGain\":0.3536},{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":0.0884}],\"reverb\":67,\"fadeInSeconds\":0,\"fadeOutTicks\":48,\"harmonics\":[100,100,86,86,86,71,71,71,0,71,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],\"unison\":\"piano\",\"stringSustain\":86,\"stringSustainType\":\"acoustic\",\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"note size\",\"index\":0},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":1},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":1}]}},\r\n\r\n            ])\r\n        },\r\n        {\r\n            name: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\r\n                { name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 2, \"envelope\": \"twang 1\" }] } },\r\n                { name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0], \"unison\": \"none\", \"stringSustain\": 64, \"envelopes\": [] } },\r\n                { name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.7071 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"stringSustain\": 29, \"envelopes\": [] } },\r\n                { name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n                { name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\r\n                { name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"chord\": \"strum\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], \"unison\": \"shimmer\", \"stringSustain\": 86, \"envelopes\": [] } },\r\n                { name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\r\n                { name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\r\n                { name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\r\n                { name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 11, \"envelope\": \"custom\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n                { name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [] } },\r\n                { name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n                { name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\r\n                { name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\r\n                { name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n                { name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\r\n                { name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\r\n                { name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\r\n                { name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n                { name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\r\n                { name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n                { name: \"dubstep yoi yoi\", midiProgram: 87, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.7071 }], \"effects\": [\"note filter\", \"bitcrusher\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 594.6, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 1.5, \"bitcrusherQuantization\": 0, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"wave\": \"sawtooth\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"flare 2\", \"index\": 0 }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\r\n                { name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n                { name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\r\n                { name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n                { name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n                { name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n                { name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"distortion\": 71, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\r\n                { name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"distortion\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1 }], \"distortion\": 86, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\r\n                { name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 1 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13 }, { \"frequency\": \"~1×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6 }, { \"frequency\": \"3×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12 }, { \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2 }, { \"frequency\": \"~1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 3 }] } },\r\n                { name: \"PWM overdrive\", midiProgram: 29, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 17.67767, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"punch\" }] } },\r\n                { name: \"PWM distortion\", midiProgram: 30, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 50, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"swell 1\" }] } },\r\n                { name: \"FM overdrive\", midiProgram: 29, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"~2×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"punch\" }] } },\r\n                { name: \"FM distortion\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"~2×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n                { name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\r\n                { name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n                { name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n                { name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n                { name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\r\n                { name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\r\n                { name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\r\n                { name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9 }, { \"frequency\": \"3×\", \"amplitude\": 9 }, { \"frequency\": \"2×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n                { name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.0884 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"6×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }] } },\r\n                { name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n                { name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n                { name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n                { name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n                { name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\r\n                { name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }] } },\r\n                { name: \"supersaw string\",  midiProgram:  41, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":2828.43,\"linearGain\":1.4142},{\"type\":\"low-pass\",\"cutoffHz\":3363.59,\"linearGain\":0.1768}],\"effects\":[\"note filter\",\"reverb\"],\"noteFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":500,\"linearGain\":0.1768}],\"reverb\":33,\"fadeInSeconds\":0.0263,\"fadeOutTicks\":6,\"pulseWidth\":35.35534,\"dynamism\":83,\"spread\":8,\"shape\":50,\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":0}]}},\r\n                { name: \"supersaw string 2\", midiProgram: 41, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":2378.41,\"linearGain\":0.5},{\"type\":\"high-pass\",\"cutoffHz\":594.6,\"linearGain\":0.25},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":4756.83,\"linearGain\":2}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"envelopeSpeed\":12,\"discreteEnvelope\":false,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":2378.41,\"linearGain\":0.5},{\"type\":\"high-pass\",\"cutoffHz\":594.6,\"linearGain\":0.25},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":4756.83,\"linearGain\":2}],\"effects\":[\"note filter\",\"chorus\",\"reverb\"],\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":1}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":1}],\"chorus\":57,\"reverb\":42,\"fadeInSeconds\":0.0575,\"fadeOutTicks\":-6,\"pulseWidth\":50,\"dynamism\":67,\"spread\":58,\"shape\":0,\"envelopes\":[{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"punch\"},{\"target\":\"pulseWidth\",\"envelope\":\"flare 2\"}]}},\r\n            ])\r\n        },\r\n        {\r\n            name: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 24, \"harmonics\": [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 8 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1.4142 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n                { name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\r\n                { name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n                { name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 33, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"~1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"tremolo5\", \"vibrato\": \"none\", \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"tremolo3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\r\n                { name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\r\n                { name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n                { name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 5 }, { \"frequency\": \"9×\", \"amplitude\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\r\n                { name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 1\" }] } },\r\n                { name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\r\n                { name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n                { name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\r\n                { name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n                { name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n                { name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n                { name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n                { name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\r\n                { name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n                { name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n                { name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n                { name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n                { name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n                { name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n                { name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n                { name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\r\n                { name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\r\n                { name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\r\n                { name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\r\n                { name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n                { name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\r\n                { name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }] } },\r\n                { name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 4 }, { \"frequency\": \"6×\", \"amplitude\": 3 }, { \"frequency\": \"13×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 3\" }] } },\r\n                { name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }] } },\r\n                { name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"honky tonk\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.1768 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 2 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\r\n                { name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }] } },\r\n                { name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 9 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\r\n                { name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"chorus\", \"reverb\"], \"chorus\": 100, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\r\n                { name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14], \"unison\": \"octave\", \"stringSustain\": 86, \"envelopes\": [] } },\r\n                { name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 3\" }] } },\r\n                { name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13 }, { \"frequency\": \"2×\", \"amplitude\": 10 }, { \"frequency\": \"5×\", \"amplitude\": 5 }, { \"frequency\": \"11×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo5\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }] } },\r\n                { name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 8 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"custom interval\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 15 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\r\n                { name: \"supersaw pad\", midiProgram: 93, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":0.1768}],\"effects\":[\"reverb\"],\"reverb\":100,\"fadeInSeconds\":0.0263,\"fadeOutTicks\":24,\"pulseWidth\":50,\"dynamism\":100,\"spread\":58,\"shape\":0,\"envelopes\":[]}},\r\n            ])\r\n        },\r\n        {\r\n            name: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\r\n                { name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"chorus\": 67, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14 }, { \"frequency\": \"7×\", \"amplitude\": 3 }, { \"frequency\": \"3×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 3 }] } },\r\n                { name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12 }, { \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\r\n                { name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"effects\": [\"pitch shift\", \"note filter\", \"reverb\"], \"pitchShiftSemitones\": 15, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }] } },\r\n                { name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\r\n                { name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\r\n                { name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n                { name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n                { name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n                { name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\r\n                { name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\r\n                { name: \"synth kick\", midiProgram: 47, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"8×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\r\n            ])\r\n        },\r\n        {\r\n            name: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                { name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\r\n                { name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\r\n                { name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }] } },\r\n                { name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\r\n                { name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\r\n                { name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\r\n                { name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"chord type\", \"vibrato\", \"reverb\"], \"chord\": \"strum\", \"vibrato\": \"heavy\", \"reverb\": 67, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay 1\" }] } },\r\n                { name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 4 }, { \"frequency\": \"20×\", \"amplitude\": 1 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo4\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 1 }] } },\r\n                { name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\r\n                { name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\r\n                { name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\r\n                { name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"double saw\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }] } },\r\n                { name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"11×\", \"amplitude\": 12 }], \"envelopes\": [] } },\r\n                { name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"shaky\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"pulseWidth\": 4.41942, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"tremolo6\" }] } },\r\n                { name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\r\n                { name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\r\n                { name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.7071 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"heavy\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\r\n                { name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\r\n            ])\r\n        },\r\n        { name: \"UltraBox Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n                // custom presets from this mod\t\t    \r\n                { name: \"nes white\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\" ], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit white\", \"envelopes\": [] } }, \r\n                { name: \"nes ping\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\" ], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit metallic\", \"envelopes\": [] } }, \r\n                //\r\n                { name: \"distorted pulse vocal\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 } ], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 } ], \"effects\": [ \"panning\", \"transition type\", \"pitch shift\", \"vibrato\", \"note filter\", \"bitcrusher\", \"echo\", \"reverb\" ], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [ { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 } ], \"noteSubFilters0\": [ { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 } ], \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 14, \"echoDelayBeats\": 0.167, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"1/8 pulse\", \"unison\": \"none\", \"envelopes\": [] } },\r\n                // from lognes\r\n                { name: \"dubsteb bwah\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 } ], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"transition type\", \"chord type\" ], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [ { \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 } ] } },\r\n                //\r\n                { name: \"FM cool bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 } ], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 } ], \"effects\": [ \"panning\", \"transition type\", \"note filter\", \"reverb\" ], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 } ], \"noteSubFilters1\": [ { \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 } ], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [ { \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 } ] } },\r\n                //\r\n                { name: \"FM funky bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.1768 } ], \"eqFilterType\": true, \"eqSimpleCut\": 5, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"transition type\", \"reverb\" ], \"transition\": \"normal\", \"clicklessTransition\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [ { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" } ] } },\r\n                //\r\n                { name: \"talking bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [ \"chord type\" ], \"chord\": \"custom interval\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 15, \"operators\": [ { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"2×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 12 } ], \"envelopes\": [ { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"note size\" } ] } },\r\n                // from main\r\n                { name: \"synth marimba\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [ { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.5 } ], \"effects\": [ \"note filter\", \"echo\" ], \"noteFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 } ], \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"harmonics\": [ 86, 100, 29, 29, 0, 0, 0, 100, 0, 0, 0, 86, 29, 0, 14, 100, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 86 ], \"unison\": \"fifth\", \"stringSustain\": 7, \"envelopes\": [ { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" } ] } }, \r\n                // from neputendo\r\n                { name: \"italian accordian\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6000, \"linearGain\": 0.5 } ], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 1, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"chorus\", \"reverb\" ], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 45, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"honky tonk\", \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": -24, \"7\": -24, \"8\": -24, \"9\": -24, \"10\": -24, \"11\": -24, \"12\": -24, \"13\": -24, \"14\": -24, \"15\": -24, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": 24, \"23\": 24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": -24, \"32\": -24, \"33\": -24, \"34\": -24, \"35\": -24, \"36\": -24, \"37\": -24, \"38\": -24, \"39\": -24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": 24, \"44\": 24, \"45\": 24, \"46\": 24, \"47\": 24, \"48\": -24, \"49\": -24, \"50\": -24, \"51\": -24, \"52\": -24, \"53\": -24, \"54\": -24, \"55\": -24, \"56\": -24, \"57\": -24, \"58\": -24, \"59\": -24, \"60\": -24, \"61\": -24, \"62\": -24, \"63\": -24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\r\n                // from neputendo\r\n                { name: \"chip supersaw\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 } ], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"transition type\", \"vibrato\", \"chorus\", \"reverb\" ], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"dissonant\", \"customChipWave\": { \"0\": 22, \"1\": 22, \"2\": 16, \"3\": 6, \"4\": 0, \"5\": -3, \"6\": -8, \"7\": -10, \"8\": -13, \"9\": -16, \"10\": -19, \"11\": -19, \"12\": -20, \"13\": -22, \"14\": -22, \"15\": -24, \"16\": -24, \"17\": -24, \"18\": -24, \"19\": -24, \"20\": -24, \"21\": -24, \"22\": -24, \"23\": -24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": 24, \"32\": 24, \"33\": 16, \"34\": 9, \"35\": 6, \"36\": 4, \"37\": 2, \"38\": 0, \"39\": -1, \"40\": -3, \"41\": -4, \"42\": -4, \"43\": -6, \"44\": -6, \"45\": -6, \"46\": -6, \"47\": -5, \"48\": -5, \"49\": -4, \"50\": -2, \"51\": -2, \"52\": 1, \"53\": 4, \"54\": 6, \"55\": 8, \"56\": 10, \"57\": 12, \"58\": 14, \"59\": 16, \"60\": 18, \"61\": 19, \"62\": 22, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\r\n                // THANKS TO ANSWEARING MACHINE for the FM supersaw\r\n                { name: \"fm supersaw\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 } ], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 } ], \"effects\": [ \"panning\", \"transition type\", \"pitch shift\", \"note filter\", \"chorus\", \"reverb\" ], \"transition\": \"continue\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [ { \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 } ], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1 2 3 4 5 6\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [ { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 10, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"3×\", \"amplitude\": 7, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 9, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 6, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 } ], \"envelopes\": [] } },\r\n                // based off of the todbox wind preset that was removed\r\n                { name: \"wind\", generalMidi: false, settings:{\"type\":\"FM\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":250.03,\"linearGain\":11.3137}],\"eqFilterType\":true,\"eqSimpleCut\":0,\"eqSimplePeak\":7,\"envelopeSpeed\":12,\"discreteEnvelope\":false,\"eqSubFilters1\":[],\"effects\":[\"transition type\",\"reverb\"],\"transition\":\"continue\",\"clicklessTransition\":false,\"panDelay\":10,\"reverb\":0,\"fadeInSeconds\":0,\"fadeOutTicks\":-1,\"algorithm\":\"1←(2 3 4)\",\"feedbackType\":\"1→3 2→4\",\"feedbackAmplitude\":15,\"operators\":[{\"frequency\":\"16×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"16×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"16×\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"16×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1×\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5}],\"envelopes\":[]} },\r\n                // this meow is from nobo\r\n                { name: \"mrow\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [], \"effects\": [ \"panning\", \"chord type\", \"reverb\" ], \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"reverb\": 35, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [ { \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" } ] } },  \r\n                // based off of the \"obama why\" beepcord inside joke so thanks to nobo ig\r\n                { name: \"vocal why\", generalMidi: false, settings:{ \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [ \"note filter\", \"panning\", \"reverb\" ], \"noteFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 } ], \"pan\": 0, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"harmonics\": [ 100, 86, 29, 29, 14, 14, 0, 14, 14, 43, 71, 100, 100, 86, 71, 71, 57, 57, 43, 43, 43, 43, 43, 0, 0, 0, 0, 0 ], \"unison\": \"octave\", \"envelopes\": [ { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" } ] } },\r\n                ]) },\r\n    ]);\r\n\r\n    public static valueToPreset(presetValue: number): Preset | null {\r\n        const categoryIndex: number = presetValue >> 6;\r\n        const presetIndex: number = presetValue & 0x3F;\r\n        return EditorConfig.presetCategories[categoryIndex]?.presets[presetIndex];\r\n    }\r\n\r\n    public static midiProgramToPresetValue(program: number): number | null {\r\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n                const preset: Preset = category.presets[presetIndex];\r\n                if (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static nameToPresetValue(presetName: string): number | null {\r\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n                const preset: Preset = category.presets[presetIndex];\r\n                if (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static instrumentToPreset(instrument: InstrumentType): Preset | null {\r\n        return EditorConfig.presetCategories[0].presets.dictionary?.[TypePresets?.[instrument]];\r\n    }\r\n}\r\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\r\ninterface NumberArray {\r\n\tlength: number;\r\n\t[index: number]: number;\r\n}\r\n\r\n// A basic FFT operation scales the overall magnitude of elements by the\r\n// square root of the length of the array, √N. Performing a forward FFT and\r\n// then an inverse FFT results in the original array, but multiplied by N.\r\n// This helper function can be used to compensate for that. \r\nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tarray[i] *= factor;\r\n\t}\r\n}\r\n\r\nfunction isPowerOf2(n: number): boolean {\r\n\treturn !!n && !(n & (n - 1));\r\n}\r\n\r\nfunction countBits(n: number): number {\r\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\treturn Math.round(Math.log(n) / Math.log(2));\r\n}\r\n\r\n// Rearranges the elements of the array, swapping the element at an index\r\n// with an element at an index that is the bitwise reverse of the first\r\n// index in base 2. Useful for computing the FFT.\r\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\r\n\tconst bitCount: number = countBits(fullArrayLength);\r\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\r\n\tconst finalShift: number = 16 - bitCount;\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\r\n\t\tlet j: number;\r\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\r\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\r\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\r\n\t\t\tj = ((j           >> 8) | ((j &   0xff) << 8)) >> finalShift;\r\n\t\tif (j > i) {\r\n\t\t\tlet temp: number = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Provided for educational purposes. Easier to read than\r\n// fastFourierTransform(), but computes the same result.\r\n// Takes two parallel arrays representing the real and imaginary elements,\r\n// respectively, and returns an array containing two new arrays, which\r\n// contain the complex result of the transform.\r\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\tconst realOut: number[] = [];\r\n\tconst imagOut: number[] = [];\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\trealOut[i] = 0.0;\r\n\t\timagOut[i] = 0.0;\r\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\r\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\r\n\t\t\tconst c: number = Math.cos(radians);\r\n\t\t\tconst s: number = Math.sin(radians);\r\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\r\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\r\n\t\t}\r\n\t}\r\n\treturn [realOut, imagOut];\r\n}\r\n\r\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\r\n// input real and imaginary arrays. Can be used for both forward and inverse\r\n// transforms: swap the order of the arguments for the inverse.\r\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\t\t\r\n\treverseIndexBits(realArray, fullArrayLength);\r\n\treverseIndexBits(imagArray, fullArrayLength);\r\n\t\t\r\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\r\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\r\n\t\tconst startIndex1: number = startIndex + 1;\r\n\t\tconst startIndex2: number = startIndex + 2;\r\n\t\tconst startIndex3: number = startIndex + 3;\r\n\t\t\tconst real0: number = realArray[startIndex ];\r\n\t\tconst real1: number = realArray[startIndex1];\r\n\t\tconst real2: number = realArray[startIndex2];\r\n\t\tconst real3: number = realArray[startIndex3];\r\n\t\t\tconst imag0: number = imagArray[startIndex ];\r\n\t\tconst imag1: number = imagArray[startIndex1];\r\n\t\tconst imag2: number = imagArray[startIndex2];\r\n\t\tconst imag3: number = imagArray[startIndex3];\r\n\t\tconst realTemp0: number = real0 + real1;\r\n\t\tconst realTemp1: number = real0 - real1;\r\n\t\tconst realTemp2: number = real2 + real3;\r\n\t\tconst realTemp3: number = real2 - real3;\r\n\t\tconst imagTemp0: number = imag0 + imag1;\r\n\t\tconst imagTemp1: number = imag0 - imag1;\r\n\t\tconst imagTemp2: number = imag2 + imag3;\r\n\t\tconst imagTemp3: number = imag2 - imag3;\r\n\t\t\trealArray[startIndex ] = realTemp0 + realTemp2;\r\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\r\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\r\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\r\n\t\t\timagArray[startIndex ] = imagTemp0 + imagTemp2;\r\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\r\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\r\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\r\n\t}\r\n\t\t\r\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\r\n\t\tconst halfLength: number = stride >>> 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tlet c: number = 1.0;\r\n\t\t\tlet s: number = 0.0;\r\n\t\t\tlet cPrev: number = cosIncrement;\r\n\t\t\tlet sPrev: number = sinIncrement;\r\n\t\t\tconst secondHalf: number = startIndex + halfLength;\r\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\r\n\t\t\t\tconst j: number = i + halfLength;\r\n\t\t\t\tconst real0: number = realArray[i];\r\n\t\t\t\tconst imag0: number = imagArray[i];\r\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\r\n\t\t\t\trealArray[i] = real0 + real1;\r\n\t\t\t\timagArray[i] = imag0 + imag1;\r\n\t\t\t\trealArray[j] = real0 - real1;\r\n\t\t\t\timagArray[j] = imag0 - imag1;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the Fourier transform from an array of real-valued time-domain\r\n// samples. The output is specially formatted for space efficieny: elements\r\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\r\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\r\n// descending frequency. Overwrites the input array.\r\nexport function forwardRealFourierTransform(array: NumberArray): void {\r\n\tconst fullArrayLength: number = array.length;\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\t\t\r\n\treverseIndexBits(array, fullArrayLength);\r\n\t\t\r\n\t// First and second pass.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\t// no imaginary elements yet since the input is fully real.\r\n\t\tconst tempA: number = real0 + real1;\r\n\t\tconst tempB: number = real2 + real3;\r\n\t\t\tarray[index ] = tempA + tempB;\r\n\t\tarray[index1] = real0 - real1;\r\n\t\tarray[index2] = tempA - tempB;\r\n\t\tarray[index3] = real2 - real3;\r\n\t}\r\n\t\t\r\n\t// Third pass.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index7: number = index + 7;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst imag3: number = array[index3];\r\n\t\tconst real4: number = array[index4];\r\n\t\tconst real5: number = array[index5];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\r\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\r\n\t\t\tarray[index ] = real0 + real4;\r\n\t\tarray[index1] = real1 + tempA;\r\n\t\tarray[index3] = real1 - tempA;\r\n\t\tarray[index4] = real0 - real4;\r\n\t\tarray[index5] = tempB - imag3;\r\n\t\tarray[index7] = tempB + imag3;\r\n\t}\r\n\t\t\r\n\t// Handle remaining passes.\r\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst realStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + realStartB;\r\n\t\t\tarray[startIndexB] = realStartA - realStartB;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst imag0: number = array[indexA1];\r\n\t\t\t\tconst real1: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\r\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\r\n\t\t\t\tarray[indexA0] = real0 + tempA;\r\n\t\t\t\tarray[indexA1] = real0 - tempA;\r\n\t\t\t\t\tarray[indexB0] =-imag0 - tempB;\r\n\t\t\t\tarray[indexB1] = imag0 - tempB;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the inverse Fourier transform from a specially formatted array of\r\n// scalar values. Elements 0 through N/2 are expected to be the real values of\r\n// the corresponding complex elements, representing cosine wave amplitudes in\r\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\r\n// imaginary values, representing sine wave amplitudes in descending frequency.\r\n// Generates real-valued time-domain samples. Overwrites the input array.\r\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\t// Perform all but the last few passes in reverse.\r\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\t\t\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst imagStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\r\n\t\t\tarray[midIndexA] *= 2;\r\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\r\n\t\t\tarray[midIndexB] *= 2;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst real1: number = array[indexA1];\r\n\t\t\t\tconst imag0: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real0 - real1;\r\n\t\t\t\tconst tempB: number = imag0 + imag1;\r\n\t\t\t\tarray[indexA0] = real0 + real1;\r\n\t\t\t\tarray[indexA1] = imag1 - imag0;\r\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\r\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t// Commented out this block (and compensated with an extra pass above)\r\n\t// because it's slower in my testing so far.\r\n\t// Pass with stride 8.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index6: number = index + 6;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\tconst imag4: number = array[index4];\r\n\t\tconst imag5: number = array[index5];\r\n\t\tconst imag6: number = array[index6];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = real1 - real3;\r\n\t\tconst tempB: number = imag5 + imag7;\r\n\t\tarray[index ] = real0 + imag4;\r\n\t\tarray[index1] = real1 + real3;\r\n\t\tarray[index2] = real2 * 2;\r\n\t\tarray[index3] = imag7 - imag5;\r\n\t\tarray[index4] = real0 - imag4;\r\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\r\n\t\tarray[index6] = imag6 * 2;\r\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\r\n\t}\r\n\t*/\r\n\t// The final passes with strides 4 and 2, combined into one loop.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1] * 2;\r\n\t\tconst imag2: number = array[index2];\r\n\t\tconst imag3: number = array[index3] * 2;\r\n\t\tconst tempA: number = real0 + imag2;\r\n\t\tconst tempB: number = real0 - imag2;\r\n\t\t\tarray[index ] = tempA + real1;\r\n\t\tarray[index1] = tempA - real1;\r\n\t\tarray[index2] = tempB + imag3;\r\n\t\tarray[index3] = tempB - imag3;\r\n\t}\r\n\t\t\r\n\treverseIndexBits(array, fullArrayLength);\r\n}\r\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nexport class Deque<T> {\r\n\tprivate _capacity: number = 1;\r\n\tprivate _buffer: Array<T | undefined> = [undefined];\r\n\tprivate _mask: number = 0;\r\n\tprivate _offset: number = 0;\r\n\tprivate _count: number = 0;\r\n\r\n\tpublic pushFront(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._offset = (this._offset - 1) & this._mask;\r\n\t\tthis._buffer[this._offset] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic pushBack(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic popFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tconst element: T = <T>this._buffer[this._offset];\r\n\t\tthis._buffer[this._offset] = undefined;\r\n\t\tthis._offset = (this._offset + 1) & this._mask;\r\n\t\tthis._count--;\r\n\t\treturn element;\r\n\t}\r\n\tpublic popBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tthis._count--;\r\n\t\tconst index: number = (this._offset + this._count) & this._mask;\r\n\t\tconst element: T = <T>this._buffer[index];\r\n\t\tthis._buffer[index] = undefined;\r\n\t\treturn element;\r\n\t}\r\n\tpublic peakFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[this._offset];\r\n\t}\r\n\tpublic peakBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\r\n\t}\r\n\tpublic count(): number {\r\n\t\treturn this._count;\r\n\t}\r\n\tpublic set(index: number, element: T): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\r\n\t}\r\n\tpublic get(index: number): T {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\r\n\t}\r\n\tpublic remove(index: number): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tif (index <= (this._count >> 1)) {\r\n\t\t\twhile (index > 0) {\r\n\t\t\t\tthis.set(index, this.get(index - 1));\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\t\t\tthis.popFront();\r\n\t\t} else {\r\n\t\t\tindex++;\r\n\t\t\twhile (index < this._count) {\r\n\t\t\t\tthis.set(index - 1, this.get(index));\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tthis.popBack();\r\n\t\t}\r\n\t}\r\n\tprivate _expandCapacity(): void {\r\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\r\n\t\tthis._capacity = this._capacity << 1;\r\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\r\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\r\n\t\tconst size: number = this._count | 0;\r\n\t\tconst offset: number = this._offset | 0;\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\r\n\t\t}\r\n\t\tfor (let i = size; i < this._capacity; i++) {\r\n\t\t\tnewBuffer[i] = undefined;\r\n\t\t}\r\n\t\tthis._offset = 0;\r\n\t\tthis._buffer = newBuffer;\r\n\t\tthis._mask = this._capacity - 1;\r\n\t}\r\n}","//A simple events system for effectively direct links without actualy linking files or references\r\nclass EventManager { \r\n    private activeEvents:string[] = [];\r\n    private listeners:any = {};\r\n\r\n    constructor() {\r\n        this.activeEvents = [];\r\n        this.listeners = {};\r\n    }\r\n\r\n\r\n    public raise(eventType: string, eventData: any, extraEventData?: any): void {\r\n        if (this.listeners[eventType] == undefined) {\r\n            return;\r\n        }\r\n        this.activeEvents.push(eventType);\r\n        for (let i: number = 0; i < this.listeners[eventType].length; i++) {\r\n            this.listeners[eventType][i](eventData,extraEventData)\r\n        }\r\n        this.activeEvents.pop();\r\n    }\r\n\r\n    public listen(eventType:string,callback:Function): void {\r\n        if (this.listeners[eventType] == undefined) {\r\n            this.listeners[eventType] = []\r\n        }\r\n        this.listeners[eventType].push(callback)\r\n    }\r\n\r\n    public unlisten(eventType: string, callback: Function): void {\r\n        if (this.listeners[eventType] == undefined) {\r\n            return;\r\n        }\r\n        const lisen = this.listeners[eventType].indexOf(callback);\r\n        if (lisen != -1) {\r\n            this.listeners[eventType].splice(lisen, 1);\r\n        }\r\n    }\r\n    public unlistenAll(eventType: string): void {\r\n        if (this.listeners[eventType] == undefined) {\r\n            return;\r\n        }\r\n        this.listeners[eventType]=[];\r\n    }\r\n}\r\n\r\nexport const events:EventManager = new EventManager()","/*\r\nThis file contains code to compute digital audio filter coefficients based on\r\nthe desired type, cutoff frequency, and other parameters. You can use these\r\ncoefficients to apply the filter to audio samples. It also contains code to\r\nanalyze these filters, which is useful for graphically displaying their effects.\r\n\r\nAll of the filters in this file are known as \"Infinite Impulse Response\" or IIR\r\nfilters, because older output samples contribute feedback to newer output\r\nsamples and thus contribute to all future samples, although typically filters\r\nare design to reduce the contribution of older samples over time.\r\n\r\nLow-pass filters aka high-cut filters preserve audio signals below the cutoff\r\nfrequency, and attenuate audio signals above the cutoff frequency. High-pass\r\nfilters aka low-cut filters are the reverse. All-pass filters do not affect the\r\nvolume of the signal at all but induce phase changes above the cutoff frequency.\r\nPeak/Notch filters maintain the volume on either side of the cutoff frequency,\r\nbut raise or lower the volume at that frequency. \r\n\r\nThe number of old samples used in the filter determines the \"order\" of the\r\nfilter. First-order filters generally have shallower slopes, and second-order\r\nfilters generally have steeper slopes and can be configured to \"resonate\",\r\nmeaning they have a louder peak at the cutoff frequency. This file contains\r\nfirst-order filters and second-order filters, meaning one or two older samples\r\nare involved, as well as the current input sample.\r\n\r\nThe class FilterCoefficients is defined lower in this file. You can use it to\r\nset up a first order filter like this:\r\n\r\n\tconst cutoffRadiansPerSample: number = 2 * Math.PI * cutoffHz / sampleRate;\r\n\tconst filter: FilterCoefficients = new FilterCoefficients();\r\n\tfilter.lowPass1stOrderButterworth(cutoffRadiansPerSample);\r\n\t// output sample coefficients are conventionally called a0, a1, etc. Note\r\n\t// that a[0] is typically normalized to 1.0 and need not be used directly.\r\n\tconst a: number[] = filter.a;\r\n\t// input sample coefficients are conventionally called b0, b1, etc\r\n\tconst b: number[] = filter.b;\r\n\t// filter input samples, x[0] is the most recent, x[1] is the previous one, etc.\r\n\tconst x: number[] = [0, 0, 0];\r\n\t// filter output samples, y[0] will be computed by the filter based on input\r\n\t// samples and older output samples.\r\n\tconst y: number[] = [0, 0, 0];\r\n\r\nThen to apply the first-order filter to samples inside a loop, using the current\r\ninput sample (x[0]) as well as previous input and output samples, do this:\r\n\r\n\t// Compute the next output sample y[0]:\r\n\ty[0] = b[0] * x[0] + b[1] * x[1] - a[1] * y[1];\r\n\t// Remember the input and output samples for next time:\r\n\tx[1] = x[0];\r\n\ty[1] = y[0];\r\n\r\n2nd order filters are similar, but have more parameters and require more old\r\nsamples:\r\n\r\n\t// Compute the next output sample y[0]:\r\n\ty[0] = b[0] * x[0] + b[1] * x[1] + b[2] * x[2] - a[1] * y[1] - a[2] * y[2];\r\n\t// Remember the input and output samples for next time:\r\n\tx[2] = x[1];\r\n\tx[1] = x[0];\r\n\ty[2] = y[1];\r\n\ty[1] = y[0];\r\n\r\nYou can compose multiple filters into a higher order filter, although doing so\r\nreduces the numerical stability of the filter:\r\n\r\n\tfilter3.combination(filter1, filter2);\r\n\t// filter3.order will equal: filter1.order + filter2.order\r\n\t// The number of coefficients in filter3.a and filter3.b will be: order + 1\r\n\r\nThis file also contains a class called FrequencyResponse. You can use it to\r\ndetermine how much gain or attenuation a filter would apply to sounds at a\r\nspecific input frequency, as well as the phase offset:\r\n\r\n\tconst inputRadians: number = 2 * Math.PI * cutoffHz / sampleRate;\r\n\tconst response: FrequencyResponse = new FrequencyResponse();\r\n\tresponse.analyze(filter, inputRadians);\r\n\tconst gainResponse = response.magnitude();\r\n\tconst phaseResponse = response.angle();\r\n\r\nThat's basically all you need to know to use this code, but I'll also explain\r\nhow the analysis works.\r\n\r\nA first-order digital IIR filter is ordinarily implemented in a form like this:\r\n\r\n\toutput = inputCoeff * input + prevInputCoeff * prevInput - prevOutputCoeff * prevOutput;\r\n\r\nIf we adopt standard naming conventions for audio filters, this same code would\r\ninstead look like:\r\n\r\n\t// x0 = current input, x1 = prevInput, y0 = current output, y1 = prevOutput\r\n\ty0 = b0*x0 + b1*x1 - a1*y1;\r\n\r\nLeaving behind the world of code for a moment and entering the world of algebra,\r\nwe can rewrite this equation by moving all the output terms to the left side,\r\nand we can add a coefficient to the y0 term called a0 (which is typically\r\nnormalized to 1.0, which is why I didn't bother including it until now):\r\n\r\n\ta0*y0 + a1*y1 = b0*x0 + b1*x1\r\n\r\nThis is known as the symmetrical form of the filter, and it will help us analyze\r\nthe impact of the filter on an input audio signal. Here's a lesson that helped\r\nme understand the symmetrical form:\r\nhttps://web.archive.org/web/20200626183458/http://123.physics.ucdavis.edu/week_5_files/filters/digital_filter.pdf\r\n\r\nThe end of that lesson introduces a concept called the \"delay operator\" which\r\nlooks like \"z^-1\", which (magically) turns a sample into the previous sample\r\nwhen you multiply them. For example:\r\n\r\n\tx0 * z^-1 = x1\r\n\r\nThe lesson doesn't explain how it actually works. Audio signals aren't always\r\npredictable, which means that you generally can't do math on a single sample to\r\ncompute what the previous sample was. However, some audio signals ARE\r\npredictable, such as pure sine waves. Fortunately, all audio signals can be\r\nbroken down into a sum of independent sine waves. We can pick one sine wave at a\r\ntime, and use it to analyze the filter's impact on waves at that frequency. In\r\npractice, this tells us what the filter will do to unpredictable input samples\r\nthat contain a partial sine wave at that frequency.\r\n\r\nTechnically, you can't just use a single sine wave sample to determine the\r\nprevious sine wave sample, because each possible value is passed going upwards\r\nand downwards once per period and the direction is ambigous. This is where we\r\nneed to move into the complex number domain, where the real and imaginary\r\ncomponents can provide enough information to compute the previous position on\r\nthe input signal. So now instead of talking about sine waves, we're talking\r\nabout waves where the imaginary component is a sine wave and the real component\r\nis a cosine wave at the same frequency. Together, they trace around a unit\r\ncircle in the complex domain, and each sample is just a consistent rotation\r\napplied to the previous sample. The \"delay operator\" described above, z^-1, is\r\nthis same rotation applied in reverse, and it can be computed as:\r\n\r\n\tz^-1 = cos(radiansPerSample) - i * sin(radiansPerSample)\r\n\r\nMath nerds may be interested to know that \"Euler's formula\" was used here, but\r\nexplaining what that means is probably beyond the scope of this documentation\r\naside from noting that a complex number on the unit circle represents a 2D\r\nrotation that you can apply via multiplication.\r\n\r\nNow we can rewrite the symmetrical form using the delay operator and algebra:\r\n\r\n\ta0*y0 + a1*y0*z^-1 = b0*x0 + b1*x0*z^-1\r\n\ty0 * (a0 + a1*z^-1) = x0 * (b0 + b1*z^-1)\r\n\ty0 = x0 * (b0 + b1*z^-1) / (a0 + a1*z^-1)\r\n\ty0 / x0 = (b0 + b1*z^-1) / (a0 + a1*z^-1)\r\n\r\nThat last equation expresses the relationship between the input and output\r\nsignals (y0/x0) in terms of the filter coefficients and delay operator. At this\r\npoint, the specific values of the input and output samples don't even matter!\r\nThis is called the \"transfer function\", and it's conventionally named \"H(z)\":\r\n\r\n\tH(z) = (b0 + b1*z^-1) / (a0 + a1*z^-1)\r\n\r\nIf you plug in actual filter coefficients and express the delay operators as\r\ncomplex numbers with the appropriate trigonometry functions, the transfer\r\nfunction can be computed and produces a complex number that represents the\r\nrelationship between the input and output signals, whose magnitude represents\r\nthe volume gain (or attenuation) of signals at that frequency, and whose angle\r\nrepresents how much phase shift is applied by the filter to signals at that\r\nfrequency.\r\n\r\n(Note that in order to compute the transfer function, you'll need to do\r\nsomething about the complex number in the denominator. It turns out you can turn\r\nthe denominator into a real number by multiplying both the numerator and\r\ndenominator by the complex conjugate of the denominator, which is just the\r\ndenominator with the imaginary component negated.)\r\n\r\nFinally, I'll list some of the links that helped me understand filters and\r\nprovided some of the algorithms I that use here.\r\n\r\nHere's where I found accurate 2nd order low-pass, high-pass, and high-shelf\r\ndigital filters:\r\nhttps://web.archive.org/web/20120531011328/http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt\r\n\r\nThis page is how I found a link to the cookbook article above. It claims these\r\nfilters are Butterworth filters:\r\nhttp://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\r\n\r\nI found the first-order digital Butterworth filter coefficients at:\r\nhttps://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\r\n\r\nThis meta-paper helped me understand how to make 2nd order peak/notch filters:\r\nhttps://web.archive.org/web/20170706085655/https://www.thesounddesign.com/MIO/EQ-Coefficients.pdf\r\n\r\nBeepBox originally used simpler low-pass filters that I adapted from SFXR:\r\nhttps://www.drpetter.se/project_sfxr.html\r\nFor low cutoff frequencies, the simpler filters and the Butterworth filters are\r\nnearly identical, but when closer to the nyquist frequency the simpler filters\r\ncreate extra resonance.\r\n*/\r\n\r\nexport class FilterCoefficients {\r\n\tpublic readonly a: number[] = [1.0]; // output coefficients (negated, keep a[0]=1)\r\n\tpublic readonly b: number[] = [1.0]; // input coefficients\r\n\tpublic order: number = 0;\r\n\t\r\n\tpublic linearGain0thOrder(linearGain: number): void {\r\n\t\t//a[0] = 1.0; // a0 should always be normalized to 1.0, no need to assign it directly.\r\n\t\tthis.b[0] = linearGain;\r\n\t\tthis.order = 0;\r\n\t}\r\n\t\r\n\tpublic lowPass1stOrderButterworth(cornerRadiansPerSample: number): void {\r\n\t\t// First-order Butterworth low-pass filter according to:\r\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\r\n\t\t// A butterworth filter is one where the amplitude response is equal to:\r\n\t\t// 1 / √(1 + (freq / cutoffFreq)^(2 * order))\r\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\r\n\t\tconst a0: number = 1.0 + g;\r\n\t\tthis.a[1] = (1.0 - g) / a0;\r\n\t\tthis.b[1] = this.b[0] = 1 / a0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\tpublic lowPass1stOrderSimplified(cornerRadiansPerSample: number): void {\r\n\t\t// The output of this filter is nearly identical to the 1st order\r\n\t\t// Butterworth low-pass above, except if the cutoff is set to nyquist/3,\r\n\t\t// then the output is the same as the input, and if the cutoff is higher\r\n\t\t// than that, then the output actually resonates at high frequencies\r\n\t\t// instead of attenuating.\r\n\t\t// I'm guessing this filter was converted from analog to digital using\r\n\t\t// the \"matched z-transform\" method instead of the \"bilinear transform\"\r\n\t\t// method. The difference is that the bilinear transform warps\r\n\t\t// frequencies so that the lowpass response of zero at analogue ∞hz maps\r\n\t\t// to the digital nyquist frequency, whereas the matched z-transform\r\n\t\t// preserves the frequency of the filter response but also adds the\r\n\t\t// reflected response from above the nyquist frequency.\r\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\r\n\t\tthis.a[1] = g - 1.0;\r\n\t\tthis.b[0] = g;\r\n\t\tthis.b[1] = 0.0;\r\n\t\t/*\r\n\t\t// Alternatively:\r\n\t\tconst g: number = 1.0 / (2.0 * Math.sin(cornerRadiansPerSample / 2));\r\n\t\tconst a0: number = g;\r\n\t\tthis.a[1] = (1.0 - g) / a0;\r\n\t\tthis.b[0] = 1.0 / a0;\r\n\t\tthis.b[1] = 0.0 / a0;\r\n\t\t*/\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\tpublic highPass1stOrderButterworth(cornerRadiansPerSample: number): void {\r\n\t\t// First-order Butterworth high-pass filter according to:\r\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\r\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\r\n\t\tconst a0: number = 1.0 + g;\r\n\t\tthis.a[1] = (1.0 - g) / a0;\r\n\t\tthis.b[0] = g / a0;\r\n\t\tthis.b[1] = -g / a0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t/*\r\n\tpublic highPass1stOrderSimplified(cornerRadiansPerSample: number): void {\r\n\t\t// The output of this filter is nearly identical to the 1st order\r\n\t\t// Butterworth high-pass above, except it resonates when the cutoff\r\n\t\t// appoaches the nyquist.\r\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\r\n\t\tthis.a[1] = g - 1.0;\r\n\t\tthis.b[0] = 1.0;\r\n\t\tthis.b[1] = -1.0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t*/\r\n\tpublic highShelf1stOrder(cornerRadiansPerSample: number, shelfLinearGain: number): void {\r\n\t\t// I had trouble figuring this one out because I couldn't find any\r\n\t\t// online algorithms that I understood. There are 3 degrees of freedom\r\n\t\t// and I could narrow down a couple of them based on the desired gain at\r\n\t\t// DC and nyquist, but getting the cutoff frequency correct took a\r\n\t\t// little bit of trial and error in my attempts to interpret page 53 of\r\n\t\t// this chapter: http://www.music.mcgill.ca/~ich/classes/FiltersChap2.pdf\r\n\t\t// Obviously I don't fully understand the bilinear transform yet!\r\n\t\tconst tan: number = Math.tan(cornerRadiansPerSample * 0.5);\r\n\t\tconst sqrtGain: number = Math.sqrt(shelfLinearGain);\r\n\t\tconst g: number = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);\r\n\t\tconst a0: number = 1.0;\r\n\t\tthis.a[1] = g / a0;\r\n\t\tthis.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);\r\n\t\tthis.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\tpublic allPass1stOrderInvertPhaseAbove(cornerRadiansPerSample: number): void {\r\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\r\n\t\tthis.a[1] = g;\r\n\t\tthis.b[0] = g;\r\n\t\tthis.b[1] = 1.0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\t/*\r\n\t// I haven't found a practical use for this version of the all pass filter.\r\n\t// It seems to create a weird subharmonic when used in a delay feedback loop.\r\n\tpublic allPass1stOrderInvertPhaseBelow(cornerRadiansPerSample: number): void {\r\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\r\n\t\tthis.a[1] = g;\r\n\t\tthis.b[0] = -g;\r\n\t\tthis.b[1] = -1.0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t*/\r\n\t\r\n\tpublic allPass1stOrderFractionalDelay(delay: number) {\r\n\t\t// Very similar to allPass1stOrderInvertPhaseAbove, but configured\r\n\t\t// differently and for a different purpose! Useful for interpolating\r\n\t\t// between samples in a delay line.\r\n\t\tconst g: number = (1.0 - delay) / (1.0 + delay);\r\n\t\tthis.a[1] = g;\r\n\t\tthis.b[0] = g;\r\n\t\tthis.b[1] = 1.0;\r\n\t\tthis.order = 1;\r\n\t}\r\n\t\r\n\tpublic lowPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\r\n\t\t// This is Butterworth if peakLinearGain=1/√2 according to:\r\n\t\t// http://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\r\n\t\t// An interesting property is that if peakLinearGain=1/16 then the\r\n\t\t// output resembles a first-order lowpass at a cutoff 4 octaves lower,\r\n\t\t// although it gets distorted near the nyquist.\r\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);\r\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\r\n\t\tconst a0: number = 1.0 + alpha;\r\n\t\tthis.a[1] = -2.0*cos / a0;\r\n\t\tthis.a[2] = (1 - alpha) / a0;\r\n\t\tthis.b[2] = this.b[0] = (1 - cos) / (2.0*a0);\r\n\t\tthis.b[1] = (1 - cos) / a0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t\r\n\tpublic lowPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\r\n\t\t// This filter is adapted from the one in the SFXR source code:\r\n\t\t// https://www.drpetter.se/project_sfxr.html\r\n\t\t// The output is nearly identical to the resonant Butterworth low-pass\r\n\t\t// above, except it resonates too much when the cutoff appoaches the\r\n\t\t// nyquist. If the resonance is set to zero and the cutoff is set to\r\n\t\t// nyquist/3, then the output is the same as the input.\r\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);\r\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\r\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\r\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\r\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\r\n\t\tthis.b[0] = g*g;\r\n\t\tthis.b[1] = 0;\r\n\t\tthis.b[2] = 0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t\r\n\tpublic highPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\r\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);\r\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\r\n\t\tconst a0: number = 1.0 + alpha;\r\n\t\tthis.a[1] = -2.0*cos / a0;\r\n\t\tthis.a[2] = (1.0 - alpha) / a0;\r\n\t\tthis.b[2] = this.b[0] = (1.0 + cos) / (2.0*a0);\r\n\t\tthis.b[1] = -(1.0 + cos) / a0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t/*\r\n\tpublic highPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\r\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\r\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\r\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\r\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\r\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\r\n\t\tthis.b[0] = 1.0;\r\n\t\tthis.b[1] = -2.0;\r\n\t\tthis.b[2] = 1.0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t*/\r\n\tpublic highShelf2ndOrder(cornerRadiansPerSample: number, shelfLinearGain: number, slope: number): void {\r\n\t\tconst A: number = Math.sqrt(shelfLinearGain);\r\n\t\tconst c: number = Math.cos(cornerRadiansPerSample);\r\n\t\tconst Aplus: number = A + 1.0;\r\n\t\tconst Aminus: number = A - 1.0;\r\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) * 0.5 * Math.sqrt((Aplus / A) * (1.0 / slope - 1.0) + 2.0);\r\n\t\tconst sqrtA2Alpha: number = 2.0 * Math.sqrt(A) * alpha;\r\n\t\tconst a0: number =   (Aplus  - Aminus * c + sqrtA2Alpha);\r\n\t\tthis.a[1] =  2 *     (Aminus - Aplus  * c              ) / a0;\r\n\t\tthis.a[2] =          (Aplus  - Aminus * c - sqrtA2Alpha) / a0;\r\n\t\tthis.b[0] =      A * (Aplus  + Aminus * c + sqrtA2Alpha) / a0;\r\n\t\tthis.b[1] = -2 * A * (Aminus + Aplus  * c              ) / a0;\r\n\t\tthis.b[2] =      A * (Aplus  + Aminus * c - sqrtA2Alpha) / a0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\r\n\tpublic peak2ndOrder(cornerRadiansPerSample: number, peakLinearGain: number, bandWidthScale: number): void {\r\n\t\tconst sqrtGain: number = Math.sqrt(peakLinearGain);\r\n\t\tconst bandWidth: number = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1/sqrtGain);\r\n\t\t//const bandWidth: number = bandWidthScale * cornerRadiansPerSample / Math.max(sqrtGain, 1.0);\r\n\t\tconst alpha: number = Math.tan(bandWidth * 0.5);\r\n\t\tconst a0: number = 1.0 + alpha / sqrtGain;\r\n\t\tthis.b[0] = (1.0 + alpha * sqrtGain) / a0;\r\n\t\tthis.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;\r\n\t\tthis.b[2] = (1.0 - alpha * sqrtGain) / a0;\r\n\t\tthis.a[2] = (1.0 - alpha / sqrtGain) / a0;\r\n\t\tthis.order = 2;\r\n\t}\r\n\t/*\r\n\t// Create a higher order filter by combining two lower order filters.\r\n\t// However, making high order filters in this manner results in instability.\r\n\t// It is recommended to apply the 2nd order filters (biquads) in sequence instead.\r\n\tpublic combination(filter1: FilterCoefficients, filter2: FilterCoefficients): void {\r\n\t\tthis.order = filter1.order + filter2.order;\r\n\t\tfor (let i: number = 0; i <= this.order; i++) {\r\n\t\t\tthis.a[i] = 0.0;\r\n\t\t\tthis.b[i] = 0.0;\r\n\t\t}\r\n\t\tfor (let i: number = 0; i <= filter1.order; i++) {\r\n\t\t\tfor (let j: number = 0; j <= filter2.order; j++) {\r\n\t\t\t\tthis.a[i + j] += filter1.a[i] * filter2.a[j];\r\n\t\t\t\tthis.b[i + j] += filter1.b[i] * filter2.b[j];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic scaledDifference(other: FilterCoefficients, scale: number): void {\r\n\t\tif (other.order != this.order) throw new Error();\r\n\t\tfor (let i: number = 0; i <= this.order; i++) {\r\n\t\t\tthis.a[i] = (this.a[i] - other.a[i]) * scale;\r\n\t\t\tthis.b[i] = (this.b[i] - other.b[i]) * scale;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic copy(other: FilterCoefficients): void {\r\n\t\tthis.order = other.order;\r\n\t\tfor (let i: number = 0; i <= this.order; i++) {\r\n\t\t\tthis.a[i] = other.a[i];\r\n\t\t\tthis.b[i] = other.b[i];\r\n\t\t}\r\n\t}\r\n\t*/\r\n}\r\n\r\nexport class FrequencyResponse {\r\n\tpublic real: number = 0.0;\r\n\tpublic imag: number = 0.0;\r\n\tpublic denom: number = 1.0;\r\n\t\r\n\tpublic analyze(filter: FilterCoefficients, radiansPerSample: number): void {\r\n\t\tthis.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));\r\n\t}\r\n\t\r\n\tpublic analyzeComplex(filter: FilterCoefficients, real: number, imag: number): void {\r\n\t\tconst a: number[] = filter.a;\r\n\t\tconst b: number[] = filter.b;\r\n\t\tconst realZ1: number = real;\r\n\t\tconst imagZ1: number = -imag;\r\n\t\tlet realNum: number = b[0] + b[1] * realZ1;\r\n\t\tlet imagNum: number = b[1] * imagZ1;\r\n\t\tlet realDenom: number = 1.0 + a[1] * realZ1;\r\n\t\tlet imagDenom: number = a[1] * imagZ1;\r\n\t\tlet realZ: number = realZ1;\r\n\t\tlet imagZ: number = imagZ1;\r\n\t\tfor (let i: number = 2; i <= filter.order; i++) {\r\n\t\t\tconst realTemp: number = realZ * realZ1 - imagZ * imagZ1;\r\n\t\t\tconst imagTemp: number = realZ * imagZ1 + imagZ * realZ1;\r\n\t\t\trealZ = realTemp;\r\n\t\t\timagZ = imagTemp;\r\n\t\t\trealNum += b[i] * realZ;\r\n\t\t\timagNum += b[i] * imagZ;\r\n\t\t\trealDenom += a[i] * realZ;\r\n\t\t\timagDenom += a[i] * imagZ;\r\n\t\t}\r\n\t\tthis.denom = realDenom * realDenom + imagDenom * imagDenom;\r\n\t\tthis.real = realNum * realDenom + imagNum * imagDenom;\r\n\t\tthis.imag = imagNum * realDenom - realNum * imagDenom;\r\n\t}\r\n\t\r\n\tpublic magnitude(): number {\r\n\t\treturn Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;\r\n\t}\r\n\t\r\n\tpublic angle(): number {\r\n\t\treturn Math.atan2(this.imag, this.real);\r\n\t}\r\n}\r\n\r\nexport class DynamicBiquadFilter {\r\n\tpublic a1: number = 0.0;\r\n\tpublic a2: number = 0.0;\r\n\tpublic b0: number = 1.0;\r\n\tpublic b1: number = 0.0;\r\n\tpublic b2: number = 0.0;\r\n\tpublic a1Delta: number = 0.0;\r\n\tpublic a2Delta: number = 0.0;\r\n\tpublic b0Delta: number = 0.0;\r\n\tpublic b1Delta: number = 0.0;\r\n\tpublic b2Delta: number = 0.0;\r\n\tpublic output1: number = 0.0;\r\n\tpublic output2: number = 0.0;\r\n\t\r\n\t// Some filter types are more stable when interpolating between coefficients\r\n\t// if the \"b\" coefficient interpolation is multiplicative. Don't enable this\r\n\t// for filter types where the \"b\" coefficients might change sign!\r\n\tpublic useMultiplicativeInputCoefficients: boolean = false;\r\n\t\r\n\tpublic resetOutput(): void {\r\n\t\tthis.output1 = 0.0;\r\n\t\tthis.output2 = 0.0;\r\n\t}\r\n\t\r\n\tpublic loadCoefficientsWithGradient(start: FilterCoefficients, end: FilterCoefficients, deltaRate: number, useMultiplicativeInputCoefficients: boolean): void {\r\n\t\tif (start.order != 2 || end.order != 2) throw new Error();\r\n\t\tthis.a1 = start.a[1];\r\n\t\tthis.a2 = start.a[2];\r\n\t\tthis.b0 = start.b[0];\r\n\t\tthis.b1 = start.b[1];\r\n\t\tthis.b2 = start.b[2];\r\n\t\tthis.a1Delta = (end.a[1] - start.a[1]) * deltaRate;\r\n\t\tthis.a2Delta = (end.a[2] - start.a[2]) * deltaRate;\r\n\t\tif (useMultiplicativeInputCoefficients) {\r\n\t\t\tthis.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);\r\n\t\t\tthis.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);\r\n\t\t\tthis.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);\r\n\t\t} else {\r\n\t\t\tthis.b0Delta = (end.b[0] - start.b[0]) * deltaRate;\r\n\t\t\tthis.b1Delta = (end.b[1] - start.b[1]) * deltaRate;\r\n\t\t\tthis.b2Delta = (end.b[2] - start.b[2]) * deltaRate;\r\n\t\t}\r\n\t\tthis.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;\r\n\t}\r\n}\r\n\r\n// Filters are typically designed as analog filters first, then converted to\r\n// digital filters using one of two methods: the \"matched z-transform\" or the\r\n// \"bilinear transform\". The \"bilinear transform\" does a better job of\r\n// preserving the magnitudes of the frequency response, but warps the frequency\r\n// range such that the nyquist frequency of the digital filter (π) maps to the\r\n// infinity frequency of the analog filter. You can use the below functions to\r\n// manually perform this warping in either direction.\r\nexport function warpNyquistToInfinity(radians: number): number {\r\n\treturn 2.0 * Math.tan(radians * 0.5);\r\n}\r\nexport function warpInfinityToNyquist(radians: number): number {\r\n\treturn 2.0 * Math.atan(radians * 0.5);\r\n}\r\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nimport { startLoadingSample, sampleLoadingState, SampleLoadingState, sampleLoadEvents, SampleLoadedEvent, SampleLoadingStatus, loadBuiltInSamples, Dictionary, DictionaryArray, toNameMap, FilterType, SustainType, EnvelopeType, InstrumentType, EffectType, EnvelopeComputeIndex, Transition, Unison, Chord, Vibrato, Envelope, AutomationTarget, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex, performIntegralOld, getPulseWidthRatio, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato, effectsIncludeNoteFilter, effectsIncludeDistortion, effectsIncludeBitcrusher, effectsIncludePanning, effectsIncludeChorus, effectsIncludeEcho, effectsIncludeReverb, OperatorWave } from \"./SynthConfig\";\r\nimport { Preset, EditorConfig } from \"../editor/EditorConfig\";\r\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\r\nimport { Deque } from \"./Deque\";\r\nimport { events } from \"../global/Events\";\r\nimport { FilterCoefficients, FrequencyResponse, DynamicBiquadFilter, warpInfinityToNyquist } from \"./filtering\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        AudioContext: any;\r\n        webkitAudioContext: any;\r\n    }\r\n}\r\n\r\nconst epsilon: number = (1.0e-24); // For detecting and avoiding float denormals, which have poor performance.\r\n\r\n// For performance debugging:\r\n//let samplesAccumulated: number = 0;\r\n//let samplePerformance: number = 0;\r\n\r\nexport function clamp(min: number, max: number, val: number): number {\r\n    max = max - 1;\r\n    if (val <= max) {\r\n        if (val >= min) return val;\r\n        else return min;\r\n    } else {\r\n        return max;\r\n    }\r\n}\r\n\r\nfunction validateRange(min: number, max: number, val: number): number {\r\n    if (min <= val && val <= max) return val;\r\n    throw new Error(`Value ${val} not in range [${min}, ${max}]`);\r\n}\r\n\r\nexport function parseFloatWithDefault<T>(s: string, defaultValue: T): number | T {\r\n    let result: number | T = parseFloat(s);\r\n    if (Number.isNaN(result)) result = defaultValue;\r\n    return result;\r\n}\r\n\r\nexport function parseIntWithDefault<T>(s: string, defaultValue: T): number | T {\r\n    let result: number | T = parseInt(s);\r\n    if (Number.isNaN(result)) result = defaultValue;\r\n    return result;\r\n}\r\n\r\nfunction encode32BitNumber(buffer: number[], x: number): void {\r\n    // 0b11_\r\n    buffer.push(base64IntToCharCode[(x >>> (6 * 5)) & 0x3]);\r\n    //      111111_\r\n    buffer.push(base64IntToCharCode[(x >>> (6 * 4)) & 0x3f]);\r\n    //             111111_\r\n    buffer.push(base64IntToCharCode[(x >>> (6 * 3)) & 0x3f]);\r\n    //                    111111_\r\n    buffer.push(base64IntToCharCode[(x >>> (6 * 2)) & 0x3f]);\r\n    //                           111111_\r\n    buffer.push(base64IntToCharCode[(x >>> (6 * 1)) & 0x3f]);\r\n    //                                  111111\r\n    buffer.push(base64IntToCharCode[(x >>> (6 * 0)) & 0x3f]);\r\n}\r\n\r\n// @TODO: This is error-prone, because the caller has to remember to increment\r\n// charIndex by 6 afterwards.\r\nfunction decode32BitNumber(compressed: string, charIndex: number): number {\r\n    let x: number = 0;\r\n    // 0b11_\r\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 5);\r\n    //      111111_\r\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 4);\r\n    //             111111_\r\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 3);\r\n    //                    111111_\r\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 2);\r\n    //                           111111_\r\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 1);\r\n    //                                  111111\r\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 0);\r\n    return x;\r\n}\r\n\r\nfunction encodeUnisonSettings(buffer: number[], v: number, s: number, o: number, e: number, i: number): void {\r\n    // TODO: make these sign bits more efficient (bundle them together)\r\n    buffer.push(base64IntToCharCode[v]);\r\n    \r\n    // TODO: make these use bitshifts instead for consistency\r\n    buffer.push(base64IntToCharCode[Number((s > 0))]);\r\n    let cleanS = Math.round(Math.abs(s) * 1000);\r\n    let cleanSDivided = Math.floor(cleanS / 63);\r\n    buffer.push(base64IntToCharCode[cleanS % 63], base64IntToCharCode[cleanSDivided % 63], base64IntToCharCode[Math.floor(cleanSDivided / 63)]);\r\n\r\n    buffer.push(base64IntToCharCode[Number((o > 0))]);\r\n    let cleanO = Math.round(Math.abs(o) * 1000);\r\n    let cleanODivided = Math.floor(cleanO / 63);\r\n    buffer.push(base64IntToCharCode[cleanO % 63], base64IntToCharCode[cleanODivided % 63], base64IntToCharCode[Math.floor(cleanODivided / 63)]);\r\n    \r\n    buffer.push(base64IntToCharCode[Number((e > 0))]);\r\n    let cleanE = Math.round(Math.abs(e) * 1000);\r\n    buffer.push(base64IntToCharCode[cleanE % 63], base64IntToCharCode[Math.floor(cleanE / 63)]);\r\n\r\n    buffer.push(base64IntToCharCode[Number((i > 0))]);\r\n    let cleanI = Math.round(Math.abs(i) * 1000);\r\n    buffer.push(base64IntToCharCode[cleanI % 63], base64IntToCharCode[Math.floor(cleanI / 63)]);\r\n}\r\n\r\nfunction convertLegacyKeyToKeyAndOctave(rawKeyIndex: number): [number, number] {\r\n    let key: number = clamp(0, Config.keys.length, rawKeyIndex);\r\n    let octave: number = 0;\r\n    // This conversion code depends on C through B being\r\n    // available as keys, of course.\r\n    if (rawKeyIndex === 12) {\r\n        // { name: \"C+\", isWhiteKey: false, basePitch: 24 }\r\n        key = 0;\r\n        octave = 1;\r\n    } else if (rawKeyIndex === 13) {\r\n        // { name: \"G- (actually F#-)\", isWhiteKey: false, basePitch: 6 }\r\n        key = 6;\r\n        octave = -1;\r\n    } else if (rawKeyIndex === 14) {\r\n        // { name: \"C-\", isWhiteKey: true, basePitch: 0 }\r\n        key = 0;\r\n        octave = -1;\r\n    } else if (rawKeyIndex === 15) {\r\n        // { name: \"oh no (F-)\", isWhiteKey: true, basePitch: 5 }\r\n        key = 5;\r\n        octave = -1;\r\n    }\r\n    return [key, octave];\r\n}\r\n\r\nconst enum CharCode {\r\n    SPACE = 32,\r\n    HASH = 35,\r\n    PERCENT = 37,\r\n    AMPERSAND = 38,\r\n    PLUS = 43,\r\n    DASH = 45,\r\n    DOT = 46,\r\n    NUM_0 = 48,\r\n    NUM_1 = 49,\r\n    NUM_2 = 50,\r\n    NUM_3 = 51,\r\n    NUM_4 = 52,\r\n    NUM_5 = 53,\r\n    NUM_6 = 54,\r\n    NUM_7 = 55,\r\n    NUM_8 = 56,\r\n    NUM_9 = 57,\r\n    EQUALS = 61,\r\n    A = 65,\r\n    B = 66,\r\n    C = 67,\r\n    D = 68,\r\n    E = 69,\r\n    F = 70,\r\n    G = 71,\r\n    H = 72,\r\n    I = 73,\r\n    J = 74,\r\n    K = 75,\r\n    L = 76,\r\n    M = 77,\r\n    N = 78,\r\n    O = 79,\r\n    P = 80,\r\n    Q = 81,\r\n    R = 82,\r\n    S = 83,\r\n    T = 84,\r\n    U = 85,\r\n    V = 86,\r\n    W = 87,\r\n    X = 88,\r\n    Y = 89,\r\n    Z = 90,\r\n    UNDERSCORE = 95,\r\n    a = 97,\r\n    b = 98,\r\n    c = 99,\r\n    d = 100,\r\n    e = 101,\r\n    f = 102,\r\n    g = 103,\r\n    h = 104,\r\n    i = 105,\r\n    j = 106,\r\n    k = 107,\r\n    l = 108,\r\n    m = 109,\r\n    n = 110,\r\n    o = 111,\r\n    p = 112,\r\n    q = 113,\r\n    r = 114,\r\n    s = 115,\r\n    t = 116,\r\n    u = 117,\r\n    v = 118,\r\n    w = 119,\r\n    x = 120,\r\n    y = 121,\r\n    z = 122,\r\n    LEFT_CURLY_BRACE = 123,\r\n    RIGHT_CURLY_BRACE = 125,\r\n}\r\n\r\nconst enum SongTagCode {\r\n    beatCount           = CharCode.a, // added in BeepBox URL version 2\r\n\tbars                = CharCode.b, // added in BeepBox URL version 2\r\n\tvibrato             = CharCode.c, // added in BeepBox URL version 2, DEPRECATED\r\n\tfadeInOut           = CharCode.d, // added in BeepBox URL version 3 for transition, switched to fadeInOut in 9\r\n\tloopEnd             = CharCode.e, // added in BeepBox URL version 2\r\n\teqFilter            = CharCode.f, // added in BeepBox URL version 3\r\n\tbarCount            = CharCode.g, // added in BeepBox URL version 3\r\n\tunison              = CharCode.h, // added in BeepBox URL version 2\r\n\tinstrumentCount     = CharCode.i, // added in BeepBox URL version 3\r\n\tpatternCount        = CharCode.j, // added in BeepBox URL version 3\r\n\tkey                 = CharCode.k, // added in BeepBox URL version 2\r\n\tloopStart           = CharCode.l, // added in BeepBox URL version 2\r\n\treverb              = CharCode.m, // added in BeepBox URL version 5, DEPRECATED\r\n\tchannelCount        = CharCode.n, // added in BeepBox URL version 6\r\n\tchannelOctave       = CharCode.o, // added in BeepBox URL version 3\r\n\tpatterns            = CharCode.p, // added in BeepBox URL version 2\r\n\teffects             = CharCode.q, // added in BeepBox URL version 7\r\n\trhythm              = CharCode.r, // added in BeepBox URL version 2\r\n\tscale               = CharCode.s, // added in BeepBox URL version 2\r\n\ttempo               = CharCode.t, // added in BeepBox URL version 2\r\n\tpreset              = CharCode.u, // added in BeepBox URL version 7\r\n\tvolume              = CharCode.v, // added in BeepBox URL version 2\r\n\twave                = CharCode.w, // added in BeepBox URL version 2\r\n\tsupersaw            = CharCode.x, // added in BeepBox URL version 9 ([UB] was used for chip wave but is now DEPRECATED)\r\n\tfilterResonance     = CharCode.y, // added in BeepBox URL version 7, DEPRECATED, [UB] repurposed for chip wave loop controls\r\n\tdrumsetEnvelopes    = CharCode.z, // added in BeepBox URL version 7 for filter envelopes, still used for drumset envelopes\r\n\talgorithm           = CharCode.A, // added in BeepBox URL version 6\r\n\tfeedbackAmplitude   = CharCode.B, // added in BeepBox URL version 6\r\n\tchord               = CharCode.C, // added in BeepBox URL version 7, DEPRECATED\r\n\tdetune              = CharCode.D, // added in JummBox URL version 3(?) for detune, DEPRECATED\r\n\tenvelopes           = CharCode.E, // added in BeepBox URL version 6 for FM operator envelopes, repurposed in 9 for general envelopes.\r\n\tfeedbackType        = CharCode.F, // added in BeepBox URL version 6\r\n\tarpeggioSpeed       = CharCode.G, // added in JummBox URL version 3 for arpeggioSpeed, DEPRECATED\r\n\tharmonics           = CharCode.H, // added in BeepBox URL version 7\r\n\tstringSustain       = CharCode.I, // added in BeepBox URL version 9\r\n//\t                    = CharCode.J,\r\n//\t                    = CharCode.K,\r\n\tpan                 = CharCode.L, // added between 8 and 9, DEPRECATED\r\n\tcustomChipWave      = CharCode.M, // added in JummBox URL version 1(?) for customChipWave\r\n\tsongTitle           = CharCode.N, // added in JummBox URL version 1(?) for songTitle\r\n\tlimiterSettings     = CharCode.O, // added in JummBox URL version 3(?) for limiterSettings\r\n\toperatorAmplitudes  = CharCode.P, // added in BeepBox URL version 6\r\n\toperatorFrequencies = CharCode.Q, // added in BeepBox URL version 6\r\n\toperatorWaves       = CharCode.R, // added in JummBox URL version 4 for operatorWaves\r\n\tspectrum            = CharCode.S, // added in BeepBox URL version 7\r\n\tstartInstrument     = CharCode.T, // added in BeepBox URL version 6\r\n\tchannelNames        = CharCode.U, // added in JummBox URL version 4(?) for channelNames\r\n\tfeedbackEnvelope    = CharCode.V, // added in BeepBox URL version 6, DEPRECATED\r\n\tpulseWidth          = CharCode.W, // added in BeepBox URL version 7\r\n\taliases             = CharCode.X, // added in JummBox URL version 4 for aliases, DEPRECATED, [UB] repurposed for PWM decimal offset (DEPRECATED as well)\r\n//\t                    = CharCode.Y,\r\n//\t                    = CharCode.Z,\r\n//\t                    = CharCode.NUM_0,\r\n//\t                    = CharCode.NUM_1,\r\n//\t                    = CharCode.NUM_2,\r\n//\t                    = CharCode.NUM_3,\r\n//\t                    = CharCode.NUM_4,\r\n//\t                    = CharCode.NUM_5,\r\n//\t                    = CharCode.NUM_6,\r\n//\t                    = CharCode.NUM_7,\r\n//\t                    = CharCode.NUM_8,\r\n//\t                    = CharCode.NUM_9,\r\n//\t                    = CharCode.DASH,\r\n//\t                    = CharCode.UNDERSCORE,\r\n\r\n}\r\n\r\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\r\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\r\n\r\nclass BitFieldReader {\r\n    private _bits: number[] = [];\r\n    private _readIndex: number = 0;\r\n\r\n    constructor(source: string, startIndex: number, stopIndex: number) {\r\n        for (let i: number = startIndex; i < stopIndex; i++) {\r\n            const value: number = base64CharCodeToInt[source.charCodeAt(i)];\r\n            this._bits.push((value >> 5) & 0x1);\r\n            this._bits.push((value >> 4) & 0x1);\r\n            this._bits.push((value >> 3) & 0x1);\r\n            this._bits.push((value >> 2) & 0x1);\r\n            this._bits.push((value >> 1) & 0x1);\r\n            this._bits.push(value & 0x1);\r\n        }\r\n    }\r\n\r\n    public read(bitCount: number): number {\r\n        let result: number = 0;\r\n        while (bitCount > 0) {\r\n            result = result << 1;\r\n            result += this._bits[this._readIndex++];\r\n            bitCount--;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public readLongTail(minValue: number, minBits: number): number {\r\n        let result: number = minValue;\r\n        let numBits: number = minBits;\r\n        while (this._bits[this._readIndex++]) {\r\n            result += 1 << numBits;\r\n            numBits++;\r\n        }\r\n        while (numBits > 0) {\r\n            numBits--;\r\n            if (this._bits[this._readIndex++]) {\r\n                result += 1 << numBits;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public readPartDuration(): number {\r\n        return this.readLongTail(1, 3);\r\n    }\r\n\r\n    public readLegacyPartDuration(): number {\r\n        return this.readLongTail(1, 2);\r\n    }\r\n\r\n    public readPinCount(): number {\r\n        return this.readLongTail(1, 0);\r\n    }\r\n\r\n    public readPitchInterval(): number {\r\n        if (this.read(1)) {\r\n            return -this.readLongTail(1, 3);\r\n        } else {\r\n            return this.readLongTail(1, 3);\r\n        }\r\n    }\r\n}\r\n\r\nclass BitFieldWriter {\r\n    private _index: number = 0;\r\n    private _bits: number[] = [];\r\n\r\n    public clear() {\r\n        this._index = 0;\r\n    }\r\n\r\n    public write(bitCount: number, value: number): void {\r\n        bitCount--;\r\n        while (bitCount >= 0) {\r\n            this._bits[this._index++] = (value >>> bitCount) & 1;\r\n            bitCount--;\r\n        }\r\n    }\r\n\r\n    public writeLongTail(minValue: number, minBits: number, value: number): void {\r\n        if (value < minValue) throw new Error(\"value out of bounds\");\r\n        value -= minValue;\r\n        let numBits: number = minBits;\r\n        while (value >= (1 << numBits)) {\r\n            this._bits[this._index++] = 1;\r\n            value -= 1 << numBits;\r\n            numBits++;\r\n        }\r\n        this._bits[this._index++] = 0;\r\n        while (numBits > 0) {\r\n            numBits--;\r\n            this._bits[this._index++] = (value >>> numBits) & 1;\r\n        }\r\n    }\r\n\r\n    public writePartDuration(value: number): void {\r\n        this.writeLongTail(1, 3, value);\r\n    }\r\n\r\n    public writePinCount(value: number): void {\r\n        this.writeLongTail(1, 0, value);\r\n    }\r\n\r\n    public writePitchInterval(value: number): void {\r\n        if (value < 0) {\r\n            this.write(1, 1); // sign\r\n            this.writeLongTail(1, 3, -value);\r\n        } else {\r\n            this.write(1, 0); // sign\r\n            this.writeLongTail(1, 3, value);\r\n        }\r\n    }\r\n\r\n    public concat(other: BitFieldWriter): void {\r\n        for (let i: number = 0; i < other._index; i++) {\r\n            this._bits[this._index++] = other._bits[i];\r\n        }\r\n    }\r\n\r\n    public encodeBase64(buffer: number[]): number[] {\r\n\r\n        for (let i: number = 0; i < this._index; i += 6) {\r\n            const value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\r\n            buffer.push(base64IntToCharCode[value]);\r\n        }\r\n        return buffer;\r\n    }\r\n\r\n    public lengthBase64(): number {\r\n        return Math.ceil(this._index / 6);\r\n    }\r\n}\r\n\r\nexport interface NotePin {\r\n    interval: number;\r\n    time: number;\r\n    size: number;\r\n}\r\n\r\nexport function makeNotePin(interval: number, time: number, size: number): NotePin {\r\n    return { interval: interval, time: time, size: size };\r\n}\r\n\r\nexport class Note {\r\n    public pitches: number[];\r\n    public pins: NotePin[];\r\n    public start: number;\r\n    public end: number;\r\n    public continuesLastPattern: boolean;\r\n\r\n    public constructor(pitch: number, start: number, end: number, size: number, fadeout: boolean = false) {\r\n        this.pitches = [pitch];\r\n        this.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];\r\n        this.start = start;\r\n        this.end = end;\r\n        this.continuesLastPattern = false;\r\n    }\r\n\r\n    public pickMainInterval(): number {\r\n        let longestFlatIntervalDuration: number = 0;\r\n        let mainInterval: number = 0;\r\n        for (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\r\n            const pinA: NotePin = this.pins[pinIndex - 1];\r\n            const pinB: NotePin = this.pins[pinIndex];\r\n            if (pinA.interval == pinB.interval) {\r\n                const duration: number = pinB.time - pinA.time;\r\n                if (longestFlatIntervalDuration < duration) {\r\n                    longestFlatIntervalDuration = duration;\r\n                    mainInterval = pinA.interval;\r\n                }\r\n            }\r\n        }\r\n        if (longestFlatIntervalDuration == 0) {\r\n            let loudestSize: number = 0;\r\n            for (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\r\n                const pin: NotePin = this.pins[pinIndex];\r\n                if (loudestSize < pin.size) {\r\n                    loudestSize = pin.size;\r\n                    mainInterval = pin.interval;\r\n                }\r\n            }\r\n        }\r\n        return mainInterval;\r\n    }\r\n\r\n    public clone(): Note {\r\n        const newNote: Note = new Note(-1, this.start, this.end, 3);\r\n        newNote.pitches = this.pitches.concat();\r\n        newNote.pins = [];\r\n        for (const pin of this.pins) {\r\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));\r\n        }\r\n        newNote.continuesLastPattern = this.continuesLastPattern;\r\n        return newNote;\r\n    }\r\n\r\n    public getEndPinIndex(part: number): number {\r\n        let endPinIndex: number;\r\n        for (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {\r\n            if (this.pins[endPinIndex].time + this.start > part) break;\r\n        }\r\n        return endPinIndex;\r\n    }\r\n}\r\n\r\nexport class Pattern {\r\n    public notes: Note[] = [];\r\n    public readonly instruments: number[] = [0];\r\n\r\n    public cloneNotes(): Note[] {\r\n        const result: Note[] = [];\r\n        for (const note of this.notes) {\r\n            result.push(note.clone());\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public reset(): void {\r\n        this.notes.length = 0;\r\n        this.instruments[0] = 0;\r\n        this.instruments.length = 1;\r\n    }\r\n\r\n    public toJsonObject(song: Song, channel: Channel, isModChannel: boolean): any {\r\n        const noteArray: Object[] = [];\r\n        for (const note of this.notes) {\r\n            // Only one ins per pattern is enforced in mod channels.\r\n            let instrument: Instrument = channel.instruments[this.instruments[0]];\r\n            let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\r\n            let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\r\n            const pointArray: Object[] = [];\r\n            for (const pin of note.pins) {\r\n                let useVol: number = isModChannel ? Math.round(pin.size) : Math.round(pin.size * 100 / volumeCap);\r\n                pointArray.push({\r\n                    \"tick\": (pin.time + note.start) * Config.rhythms[song.rhythm].stepsPerBeat / Config.partsPerBeat,\r\n                    \"pitchBend\": pin.interval,\r\n                    \"volume\": useVol,\r\n                    \"forMod\": isModChannel,\r\n                });\r\n            }\r\n\r\n            const noteObject: any = {\r\n                \"pitches\": note.pitches,\r\n                \"points\": pointArray,\r\n            };\r\n            if (note.start == 0) {\r\n                noteObject[\"continuesLastPattern\"] = note.continuesLastPattern;\r\n            }\r\n            noteArray.push(noteObject);\r\n        }\r\n\r\n        const patternObject: any = { \"notes\": noteArray };\r\n        if (song.patternInstruments) {\r\n            patternObject[\"instruments\"] = this.instruments.map(i => i + 1);\r\n        }\r\n        return patternObject;\r\n    }\r\n\r\n    public fromJsonObject(patternObject: any, song: Song, channel: Channel, importedPartsPerBeat: number, isNoiseChannel: boolean, isModChannel: boolean, jsonFormat: string = \"auto\"): void {\r\n        const format: string = jsonFormat.toLowerCase();\r\n\r\n        if (song.patternInstruments) {\r\n            if (Array.isArray(patternObject[\"instruments\"])) {\r\n                const instruments: any[] = patternObject[\"instruments\"];\r\n                const instrumentCount: number = clamp(Config.instrumentCountMin, song.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);\r\n                for (let j: number = 0; j < instrumentCount; j++) {\r\n                    this.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);\r\n                }\r\n                this.instruments.length = instrumentCount;\r\n            } else {\r\n                this.instruments[0] = clamp(0, channel.instruments.length, (patternObject[\"instrument\"] | 0) - 1);\r\n                this.instruments.length = 1;\r\n            }\r\n        }\r\n\r\n        if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\r\n            const maxNoteCount: number = Math.min(song.beatsPerBar * Config.partsPerBeat * (isModChannel ? Config.modCount : 1), patternObject[\"notes\"].length >>> 0);\r\n\r\n            // TODO: Consider supporting notes specified in any timing order, sorting them and truncating as necessary.\r\n            //let tickClock: number = 0;\r\n            for (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\r\n                if (j >= maxNoteCount) break;\r\n\r\n                const noteObject = patternObject[\"notes\"][j];\r\n                if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\r\n                    continue;\r\n                }\r\n\r\n                const note: Note = new Note(0, 0, 0, 0);\r\n                note.pitches = [];\r\n                note.pins = [];\r\n\r\n                for (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\r\n                    const pitch: number = noteObject[\"pitches\"][k] | 0;\r\n                    if (note.pitches.indexOf(pitch) != -1) continue;\r\n                    note.pitches.push(pitch);\r\n                    if (note.pitches.length >= Config.maxChordSize) break;\r\n                }\r\n                if (note.pitches.length < 1) continue;\r\n\r\n                //let noteClock: number = tickClock;\r\n                let startInterval: number = 0;\r\n\r\n                let instrument: Instrument = channel.instruments[this.instruments[0]];\r\n                let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\r\n\r\n                for (let k: number = 0; k < noteObject[\"points\"].length; k++) {\r\n                    const pointObject: any = noteObject[\"points\"][k];\r\n                    if (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\r\n                    const interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\r\n\r\n                    const time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\r\n\r\n                    // Only one instrument per pattern allowed in mod channels.\r\n                    let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\r\n\r\n                    // The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\r\n                    // A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\r\n                    let size: number;\r\n                    if (pointObject[\"volume\"] == undefined) {\r\n                        size = volumeCap;\r\n                    } else if (pointObject[\"forMod\"] == undefined) {\r\n                        size = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n                    }\r\n                    else {\r\n                        size = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n                    }\r\n\r\n                    if (time > song.beatsPerBar * Config.partsPerBeat) continue;\r\n                    if (note.pins.length == 0) {\r\n                        //if (time < noteClock) continue;\r\n                        note.start = time;\r\n                        startInterval = interval;\r\n                    } else {\r\n                        //if (time <= noteClock) continue;\r\n                    }\r\n                    //noteClock = time;\r\n\r\n                    note.pins.push(makeNotePin(interval - startInterval, time - note.start, size));\r\n                }\r\n                if (note.pins.length < 2) continue;\r\n\r\n                note.end = note.pins[note.pins.length - 1].time + note.start;\r\n\r\n                const maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\r\n                let lowestPitch: number = maxPitch;\r\n                let highestPitch: number = 0;\r\n                for (let k: number = 0; k < note.pitches.length; k++) {\r\n                    note.pitches[k] += startInterval;\r\n                    if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\r\n                        note.pitches.splice(k, 1);\r\n                        k--;\r\n                    }\r\n                    if (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\r\n                    if (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\r\n                }\r\n                if (note.pitches.length < 1) continue;\r\n\r\n                for (let k: number = 0; k < note.pins.length; k++) {\r\n                    const pin: NotePin = note.pins[k];\r\n                    if (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\r\n                    if (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\r\n                    if (k >= 2) {\r\n                        if (pin.interval == note.pins[k - 1].interval &&\r\n                            pin.interval == note.pins[k - 2].interval &&\r\n                            pin.size == note.pins[k - 1].size &&\r\n                            pin.size == note.pins[k - 2].size) {\r\n                            note.pins.splice(k - 1, 1);\r\n                            k--;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (note.start == 0) {\r\n                    note.continuesLastPattern = (noteObject[\"continuesLastPattern\"] === true);\r\n                } else {\r\n                    note.continuesLastPattern = false;\r\n                }\r\n\r\n                if (format != \"ultrabox\" && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\r\n                    for (const pin of note.pins) {\r\n                        const oldMin: number = 30;\r\n                        const newMin: number = 1;\r\n                        const old: number = pin.size + oldMin;\r\n                        pin.size = old - newMin; // convertRealFactor will add back newMin as necessary\r\n                    }\r\n                }\r\n\r\n                this.notes.push(note);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class Operator {\r\n    public frequency: number = 4;\r\n    public amplitude: number = 0;\r\n    public waveform: number = 0;\r\n    public pulseWidth: number = 0.5;\r\n\r\n    constructor(index: number) {\r\n        this.reset(index);\r\n    }\r\n\r\n    public reset(index: number): void {\r\n        this.frequency = 4; //defualt to 1x\r\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\r\n        this.waveform = 0;\r\n        this.pulseWidth = 5;\r\n    }\r\n\r\n    public copy(other: Operator): void {\r\n        this.frequency = other.frequency;\r\n        this.amplitude = other.amplitude;\r\n        this.waveform = other.waveform;\r\n        this.pulseWidth = other.pulseWidth;\r\n    }\r\n}\r\n\r\nexport class CustomAlgorithm {\r\n    public name: string = \"\";\r\n    public carrierCount: number = 0;\r\n    public modulatedBy: number[][] = [[], [], [], [], [], []];\r\n    public associatedCarrier: number[] = [];\r\n\r\n    constructor(){\r\n        this.fromPreset(1);\r\n    }\r\n\r\n    public set(carriers: number, modulation: number[][]) {\r\n        this.reset();\r\n        this.carrierCount = carriers;\r\n        for (let i = 0; i < this.modulatedBy.length; i++) {\r\n            this.modulatedBy[i] = modulation[i];\r\n            if (i < carriers) {\r\n                this.associatedCarrier[i] = i+1;\r\n            }\r\n            this.name += (i+1);\r\n            for (let j = 0; j < modulation[i].length;j++) {\r\n                this.name += modulation[i][j];\r\n                if (modulation[i][j] > carriers-1) {\r\n                    this.associatedCarrier[modulation[i][j] - 1] = i + 1;\r\n                }\r\n                this.name += \",\";\r\n            }\r\n            if (i < carriers) {\r\n                this.name += \"|\";\r\n            } else {\r\n                this.name += \".\";\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this.name = \"\"\r\n        this.carrierCount = 1;\r\n        this.modulatedBy = [[2, 3, 4, 5, 6], [], [], [], [], []];\r\n        this.associatedCarrier = [1, 1, 1, 1, 1, 1];\r\n    }\r\n\r\n    public copy(other: CustomAlgorithm): void {\r\n        this.name = other.name;\r\n        this.carrierCount = other.carrierCount;\r\n        this.modulatedBy = other.modulatedBy;\r\n        this.associatedCarrier = other.associatedCarrier;\r\n    }\r\n\r\n    public fromPreset(other: number): void {\r\n        this.reset();\r\n        let preset = Config.algorithms6Op[other]\r\n        this.name = preset.name;\r\n        this.carrierCount = preset.carrierCount;\r\n        for (var i = 0; i < preset.modulatedBy.length; i++) {\r\n            this.modulatedBy[i] = Array.from(preset.modulatedBy[i]);\r\n            this.associatedCarrier[i] = preset.associatedCarrier[i];\r\n        }\r\n    }\r\n}\r\n\r\nexport class CustomFeedBack { //feels redunant\r\n    public name: string = \"\";\r\n    public indices: number[][] = [[], [], [], [], [], []];\r\n\r\n    constructor() {\r\n        this.fromPreset(1);\r\n    }\r\n\r\n    public set(inIndices: number[][]) {\r\n        this.reset();\r\n        for (let i = 0; i < this.indices.length; i++) {\r\n            this.indices[i] = inIndices[i];\r\n            for (let j = 0; j < inIndices[i].length; j++) {\r\n                this.name += inIndices[i][j];\r\n                this.name += \",\";\r\n            }\r\n            this.name += \".\";\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this.reset;\r\n        this.name = \"\";\r\n        this.indices = [[1], [], [], [], [], []];\r\n    }\r\n\r\n    public copy(other: CustomFeedBack): void {\r\n        this.name = other.name;\r\n        this.indices = other.indices;\r\n    }\r\n\r\n    public fromPreset(other: number): void {\r\n        this.reset();\r\n        let preset = Config.feedbacks6Op[other]\r\n        for (var i = 0; i < preset.indices.length; i++) {\r\n            this.indices[i] = Array.from(preset.indices[i]);\r\n            for (let j = 0; j < preset.indices[i].length; j++) {\r\n                this.name += preset.indices[i][j];\r\n                this.name += \",\";\r\n            }\r\n            this.name += \".\";\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpectrumWave {\r\n    public spectrum: number[] = [];\r\n    public hash: number = -1;\r\n\r\n    constructor(isNoiseChannel: boolean) {\r\n        this.reset(isNoiseChannel);\r\n    }\r\n\r\n    public reset(isNoiseChannel: boolean): void {\r\n        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n            if (isNoiseChannel) {\r\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\r\n            } else {\r\n                const isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\r\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\r\n            }\r\n        }\r\n        this.markCustomWaveDirty();\r\n    }\r\n\r\n    public markCustomWaveDirty(): void {\r\n        const hashMult: number = Synth.fittingPowerOfTwo(Config.spectrumMax + 2) - 1;\r\n        let hash: number = 0;\r\n        for (const point of this.spectrum) hash = ((hash * hashMult) + point) >>> 0;\r\n        this.hash = hash;\r\n    }\r\n}\r\n\r\nclass SpectrumWaveState {\r\n    public wave: Float32Array | null = null;\r\n    private _hash: number = -1;\r\n\r\n    public getCustomWave(settings: SpectrumWave, lowestOctave: number): Float32Array {\r\n        if (this._hash == settings.hash) return this.wave!;\r\n        this._hash = settings.hash;\r\n\r\n        const waveLength: number = Config.spectrumNoiseLength;\r\n        if (this.wave == null || this.wave.length != waveLength + 1) {\r\n            this.wave = new Float32Array(waveLength + 1);\r\n        }\r\n        const wave: Float32Array = this.wave;\r\n\r\n        for (let i: number = 0; i < waveLength; i++) {\r\n            wave[i] = 0;\r\n        }\r\n\r\n        const highestOctave: number = 14;\r\n        const falloffRatio: number = 0.25;\r\n        // Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\r\n        const pitchTweak: number[] = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(3 / 2), 5 / 7, 6 / 7];\r\n        function controlPointToOctave(point: number): number {\r\n            return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\r\n        }\r\n\r\n        let combinedAmplitude: number = 1;\r\n        for (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\r\n            const value1: number = (i <= 0) ? 0 : settings.spectrum[i - 1];\r\n            const value2: number = (i >= Config.spectrumControlPoints) ? settings.spectrum[Config.spectrumControlPoints - 1] : settings.spectrum[i];\r\n            const octave1: number = controlPointToOctave(i - 1);\r\n            let octave2: number = controlPointToOctave(i);\r\n            if (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\r\n            if (value1 == 0 && value2 == 0) continue;\r\n\r\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\r\n        }\r\n        if (settings.spectrum[Config.spectrumControlPoints - 1] > 0) {\r\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, settings.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\r\n        }\r\n\r\n        inverseRealFourierTransform(wave, waveLength);\r\n        scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\r\n\r\n        // Duplicate the first sample at the end for easier wrap-around interpolation.\r\n        wave[waveLength] = wave[0];\r\n\r\n        return wave;\r\n    }\r\n}\r\n\r\nexport class HarmonicsWave {\r\n    public harmonics: number[] = [];\r\n    public hash: number = -1;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n            this.harmonics[i] = 0;\r\n        }\r\n        this.harmonics[0] = Config.harmonicsMax;\r\n        this.harmonics[3] = Config.harmonicsMax;\r\n        this.harmonics[6] = Config.harmonicsMax;\r\n        this.markCustomWaveDirty();\r\n    }\r\n\r\n    public markCustomWaveDirty(): void {\r\n        const hashMult: number = Synth.fittingPowerOfTwo(Config.harmonicsMax + 2) - 1;\r\n        let hash: number = 0;\r\n        for (const point of this.harmonics) hash = ((hash * hashMult) + point) >>> 0;\r\n        this.hash = hash;\r\n    }\r\n}\r\n\r\nclass HarmonicsWaveState {\r\n    public wave: Float32Array | null = null;\r\n    private _hash: number = -1;\r\n    private _generatedForType: InstrumentType;\r\n\r\n    public getCustomWave(settings: HarmonicsWave, instrumentType: InstrumentType): Float32Array {\r\n        if (this._hash == settings.hash && this._generatedForType == instrumentType) return this.wave!;\r\n        this._hash = settings.hash;\r\n        this._generatedForType = instrumentType;\r\n\r\n        const harmonicsRendered: number = (instrumentType == InstrumentType.pickedString) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;\r\n\r\n        const waveLength: number = Config.harmonicsWavelength;\r\n        const retroWave: Float32Array = getDrumWave(0, null, null);\r\n\r\n        if (this.wave == null || this.wave.length != waveLength + 1) {\r\n            this.wave = new Float32Array(waveLength + 1);\r\n        }\r\n        const wave: Float32Array = this.wave;\r\n\r\n        for (let i: number = 0; i < waveLength; i++) {\r\n            wave[i] = 0;\r\n        }\r\n\r\n        const overallSlope: number = -0.25;\r\n        let combinedControlPointAmplitude: number = 1;\r\n\r\n        for (let harmonicIndex: number = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {\r\n            const harmonicFreq: number = harmonicIndex + 1;\r\n            let controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? settings.harmonics[harmonicIndex] : settings.harmonics[Config.harmonicsControlPoints - 1];\r\n            if (harmonicIndex >= Config.harmonicsControlPoints) {\r\n                controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);\r\n            }\r\n            const normalizedValue: number = controlValue / Config.harmonicsMax;\r\n            let amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\r\n            if (harmonicIndex < Config.harmonicsControlPoints) {\r\n                combinedControlPointAmplitude += amplitude;\r\n            }\r\n            amplitude *= Math.pow(harmonicFreq, overallSlope);\r\n\r\n            // Multiply all the sine wave amplitudes by 1 or -1 based on the LFSR\r\n            // retro wave (effectively random) to avoid egregiously tall spikes.\r\n            amplitude *= retroWave[harmonicIndex + 589];\r\n\r\n            wave[waveLength - harmonicFreq] = amplitude;\r\n        }\r\n\r\n        inverseRealFourierTransform(wave, waveLength);\r\n\r\n        // Limit the maximum wave amplitude.\r\n        const mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\r\n        for (let i: number = 0; i < wave.length; i++) wave[i] *= mult;\r\n\r\n        performIntegralOld(wave);\r\n\r\n        // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n        wave[waveLength] = wave[0];\r\n\r\n        return wave;\r\n    }\r\n}\r\n\r\nexport class FilterControlPoint {\r\n    public freq: number = 0;\r\n    public gain: number = Config.filterGainCenter;\r\n    public type: FilterType = FilterType.peak;\r\n\r\n    public set(freqSetting: number, gainSetting: number): void {\r\n        this.freq = freqSetting;\r\n        this.gain = gainSetting;\r\n    }\r\n\r\n    public getHz(): number {\r\n        return FilterControlPoint.getHzFromSettingValue(this.freq);\r\n    }\r\n\r\n    public static getHzFromSettingValue(value: number): number {\r\n        return Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);\r\n    }\r\n    public static getSettingValueFromHz(hz: number): number {\r\n        return Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;\r\n    }\r\n    public static getRoundedSettingValueFromHz(hz: number): number {\r\n        return Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));\r\n    }\r\n\r\n    public getLinearGain(peakMult: number = 1.0): number {\r\n        const power: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\r\n        const neutral: number = (this.type == FilterType.peak) ? 0.0 : -0.5;\r\n        const interpolatedPower: number = neutral + (power - neutral) * peakMult;\r\n        return Math.pow(2.0, interpolatedPower);\r\n    }\r\n    public static getRoundedSettingValueFromLinearGain(linearGain: number): number {\r\n        return Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));\r\n    }\r\n\r\n    public toCoefficients(filter: FilterCoefficients, sampleRate: number, freqMult: number = 1.0, peakMult: number = 1.0): void {\r\n        const cornerRadiansPerSample: number = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;\r\n        const linearGain: number = this.getLinearGain(peakMult);\r\n        switch (this.type) {\r\n            case FilterType.lowPass:\r\n                filter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\r\n                break;\r\n            case FilterType.highPass:\r\n                filter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\r\n                break;\r\n            case FilterType.peak:\r\n                filter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);\r\n                break;\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    public getVolumeCompensationMult(): number {\r\n        const octave: number = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;\r\n        const gainPow: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\r\n        switch (this.type) {\r\n            case FilterType.lowPass:\r\n                const freqRelativeTo8khz: number = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;\r\n                // Reverse the frequency warping from importing legacy simplified filters to imitate how the legacy filter cutoff setting affected volume.\r\n                const warpedFreq: number = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;\r\n                const warpedOctave: number = Math.log2(warpedFreq);\r\n                return Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));\r\n            case FilterType.highPass:\r\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));\r\n            case FilterType.peak:\r\n                const distanceFromCenter: number = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);\r\n                const freqLoudness: number = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);\r\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport class FilterSettings {\r\n    public readonly controlPoints: FilterControlPoint[] = [];\r\n    public controlPointCount: number = 0;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset(): void {\r\n        this.controlPointCount = 0;\r\n    }\r\n\r\n    addPoint(type: FilterType, freqSetting: number, gainSetting: number): void {\r\n        let controlPoint: FilterControlPoint;\r\n        if (this.controlPoints.length <= this.controlPointCount) {\r\n            controlPoint = new FilterControlPoint();\r\n            this.controlPoints[this.controlPointCount] = controlPoint;\r\n        } else {\r\n            controlPoint = this.controlPoints[this.controlPointCount];\r\n        }\r\n        this.controlPointCount++;\r\n        controlPoint.type = type;\r\n        controlPoint.set(freqSetting, gainSetting);\r\n    }\r\n\r\n    public toJsonObject(): Object {\r\n        const filterArray: any[] = [];\r\n        for (let i: number = 0; i < this.controlPointCount; i++) {\r\n            const point: FilterControlPoint = this.controlPoints[i];\r\n            filterArray.push({\r\n                \"type\": Config.filterTypeNames[point.type],\r\n                \"cutoffHz\": Math.round(point.getHz() * 100) / 100,\r\n                \"linearGain\": Math.round(point.getLinearGain() * 10000) / 10000,\r\n            });\r\n        }\r\n        return filterArray;\r\n    }\r\n\r\n    public fromJsonObject(filterObject: any): void {\r\n        this.controlPoints.length = 0;\r\n        if (filterObject) {\r\n            for (const pointObject of filterObject) {\r\n                const point: FilterControlPoint = new FilterControlPoint();\r\n                point.type = Config.filterTypeNames.indexOf(pointObject[\"type\"]);\r\n                if (<any>point.type == -1) point.type = FilterType.peak;\r\n                if (pointObject[\"cutoffHz\"] != undefined) {\r\n                    point.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject[\"cutoffHz\"]);\r\n                } else {\r\n                    point.freq = 0;\r\n                }\r\n                if (pointObject[\"linearGain\"] != undefined) {\r\n                    point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject[\"linearGain\"]);\r\n                } else {\r\n                    point.gain = Config.filterGainCenter;\r\n                }\r\n                this.controlPoints.push(point);\r\n            }\r\n        }\r\n        this.controlPointCount = this.controlPoints.length;\r\n    }\r\n\r\n    // Returns true if all filter control points match in number and type (but not freq/gain)\r\n    public static filtersCanMorph(filterA: FilterSettings, filterB: FilterSettings): boolean {\r\n        if (filterA.controlPointCount != filterB.controlPointCount)\r\n            return false;\r\n        for (let i: number = 0; i < filterA.controlPointCount; i++) {\r\n            if (filterA.controlPoints[i].type != filterB.controlPoints[i].type)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Interpolate two FilterSettings, where pos=0 is filterA and pos=1 is filterB\r\n    public static lerpFilters(filterA: FilterSettings, filterB: FilterSettings, pos: number): FilterSettings {\r\n\r\n        let lerpedFilter: FilterSettings = new FilterSettings();\r\n\r\n        // One setting or another is null, return the other.\r\n        if (filterA == null) {\r\n            return filterA;\r\n        }\r\n        if (filterB == null) {\r\n            return filterB;\r\n        }\r\n\r\n        pos = Math.max(0, Math.min(1, pos));\r\n\r\n        // Filter control points match in number and type\r\n        if (this.filtersCanMorph(filterA, filterB)) {\r\n            for (let i: number = 0; i < filterA.controlPointCount; i++) {\r\n                lerpedFilter.controlPoints[i] = new FilterControlPoint();\r\n                lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;\r\n                lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + (filterB.controlPoints[i].freq - filterA.controlPoints[i].freq) * pos;\r\n                lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (filterB.controlPoints[i].gain - filterA.controlPoints[i].gain) * pos;\r\n            }\r\n\r\n            lerpedFilter.controlPointCount = filterA.controlPointCount;\r\n\r\n            return lerpedFilter;\r\n        }\r\n        else {\r\n            // Not allowing morph of unmatching filters for now. It's a hornet's nest of problems, and I had it implemented and mostly working and it didn't sound very interesting since the shape becomes \"mushy\" in between\r\n            return (pos >= 1) ? filterB : filterA;\r\n        }\r\n    }\r\n\r\n    public convertLegacySettings(legacyCutoffSetting: number, legacyResonanceSetting: number, legacyEnv: Envelope): void {\r\n        this.reset();\r\n\r\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\r\n        const legacyFilterMax: number = 0.95;\r\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\r\n        const legacyFilterMaxResonance: number = 0.95;\r\n        const legacyFilterCutoffRange: number = 11;\r\n        const legacyFilterResonanceRange: number = 8;\r\n\r\n        const resonant: boolean = (legacyResonanceSetting > 1);\r\n        const firstOrder: boolean = (legacyResonanceSetting == 0);\r\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\r\n        const envDecays: boolean = (legacyEnv.type == EnvelopeType.flare || legacyEnv.type == EnvelopeType.twang || legacyEnv.type == EnvelopeType.decay || legacyEnv.type == EnvelopeType.noteSize);\r\n\r\n        const standardSampleRate: number = 48000;\r\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\r\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\r\n\r\n        if (legacyEnv.type == EnvelopeType.none && !resonant && cutoffAtMax) {\r\n            // The response is flat and there's no envelopes, so don't even bother adding any control points.\r\n        } else if (firstOrder) {\r\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\r\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\r\n            // However, BeepBox's original lowpass filters behaved oddly as they\r\n            // approach the nyquist frequency, so I've devised this curved conversion\r\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\r\n            const extraOctaves: number = 3.5;\r\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\r\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\r\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\r\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\r\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\r\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\r\n\r\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\r\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\r\n            const response: FrequencyResponse = new FrequencyResponse();\r\n            response.analyze(legacyFilter, finalRadians);\r\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\r\n\r\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\r\n            // Bias slightly toward 2^(-extraOctaves):\r\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\r\n            // Decaying envelopes move the cutoff frequency back into an area where the best approximation of the first order slope requires a lower gain setting.\r\n            if (envDecays) logGain = Math.min(logGain, -1.0);\r\n            const convertedGain: number = Math.pow(2.0, logGain);\r\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\r\n\r\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\r\n        } else {\r\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\r\n            const invertedGain: number = 0.5 / intendedGain;\r\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\r\n            const freqRatio: number = legacyRadians / maxRadians;\r\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\r\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\r\n            let curvedHz: number;\r\n            if (envDecays) {\r\n                curvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI);\r\n            } else {\r\n                curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\r\n            }\r\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\r\n\r\n            let legacyFilterGain: number;\r\n            if (envDecays) {\r\n                legacyFilterGain = intendedGain;\r\n            } else {\r\n                const legacyFilter: FilterCoefficients = new FilterCoefficients();\r\n                legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\r\n                const response: FrequencyResponse = new FrequencyResponse();\r\n                response.analyze(legacyFilter, curvedRadians);\r\n                legacyFilterGain = response.magnitude();\r\n            }\r\n            if (!resonant) legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));\r\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\r\n\r\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\r\n        }\r\n\r\n        // Added for JummBox - making a 0 point filter does not truncate control points!\r\n        this.controlPoints.length = this.controlPointCount;\r\n    }\r\n\r\n    // Similar to above, but purpose-fit for quick conversions in synth calls.\r\n    public convertLegacySettingsForSynth(legacyCutoffSetting: number, legacyResonanceSetting: number, allowFirstOrder: boolean = false): void {\r\n        this.reset();\r\n\r\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\r\n        const legacyFilterMax: number = 0.95;\r\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\r\n        const legacyFilterMaxResonance: number = 0.95;\r\n        const legacyFilterCutoffRange: number = 11;\r\n        const legacyFilterResonanceRange: number = 8;\r\n\r\n        const firstOrder: boolean = (legacyResonanceSetting == 0 && allowFirstOrder);\r\n        const standardSampleRate: number = 48000;\r\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\r\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\r\n\r\n        if (firstOrder) {\r\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\r\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\r\n            // However, BeepBox's original lowpass filters behaved oddly as they\r\n            // approach the nyquist frequency, so I've devised this curved conversion\r\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\r\n            const extraOctaves: number = 3.5;\r\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\r\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\r\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\r\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\r\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\r\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\r\n\r\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\r\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\r\n            const response: FrequencyResponse = new FrequencyResponse();\r\n            response.analyze(legacyFilter, finalRadians);\r\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\r\n\r\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\r\n            // Bias slightly toward 2^(-extraOctaves):\r\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\r\n            const convertedGain: number = Math.pow(2.0, logGain);\r\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\r\n\r\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\r\n        } else {\r\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\r\n            const invertedGain: number = 0.5 / intendedGain;\r\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\r\n            const freqRatio: number = legacyRadians / maxRadians;\r\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\r\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\r\n            let curvedHz: number;\r\n\r\n            curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\r\n            const freqSetting: number = FilterControlPoint.getSettingValueFromHz(curvedHz);\r\n\r\n            let legacyFilterGain: number;\r\n\r\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\r\n            legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\r\n            const response: FrequencyResponse = new FrequencyResponse();\r\n            response.analyze(legacyFilter, curvedRadians);\r\n            legacyFilterGain = response.magnitude();\r\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\r\n\r\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport class EnvelopeSettings {\r\n    public target: number = 0;\r\n    public index: number = 0;\r\n    public envelope: number = 0;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset(): void {\r\n        this.target = 0;\r\n        this.index = 0;\r\n        this.envelope = 0;\r\n    }\r\n\r\n    public toJsonObject(): Object {\r\n        const envelopeObject: any = {\r\n            \"target\": Config.instrumentAutomationTargets[this.target].name,\r\n            \"envelope\": Config.envelopes[this.envelope].name,\r\n        };\r\n        if (Config.instrumentAutomationTargets[this.target].maxCount > 1) {\r\n            envelopeObject[\"index\"] = this.index;\r\n        }\r\n        return envelopeObject;\r\n    }\r\n\r\n    public fromJsonObject(envelopeObject: any): void {\r\n        this.reset();\r\n\r\n        let target: AutomationTarget = Config.instrumentAutomationTargets.dictionary[envelopeObject[\"target\"]];\r\n        if (target == null) target = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\r\n        this.target = target.index;\r\n\r\n        let envelope: Envelope = Config.envelopes.dictionary[envelopeObject[\"envelope\"]];\r\n        if (envelope == null) envelope = Config.envelopes.dictionary[\"none\"];\r\n        this.envelope = envelope.index;\r\n\r\n        if (envelopeObject[\"index\"] != undefined) {\r\n            this.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject[\"index\"] | 0);\r\n        } else {\r\n            this.index = 0;\r\n        }\r\n    }\r\n}\r\n\r\n// Settings that were available to old versions of BeepBox but are no longer available in the\r\n// current version that need to be reinterpreted as a group to determine the best way to\r\n// represent them in the current version.\r\ninterface LegacySettings {\r\n    filterCutoff?: number;\r\n    filterResonance?: number;\r\n    filterEnvelope?: Envelope;\r\n    pulseEnvelope?: Envelope;\r\n    operatorEnvelopes?: Envelope[];\r\n    feedbackEnvelope?: Envelope;\r\n}\r\n\r\ninterface HeldMod {\r\n    volume: number;\r\n    channelIndex: number;\r\n    instrumentIndex: number;\r\n    setting: number;\r\n    holdFor: number;\r\n}\r\n\r\nexport class Instrument {\r\n    public type: InstrumentType = InstrumentType.chip;\r\n    public preset: number = 0;\r\n    public chipWave: number = 2;\r\n\t// advloop addition\r\n\tpublic isUsingAdvancedLoopControls: boolean = false;\r\n\tpublic chipWaveLoopStart: number = 0;\r\n\tpublic chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\r\n\tpublic chipWaveLoopMode: number = 0; // 0: loop, 1: ping-pong, 2: once, 3: play loop once\r\n\tpublic chipWavePlayBackwards: boolean = false;\r\n        public chipWaveStartOffset: number = 0;\r\n        // advloop addition\r\n    public chipNoise: number = 1;\r\n    public eqFilter: FilterSettings = new FilterSettings();\r\n    public eqFilterType: boolean = false;\r\n    public eqFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\r\n    public eqFilterSimplePeak: number = 0;\r\n    public noteFilter: FilterSettings = new FilterSettings();\r\n    public noteFilterType: boolean = false;\r\n    public noteFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\r\n    public noteFilterSimplePeak: number = 0;\r\n    public eqSubFilters: (FilterSettings | null)[] = [];\r\n    public noteSubFilters: (FilterSettings | null)[] = [];\r\n    public tmpEqFilterStart: FilterSettings | null;\r\n    public tmpEqFilterEnd: FilterSettings | null;\r\n    public tmpNoteFilterStart: FilterSettings | null;\r\n    public tmpNoteFilterEnd: FilterSettings | null;\r\n    public envelopes: EnvelopeSettings[] = [];\r\n    public fadeIn: number = 0;\r\n    public fadeOut: number = Config.fadeOutNeutral;\r\n    public envelopeCount: number = 0;\r\n    public transition: number = Config.transitions.dictionary[\"normal\"].index;\r\n    public pitchShift: number = 0;\r\n    public detune: number = 0;\r\n    public vibrato: number = 0;\r\n    public interval: number = 0;\r\n    public vibratoDepth: number = 0;\r\n    public vibratoSpeed: number = 10;\r\n    public vibratoDelay: number = 0;\r\n    public vibratoType: number = 0;\r\n    public envelopeSpeed: number = 12;\r\n    public discreteEnvelope: boolean = false;\r\n    public unison: number = 0;\r\n    public unisonVoices: number = 1;\r\n    public unisonSpread: number = 0.0;\r\n    public unisonOffset: number = 0.0;\r\n    public unisonExpression: number = 1.4;\r\n    public unisonSign: number = 1.0;\r\n    public effects: number = 0;\r\n    public chord: number = 1;\r\n    public volume: number = 0;\r\n    public pan: number = Config.panCenter;\r\n    public panDelay: number = 0;\r\n    public arpeggioSpeed: number = 12;\r\n    public fastTwoNoteArp: boolean = false;\r\n    public legacyTieOver: boolean = false;\r\n    public clicklessTransition: boolean = false;\r\n    public aliases: boolean = false;\r\n    public pulseWidth: number = Config.pulseWidthRange;\r\n    public decimalOffset: number = 0;\r\n    public supersawDynamism: number = Config.supersawDynamismMax;\r\n\tpublic supersawSpread: number = Math.ceil(Config.supersawSpreadMax / 2.0);\r\n\tpublic supersawShape: number = 0;\r\n\tpublic stringSustain: number = 10;\r\n\tpublic stringSustainType: SustainType = SustainType.acoustic;\r\n    public distortion: number = 0;\r\n    public bitcrusherFreq: number = 0;\r\n    public bitcrusherQuantization: number = 0;\r\n    public chorus: number = 0;\r\n    public reverb: number = 0;\r\n    public echoSustain: number = 0;\r\n    public echoDelay: number = 0;\r\n    public algorithm: number = 0;\r\n    public feedbackType: number = 0;\r\n    public algorithm6Op: number = 1;\r\n    public feedbackType6Op: number = 1;//default to not custom\r\n    public customAlgorithm: CustomAlgorithm = new CustomAlgorithm(); //{ name: \"1←4(2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] };\r\n    public customFeedbackType: CustomFeedBack = new CustomFeedBack(); //{ name: \"1↔4 2↔5 3↔6\", indices: [[3], [5], [6], [1], [2], [3]] };\r\n    public feedbackAmplitude: number = 0;\r\n    public customChipWave: Float32Array = new Float32Array(64);\r\n    public customChipWaveIntegral: Float32Array = new Float32Array(65); // One extra element for wrap-around in chipSynth.\r\n    public readonly operators: Operator[] = [];\r\n    public readonly spectrumWave: SpectrumWave;\r\n    public readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\r\n    public readonly drumsetEnvelopes: number[] = [];\r\n    public readonly drumsetSpectrumWaves: SpectrumWave[] = [];\r\n    public modChannels: number[] = [];\r\n    public modInstruments: number[] = [];\r\n    public modulators: number[] = [];\r\n    public modFilterTypes: number[] = [];\r\n    public invalidModulators: boolean[] = [];\r\n    constructor(isNoiseChannel: boolean, isModChannel: boolean) {\r\n\r\n        // @jummbus - My screed on how modulator arrays for instruments work, for the benefit of myself in the future, or whoever else.\r\n        //\r\n        // modulators[mod] is the index in Config.modulators to use, with \"none\" being the first entry.\r\n        //\r\n        // modChannels[mod] gives the index of a channel set for this mod. Two special values:\r\n        //   -2 \"none\"\r\n        //   -1 \"song\"\r\n        //   0+ actual channel index\r\n        //\r\n        // modInstruments[mod] gives the index of an instrument within the channel set for this mod. Again, two special values:\r\n        //   [0 ~ channel.instruments.length-1]     channel's instrument index\r\n        //   channel.instruments.length             \"all\"\r\n        //   channel.instruments.length+1           \"active\"\r\n        //\r\n        // modFilterTypes[mod] gives some info about the filter type: 0 is morph, 1+ is index in the dot selection array (dot 1 x, dot 1 y, dot 2 x...)\r\n        //   0  filter morph\r\n        //   1+ filter dot target, starting from dot 1 x and then dot 1 y, then repeating x, y for all dots in order. Note: odd values are always \"x\" targets, even are \"y\".\r\n\r\n        if (isModChannel) {\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                this.modChannels.push(-2);\r\n                this.modInstruments.push(0);\r\n                this.modulators.push(Config.modulators.dictionary[\"none\"].index);\r\n            }\r\n        }\r\n\r\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\r\n        for (let i: number = 0; i < Config.operatorCount+2; i++) {//hopefully won't break everything\r\n            this.operators[i] = new Operator(i);\r\n        }\r\n        for (let i: number = 0; i < Config.drumCount; i++) {\r\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n        }\r\n\r\n        for (let i = 0; i < 64; i++) {\r\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\r\n        }\r\n\r\n        let sum: number = 0.0;\r\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n            sum += this.customChipWave[i];\r\n        }\r\n        const average: number = sum / this.customChipWave.length;\r\n\r\n        // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n        let cumulative: number = 0;\r\n        let wavePrev: number = 0;\r\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n            cumulative += wavePrev;\r\n            wavePrev = this.customChipWave[i] - average;\r\n            this.customChipWaveIntegral[i] = cumulative;\r\n        }\r\n\r\n        // 65th, last sample is for anti-aliasing\r\n        this.customChipWaveIntegral[64] = 0.0;\r\n\r\n    }\r\n\r\n    public setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\r\n        // Mod channels are forced to one type.\r\n        if (isModChannel) type = InstrumentType.mod;\r\n        this.type = type;\r\n        this.preset = type;\r\n        this.volume = 0;\r\n        this.effects = (1 << EffectType.panning); // Panning enabled by default in JB.\r\n        this.chorus = Config.chorusRange - 1;\r\n        this.reverb = 0;\r\n        this.echoSustain = Math.floor((Config.echoSustainRange - 1) * 0.5);\r\n        this.echoDelay = Math.floor((Config.echoDelayRange - 1) * 0.5);\r\n        this.eqFilter.reset();\r\n        this.eqFilterType = false;\r\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\r\n        this.eqFilterSimplePeak = 0;\r\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n            this.eqSubFilters[i] = null;\r\n            this.noteSubFilters[i] = null;\r\n        }\r\n        this.noteFilter.reset();\r\n        this.noteFilterType = false;\r\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\r\n        this.noteFilterSimplePeak = 0;\r\n        this.distortion = Math.floor((Config.distortionRange - 1) * 0.75);\r\n        this.bitcrusherFreq = Math.floor((Config.bitcrusherFreqRange - 1) * 0.5)\r\n        this.bitcrusherQuantization = Math.floor((Config.bitcrusherQuantizationRange - 1) * 0.5);\r\n        this.pan = Config.panCenter;\r\n        this.panDelay = 0;\r\n        this.pitchShift = Config.pitchShiftCenter;\r\n        this.detune = Config.detuneCenter;\r\n        this.vibrato = 0;\r\n        this.unison = 0;\r\n        this.stringSustain = 10;\r\n        this.stringSustainType = Config.enableAcousticSustain ? SustainType.acoustic : SustainType.bright;\r\n        this.clicklessTransition = false;\r\n        this.arpeggioSpeed = 12;\r\n        this.envelopeSpeed = 12;\r\n        this.discreteEnvelope = false;\r\n        this.legacyTieOver = false;\r\n        this.aliases = false;\r\n        this.fadeIn = 0;\r\n        this.fadeOut = Config.fadeOutNeutral;\r\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\r\n        this.envelopeCount = 0;\r\n        switch (type) {\r\n            case InstrumentType.chip:\r\n                this.chipWave = 2;\r\n                // TODO: enable the chord effect?\r\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n\t\t\t\t\t\t\t\t // advloop addition\r\n                    this.isUsingAdvancedLoopControls = false;\r\n                    this.chipWaveLoopStart = 0;\r\n                    this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\r\n                    this.chipWaveLoopMode = 0;\r\n                    this.chipWavePlayBackwards = false;\r\n                    this.chipWaveStartOffset = 0;\r\n                    // advloop addition\r\n                break;\r\n            case InstrumentType.customChipWave:\r\n                this.chipWave = 2;\r\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                for (let i: number = 0; i < 64; i++) {\r\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\r\n                }\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    sum += this.customChipWave[i];\r\n                }\r\n                const average: number = sum / this.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = this.customChipWave[i] - average;\r\n                    this.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                this.customChipWaveIntegral[64] = 0.0;\r\n                break;\r\n            case InstrumentType.fm:\r\n                this.chord = Config.chords.dictionary[\"custom interval\"].index;\r\n                this.algorithm = 0;\r\n                this.feedbackType = 0;\r\n                this.feedbackAmplitude = 0;\r\n                for (let i: number = 0; i < this.operators.length; i++) {\r\n                    this.operators[i].reset(i);\r\n                }\r\n                break;\r\n            case InstrumentType.fm6op:\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.effects = 1;\r\n                this.chord = 3;\r\n                this.algorithm = 0;\r\n                this.feedbackType = 0;\r\n                this.algorithm6Op = 1;\r\n                this.feedbackType6Op = 1;\r\n                this.customAlgorithm.fromPreset(1);\r\n                this.feedbackAmplitude = 0;\r\n                for (let i: number = 0; i < this.operators.length; i++) {\r\n                    this.operators[i].reset(i);\r\n                }\r\n                break;\r\n            case InstrumentType.noise:\r\n                this.chipNoise = 1;\r\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                break;\r\n            case InstrumentType.spectrum:\r\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\r\n                this.spectrumWave.reset(isNoiseChannel);\r\n                break;\r\n            case InstrumentType.drumset:\r\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\r\n                for (let i: number = 0; i < Config.drumCount; i++) {\r\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\r\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n                    }\r\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\r\n                }\r\n                break;\r\n            case InstrumentType.harmonics:\r\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\r\n                this.harmonicsWave.reset();\r\n                break;\r\n            case InstrumentType.pwm:\r\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                this.pulseWidth = Config.pulseWidthRange;\r\n                this.decimalOffset = 0;\r\n                break;\r\n            case InstrumentType.pickedString:\r\n                this.chord = Config.chords.dictionary[\"strum\"].index;\r\n                this.harmonicsWave.reset();\r\n                break;\r\n            case InstrumentType.mod:\r\n                this.transition = 0;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 0;\r\n                this.chord = 0;\r\n                this.modChannels = [];\r\n                this.modInstruments = [];\r\n                this.modulators = [];\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    this.modChannels.push(-2);\r\n                    this.modInstruments.push(0);\r\n                    this.modulators.push(Config.modulators.dictionary[\"none\"].index);\r\n                    this.invalidModulators[mod] = false;\r\n                    this.modFilterTypes[mod] = 0;\r\n                }\r\n                break;\r\n            case InstrumentType.supersaw:\r\n\t\t\t\tthis.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n\t\t\t\tthis.supersawDynamism = Config.supersawDynamismMax;\r\n\t\t\t\tthis.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\r\n\t\t\t\tthis.supersawShape = 0;\r\n\t\t\t\tthis.pulseWidth = Config.pulseWidthRange - 1;\r\n                this.decimalOffset = 0;\r\n\t\t\t\tbreak;\r\n            default:\r\n                throw new Error(\"Unrecognized instrument type: \" + type);\r\n        }\r\n        // Chip/noise instruments had arpeggio and FM had custom interval but neither\r\n        // explicitly saved the chorus setting beforeSeven so enable it here. The effects\r\n        // will otherwise get overridden when reading SongTagCode.startInstrument.\r\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index) {\r\n            // Enable chord if it was used.\r\n            this.effects = (this.effects | (1 << EffectType.chord));\r\n        }\r\n    }\r\n\r\n    // (only) difference for JummBox: Returns whether or not the note filter was chosen for filter conversion.\r\n    public convertLegacySettings(legacySettings: LegacySettings, forceSimpleFilter: boolean): void {\r\n        let legacyCutoffSetting: number | undefined = legacySettings.filterCutoff;\r\n        let legacyResonanceSetting: number | undefined = legacySettings.filterResonance;\r\n        let legacyFilterEnv: Envelope | undefined = legacySettings.filterEnvelope;\r\n        let legacyPulseEnv: Envelope | undefined = legacySettings.pulseEnvelope;\r\n        let legacyOperatorEnvelopes: Envelope[] | undefined = legacySettings.operatorEnvelopes;\r\n        let legacyFeedbackEnv: Envelope | undefined = legacySettings.feedbackEnvelope;\r\n\r\n        // legacy defaults:\r\n        if (legacyCutoffSetting == undefined) legacyCutoffSetting = (this.type == InstrumentType.chip) ? 6 : 10;\r\n        if (legacyResonanceSetting == undefined) legacyResonanceSetting = 0;\r\n        if (legacyFilterEnv == undefined) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\r\n        if (legacyPulseEnv == undefined) legacyPulseEnv = Config.envelopes.dictionary[(this.type == InstrumentType.pwm) ? \"twang 2\" : \"none\"];\r\n        if (legacyOperatorEnvelopes == undefined) legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == InstrumentType.fm) ? \"note size\" : \"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"]];\r\n        if (legacyFeedbackEnv == undefined) legacyFeedbackEnv = Config.envelopes.dictionary[\"none\"];\r\n\r\n        // The \"punch\" envelope is special: it goes *above* the chosen cutoff. But if the cutoff was already at the max, it couldn't go any higher... except in the current version of BeepBox I raised the max cutoff so it *can* but then it sounds different, so to preserve the original sound let's just remove the punch envelope.\r\n        const legacyFilterCutoffRange: number = 11;\r\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\r\n        if (cutoffAtMax && legacyFilterEnv.type == EnvelopeType.punch) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\r\n\r\n        const carrierCount: number = Config.algorithms[this.algorithm].carrierCount;\r\n        let noCarriersControlledByNoteSize: boolean = true;\r\n        let allCarriersControlledByNoteSize: boolean = true;\r\n        let noteSizeControlsSomethingElse: boolean = (legacyFilterEnv.type == EnvelopeType.noteSize) || (legacyPulseEnv.type == EnvelopeType.noteSize);\r\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\r\n            noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == EnvelopeType.noteSize);\r\n            for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\r\n                if (i < carrierCount) {\r\n                    if (legacyOperatorEnvelopes[i].type != EnvelopeType.noteSize) {\r\n                        allCarriersControlledByNoteSize = false;\r\n                    } else {\r\n                        noCarriersControlledByNoteSize = false;\r\n                    }\r\n                } else {\r\n                    noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == EnvelopeType.noteSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.envelopeCount = 0;\r\n\r\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\r\n            if (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {\r\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteVolume\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\r\n            } else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {\r\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"none\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\r\n            }\r\n        }\r\n\r\n        if (legacyFilterEnv.type == EnvelopeType.none) {\r\n            this.noteFilter.reset();\r\n            this.noteFilterType = false;\r\n            this.eqFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\r\n            this.effects &= ~(1 << EffectType.noteFilter);\r\n            if (forceSimpleFilter || this.eqFilterType) {\r\n                this.eqFilterType = true;\r\n                this.eqFilterSimpleCut = legacyCutoffSetting;\r\n                this.eqFilterSimplePeak = legacyResonanceSetting;\r\n            }\r\n        } else {\r\n            this.eqFilter.reset();\r\n\r\n            this.eqFilterType = false;\r\n            this.noteFilterType = false;\r\n            this.noteFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\r\n            this.effects |= 1 << EffectType.noteFilter;\r\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteFilterAllFreqs\"].index, 0, legacyFilterEnv.index);\r\n            if (forceSimpleFilter || this.noteFilterType) {\r\n                this.noteFilterType = true;\r\n                this.noteFilterSimpleCut = legacyCutoffSetting;\r\n                this.noteFilterSimplePeak = legacyResonanceSetting;\r\n            }\r\n        }\r\n\r\n        if (legacyPulseEnv.type != EnvelopeType.none) {\r\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pulseWidth\"].index, 0, legacyPulseEnv.index);\r\n        }\r\n\r\n        for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\r\n            if (i < carrierCount && allCarriersControlledByNoteSize) continue;\r\n            if (legacyOperatorEnvelopes[i].type != EnvelopeType.none) {\r\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorAmplitude\"].index, i, legacyOperatorEnvelopes[i].index);\r\n            }\r\n        }\r\n\r\n        if (legacyFeedbackEnv.type != EnvelopeType.none) {\r\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"feedbackAmplitude\"].index, 0, legacyFeedbackEnv.index);\r\n        }\r\n    }\r\n\r\n    public toJsonObject(): Object {\r\n        const instrumentObject: any = {\r\n            \"type\": Config.instrumentTypeNames[this.type],\r\n            \"volume\": this.volume,\r\n            \"eqFilter\": this.eqFilter.toJsonObject(),\r\n            \"eqFilterType\": this.eqFilterType,\r\n            \"eqSimpleCut\": this.eqFilterSimpleCut,\r\n            \"eqSimplePeak\": this.eqFilterSimplePeak,\r\n            \"envelopeSpeed\": this.envelopeSpeed,\r\n            \"discreteEnvelope\": this.discreteEnvelope\r\n        };\r\n\r\n        if (this.preset != this.type) {\r\n            instrumentObject[\"preset\"] = this.preset;\r\n        }\r\n\r\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n            if (this.eqSubFilters[i] != null)\r\n                instrumentObject[\"eqSubFilters\" + i] = this.eqSubFilters[i]!.toJsonObject();\r\n        }\r\n\r\n        const effects: string[] = [];\r\n        for (const effect of Config.effectOrder) {\r\n            if (this.effects & (1 << effect)) {\r\n                effects.push(Config.effectNames[effect]);\r\n            }\r\n        }\r\n        instrumentObject[\"effects\"] = effects;\r\n\r\n\r\n        if (effectsIncludeTransition(this.effects)) {\r\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\r\n            instrumentObject[\"clicklessTransition\"] = this.clicklessTransition;\r\n        }\r\n        if (effectsIncludeChord(this.effects)) {\r\n            instrumentObject[\"chord\"] = this.getChord().name;\r\n            instrumentObject[\"fastTwoNoteArp\"] = this.fastTwoNoteArp;\r\n            instrumentObject[\"arpeggioSpeed\"] = this.arpeggioSpeed;\r\n        }\r\n        if (effectsIncludePitchShift(this.effects)) {\r\n            instrumentObject[\"pitchShiftSemitones\"] = this.pitchShift;\r\n        }\r\n        if (effectsIncludeDetune(this.effects)) {\r\n            instrumentObject[\"detuneCents\"] = Synth.detuneToCents(this.detune);\r\n        }\r\n        if (effectsIncludeVibrato(this.effects)) {\r\n            if (this.vibrato == -1) {\r\n                this.vibrato = 5;\r\n            }\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n            instrumentObject[\"vibratoDepth\"] = this.vibratoDepth;\r\n            instrumentObject[\"vibratoDelay\"] = this.vibratoDelay;\r\n            instrumentObject[\"vibratoSpeed\"] = this.vibratoSpeed;\r\n            instrumentObject[\"vibratoType\"] = this.vibratoType;\r\n        }\r\n        if (effectsIncludeNoteFilter(this.effects)) {\r\n            instrumentObject[\"noteFilterType\"] = this.noteFilterType;\r\n            instrumentObject[\"noteSimpleCut\"] = this.noteFilterSimpleCut;\r\n            instrumentObject[\"noteSimplePeak\"] = this.noteFilterSimplePeak;\r\n            instrumentObject[\"noteFilter\"] = this.noteFilter.toJsonObject();\r\n\r\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                if (this.noteSubFilters[i] != null)\r\n                    instrumentObject[\"noteSubFilters\" + i] = this.noteSubFilters[i]!.toJsonObject();\r\n            }\r\n        }\r\n        if (effectsIncludeDistortion(this.effects)) {\r\n            instrumentObject[\"distortion\"] = Math.round(100 * this.distortion / (Config.distortionRange - 1));\r\n            instrumentObject[\"aliases\"] = this.aliases;\r\n        }\r\n        if (effectsIncludeBitcrusher(this.effects)) {\r\n            instrumentObject[\"bitcrusherOctave\"] = (Config.bitcrusherFreqRange - 1 - this.bitcrusherFreq) * Config.bitcrusherOctaveStep;\r\n            instrumentObject[\"bitcrusherQuantization\"] = Math.round(100 * this.bitcrusherQuantization / (Config.bitcrusherQuantizationRange - 1));\r\n        }\r\n        if (effectsIncludePanning(this.effects)) {\r\n            instrumentObject[\"pan\"] = Math.round(100 * (this.pan - Config.panCenter) / Config.panCenter);\r\n            instrumentObject[\"panDelay\"] = this.panDelay;\r\n        }\r\n        if (effectsIncludeChorus(this.effects)) {\r\n            instrumentObject[\"chorus\"] = Math.round(100 * this.chorus / (Config.chorusRange - 1));\r\n        }\r\n        if (effectsIncludeEcho(this.effects)) {\r\n            instrumentObject[\"echoSustain\"] = Math.round(100 * this.echoSustain / (Config.echoSustainRange - 1));\r\n            instrumentObject[\"echoDelayBeats\"] = Math.round(1000 * (this.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat)) / 1000;\r\n        }\r\n        if (effectsIncludeReverb(this.effects)) {\r\n            instrumentObject[\"reverb\"] = Math.round(100 * this.reverb / (Config.reverbRange - 1));\r\n        }\r\n\r\n        if (this.type != InstrumentType.drumset) {\r\n            instrumentObject[\"fadeInSeconds\"] = Math.round(10000 * Synth.fadeInSettingToSeconds(this.fadeIn)) / 10000;\r\n            instrumentObject[\"fadeOutTicks\"] = Synth.fadeOutSettingToTicks(this.fadeOut);\r\n        }\r\n\r\n        if (this.type == InstrumentType.harmonics || this.type == InstrumentType.pickedString) {\r\n            instrumentObject[\"harmonics\"] = [];\r\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\r\n            }\r\n        }\r\n\r\n        if (this.type == InstrumentType.noise) {\r\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\r\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\r\n            if (this.unison == Config.unisons.length) {\r\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\r\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\r\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\r\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\r\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\r\n            }\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            instrumentObject[\"spectrum\"] = [];\r\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\r\n            }\r\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\r\n            if (this.unison == Config.unisons.length) {\r\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\r\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\r\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\r\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\r\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\r\n            }\r\n        } else if (this.type == InstrumentType.drumset) {\r\n            instrumentObject[\"drums\"] = [];\r\n            for (let j: number = 0; j < Config.drumCount; j++) {\r\n                const spectrum: number[] = [];\r\n                for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\r\n                }\r\n                instrumentObject[\"drums\"][j] = {\r\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\r\n                    \"spectrum\": spectrum,\r\n                };\r\n            }\r\n        } else if (this.type == InstrumentType.chip) {\r\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n            // should this unison pushing code be turned into a function..?\r\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;   \r\n            // these don't need to be pushed if custom unisons aren't being used\r\n            if (this.unison == Config.unisons.length) {\r\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\r\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\r\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\r\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\r\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\r\n            }\r\n\r\n\t\t\t\t\t\t// advloop addition\r\n                instrumentObject[\"isUsingAdvancedLoopControls\"] = this.isUsingAdvancedLoopControls;\r\n                instrumentObject[\"chipWaveLoopStart\"] = this.chipWaveLoopStart;\r\n                instrumentObject[\"chipWaveLoopEnd\"] = this.chipWaveLoopEnd;\r\n                instrumentObject[\"chipWaveLoopMode\"] = this.chipWaveLoopMode;\r\n                instrumentObject[\"chipWavePlayBackwards\"] = this.chipWavePlayBackwards;\r\n                instrumentObject[\"chipWaveStartOffset\"] = this.chipWaveStartOffset;\r\n                // advloop addition\r\n        } else if (this.type == InstrumentType.pwm) {\r\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\r\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\r\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\r\n            if (this.unison == Config.unisons.length) {\r\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\r\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\r\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\r\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\r\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\r\n            }\r\n        } else if (this.type == InstrumentType.supersaw) {\r\n\t\t\tinstrumentObject[\"pulseWidth\"] = this.pulseWidth;\r\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\r\n\t\t\tinstrumentObject[\"dynamism\"] = Math.round(100 * this.supersawDynamism / Config.supersawDynamismMax);\r\n\t\t\tinstrumentObject[\"spread\"] = Math.round(100 * this.supersawSpread / Config.supersawSpreadMax);\r\n\t\t\tinstrumentObject[\"shape\"] = Math.round(100 * this.supersawShape / Config.supersawShapeMax);\r\n\t\t} else if (this.type == InstrumentType.pickedString) {\r\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\r\n            if (this.unison == Config.unisons.length) {\r\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\r\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\r\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\r\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\r\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\r\n            }\r\n            instrumentObject[\"stringSustain\"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));\r\n            if (Config.enableAcousticSustain) {\r\n\t\t\t\tinstrumentObject[\"stringSustainType\"] = Config.sustainTypeNames[this.stringSustainType];\r\n\t\t\t}\r\n        } else if (this.type == InstrumentType.harmonics) {\r\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\r\n            if (this.unison == Config.unisons.length) {\r\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\r\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\r\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\r\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\r\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\r\n            }\r\n        } else if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\r\n            const operatorArray: Object[] = [];\r\n            for (const operator of this.operators) {\r\n                operatorArray.push({\r\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\r\n                    \"amplitude\": operator.amplitude,\r\n                    \"waveform\": Config.operatorWaves[operator.waveform].name,\r\n                    \"pulseWidth\": operator.pulseWidth,\r\n                });\r\n            }\r\n            if(this.type == InstrumentType.fm){\r\n                instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\r\n                instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\r\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\r\n                instrumentObject[\"operators\"] = operatorArray;\r\n            } else {\r\n                instrumentObject[\"algorithm\"] = Config.algorithms6Op[this.algorithm6Op].name;\r\n                instrumentObject[\"feedbackType\"] = Config.feedbacks6Op[this.feedbackType6Op].name;\r\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\r\n                if(this.algorithm6Op == 0){\r\n                    const customAlgorithm: any = {};\r\n                    customAlgorithm[\"mods\"] = this.customAlgorithm.modulatedBy;\r\n                    customAlgorithm[\"carrierCount\"] = this.customAlgorithm.carrierCount;\r\n                    instrumentObject[\"customAlgorithm\"] = customAlgorithm;\r\n                }\r\n                if(this.feedbackType6Op == 0){\r\n                    const customFeedback: any = {};\r\n                    customFeedback[\"mods\"] = this.customFeedbackType.indices;\r\n                    instrumentObject[\"customFeedback\"] = customFeedback;\r\n                }\r\n\r\n                instrumentObject[\"operators\"] = operatorArray;\r\n            }\r\n        } else if (this.type == InstrumentType.customChipWave) {\r\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\r\n            if (this.unison == Config.unisons.length) {\r\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\r\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\r\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\r\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\r\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\r\n            }\r\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\r\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\r\n            for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\r\n                // Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\r\n                //instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\r\n            }\r\n        } else if (this.type == InstrumentType.mod) {\r\n            instrumentObject[\"modChannels\"] = [];\r\n            instrumentObject[\"modInstruments\"] = [];\r\n            instrumentObject[\"modSettings\"] = [];\r\n            instrumentObject[\"modFilterTypes\"] = [];\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\r\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\r\n                instrumentObject[\"modSettings\"][mod] = this.modulators[mod];\r\n                instrumentObject[\"modFilterTypes\"][mod] = this.modFilterTypes[mod];\r\n            }\r\n        } else {\r\n            throw new Error(\"Unrecognized instrument type\");\r\n        }\r\n\r\n        const envelopes: any[] = [];\r\n        for (let i = 0; i < this.envelopeCount; i++) {\r\n            envelopes.push(this.envelopes[i].toJsonObject());\r\n        }\r\n        instrumentObject[\"envelopes\"] = envelopes;\r\n\r\n        return instrumentObject;\r\n    }\r\n\r\n\r\n    public fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean, legacyGlobalReverb: number = 0, jsonFormat: string = Config.jsonFormat): void {\r\n        if (instrumentObject == undefined) instrumentObject = {};\r\n\r\n        const format: string = jsonFormat.toLowerCase();\r\n\r\n        let type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\r\n        // SynthBox support\r\n        if ((format == \"synthbox\") && (instrumentObject[\"type\"] == \"FM\")) type = Config.instrumentTypeNames.indexOf(\"FM6op\");\r\n        if (<any>type == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip);\r\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\r\n\r\n        this.effects &= ~(1 << EffectType.panning);\r\n\r\n        if (instrumentObject[\"preset\"] != undefined) {\r\n            this.preset = instrumentObject[\"preset\"] >>> 0;\r\n        }\r\n\r\n        if (instrumentObject[\"volume\"] != undefined) {\r\n            if (format == \"jummbox\" || format == \"midbox\" || format == \"synthbox\" || format == \"goldbox\" || format == \"paandorasbox\" || format == \"ultrabox\") {\r\n                this.volume = clamp(-Config.volumeRange / 2, (Config.volumeRange / 2) + 1, instrumentObject[\"volume\"] | 0);\r\n            } else {\r\n                this.volume = Math.round(-clamp(0, 8, Math.round(5 - (instrumentObject[\"volume\"] | 0) / 20)) * 25.0 / 7.0);\r\n            }\r\n        } else {\r\n            this.volume = 0;\r\n        }\r\n\r\n        if (instrumentObject[\"envelopeSpeed\"] != undefined) {\r\n            this.envelopeSpeed = clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, instrumentObject[\"envelopeSpeed\"] | 0);\r\n        } else {\r\n            this.envelopeSpeed = 12;\r\n        }\r\n\r\n        if (instrumentObject[\"discreteEnvelope\"] != undefined) {\r\n            this.discreteEnvelope = instrumentObject[\"discreteEnvelope\"];\r\n        }\r\n        else {\r\n            this.discreteEnvelope = false;\r\n        }\r\n\r\n        if (Array.isArray(instrumentObject[\"effects\"])) {\r\n            let effects: number = 0;\r\n            for (let i: number = 0; i < instrumentObject[\"effects\"].length; i++) {\r\n                effects = effects | (1 << Config.effectNames.indexOf(instrumentObject[\"effects\"][i]));\r\n            }\r\n            this.effects = (effects & ((1 << EffectType.length) - 1));\r\n        } else {\r\n            // The index of these names is reinterpreted as a bitfield, which relies on reverb and chorus being the first effects!\r\n            const legacyEffectsNames: string[] = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\r\n            this.effects = legacyEffectsNames.indexOf(instrumentObject[\"effects\"]);\r\n            if (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\r\n        }\r\n\r\n        this.transition = Config.transitions.dictionary[\"normal\"].index; // default value.\r\n        const transitionProperty: any = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so check that too.\r\n        if (transitionProperty != undefined) {\r\n            let transition: Transition | undefined = Config.transitions.dictionary[transitionProperty];\r\n            if (instrumentObject[\"fadeInSeconds\"] == undefined || instrumentObject[\"fadeOutTicks\"] == undefined) {\r\n                const legacySettings = (<any>{\r\n                    \"binary\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\r\n                    \"seamless\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\r\n                    \"sudden\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\r\n                    \"hard\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\r\n                    \"smooth\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                    \"soft\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                    // Note that the old slide transition has the same name as a new slide transition that is different.\r\n                    // Only apply legacy settings if the instrument JSON was created before, based on the presence\r\n                    // of the fade in/out fields.\r\n                    \"slide\": { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                    \"cross fade\": { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\r\n                    \"hard fade\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\r\n                    \"medium fade\": { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\r\n                    \"soft fade\": { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\r\n                })[transitionProperty];\r\n                if (legacySettings != undefined) {\r\n                    transition = Config.transitions.dictionary[legacySettings.transition];\r\n                    // These may be overridden below.\r\n                    this.fadeIn = Synth.secondsToFadeInSetting(legacySettings.fadeInSeconds);\r\n                    this.fadeOut = Synth.ticksToFadeOutSetting(legacySettings.fadeOutTicks);\r\n                }\r\n            }\r\n            if (transition != undefined) this.transition = transition.index;\r\n\r\n            if (this.transition != Config.transitions.dictionary[\"normal\"].index) {\r\n                // Enable transition if it was used.\r\n                this.effects = (this.effects | (1 << EffectType.transition));\r\n            }\r\n        }\r\n\r\n        // Overrides legacy settings in transition above.\r\n        if (instrumentObject[\"fadeInSeconds\"] != undefined) {\r\n            this.fadeIn = Synth.secondsToFadeInSetting(+instrumentObject[\"fadeInSeconds\"]);\r\n        }\r\n        if (instrumentObject[\"fadeOutTicks\"] != undefined) {\r\n            this.fadeOut = Synth.ticksToFadeOutSetting(+instrumentObject[\"fadeOutTicks\"]);\r\n        }\r\n\r\n        {\r\n            // Note that the chord setting may be overridden by instrumentObject[\"chorus\"] below.\r\n            const chordProperty: any = instrumentObject[\"chord\"];\r\n            const legacyChordNames: Dictionary<string> = { \"harmony\": \"simultaneous\" };\r\n            const chord: Chord | undefined = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];\r\n            if (chord != undefined) {\r\n                this.chord = chord.index;\r\n            } else {\r\n                // Different instruments have different default chord types based on historical behaviour.\r\n                if (this.type == InstrumentType.noise) {\r\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                } else if (this.type == InstrumentType.pickedString) {\r\n                    this.chord = Config.chords.dictionary[\"strum\"].index;\r\n                } else if (this.type == InstrumentType.chip) {\r\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\r\n                } else if (this.type == InstrumentType.fm||this.type == InstrumentType.fm6op) {\r\n                    this.chord = Config.chords.dictionary[\"custom interval\"].index;\r\n                } else {\r\n                    this.chord = Config.chords.dictionary[\"simultaneous\"].index;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.unison = Config.unisons.dictionary[\"none\"].index; // default value.\r\n        const unisonProperty: any = instrumentObject[\"unison\"] || instrumentObject[\"interval\"] || instrumentObject[\"chorus\"]; // The unison property has gone by various names in the past.\r\n        if (unisonProperty != undefined) {\r\n            const legacyChorusNames: Dictionary<string> = { \"union\": \"none\", \"fifths\": \"fifth\", \"octaves\": \"octave\", \"error\": \"voiced\" };\r\n            const unison: Unison | undefined = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];\r\n            if (unison != undefined) this.unison = unison.index;\r\n            if (unisonProperty == \"custom\") this.unison = Config.unisons.length;\r\n        }\r\n        //clamp these???\r\n        this.unisonVoices = (instrumentObject[\"unisonVoices\"] == undefined) ? Config.unisons[this.unison].voices : instrumentObject[\"unisonVoices\"];\r\n        this.unisonSpread = (instrumentObject[\"unisonSpread\"] == undefined) ? Config.unisons[this.unison].spread : instrumentObject[\"unisonSpread\"];\r\n        this.unisonOffset = (instrumentObject[\"unisonOffset\"] == undefined) ? Config.unisons[this.unison].offset : instrumentObject[\"unisonOffset\"];\r\n        this.unisonExpression = (instrumentObject[\"unisonExpression\"] == undefined) ? Config.unisons[this.unison].expression : instrumentObject[\"unisonExpression\"];\r\n        this.unisonSign = (instrumentObject[\"unisonSign\"] == undefined) ? Config.unisons[this.unison].sign : instrumentObject[\"unisonSign\"];\r\n\r\n        if (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n            this.unison = Config.unisons.dictionary[\"hum\"].index;\r\n            this.chord = Config.chords.dictionary[\"custom interval\"].index;\r\n        }\r\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index && !Array.isArray(instrumentObject[\"effects\"])) {\r\n            // Enable chord if it was used.\r\n            this.effects = (this.effects | (1 << EffectType.chord));\r\n        }\r\n\r\n        if (instrumentObject[\"pitchShiftSemitones\"] != undefined) {\r\n            this.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject[\"pitchShiftSemitones\"]));\r\n        }\r\n        // modbox pitch shift, known in that mod as \"octave offset\"\r\n        if (instrumentObject[\"octoff\"] != undefined) {\r\n            let potentialPitchShift: string = instrumentObject[\"octoff\"];\r\n            this.effects = (this.effects | (1 << EffectType.pitchShift));\r\n            \r\n            if ((potentialPitchShift == \"+1 (octave)\") || (potentialPitchShift == \"+2 (2 octaves)\")) {\r\n                this.pitchShift = 24;\r\n            } else if ((potentialPitchShift == \"+1/2 (fifth)\") || (potentialPitchShift == \"+1 1/2 (octave and fifth)\")) {\r\n                this.pitchShift = 18;\r\n            } else if ((potentialPitchShift == \"-1 (octave)\") || (potentialPitchShift == \"-2 (2 octaves\")) { //this typo is in modbox\r\n                this.pitchShift = 0;\r\n            } else if ((potentialPitchShift == \"-1/2 (fifth)\") || (potentialPitchShift == \"-1 1/2 (octave and fifth)\")) {\r\n                this.pitchShift = 6;\r\n            } else {\r\n                this.pitchShift = 12;\r\n            }\r\n        }\r\n        if (instrumentObject[\"detuneCents\"] != undefined) {\r\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, Math.round(Synth.centsToDetune(+instrumentObject[\"detuneCents\"])));\r\n        }\r\n\r\n        this.vibrato = Config.vibratos.dictionary[\"none\"].index; // default value.\r\n        const vibratoProperty: any = instrumentObject[\"vibrato\"] || instrumentObject[\"effect\"]; // The vibrato property was previously called \"effect\", not to be confused with the current \"effects\".\r\n        if (vibratoProperty != undefined) {\r\n\r\n            const legacyVibratoNames: Dictionary<string> = { \"vibrato light\": \"light\", \"vibrato delayed\": \"delayed\", \"vibrato heavy\": \"heavy\" };\r\n            const vibrato: Vibrato | undefined = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];\r\n            if (vibrato != undefined)\r\n                this.vibrato = vibrato.index;\r\n            else if (vibratoProperty == \"custom\")\r\n                this.vibrato = Config.vibratos.length; // custom\r\n\r\n            if (this.vibrato == Config.vibratos.length) {\r\n                this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                this.vibratoType = instrumentObject[\"vibratoType\"];\r\n            }\r\n            else { // Set defaults for the vibrato profile\r\n                this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                this.vibratoDelay = Config.vibratos[this.vibrato].delayTicks / 2;\r\n                this.vibratoSpeed = 10; // default;\r\n                this.vibratoType = Config.vibratos[this.vibrato].type;\r\n            }\r\n\r\n            // Old songs may have a vibrato effect without explicitly enabling it.\r\n            if (vibrato != Config.vibratos.dictionary[\"none\"]) {\r\n                this.effects = (this.effects | (1 << EffectType.vibrato));\r\n            }\r\n        }\r\n\r\n        if (instrumentObject[\"pan\"] != undefined) {\r\n            this.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\r\n        } else if (instrumentObject[\"ipan\"] != undefined) {\r\n            // support for modbox fixed\r\n            this.pan = clamp(0, Config.panMax + 1, Config.panCenter + (instrumentObject[\"ipan\"] * -50));\r\n        } else {\r\n            this.pan = Config.panCenter;\r\n        }\r\n\r\n        // Old songs may have a panning effect without explicitly enabling it.\r\n        if (this.pan != Config.panCenter) {\r\n            this.effects = (this.effects | (1 << EffectType.panning));\r\n        }\r\n\r\n        if (instrumentObject[\"panDelay\"] != undefined) {\r\n            this.panDelay = (instrumentObject[\"panDelay\"] | 0);\r\n        } else {\r\n            this.panDelay = 0;\r\n        }\r\n\r\n        if (instrumentObject[\"detune\"] != undefined) {\r\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\r\n        }\r\n        else if (instrumentObject[\"detuneCents\"] == undefined) {\r\n            this.detune = Config.detuneCenter;\r\n        }\r\n\r\n        if (instrumentObject[\"distortion\"] != undefined) {\r\n            this.distortion = clamp(0, Config.distortionRange, Math.round((Config.distortionRange - 1) * (instrumentObject[\"distortion\"] | 0) / 100));\r\n        }\r\n\r\n        if (instrumentObject[\"bitcrusherOctave\"] != undefined) {\r\n            this.bitcrusherFreq = Config.bitcrusherFreqRange - 1 - (+instrumentObject[\"bitcrusherOctave\"]) / Config.bitcrusherOctaveStep;\r\n        }\r\n        if (instrumentObject[\"bitcrusherQuantization\"] != undefined) {\r\n            this.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, Math.round((Config.bitcrusherQuantizationRange - 1) * (instrumentObject[\"bitcrusherQuantization\"] | 0) / 100));\r\n        }\r\n\r\n        if (instrumentObject[\"echoSustain\"] != undefined) {\r\n            this.echoSustain = clamp(0, Config.echoSustainRange, Math.round((Config.echoSustainRange - 1) * (instrumentObject[\"echoSustain\"] | 0) / 100));\r\n        }\r\n        if (instrumentObject[\"echoDelayBeats\"] != undefined) {\r\n            this.echoDelay = clamp(0, Config.echoDelayRange, Math.round((+instrumentObject[\"echoDelayBeats\"]) * (Config.ticksPerPart * Config.partsPerBeat) / Config.echoDelayStepTicks - 1.0));\r\n        }\r\n\r\n        if (!isNaN(instrumentObject[\"chorus\"])) {\r\n            this.chorus = clamp(0, Config.chorusRange, Math.round((Config.chorusRange - 1) * (instrumentObject[\"chorus\"] | 0) / 100));\r\n        }\r\n\r\n        if (instrumentObject[\"reverb\"] != undefined) {\r\n            this.reverb = clamp(0, Config.reverbRange, Math.round((Config.reverbRange - 1) * (instrumentObject[\"reverb\"] | 0) / 100));\r\n        } else {\r\n            this.reverb = legacyGlobalReverb;\r\n        }\r\n\r\n        if (instrumentObject[\"pulseWidth\"] != undefined) {\r\n            this.pulseWidth = clamp(1, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\r\n        } else {\r\n            this.pulseWidth = Config.pulseWidthRange;\r\n        }\r\n\r\n        if (instrumentObject[\"decimalOffset\"] != undefined) {\r\n            this.decimalOffset = clamp(0, 99 + 1, Math.round(instrumentObject[\"decimalOffset\"]));\r\n        } else {\r\n            this.decimalOffset = 0;\r\n        }\r\n\r\n        if (instrumentObject[\"dynamism\"] != undefined) {\r\n\t\t\tthis.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, Math.round(Config.supersawDynamismMax * (instrumentObject[\"dynamism\"] | 0) / 100));\r\n\t\t} else {\r\n\t\t\tthis.supersawDynamism = Config.supersawDynamismMax;\r\n\t\t}\r\n\t\tif (instrumentObject[\"spread\"] != undefined) {\r\n\t\t\tthis.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, Math.round(Config.supersawSpreadMax * (instrumentObject[\"spread\"] | 0) / 100));\r\n\t\t} else {\r\n\t\t\tthis.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\r\n\t\t}\r\n\t\tif (instrumentObject[\"shape\"] != undefined) {\r\n\t\t\tthis.supersawShape = clamp(0, Config.supersawShapeMax + 1, Math.round(Config.supersawShapeMax * (instrumentObject[\"shape\"] | 0) / 100));\r\n\t\t} else {\r\n\t\t\tthis.supersawShape = 0;\r\n\t\t}\r\n        \r\n        if (instrumentObject[\"harmonics\"] != undefined) {\r\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\r\n            }\r\n            this.harmonicsWave.markCustomWaveDirty();\r\n        } else {\r\n            this.harmonicsWave.reset();\r\n        }\r\n\r\n        if (instrumentObject[\"spectrum\"] != undefined) {\r\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\r\n                this.spectrumWave.markCustomWaveDirty();\r\n            }\r\n        } else {\r\n            this.spectrumWave.reset(isNoiseChannel);\r\n        }\r\n\r\n        if (instrumentObject[\"stringSustain\"] != undefined) {\r\n            this.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject[\"stringSustain\"] | 0) / 100));\r\n        } else {\r\n            this.stringSustain = 10;\r\n        }\r\n        this.stringSustainType = Config.enableAcousticSustain ? Config.sustainTypeNames.indexOf(instrumentObject[\"stringSustainType\"]) : SustainType.bright;\r\n\t\tif (<any>this.stringSustainType == -1) this.stringSustainType = SustainType.bright;\r\n\r\n        if (this.type == InstrumentType.noise) {\r\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n            if (instrumentObject[\"wave\"] == \"pink noise\") this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"pink\");\r\n            if (instrumentObject[\"wave\"] == \"brownian noise\") this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"brownian\");\r\n            if (this.chipNoise == -1) this.chipNoise = 1;\r\n        }\r\n\r\n        const legacyEnvelopeNames: Dictionary<string> = { \"custom\": \"note size\", \"steady\": \"none\", \"pluck 1\": \"twang 1\", \"pluck 2\": \"twang 2\", \"pluck 3\": \"twang 3\" };\r\n        const getEnvelope = (name: any): Envelope | undefined => (legacyEnvelopeNames[name] != undefined) ? Config.envelopes.dictionary[legacyEnvelopeNames[name]] : Config.envelopes.dictionary[name];\r\n\r\n        if (this.type == InstrumentType.drumset) {\r\n            if (instrumentObject[\"drums\"] != undefined) {\r\n                for (let j: number = 0; j < Config.drumCount; j++) {\r\n                    const drum: any = instrumentObject[\"drums\"][j];\r\n                    if (drum == undefined) continue;\r\n\r\n                    this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index; // default value.\r\n                    if (drum[\"filterEnvelope\"] != undefined) {\r\n                        const envelope: Envelope | undefined = getEnvelope(drum[\"filterEnvelope\"]);\r\n                        if (envelope != undefined) this.drumsetEnvelopes[j] = envelope.index;\r\n                    }\r\n                    if (drum[\"spectrum\"] != undefined) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\r\n                        }\r\n                    }\r\n                    this.drumsetSpectrumWaves[j].markCustomWaveDirty();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.type == InstrumentType.chip) {\r\n            const legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\r\n           \t\t\t\t const modboxWaveNames: Dictionary<number> = { \"10% pulse\": 22, \"sunsoft bass\": 23, \"loud pulse\": 24, \"sax\": 25, \"guitar\": 26, \"atari bass\": 28, \"atari pulse\": 29, \"1% pulse\": 30, \"curved sawtooth\": 31, \"viola\": 32, \"brass\": 33, \"acoustic bass\": 34, \"lyre\": 35, \"ramp pulse\": 36, \"piccolo\": 37, \"squaretooth\": 38, \"flatline\": 39, \"pnryshk a (u5)\": 40, \"pnryshk b (riff)\": 41 };\r\n             \t const sandboxWaveNames: Dictionary<number> = { \"shrill lute\": 42, \"shrill bass\": 44, \"nes pulse\": 45, \"saw bass\": 46, \"euphonium\": 47, \"shrill pulse\": 48, \"r-sawtooth\": 49, \"recorder\": 50, \"narrow saw\": 51, \"deep square\": 52, \"ring pulse\": 53, \"double sine\": 54, \"contrabass\": 55, \"double bass\": 56 };\r\n\t\t\t const zefboxWaveNames: Dictionary<number> = {\"semi-square\": 63, \"deep square\": 64, \"squaretal\": 40, \"saw wide\": 65, \"saw narrow \": 66, \"deep sawtooth\": 67, \"sawtal\": 68, \"pulse\": 69, \"triple pulse\": 70, \"high pulse\": 71,\"deep pulse\": 72 };\r\n\t\t\t const miscWaveNames: Dictionary<number> = {\"test1\": 56, \"pokey 4bit lfsr\": 57, \"pokey 5step bass\": 58, \"isolated spiky\": 59, \"unnamed 1\": 60, \"unnamed 2\": 61, \"guitar string\": 75, \"intense\": 76, \"buzz wave\": 77, \"pokey square\": 57, \"pokey bass\": 58, \"banana wave\": 83, \"test 1\": 84, \"test 2\": 84, \"real snare\": 85, \"earthbound o. guitar\": 86 };\r\n\t\t\t const paandorasboxWaveNames: Dictionary<number> = {\"kick\": 87, \"snare\": 88, \"piano1\": 89, \"WOW\": 90, \"overdrive\": 91, \"trumpet\": 92, \"saxophone\": 93, \"orchestrahit\": 94, \"detached violin\": 95, \"synth\": 96, \"sonic3snare\": 97, \"come on\": 98, \"choir\": 99, \"overdriveguitar\": 100, \"flute\": 101, \"legato violin\": 102, \"tremolo violin\": 103, \"amen break\": 104, \"pizzicato violin\": 105, \"tim allen grunt\": 106, \"tuba\": 107, \"loopingcymbal\": 108, \"standardkick\": 109, \"standardsnare\": 110, \"closedhihat\": 111, \"foothihat\": 112, \"openhihat\": 113, \"crashcymbal\": 114, \"pianoC4\": 115, \"liver pad\": 116, \"marimba\": 117, \"susdotwav\": 118, \"wackyboxtts\": 119};\r\n\t\t\t// const paandorasbetaWaveNames = {\"contrabass\": 55, \"double bass\": 56 };\r\n\t\t//this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n            this.chipWave = -1;\r\n            const rawName: string = instrumentObject[\"wave\"];\r\n            for (const table of [\r\n                legacyWaveNames,\r\n                modboxWaveNames,\r\n                sandboxWaveNames,\r\n                zefboxWaveNames,\r\n                miscWaveNames,\r\n                paandorasboxWaveNames\r\n            ]) {\r\n                if (this.chipWave == -1 && table[rawName] != undefined && Config.chipWaves[table[rawName]] != undefined) {\r\n                    this.chipWave = table[rawName];\r\n                    break;\r\n                }\r\n            }\r\n            if (this.chipWave == -1) {\r\n                const potentialChipWaveIndex: number = Config.chipWaves.findIndex(wave => wave.name == rawName);\r\n                if (potentialChipWaveIndex != -1) this.chipWave = potentialChipWaveIndex;\r\n            }\r\n            // this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : modboxWaveNames[instrumentObject[\"wave\"]] != undefined ? modboxWaveNames[instrumentObject[\"wave\"]] : sandboxWaveNames[instrumentObject[\"wave\"]] != undefined ? sandboxWaveNames[instrumentObject[\"wave\"]] : zefboxWaveNames[instrumentObject[\"wave\"]] != undefined ? zefboxWaveNames[instrumentObject[\"wave\"]] : miscWaveNames[instrumentObject[\"wave\"]] != undefined ? miscWaveNames[instrumentObject[\"wave\"]] : paandorasboxWaveNames[instrumentObject[\"wave\"]] != undefined ? paandorasboxWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]); \r\n\t\tif (this.chipWave == -1) this.chipWave = 1;\r\n        }\r\n\r\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\r\n            if(this.type == InstrumentType.fm) {\r\n                this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\r\n                if (this.algorithm == -1) this.algorithm = 0;\r\n                this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\r\n                if (this.feedbackType == -1) this.feedbackType = 0;\r\n            } else {\r\n                this.algorithm6Op = Config.algorithms6Op.findIndex(algorithm6Op => algorithm6Op.name == instrumentObject[\"algorithm\"]);\r\n                if (this.algorithm6Op == -1) this.algorithm6Op = 1;\r\n                if(this.algorithm6Op == 0){ \r\n                    this.customAlgorithm.set(instrumentObject[\"customAlgorithm\"][\"carrierCount\"], instrumentObject[\"customAlgorithm\"][\"mods\"]);\r\n                } else{\r\n                    this.customAlgorithm.fromPreset(this.algorithm6Op);\r\n                }\r\n                this.feedbackType6Op = Config.feedbacks6Op.findIndex(feedback6Op => feedback6Op.name == instrumentObject[\"feedbackType\"]);\r\n                // SynthBox feedback support\r\n                if (this.feedbackType6Op == -1) {             \r\n                    // These are all of the SynthBox feedback presets that aren't present in Gold/UltraBox\r\n                    let synthboxLegacyFeedbacks: DictionaryArray<any> = toNameMap([\r\n                        { name: \"2⟲ 3⟲\", indices: [[], [2], [3], [], [], []] },\r\n                        { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4], [], []] },\r\n                        { name: \"4⟲ 5⟲\", indices: [[], [], [], [4], [5], []] },\r\n                        { name: \"5⟲ 6⟲\", indices: [[], [], [], [], [5], [6]] },\r\n                        { name: \"1⟲ 6⟲\", indices: [[1], [], [], [], [], [6]] },\r\n                        { name: \"1⟲ 3⟲\", indices: [[1], [], [3], [], [], []] },\r\n                        { name: \"1⟲ 4⟲\", indices: [[1], [], [], [4], [], []] },\r\n                        { name: \"1⟲ 5⟲\", indices: [[1], [], [], [], [5], []] },\r\n                        { name: \"4⟲ 6⟲\", indices: [[], [], [], [4], [], [6]] },\r\n                        { name: \"2⟲ 6⟲\", indices: [[], [2], [], [], [], [6]] },\r\n                        { name: \"3⟲ 6⟲\", indices: [[], [], [3], [], [], [6]] },\r\n                        { name: \"4⟲ 5⟲ 6⟲\", indices: [[], [], [], [4], [5], [6]] },\r\n                        { name: \"1⟲ 3⟲ 6⟲\", indices: [[1], [], [3], [], [], [6]] },\r\n                        { name: \"2→5\", indices: [[], [], [], [], [2], []] },\r\n                        { name: \"2→6\", indices: [[], [], [], [], [], [2]] },\r\n                        { name: \"3→5\", indices: [[], [], [], [], [3], []] },\r\n                        { name: \"3→6\", indices: [[], [], [], [], [], [3]] },\r\n                        { name: \"4→6\", indices: [[], [], [], [], [], [4]] },\r\n                        { name: \"5→6\", indices: [[], [], [], [], [], [5]] },\r\n                        { name: \"1→3→4\", indices: [[], [], [1], [], [3], []] },\r\n                        { name: \"2→5→6\", indices: [[], [], [], [], [2], [5]] },\r\n                        { name: \"2→4→6\", indices: [[], [], [], [2], [], [4]] },\r\n                        { name: \"4→5→6\", indices: [[], [], [], [], [4], [5]] },\r\n                        { name: \"3→4→5→6\", indices: [[], [], [], [3], [4], [5]] },\r\n                        { name: \"2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\r\n                        { name: \"1→2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\r\n                    ]);\r\n\r\n                    let synthboxFeedbackType = synthboxLegacyFeedbacks[synthboxLegacyFeedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"])]!.indices;\r\n\r\n                    if (synthboxFeedbackType != undefined) {\r\n                        this.feedbackType6Op = 0;\r\n                        this.customFeedbackType.set(synthboxFeedbackType);\r\n                    } else {\r\n                        // if the feedback type STILL can't be resolved, default to the first non-custom option\r\n                        this.feedbackType6Op = 1;\r\n                    }\r\n                } \r\n\r\n                if ((this.feedbackType6Op == 0) && (instrumentObject[\"customFeedback\"] != undefined)) {\r\n                    this.customFeedbackType.set(instrumentObject[\"customFeedback\"][\"mods\"]);\r\n                } else {\r\n                    this.customFeedbackType.fromPreset(this.feedbackType6Op);\r\n                }\r\n            }\r\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\r\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\r\n            } else {\r\n                this.feedbackAmplitude = 0;\r\n            }\r\n\r\n            for (let j: number = 0; j < Config.operatorCount + (this.type == InstrumentType.fm6op?2:0); j++) {\r\n                const operator: Operator = this.operators[j];\r\n                let operatorObject: any = undefined;\r\n                if (instrumentObject[\"operators\"] != undefined) operatorObject = instrumentObject[\"operators\"][j];\r\n                if (operatorObject == undefined) operatorObject = {};\r\n\r\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\r\n                if (operator.frequency == -1) operator.frequency = 0;\r\n                if (operatorObject[\"amplitude\"] != undefined) {\r\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\r\n                } else {\r\n                    operator.amplitude = 0;\r\n                }\r\n                if (operatorObject[\"waveform\"] != undefined) {\r\n                    // If the json is from GB, we override the last two waves to be sine to account for a bug\r\n                    if (format == \"goldbox\" && j > 3) {\r\n                       operator.waveform = 0;\r\n                       continue;\r\n                    }\r\n\r\n                    operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject[\"waveform\"]);\r\n                    if (operator.waveform == -1) {\r\n                        // GoldBox compatibility\r\n                        if (operatorObject[\"waveform\"] == \"square\") {\r\n                            operator.waveform = Config.operatorWaves.dictionary[\"pulse width\"].index;\r\n                            operator.pulseWidth = 5;\r\n                        } else if (operatorObject[\"waveform\"] == \"rounded\") {\r\n                            operator.waveform = Config.operatorWaves.dictionary[\"quasi-sine\"].index;\r\n                        } else {\r\n                            operator.waveform = 0;\r\n                        }\r\n\r\n                    }\r\n                } else {\r\n                    operator.waveform = 0;\r\n                }\r\n                if (operatorObject[\"pulseWidth\"] != undefined) {\r\n                    operator.pulseWidth = operatorObject[\"pulseWidth\"] | 0;\r\n                } else {\r\n                    operator.pulseWidth = 5;\r\n                }\r\n            }\r\n        }\r\n        else if (this.type == InstrumentType.customChipWave) {\r\n            if (instrumentObject[\"customChipWave\"]) {\r\n\r\n                for (let i: number = 0; i < 64; i++) {\r\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\r\n                }\r\n\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    sum += this.customChipWave[i];\r\n                }\r\n                const average: number = sum / this.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = this.customChipWave[i] - average;\r\n                    this.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                // 65th, last sample is for anti-aliasing\r\n                this.customChipWaveIntegral[64] = 0.0;\r\n            }\r\n        } else if (this.type == InstrumentType.mod) {\r\n            if (instrumentObject[\"modChannels\"] != undefined) {\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\r\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\r\n                    this.modulators[mod] = instrumentObject[\"modSettings\"][mod];\r\n                    // Due to an oversight, this isn't included in JSONs prior to JB 2.6.\r\n                    if (instrumentObject[\"modFilterTypes\"] != undefined)\r\n                    this.modFilterTypes[mod] = instrumentObject[\"modFilterTypes\"][mod];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.type != InstrumentType.mod) {\r\n            // Arpeggio speed\r\n            if (this.chord == Config.chords.dictionary[\"arpeggio\"].index && instrumentObject[\"arpeggioSpeed\"] != undefined) {\r\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\r\n            }\r\n            else {\r\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\r\n            }\r\n\r\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\r\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\r\n            }\r\n            else {\r\n                this.fastTwoNoteArp = useFastTwoNoteArp;\r\n            }\r\n\r\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\r\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\r\n            }\r\n            else {\r\n                this.clicklessTransition = false;\r\n            }\r\n\r\n            if (instrumentObject[\"aliases\"] != undefined) {\r\n                this.aliases = instrumentObject[\"aliases\"];\r\n            }\r\n            else {\r\n                // modbox had no anti-aliasing, so enable it for everything if that mode is selected\r\n                if (format == \"modbox\") {\r\n                    this.effects = (this.effects | (1 << EffectType.distortion));\r\n                    this.aliases = true;\r\n                    this.distortion = 0;\r\n                } else {\r\n                    this.aliases = false;\r\n                }\r\n            }\r\n\r\n            if (instrumentObject[\"noteFilterType\"] != undefined) {\r\n                this.noteFilterType = instrumentObject[\"noteFilterType\"];\r\n            }\r\n            if (instrumentObject[\"noteSimpleCut\"] != undefined) {\r\n                this.noteFilterSimpleCut = instrumentObject[\"noteSimpleCut\"];\r\n            }\r\n            if (instrumentObject[\"noteSimplePeak\"] != undefined) {\r\n                this.noteFilterSimplePeak = instrumentObject[\"noteSimplePeak\"];\r\n            }\r\n            if (instrumentObject[\"noteFilter\"] != undefined) {\r\n                this.noteFilter.fromJsonObject(instrumentObject[\"noteFilter\"]);\r\n            } else {\r\n                this.noteFilter.reset();\r\n            }\r\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                if (Array.isArray(instrumentObject[\"noteSubFilters\" + i])) {\r\n                    this.noteSubFilters[i] = new FilterSettings();\r\n                    this.noteSubFilters[i]!.fromJsonObject(instrumentObject[\"noteSubFilters\" + i]);\r\n                }\r\n            }\r\n            if (instrumentObject[\"eqFilterType\"] != undefined) {\r\n                this.eqFilterType = instrumentObject[\"eqFilterType\"];\r\n            }\r\n            if (instrumentObject[\"eqSimpleCut\"] != undefined) {\r\n                this.eqFilterSimpleCut = instrumentObject[\"eqSimpleCut\"];\r\n            }\r\n            if (instrumentObject[\"eqSimplePeak\"] != undefined) {\r\n                this.eqFilterSimplePeak = instrumentObject[\"eqSimplePeak\"];\r\n            }\r\n            if (Array.isArray(instrumentObject[\"eqFilter\"])) {\r\n                this.eqFilter.fromJsonObject(instrumentObject[\"eqFilter\"]);\r\n            } else {\r\n                this.eqFilter.reset();\r\n\r\n                const legacySettings: LegacySettings = {};\r\n\r\n                // Try converting from legacy filter settings.\r\n                const filterCutoffMaxHz: number = 8000;\r\n                const filterCutoffRange: number = 11;\r\n                const filterResonanceRange: number = 8;\r\n                if (instrumentObject[\"filterCutoffHz\"] != undefined) {\r\n                    legacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / filterCutoffMaxHz) / Math.LN2));\r\n                } else {\r\n                    legacySettings.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\r\n                }\r\n                if (instrumentObject[\"filterResonance\"] != undefined) {\r\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\r\n                } else {\r\n                    legacySettings.filterResonance = 0;\r\n                }\r\n\r\n                legacySettings.filterEnvelope = getEnvelope(instrumentObject[\"filterEnvelope\"]);\r\n                legacySettings.pulseEnvelope = getEnvelope(instrumentObject[\"pulseEnvelope\"]);\r\n                legacySettings.feedbackEnvelope = getEnvelope(instrumentObject[\"feedbackEnvelope\"]);\r\n                if (Array.isArray(instrumentObject[\"operators\"])) {\r\n                    legacySettings.operatorEnvelopes = [];\r\n                    for (let j: number = 0; j < Config.operatorCount + (this.type == InstrumentType.fm6op?2:0); j++) {\r\n                        let envelope: Envelope | undefined;\r\n                        if (instrumentObject[\"operators\"][j] != undefined) {\r\n                            envelope = getEnvelope(instrumentObject[\"operators\"][j][\"envelope\"]);\r\n                        }\r\n                        legacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary[\"none\"];\r\n                    }\r\n                }\r\n\r\n                // Try converting from even older legacy filter settings.\r\n                if (instrumentObject[\"filter\"] != undefined) {\r\n                    const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\r\n                    const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\r\n                    const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n                    const oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\r\n                    let legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\r\n                    if (legacyFilter == -1) legacyFilter = 0;\r\n                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\r\n                    legacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);\r\n                    legacySettings.filterResonance = 0;\r\n                }\r\n\r\n                this.convertLegacySettings(legacySettings, true);\r\n            }\r\n\r\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                if (Array.isArray(instrumentObject[\"eqSubFilters\" + i])) {\r\n                    this.eqSubFilters[i] = new FilterSettings();\r\n                    this.eqSubFilters[i]!.fromJsonObject(instrumentObject[\"eqSubFilters\" + i]);\r\n                }\r\n            }\r\n\r\n            if (Array.isArray(instrumentObject[\"envelopes\"])) {\r\n                const envelopeArray: any[] = instrumentObject[\"envelopes\"];\r\n                for (let i = 0; i < envelopeArray.length; i++) {\r\n                    if (this.envelopeCount >= Config.maxEnvelopeCount) break;\r\n                    const tempEnvelope: EnvelopeSettings = new EnvelopeSettings();\r\n                    tempEnvelope.fromJsonObject(envelopeArray[i]);\r\n                    this.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope);\r\n                }\r\n            }\r\n        }\r\n   \t\t // advloop addition\r\n            if (type === 0) {\r\n                if (instrumentObject[\"isUsingAdvancedLoopControls\"] != undefined) {\r\n                    this.isUsingAdvancedLoopControls = instrumentObject[\"isUsingAdvancedLoopControls\"];\r\n                    this.chipWaveLoopStart = instrumentObject[\"chipWaveLoopStart\"];\r\n                    this.chipWaveLoopEnd = instrumentObject[\"chipWaveLoopEnd\"];\r\n                    this.chipWaveLoopMode = instrumentObject[\"chipWaveLoopMode\"];\r\n                    this.chipWavePlayBackwards = instrumentObject[\"chipWavePlayBackwards\"];\r\n                    this.chipWaveStartOffset = instrumentObject[\"chipWaveStartOffset\"];\r\n                } else {\r\n                    this.isUsingAdvancedLoopControls = false;\r\n                    this.chipWaveLoopStart = 0;\r\n                    this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\r\n                    this.chipWaveLoopMode = 0;\r\n                    this.chipWavePlayBackwards = false;\r\n                    this.chipWaveStartOffset = 0;\r\n                }\r\n            }\r\n\t}\t\r\n           // advloop addition\r\n\r\n        public getLargestControlPointCount(forNoteFilter: boolean) {\r\n        let largest: number;\r\n        if (forNoteFilter) {\r\n            largest = this.noteFilter.controlPointCount;\r\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                if (this.noteSubFilters[i] != null && this.noteSubFilters[i]!.controlPointCount > largest)\r\n                    largest = this.noteSubFilters[i]!.controlPointCount;\r\n            }\r\n        }\r\n        else {\r\n            largest = this.eqFilter.controlPointCount;\r\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                if (this.eqSubFilters[i] != null && this.eqSubFilters[i]!.controlPointCount > largest)\r\n                    largest = this.eqSubFilters[i]!.controlPointCount;\r\n            }\r\n        }\r\n        return largest;\r\n    }\r\n\r\n    public static frequencyFromPitch(pitch: number): number {\r\n        return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\r\n    }\r\n\r\n    public addEnvelope(target: number, index: number, envelope: number): void {\r\n        let makeEmpty: boolean = false;\r\n        if (!this.supportsEnvelopeTarget(target, index)) makeEmpty = true;\r\n        if (this.envelopeCount >= Config.maxEnvelopeCount) throw new Error();\r\n        while (this.envelopes.length <= this.envelopeCount) this.envelopes[this.envelopes.length] = new EnvelopeSettings();\r\n        const envelopeSettings: EnvelopeSettings = this.envelopes[this.envelopeCount];\r\n        envelopeSettings.target = makeEmpty ? Config.instrumentAutomationTargets.dictionary[\"none\"].index : target;\r\n        envelopeSettings.index = makeEmpty ? 0 : index;\r\n        envelopeSettings.envelope = envelope;\r\n        this.envelopeCount++;\r\n    }\r\n\r\n    public supportsEnvelopeTarget(target: number, index: number): boolean {\r\n        const automationTarget: AutomationTarget = Config.instrumentAutomationTargets[target];\r\n        if (automationTarget.computeIndex == null && automationTarget.name != \"none\") {\r\n\t\t\treturn false;\r\n\t\t}\r\n        if (index >= automationTarget.maxCount) {\r\n            return false;\r\n        }\r\n        if (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {\r\n            return false;\r\n        }\r\n        if (automationTarget.effect != null && (this.effects & (1 << automationTarget.effect)) == 0) {\r\n            return false;\r\n        }\r\n        if (automationTarget.isFilter) {\r\n            //if (automationTarget.perNote) {\r\n            let useControlPointCount: number = this.noteFilter.controlPointCount;\r\n            if (this.noteFilterType)\r\n                useControlPointCount = 1;\r\n            if (index >= useControlPointCount) return false;\r\n            //} else {\r\n            //\tif (index >= this.eqFilter.controlPointCount)   return false;\r\n            //}\r\n        }\r\n        if ((automationTarget.name == \"operatorFrequency\") || (automationTarget.name == \"operatorAmplitude\")) {\r\n            if (index >= 4 + (this.type == InstrumentType.fm6op ? 2 : 0)) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public clearInvalidEnvelopeTargets(): void {\r\n        for (let envelopeIndex: number = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {\r\n            const target: number = this.envelopes[envelopeIndex].target;\r\n            const index: number = this.envelopes[envelopeIndex].index;\r\n            if (!this.supportsEnvelopeTarget(target, index)) {\r\n                this.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\r\n                this.envelopes[envelopeIndex].index = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTransition(): Transition {\r\n        return effectsIncludeTransition(this.effects) ? Config.transitions[this.transition] :\r\n            (this.type == InstrumentType.mod ? Config.transitions.dictionary[\"interrupt\"] : Config.transitions.dictionary[\"normal\"]);\r\n    }\r\n\r\n    public getFadeInSeconds(): number {\r\n        return (this.type == InstrumentType.drumset) ? 0.0 : Synth.fadeInSettingToSeconds(this.fadeIn);\r\n    }\r\n\r\n    public getFadeOutTicks(): number {\r\n        return (this.type == InstrumentType.drumset) ? Config.drumsetFadeOutTicks : Synth.fadeOutSettingToTicks(this.fadeOut)\r\n    }\r\n\r\n    public getChord(): Chord {\r\n        return effectsIncludeChord(this.effects) ? Config.chords[this.chord] : Config.chords.dictionary[\"simultaneous\"];\r\n    }\r\n\r\n    public getDrumsetEnvelope(pitch: number): Envelope {\r\n        if (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\r\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\r\n    }\r\n}\r\n\r\nexport class Channel {\r\n    public octave: number = 0;\r\n    public readonly instruments: Instrument[] = [];\r\n    public readonly patterns: Pattern[] = [];\r\n    public readonly bars: number[] = [];\r\n    public muted: boolean = false;\r\n    public name: string = \"\";\r\n}\r\n\r\nexport class Song {\r\n    private static readonly _format: string = Config.jsonFormat;\r\n    private static readonly _oldestBeepboxVersion: number = 2;\r\n    private static readonly _latestBeepboxVersion: number = 9;\r\n    private static readonly _oldestJummBoxVersion: number = 1;\r\n    private static readonly _latestJummBoxVersion: number = 6;\r\n    private static readonly _oldestGoldBoxVersion: number = 1;\r\n    private static readonly _latestGoldBoxVersion: number = 4;\r\n    private static readonly _oldestUltraBoxVersion: number = 1;\r\n    private static readonly _latestUltraBoxVersion: number = 5;\r\n    // One-character variant detection at the start of URL to distinguish variants such as JummBox, Or Goldbox. \"j\" and \"g\" respectively\r\n\t//also \"u\" is ultrabox lol\r\n    private static readonly _variant = 0x75; //\"u\" ~ ultrabox\r\n\r\n    public title: string;\r\n    public scale: number;\r\n    public scaleCustom: boolean[] = [];\r\n    public key: number;\r\n    public octave: number;\r\n    public tempo: number;\r\n    public reverb: number;\r\n    public beatsPerBar: number;\r\n    public barCount: number;\r\n    public patternsPerChannel: number;\r\n    public rhythm: number;\r\n    public layeredInstruments: boolean;\r\n    public patternInstruments: boolean;\r\n    public loopStart: number;\r\n    public loopLength: number;\r\n    public pitchChannelCount: number;\r\n    public noiseChannelCount: number;\r\n    public modChannelCount: number;\r\n    public readonly channels: Channel[] = [];\r\n    public limitDecay: number = 4.0;\r\n    public limitRise: number = 4000.0;\r\n    public compressionThreshold: number = 1.0;\r\n    public limitThreshold: number = 1.0;\r\n    public compressionRatio: number = 1.0;\r\n    public limitRatio: number = 1.0;\r\n    public masterGain: number = 1.0;\r\n    public inVolumeCap: number = 0.0;\r\n    public outVolumeCap: number = 0.0;\r\n\r\n    constructor(string?: string) {\r\n        if (string != undefined) {\r\n            this.fromBase64String(string);\r\n        } else {\r\n            this.initToDefault(true);\r\n        }\r\n    }\r\n\r\n    // Returns the ideal new note volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\r\n    public getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n            return 6;\r\n        else {\r\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n            modCount = Config.modCount - modCount - 1;\r\n\r\n            let vol: number | undefined = Config.modulators[this.channels[modChannel].instruments[modInstrument].modulators[modCount]].newNoteVol;\r\n\r\n            // For tempo, actually use user defined tempo\r\n            let tempoIndex: number = Config.modulators.dictionary[\"tempo\"].index;\r\n            if (this.channels[modChannel].instruments[modInstrument].modulators[modCount] == tempoIndex) {\r\n                vol = this.tempo - Config.modulators[tempoIndex].convertRealFactor;\r\n            }\r\n\r\n            if (vol != undefined)\r\n                return vol;\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n\r\n    public getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n            return 6;\r\n        else {\r\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n            modCount = Config.modCount - modCount - 1;\r\n\r\n            let instrument: Instrument = this.channels[modChannel].instruments[modInstrument];\r\n            let modulator = Config.modulators[instrument.modulators[modCount]];\r\n            let cap: number | undefined = modulator.maxRawVol;\r\n\r\n            if (cap != undefined) {\r\n                // For filters, cap is dependent on which filter setting is targeted\r\n                if (modulator.name == \"eq filter\" || modulator.name == \"note filter\") {\r\n                    // type 0: number of filter morphs\r\n                    // type 1/odd: number of filter x positions\r\n                    // type 2/even: number of filter y positions\r\n                    cap = Config.filterMorphCount - 1;\r\n                    if (instrument.modFilterTypes[modCount] > 0 && instrument.modFilterTypes[modCount] % 2) {\r\n                        cap = Config.filterFreqRange;\r\n                    } else if (instrument.modFilterTypes[modCount] > 0) {\r\n                        cap = Config.filterGainRange;\r\n                    }\r\n                }\r\n                return cap;\r\n            }\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n    public getVolumeCapForSetting = (isMod: boolean, modSetting: number, filterType?: number): number => {\r\n        if (!isMod)\r\n            return Config.noteSizeMax;\r\n        else {\r\n            let cap: number | undefined = Config.modulators[modSetting].maxRawVol;\r\n            if (cap != undefined) {\r\n\r\n                // For filters, cap is dependent on which filter setting is targeted\r\n                if (filterType != undefined && (Config.modulators[modSetting].name == \"eq filter\" || Config.modulators[modSetting].name == \"note filter\")) {\r\n                    // type 0: number of filter morphs\r\n                    // type 1/odd: number of filter x positions\r\n                    // type 2/even: number of filter y positions\r\n                    cap = Config.filterMorphCount - 1;\r\n                    if (filterType > 0 && filterType % 2) {\r\n                        cap = Config.filterFreqRange;\r\n                    } else if (filterType > 0) {\r\n                        cap = Config.filterGainRange;\r\n                    }\r\n                }\r\n\r\n                return cap;\r\n            }\r\n            else\r\n                return Config.noteSizeMax;\r\n        }\r\n    }\r\n\r\n    public getChannelCount(): number {\r\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\r\n    }\r\n\r\n    public getMaxInstrumentsPerChannel(): number {\r\n        return Math.max(\r\n            this.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin,\r\n            this.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);\r\n    }\r\n\r\n    public getMaxInstrumentsPerPattern(channelIndex: number): number {\r\n        return this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);\r\n    }\r\n\r\n    public getMaxInstrumentsPerPatternForChannel(channel: Channel): number {\r\n        return this.layeredInstruments\r\n            ? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)\r\n            : 1;\r\n    }\r\n\r\n    public getChannelIsNoise(channelIndex: number): boolean {\r\n        return (channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount);\r\n    }\r\n\r\n    public getChannelIsMod(channelIndex: number): boolean {\r\n        return (channelIndex >= this.pitchChannelCount + this.noiseChannelCount);\r\n    }\r\n\r\n    public initToDefault(andResetChannels: boolean = true): void {\r\n        this.scale = 0;\r\n        this.scaleCustom = [true, false, true, true, false, false, false, true, true, false, true, true];\r\n\t    //this.scaleCustom = [true, false, false, false, false, false, false, false, false, false, false, false];\r\n        this.key = 0;\r\n        this.octave = 0;\r\n        this.loopStart = 0;\r\n        this.loopLength = 4;\r\n        this.tempo = 120;\r\n        this.reverb = 0;\r\n        this.beatsPerBar = 8;\r\n        this.barCount = 16;\r\n        this.patternsPerChannel = 8;\r\n        this.rhythm = 1;\r\n        this.layeredInstruments = false;\r\n        this.patternInstruments = false;\r\n\r\n        this.title = \"Untitled\";\r\n        document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\r\n\r\n        if (andResetChannels) {\r\n            this.pitchChannelCount = 3;\r\n            this.noiseChannelCount = 1;\r\n            this.modChannelCount = 0;\r\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\r\n                const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\r\n                if (this.channels.length <= channelIndex) {\r\n                    this.channels[channelIndex] = new Channel();\r\n                }\r\n                const channel: Channel = this.channels[channelIndex];\r\n                channel.octave = Math.max(3 - channelIndex, 0); // [3, 2, 1, 0]; Descending octaves with drums at zero in last channel.\r\n\r\n                for (let pattern: number = 0; pattern < this.patternsPerChannel; pattern++) {\r\n                    if (channel.patterns.length <= pattern) {\r\n                        channel.patterns[pattern] = new Pattern();\r\n                    } else {\r\n                        channel.patterns[pattern].reset();\r\n                    }\r\n                }\r\n                channel.patterns.length = this.patternsPerChannel;\r\n\r\n                for (let instrument: number = 0; instrument < Config.instrumentCountMin; instrument++) {\r\n                    if (channel.instruments.length <= instrument) {\r\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\r\n                    }\r\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\r\n                }\r\n                channel.instruments.length = Config.instrumentCountMin;\r\n\r\n                for (let bar: number = 0; bar < this.barCount; bar++) {\r\n                    channel.bars[bar] = bar < 4 ? 1 : 0;\r\n                }\r\n                channel.bars.length = this.barCount;\r\n            }\r\n            this.channels.length = this.getChannelCount();\r\n        }\r\n    }\r\n\r\n    public toBase64String(): string {\r\n        let bits: BitFieldWriter;\r\n        let buffer: number[] = [];\r\n\r\n        buffer.push(Song._variant);\r\n        buffer.push(base64IntToCharCode[Song._latestUltraBoxVersion]);\r\n\r\n        // Length of the song name string\r\n        buffer.push(SongTagCode.songTitle);\r\n        var encodedSongTitle: string = encodeURIComponent(this.title);\r\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\r\n\r\n        // Actual encoded string follows\r\n        for (let i: number = 0; i < encodedSongTitle.length; i++) {\r\n            buffer.push(encodedSongTitle.charCodeAt(i));\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\r\n        buffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\r\n        if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\r\n            for (var i = 1; i < Config.pitchesPerOctave; i++) {\r\n                buffer.push(base64IntToCharCode[this.scaleCustom[i]?1:0]) // ineffiecent? yes, all we're going to do for now? hell yes\r\n            }\r\n        }\r\n        buffer.push(SongTagCode.key, base64IntToCharCode[this.key], base64IntToCharCode[this.octave - Config.octaveMin]);\r\n        buffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\r\n        buffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\r\n        buffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\r\n        buffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\r\n\r\n        // Push limiter settings, but only if they aren't the default!\r\n        buffer.push(SongTagCode.limiterSettings);\r\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\r\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\r\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\r\n            buffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\r\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\r\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\r\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\r\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\r\n        }\r\n        else {\r\n            buffer.push(base64IntToCharCode[0x3f]); // Not using limiter\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelNames);\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            // Length of the channel name string\r\n            var encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\r\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\r\n\r\n            // Actual encoded string follows\r\n            for (let i: number = 0; i < encodedChannelName.length; i++) {\r\n                buffer.push(encodedChannelName.charCodeAt(i));\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.instrumentCount, base64IntToCharCode[(<any>this.layeredInstruments << 1) | <any>this.patternInstruments]);\r\n        if (this.layeredInstruments || this.patternInstruments) {\r\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                buffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelOctave);\r\n        for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\r\n            buffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);\r\n        }\r\n\r\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n            for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\r\n                const instrument: Instrument = this.channels[channelIndex].instruments[i];\r\n                buffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\r\n                buffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\r\n                buffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\r\n\r\n                buffer.push(SongTagCode.eqFilter);\r\n                buffer.push(base64IntToCharCode[+instrument.eqFilterType]);\r\n                if (instrument.eqFilterType) {\r\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimpleCut]);\r\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimplePeak]);\r\n                }\r\n                else {\r\n                    if (instrument.eqFilter == null) {\r\n                        // Push null filter settings\r\n                        buffer.push(base64IntToCharCode[0]);\r\n                        console.log(\"Null EQ filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\r\n                    } else {\r\n                        buffer.push(base64IntToCharCode[instrument.eqFilter.controlPointCount]);\r\n                        for (let j: number = 0; j < instrument.eqFilter.controlPointCount; j++) {\r\n                            const point: FilterControlPoint = instrument.eqFilter.controlPoints[j];\r\n                            buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\r\n                        }\r\n                    }\r\n\r\n                    // Push subfilters as well. Skip Index 0, is a copy of the base filter.\r\n                    let usingSubFilterBitfield: number = 0;\r\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                        usingSubFilterBitfield |= (+(instrument.eqSubFilters[j + 1] != null) << j);\r\n                    }\r\n                    // Put subfilter usage into 2 chars (12 bits)\r\n                    buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\r\n                    // Put subfilter info in for all used subfilters\r\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                        if (usingSubFilterBitfield & (1 << j)) {\r\n                            buffer.push(base64IntToCharCode[instrument.eqSubFilters[j + 1]!.controlPointCount]);\r\n                            for (let k: number = 0; k < instrument.eqSubFilters[j + 1]!.controlPointCount; k++) {\r\n                                const point: FilterControlPoint = instrument.eqSubFilters[j + 1]!.controlPoints[k];\r\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // The list of enabled effects is represented as a 12-bit bitfield using two six-bit characters.\r\n                buffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects >> 6], base64IntToCharCode[instrument.effects & 63]);\r\n                if (effectsIncludeNoteFilter(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[+instrument.noteFilterType]);\r\n                    if (instrument.noteFilterType) {\r\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimpleCut]);\r\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimplePeak]);\r\n                    }\r\n                    else {\r\n                        if (instrument.noteFilter == null) {\r\n                            // Push null filter settings\r\n                            buffer.push(base64IntToCharCode[0]);\r\n                            console.log(\"Null note filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\r\n                        }\r\n                        else {\r\n                            buffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);\r\n                            for (let j: number = 0; j < instrument.noteFilter.controlPointCount; j++) {\r\n                                const point: FilterControlPoint = instrument.noteFilter.controlPoints[j];\r\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\r\n                            }\r\n                        }\r\n\r\n                        // Push subfilters as well. Skip Index 0, is a copy of the base filter.\r\n                        let usingSubFilterBitfield: number = 0;\r\n                        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                            usingSubFilterBitfield |= (+(instrument.noteSubFilters[j + 1] != null) << j);\r\n                        }\r\n                        // Put subfilter usage into 2 chars (12 bits)\r\n                        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\r\n                        // Put subfilter info in for all used subfilters\r\n                        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                            if (usingSubFilterBitfield & (1 << j)) {\r\n                                buffer.push(base64IntToCharCode[instrument.noteSubFilters[j + 1]!.controlPointCount]);\r\n                                for (let k: number = 0; k < instrument.noteSubFilters[j + 1]!.controlPointCount; k++) {\r\n                                    const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[k];\r\n                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (effectsIncludeTransition(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.transition]);\r\n                }\r\n                if (effectsIncludeChord(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.chord]);\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index) {\r\n                        buffer.push(base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                }\r\n                if (effectsIncludePitchShift(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.pitchShift]);\r\n                }\r\n                if (effectsIncludeDetune(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3F]);\r\n                }\r\n                if (effectsIncludeVibrato(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDelay)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                }\r\n                if (effectsIncludeDistortion(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.distortion]);\r\n                    // Aliasing is tied into distortion for now\r\n                    buffer.push(base64IntToCharCode[+instrument.aliases]);\r\n                }\r\n                if (effectsIncludeBitcrusher(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.bitcrusherFreq], base64IntToCharCode[instrument.bitcrusherQuantization]);\r\n                }\r\n                if (effectsIncludePanning(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\r\n                    buffer.push(base64IntToCharCode[instrument.panDelay]);\r\n                }\r\n                if (effectsIncludeChorus(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.chorus]);\r\n                }\r\n                if (effectsIncludeEcho(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.echoSustain], base64IntToCharCode[instrument.echoDelay]);\r\n                }\r\n                if (effectsIncludeReverb(instrument.effects)) {\r\n                    buffer.push(base64IntToCharCode[instrument.reverb]);\r\n                }\r\n\r\n                if (instrument.type != InstrumentType.drumset) {\r\n                    buffer.push(SongTagCode.fadeInOut, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);\r\n                    // Transition info follows transition song tag\r\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\r\n                }\r\n\r\n                if (instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\r\n                    buffer.push(SongTagCode.harmonics);\r\n                    const harmonicsBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\r\n                    }\r\n                    harmonicsBits.encodeBase64(buffer);\r\n                }\r\n\r\n                if (instrument.type == InstrumentType.chip) {\r\n                   \t\t\t\t\t\tif (instrument.chipWave > 186) {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[3]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (instrument.chipWave > 124) {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[2]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (instrument.chipWave > 62) {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[1]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[0]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbuffer.push(104, base64IntToCharCode[instrument.unison]);\r\n                        if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\r\n\r\n\t\t\t\t\t\t// Repurposed for chip wave loop controls.\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.filterResonance);\r\n\t\t\t\t\t\t// The encoding here is as follows:\r\n\t\t\t\t\t\t// 0b11111_1\r\n\t\t\t\t\t\t//         ^-- isUsingAdvancedLoopControls\r\n\t\t\t\t\t\t//   ^^^^^---- chipWaveLoopMode\r\n\t\t\t\t\t\t// This essentially allocates 32 different loop modes,\r\n\t\t\t\t\t\t// which should be plenty.\r\n\t\t\t\t\t\tconst encodedLoopMode: number = (\r\n\t\t\t\t\t\t\t(clamp(0, 31 + 1, instrument.chipWaveLoopMode) << 1)\r\n\t\t\t\t\t\t\t| (instrument.isUsingAdvancedLoopControls ? 1 : 0)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[encodedLoopMode]);\r\n\t\t\t\t\t\t// The same encoding above is used here, but with the release mode\r\n\t\t\t\t\t\t// (which isn't implemented currently), and the backwards toggle.\r\n\t\t\t\t\t\tconst encodedReleaseMode: number = (\r\n\t\t\t\t\t\t\t(clamp(0, 31 + 1, 0) << 1)\r\n\t\t\t\t\t\t\t| (instrument.chipWavePlayBackwards ? 1 : 0)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[encodedReleaseMode]);\r\n\t\t\t\t\t\tencode32BitNumber(buffer, instrument.chipWaveLoopStart);\r\n\t\t\t\t\t\tencode32BitNumber(buffer, instrument.chipWaveLoopEnd);\r\n\t\t\t\t\t\tencode32BitNumber(buffer, instrument.chipWaveStartOffset);\r\n\r\n                } else if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\r\n                    if (instrument.type == InstrumentType.fm) {\r\n                        buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\r\n                        buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\r\n                    } else {\r\n                        buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm6Op]);\r\n                        if (instrument.algorithm6Op == 0) {\r\n                            buffer.push(SongTagCode.chord, base64IntToCharCode[instrument.customAlgorithm.carrierCount]);\r\n                            buffer.push(SongTagCode.effects);\r\n                            for (let o: number = 0; o < instrument.customAlgorithm.modulatedBy.length; o++) {\r\n                                for (let j: number = 0; j < instrument.customAlgorithm.modulatedBy[o].length; j++) {\r\n                                    buffer.push(base64IntToCharCode[instrument.customAlgorithm.modulatedBy[o][j]]);\r\n                                }\r\n                                buffer.push(SongTagCode.operatorWaves);\r\n                            }\r\n                            buffer.push(SongTagCode.effects);\r\n                        }\r\n                        buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType6Op]);\r\n                        if (instrument.feedbackType6Op == 0) {\r\n                            buffer.push(SongTagCode.effects);\r\n                            for (let o: number = 0; o < instrument.customFeedbackType.indices.length; o++) {\r\n                                for (let j: number = 0; j < instrument.customFeedbackType.indices[o].length; j++) {\r\n                                    buffer.push(base64IntToCharCode[instrument.customFeedbackType.indices[o][j]]);\r\n                                }\r\n                                buffer.push(SongTagCode.operatorWaves);\r\n                            }\r\n                            buffer.push(SongTagCode.effects);\r\n                        }\r\n                    }\r\n                    buffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\r\n\r\n                    buffer.push(SongTagCode.operatorFrequencies);\r\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op?6:Config.operatorCount); o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\r\n                    }\r\n                    buffer.push(SongTagCode.operatorAmplitudes);\r\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\r\n                    }\r\n                    buffer.push(SongTagCode.operatorWaves);\r\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);\r\n                        // Push pulse width if that type is used\r\n                        if (instrument.operators[o].waveform == 2) {\r\n                            buffer.push(base64IntToCharCode[instrument.operators[o].pulseWidth]);\r\n                        }\r\n                    }\r\n                } else if (instrument.type == InstrumentType.customChipWave) {\r\n                    if (instrument.chipWave > 186) {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[3]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (instrument.chipWave > 124) {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[2]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (instrument.chipWave > 62) {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[1]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave]);\t\r\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[0]);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbuffer.push(104, base64IntToCharCode[instrument.unison]);\r\n                        if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\r\n                    buffer.push(SongTagCode.customChipWave);\r\n                    // Push custom wave values\r\n                    for (let j: number = 0; j < 64; j++) {\r\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\r\n                    }\r\n                } else if (instrument.type == InstrumentType.noise) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\r\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\r\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\r\n                } else if (instrument.type == InstrumentType.spectrum) {\r\n                    buffer.push(SongTagCode.spectrum);\r\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\r\n                    }\r\n                    spectrumBits.encodeBase64(buffer);\r\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\r\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\r\n                } else if (instrument.type == InstrumentType.drumset) {\r\n                    buffer.push(SongTagCode.drumsetEnvelopes);\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\r\n                    }\r\n\r\n                    buffer.push(SongTagCode.spectrum);\r\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\r\n                        }\r\n                    }\r\n                    spectrumBits.encodeBase64(buffer);\r\n                } else if (instrument.type == InstrumentType.harmonics) {\r\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\r\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\r\n                } else if (instrument.type == InstrumentType.pwm) {\r\n                    buffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\r\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\r\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\r\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\r\n                } else if (instrument.type == InstrumentType.supersaw) {\r\n\t\t\t\t\tbuffer.push(SongTagCode.supersaw, base64IntToCharCode[instrument.supersawDynamism], base64IntToCharCode[instrument.supersawSpread], base64IntToCharCode[instrument.supersawShape]);\r\n\t\t\t\t\tbuffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\r\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\r\n\t\t\t\t} else if (instrument.type == InstrumentType.pickedString) {\r\n                    if (Config.stringSustainRange > 0x20 || SustainType.length > 2) {\r\n\t\t\t\t\t\tthrow new Error(\"Not enough bits to represent sustain value and type in same base64 character.\");\r\n\t\t\t\t\t}\r\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\r\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\r\n                    buffer.push(SongTagCode.stringSustain, base64IntToCharCode[instrument.stringSustain | (instrument.stringSustainType << 5)]);\r\n                } else if (instrument.type == InstrumentType.mod) {\r\n                    // Handled down below. Could be moved, but meh.\r\n                } else {\r\n                    throw new Error(\"Unknown instrument type.\");\r\n                }\r\n\r\n                buffer.push(SongTagCode.envelopes, base64IntToCharCode[instrument.envelopeCount]);\r\n                // Added in JB v6: Options for envelopes come next.\r\n                buffer.push(base64IntToCharCode[instrument.envelopeSpeed]);\r\n                buffer.push(base64IntToCharCode[+instrument.discreteEnvelope]);\r\n                for (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\r\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);\r\n                    if (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {\r\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);\r\n                    }\r\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);\r\n                }\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.bars);\r\n        bits = new BitFieldWriter();\r\n        let neededBits: number = 0;\r\n        while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) for (let i: number = 0; i < this.barCount; i++) {\r\n            bits.write(neededBits, this.channels[channelIndex].bars[i]);\r\n        }\r\n        bits.encodeBase64(buffer);\r\n\r\n        buffer.push(SongTagCode.patterns);\r\n        bits = new BitFieldWriter();\r\n        const shapeBits: BitFieldWriter = new BitFieldWriter();\r\n        const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\r\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n            const channel: Channel = this.channels[channelIndex];\r\n            const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\r\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\r\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\r\n            const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\r\n            const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\r\n\r\n            // Some info about modulator settings immediately follows in mod channels.\r\n            if (isModChannel) {\r\n                const neededModInstrumentIndexBits: number = Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\r\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n\r\n                    let instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\r\n\r\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                        const modChannel: number = instrument.modChannels[mod];\r\n                        const modInstrument: number = instrument.modInstruments[mod];\r\n                        const modSetting: number = instrument.modulators[mod];\r\n                        const modFilter: number = instrument.modFilterTypes[mod];\r\n\r\n                        // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\r\n                        // 0 - For pitch/noise\r\n                        // 1 - (used to be For noise, not needed)\r\n                        // 2 - For song\r\n                        // 3 - None\r\n\r\n                        let status: number = Config.modulators[modSetting].forSong ? 2 : 0;\r\n                        if (modSetting == Config.modulators.dictionary[\"none\"].index)\r\n                            status = 3;\r\n\r\n                        bits.write(2, status);\r\n\r\n                        // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n                        if (status == 0 || status == 1) {\r\n                            bits.write(8, modChannel);\r\n                            bits.write(neededModInstrumentIndexBits, modInstrument);\r\n                        }\r\n\r\n                        // Only used if setting isn't \"none\".\r\n                        if (status != 3) {\r\n                            bits.write(6, modSetting);\r\n                        }\r\n\r\n                        // Write mod filter info, only if this is a filter mod\r\n                        if (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\") {\r\n                            bits.write(6, modFilter);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * Config.pitchesPerOctave;\r\n            let lastPitch: number = (isNoiseChannel ? 4 : octaveOffset);\r\n            const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\r\n            const recentShapes: string[] = [];\r\n            for (let i: number = 0; i < recentPitches.length; i++) {\r\n                recentPitches[i] += octaveOffset;\r\n            }\r\n            for (const pattern of channel.patterns) {\r\n                if (this.patternInstruments) {\r\n                    const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);\r\n                    bits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);\r\n                    for (let i: number = 0; i < instrumentCount; i++) {\r\n                        bits.write(neededInstrumentIndexBits, pattern.instruments[i]);\r\n                    }\r\n                }\r\n\r\n                if (pattern.notes.length > 0) {\r\n                    bits.write(1, 1);\r\n\r\n                    let curPart: number = 0;\r\n                    for (const note of pattern.notes) {\r\n\r\n                        // For mod channels, a negative offset may be necessary.\r\n                        if (note.start < curPart && isModChannel) {\r\n                            bits.write(2, 0); // rest, then...\r\n                            bits.write(1, 1); // negative offset\r\n                            bits.writePartDuration(curPart - note.start);\r\n                        }\r\n\r\n                        if (note.start > curPart) {\r\n                            bits.write(2, 0); // rest\r\n                            if (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\r\n                            bits.writePartDuration(note.start - curPart);\r\n                        }\r\n\r\n                        shapeBits.clear();\r\n\r\n                        // Old format was:\r\n                        // 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\r\n                        // New format is:\r\n                        //      0: 1 pitch\r\n                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n                        if (note.pitches.length == 1) {\r\n                            shapeBits.write(1, 0);\r\n                        } else {\r\n                            shapeBits.write(1, 1);\r\n                            shapeBits.write(3, note.pitches.length - 2);\r\n                        }\r\n\r\n                        shapeBits.writePinCount(note.pins.length - 1);\r\n\r\n                        if (!isModChannel) {\r\n                            shapeBits.write(bitsPerNoteSize, note.pins[0].size); // volume\r\n                        }\r\n                        else {\r\n                            shapeBits.write(9, note.pins[0].size); // Modulator value. 9 bits for now = 512 max mod value?\r\n                        }\r\n\r\n                        let shapePart: number = 0;\r\n                        let startPitch: number = note.pitches[0];\r\n                        let currentPitch: number = startPitch;\r\n                        const pitchBends: number[] = [];\r\n                        for (let i: number = 1; i < note.pins.length; i++) {\r\n                            const pin: NotePin = note.pins[i];\r\n                            const nextPitch: number = startPitch + pin.interval;\r\n                            if (currentPitch != nextPitch) {\r\n                                shapeBits.write(1, 1);\r\n                                pitchBends.push(nextPitch);\r\n                                currentPitch = nextPitch;\r\n                            } else {\r\n                                shapeBits.write(1, 0);\r\n                            }\r\n                            shapeBits.writePartDuration(pin.time - shapePart);\r\n                            shapePart = pin.time;\r\n                            if (!isModChannel) {\r\n                                shapeBits.write(bitsPerNoteSize, pin.size);\r\n                            } else {\r\n                                shapeBits.write(9, pin.size);\r\n                            }\r\n                        }\r\n\r\n                        const shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\r\n                        const shapeIndex: number = recentShapes.indexOf(shapeString);\r\n                        if (shapeIndex == -1) {\r\n                            bits.write(2, 1); // new shape\r\n                            bits.concat(shapeBits);\r\n                        } else {\r\n                            bits.write(1, 1); // old shape\r\n                            bits.writeLongTail(0, 0, shapeIndex);\r\n                            recentShapes.splice(shapeIndex, 1);\r\n                        }\r\n                        recentShapes.unshift(shapeString);\r\n                        if (recentShapes.length > 10) recentShapes.pop();\r\n\r\n                        const allPitches: number[] = note.pitches.concat(pitchBends);\r\n                        for (let i: number = 0; i < allPitches.length; i++) {\r\n                            const pitch: number = allPitches[i];\r\n                            const pitchIndex: number = recentPitches.indexOf(pitch);\r\n                            if (pitchIndex == -1) {\r\n                                let interval: number = 0;\r\n                                let pitchIter: number = lastPitch;\r\n                                if (pitchIter < pitch) {\r\n                                    while (pitchIter != pitch) {\r\n                                        pitchIter++;\r\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval++;\r\n                                    }\r\n                                } else {\r\n                                    while (pitchIter != pitch) {\r\n                                        pitchIter--;\r\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval--;\r\n                                    }\r\n                                }\r\n                                bits.write(1, 0);\r\n                                bits.writePitchInterval(interval);\r\n                            } else {\r\n                                bits.write(1, 1);\r\n                                bits.write(4, pitchIndex);\r\n                                recentPitches.splice(pitchIndex, 1);\r\n                            }\r\n                            recentPitches.unshift(pitch);\r\n                            if (recentPitches.length > 16) recentPitches.pop();\r\n\r\n                            if (i == note.pitches.length - 1) {\r\n                                lastPitch = note.pitches[0];\r\n                            } else {\r\n                                lastPitch = pitch;\r\n                            }\r\n                        }\r\n\r\n                        if (note.start == 0) {\r\n                            bits.write(1, note.continuesLastPattern ? 1 : 0);\r\n                        }\r\n\r\n                        curPart = note.end;\r\n                    }\r\n\r\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n                        bits.write(2, 0); // rest\r\n                        if (isModChannel) bits.write(1, 0); // positive offset\r\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\r\n                    }\r\n                } else {\r\n                    bits.write(1, 0);\r\n                }\r\n            }\r\n        }\r\n        let stringLength: number = bits.lengthBase64();\r\n        let digits: number[] = [];\r\n        while (stringLength > 0) {\r\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\r\n            stringLength = stringLength >> 6;\r\n        }\r\n        buffer.push(base64IntToCharCode[digits.length]);\r\n        Array.prototype.push.apply(buffer, digits); // append digits to buffer.\r\n        bits.encodeBase64(buffer);\r\n\t    \r\n        const maxApplyArgs: number = 64000;\r\n\t    \t\t\t            let customSamplesStr = \"\";\r\n            if(EditorConfig.customSamples != undefined && EditorConfig.customSamples.length > 0){\r\n              customSamplesStr = \"|\" + EditorConfig.customSamples.join(\"|\")\r\n              \r\n          }\r\n\t\t  //samplemark\r\n        if (buffer.length < maxApplyArgs) {\r\n            // Note: Function.apply may break for long argument lists. \r\n                            return String.fromCharCode.apply(null, buffer) + customSamplesStr;\r\n\t\t\t\t//samplemark\r\n        } else {\r\n            let result: string = \"\";\r\n            for (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\r\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\r\n            }\r\n                          return result + customSamplesStr;\r\n\t\t\t   //samplemark\r\n        }\r\n    }\r\n\r\n    private static _envelopeFromLegacyIndex(legacyIndex: number): Envelope {\r\n        // I swapped the order of \"custom\"/\"steady\", now \"none\"/\"note size\".\r\n        if (legacyIndex == 0) legacyIndex = 1; else if (legacyIndex == 1) legacyIndex = 0;\r\n        return Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];\r\n    }\r\n\r\n    public fromBase64String(compressed: string, jsonFormat: string = \"auto\"): void {\r\n        if (compressed == null || compressed == \"\") {\r\n            Song._clearSamples();\r\n\r\n            this.initToDefault(true);\r\n            return;\r\n        }\r\n        let charIndex: number = 0;\r\n        // skip whitespace.\r\n        while (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\r\n        // skip hash mark.\r\n        if (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\r\n        // if it starts with curly brace, treat it as JSON.\r\n        if (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\r\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)), jsonFormat);\r\n            return;\r\n        }\r\n\r\n        const variantTest: number = compressed.charCodeAt(charIndex);\r\n        let fromBeepBox: boolean;\r\n        let fromJummBox: boolean;\r\n        let fromGoldBox: boolean;\r\n\t    let fromUltraBox: boolean;\r\n        // let fromMidbox: boolean;\r\n        // let fromDogebox2: boolean;\r\n        // let fromAbyssBox: boolean;\r\n\r\n        // Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\r\n        if (variantTest == 0x6A) { //\"j\"\r\n            fromBeepBox = false;\r\n            fromJummBox = true;\r\n            fromGoldBox = false;\r\n\t        fromUltraBox = false;\r\n            charIndex++;\r\n        } else if (variantTest == 0x67) { //\"g\"\r\n            fromBeepBox = false;\r\n            fromJummBox = false;\r\n            fromGoldBox = true;\r\n\t        fromUltraBox = false;\r\n            charIndex++;\r\n        } else if (variantTest == 0x75) { //\"u\"\r\n                fromBeepBox = false;\r\n                fromJummBox = false;\r\n                fromGoldBox = false;\r\n\t\t        fromUltraBox = true;\r\n                charIndex++;\r\n        } else if (variantTest == 0x64) { //\"d\" \r\n                fromBeepBox = false;\r\n                fromJummBox = true;\r\n                fromGoldBox = false;\r\n\t\t        fromUltraBox = false;\r\n                // to-do: add explicit dogebox2 support\r\n                //fromDogeBox2 = true;\r\n                charIndex++;\r\n            } else {\r\n            fromBeepBox = true;\r\n            fromJummBox = false;\r\n            fromGoldBox = false;\r\n\t        fromUltraBox = false;\r\n        }\r\n\r\n        const version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n        if (fromBeepBox && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\r\n        if (fromJummBox && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\r\n        if (fromGoldBox && (version == -1 || version > Song._latestGoldBoxVersion || version < Song._oldestGoldBoxVersion)) return;\r\n\t    if (fromUltraBox && (version == -1 || version > Song._latestUltraBoxVersion || version < Song._oldestUltraBoxVersion)) return;\r\n        const beforeTwo: boolean = version < 2;\r\n        const beforeThree: boolean = version < 3;\r\n        const beforeFour: boolean = version < 4;\r\n        const beforeFive: boolean = version < 5;\r\n        const beforeSix: boolean = version < 6;\r\n        const beforeSeven: boolean = version < 7;\r\n        const beforeEight: boolean = version < 8;\r\n        const beforeNine: boolean = version < 9;\r\n        this.initToDefault((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)));\r\n        const forceSimpleFilter: boolean = (fromBeepBox && beforeNine || fromJummBox && beforeFive);\r\n\r\n        let willLoadLegacySamplesForOldSongs: boolean = false;\r\n\r\n        if (fromUltraBox || fromGoldBox) {\r\n            compressed = compressed.replaceAll(\"%7C\", \"|\")\r\n                var compressed_array = compressed.split(\"|\");\r\n                compressed = compressed_array.shift()!;\r\n                if(EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != compressed_array.join(\", \")) {\r\n\r\n                    Song._restoreChipWaveListToDefault();\r\n\r\n                    let willLoadLegacySamples = false;\r\n                    let willLoadNintariboxSamples = false;\r\n                    let willLoadMarioPaintboxSamples = false;\r\n                    const customSampleUrls = [];\r\n                    const customSamplePresets: Preset[] = [];\r\n                    sampleLoadingState.statusTable = {};\r\n                    sampleLoadingState.urlTable = {};\r\n                    sampleLoadingState.totalSamples = 0;\r\n                    sampleLoadingState.samplesLoaded = 0;\r\n                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\r\n                        sampleLoadingState.totalSamples,\r\n                        sampleLoadingState.samplesLoaded\r\n                    ));\r\n                    for (const url of compressed_array) {\r\n                        if (url.toLowerCase() === \"legacysamples\") {\r\n                            if (!willLoadLegacySamples) {\r\n                                willLoadLegacySamples = true;\r\n                                customSampleUrls.push(url);\r\n                                loadBuiltInSamples(0);\r\n                            }\r\n                        } \r\n                        else if (url.toLowerCase() === \"nintariboxsamples\") {\r\n                            if (!willLoadNintariboxSamples) {\r\n                                willLoadNintariboxSamples = true;\r\n                                customSampleUrls.push(url);\r\n                                loadBuiltInSamples(1);\r\n                            }\r\n                        }\r\n                        else if (url.toLowerCase() === \"mariopaintboxsamples\") {\r\n                            if (!willLoadMarioPaintboxSamples) {\r\n                                willLoadMarioPaintboxSamples = true;\r\n                                customSampleUrls.push(url);\r\n                                loadBuiltInSamples(2);\r\n                            }\r\n                        }\r\n                        \r\n                        else {\r\n                            // UB version 2 URLs and below will be using the old syntax, so we do need to parse it in that case.\r\n                            // UB version 3 URLs should only have the new syntax, though, unless the user has edited the URL manually.\r\n                            const parseOldSyntax: boolean = beforeThree;\r\n                            const ok: boolean = Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\r\n                            if (!ok) {\r\n                                continue;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (customSampleUrls.length > 0) {\r\n                        EditorConfig.customSamples = customSampleUrls;\r\n                    }\r\n                    if (customSamplePresets.length > 0) {\r\n                        const customSamplePresetsMap: DictionaryArray<Preset> = toNameMap(customSamplePresets);\r\n                        EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\r\n                            name: \"Custom Sample Presets\",\r\n                            presets: customSamplePresetsMap,\r\n                            index: EditorConfig.presetCategories.length,\r\n                        };\r\n                        // EditorConfig.presetCategories.splice(1, 0, {\r\n                             // name: \"Custom Sample Presets\",\r\n                             // presets: customSamplePresets,\r\n                             // index: EditorConfig.presetCategories.length,\r\n                        // });\r\n                    }\r\n\r\n               \r\n                }\r\n                //samplemark\r\n        }\r\n\r\n        if (beforeThree && fromBeepBox) {\r\n            // Originally, the only instrument transition was \"instant\" and the only drum wave was \"retro\".\r\n            for (const channel of this.channels) {\r\n                channel.instruments[0].transition = Config.transitions.dictionary[\"interrupt\"].index;\r\n                channel.instruments[0].effects |= 1 << EffectType.transition;\r\n            }\r\n            this.channels[3].instruments[0].chipNoise = 0;\r\n        }\r\n\r\n        let legacySettingsCache: LegacySettings[][] | null = null;\r\n        if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n            // Unfortunately, old versions of BeepBox had a variety of different ways of saving\r\n            // filter-and-envelope-related parameters in the URL, and none of them directly\r\n            // correspond to the new way of saving these parameters. We can approximate the old\r\n            // settings by collecting all the old settings for an instrument and passing them to\r\n            // convertLegacySettings(), so I use this data structure to collect the settings\r\n            // for each instrument if necessary.\r\n            legacySettingsCache = [];\r\n            for (let i: number = legacySettingsCache.length; i < this.getChannelCount(); i++) {\r\n                legacySettingsCache[i] = [];\r\n                for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache[i][j] = {};\r\n            }\r\n        }\r\n\r\n        let legacyGlobalReverb: number = 0; // beforeNine reverb was song-global, record that reverb here and adapt it to instruments as needed.\r\n\r\n        let instrumentChannelIterator: number = 0;\r\n        let instrumentIndexIterator: number = -1;\r\n        let command: number;\r\n        let useSlowerArpSpeed: boolean = false;\r\n        let useFastTwoNoteArp: boolean = false;\r\n        while (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\r\n            case SongTagCode.songTitle: {\r\n                // Length of song name string\r\n                var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\r\n                document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\r\n\r\n                charIndex += songNameLength;\r\n            } break;\r\n            case SongTagCode.channelCount: {\r\n                this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                if (fromBeepBox || (fromJummBox && beforeTwo)) {\r\n                    // No mod channel support before jummbox v2\r\n                    this.modChannelCount = 0;\r\n                } else {\r\n                    this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                }\r\n                this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\r\n                this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\r\n                this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\r\n\r\n                for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                    this.channels[channelIndex] = new Channel();\r\n                }\r\n                this.channels.length = this.getChannelCount();\r\n                if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    for (let i: number = legacySettingsCache!.length; i < this.getChannelCount(); i++) {\r\n                        legacySettingsCache![i] = [];\r\n                        for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache![i][j] = {};\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.scale: {\r\n                this.scale = clamp(0, Config.scales.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                // All the scales were jumbled around by Jummbox. Just convert to free.\r\n                if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\r\n                    for (var i = 1; i < Config.pitchesPerOctave; i++) {\r\n                        this.scaleCustom[i] = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1; // ineffiecent? yes, all we're going to do for now? hell yes\r\n                    }\r\n                }\r\n                if (fromBeepBox) this.scale = 0;\r\n            } break;\r\n            case SongTagCode.key: {\r\n                if (beforeSeven && fromBeepBox) {\r\n                    this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.octave = 0;\r\n                } else if (fromBeepBox || fromJummBox) {\r\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.octave = 0;\r\n                } else if (fromGoldBox || (beforeThree && fromUltraBox)) {\r\n                    // GoldBox (so far) didn't introduce any new keys, but old\r\n                    // songs made with early versions of UltraBox share the\r\n                    // same URL format, and those can have more keys. This\r\n                    // shouldn't really result in anything other than 0-11 for\r\n                    // the key and 0 for the octave for GoldBox songs.\r\n                    const rawKeyIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const [key, octave]: [number, number] = convertLegacyKeyToKeyAndOctave(rawKeyIndex);\r\n                    this.key = key;\r\n                    this.octave = octave;\r\n                } else {\r\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.octaveMin);\r\n                }\r\n            } break;\r\n            case SongTagCode.loopStart: {\r\n                if (beforeFive && fromBeepBox) {\r\n                    this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                }\r\n            } break;\r\n            case SongTagCode.loopEnd: {\r\n                if (beforeFive && fromBeepBox) {\r\n                    this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n            } break;\r\n            case SongTagCode.tempo: {\r\n                if (beforeFour && fromBeepBox) {\r\n                    this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else if (beforeSeven && fromBeepBox) {\r\n                    this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else {\r\n                    this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\r\n            } break;\r\n            case SongTagCode.reverb: {\r\n                if (beforeNine && fromBeepBox) {\r\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 12;\r\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\r\n                } else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\r\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\r\n                } else {\r\n                    // Do nothing, BeepBox v9+ do not support song-wide reverb - JummBox still does via modulator.\r\n                }\r\n            } break;\r\n            case SongTagCode.beatCount: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else {\r\n                    this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n                this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\r\n            } break;\r\n            case SongTagCode.barCount: {\r\n                const barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\r\n                for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                    for (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {\r\n                        this.channels[channelIndex].bars[bar] = (bar < 4) ? 1 : 0;\r\n                    }\r\n                    this.channels[channelIndex].bars.length = this.barCount;\r\n                }\r\n            } break;\r\n            case SongTagCode.patternCount: {\r\n                let patternsPerChannel: number;\r\n                if (beforeEight && fromBeepBox) {\r\n                    patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                } else {\r\n                    patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n                this.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);\r\n                const channelCount: number = this.getChannelCount();\r\n                for (let channelIndex: number = 0; channelIndex < channelCount; channelIndex++) {\r\n                    const patterns: Pattern[] = this.channels[channelIndex].patterns;\r\n                    for (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {\r\n                        patterns[pattern] = new Pattern();\r\n                    }\r\n                    patterns.length = this.patternsPerChannel;\r\n                }\r\n            } break;\r\n            case SongTagCode.instrumentCount: {\r\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    const instrumentsPerChannel: number = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\r\n                    this.layeredInstruments = false;\r\n                    this.patternInstruments = (instrumentsPerChannel > 1);\r\n\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\r\n                        const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\r\n\r\n                        for (let instrumentIndex: number = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\r\n                            this.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\r\n                        }\r\n                        this.channels[channelIndex].instruments.length = instrumentsPerChannel;\r\n                        if (beforeSix && fromBeepBox) {\r\n                            for (let instrumentIndex: number = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\r\n                                this.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\r\n                            }\r\n                        }\r\n\r\n                        for (let j: number = legacySettingsCache![channelIndex].length; j < instrumentsPerChannel; j++) {\r\n                            legacySettingsCache![channelIndex][j] = {};\r\n                        }\r\n                    }\r\n                } else {\r\n                    const instrumentsFlagBits: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;\r\n                    this.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        let instrumentCount: number = 1;\r\n                        if (this.layeredInstruments || this.patternInstruments) {\r\n                            instrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\r\n                        }\r\n                        const channel: Channel = this.channels[channelIndex];\r\n                        const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\r\n                        const isModChannel: boolean = this.getChannelIsMod(channelIndex);\r\n                        for (let i: number = channel.instruments.length; i < instrumentCount; i++) {\r\n                            channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\r\n                        }\r\n                        channel.instruments.length = instrumentCount;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.rhythm: {\r\n                if (!fromUltraBox) {\r\n\t\t\tlet newRhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\t\r\n\t\t\tthis.rhythm = clamp(0, Config.rhythms.length, newRhythm + 2);\r\n\t\t\tif (fromJummBox && beforeThree || fromBeepBox) {\r\n\t\t\t\tif (this.rhythm == Config.rhythms.dictionary[\"÷3 (triplets)\"].index || this.rhythm == Config.rhythms.dictionary[\"÷6\"].index) {\r\n\t\t\t\t\tuseSlowerArpSpeed = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rhythm >= Config.rhythms.dictionary[\"÷6\"].index) {\r\n\t\t\t\t\t// @TODO: This assumes that 6 and 8 are in that order, but\r\n\t\t\t\t\t// if someone reorders Config.rhythms that may not be true,\r\n\t\t\t\t\t// so this check probably should instead look for those\r\n\t\t\t\t\t// specific rhythms.\r\n\t\t\t\t\tuseFastTwoNoteArp = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tthis.rhythm = clamp(0, Config.rhythms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t}\r\n            } break;\r\n            case SongTagCode.channelOctave: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n                    if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\r\n                } else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n                        if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\r\n                    }\r\n                } else {\r\n                    for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\r\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    for (let channelIndex: number = this.pitchChannelCount; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        this.channels[channelIndex].octave = 0;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.startInstrument: {\r\n                instrumentIndexIterator++;\r\n                if (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {\r\n                    instrumentChannelIterator++;\r\n                    instrumentIndexIterator = 0;\r\n                }\r\n                validateRange(0, this.channels.length - 1, instrumentChannelIterator);\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                // JB before v5 had custom chip and mod before pickedString and supersaw were added. Index +2.\r\n                let instrumentType: number = validateRange(0, InstrumentType.length - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\r\n                    if (instrumentType == InstrumentType.pickedString || instrumentType == InstrumentType.supersaw) {\r\n                        instrumentType += 2;\r\n                    }\r\n                }\r\n                // Similar story here, JB before v5 had custom chip and mod before supersaw was added. Index +1.\r\n                else if ((fromJummBox && beforeSix) || (fromGoldBox && !beforeFour) || (fromUltraBox && beforeFive) ) {\r\n                    if (instrumentType == InstrumentType.supersaw || instrumentType == InstrumentType.customChipWave || instrumentType == InstrumentType.mod) {\r\n                        instrumentType += 1;\r\n                    }\r\n                }\r\n                instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\r\n\r\n                // Anti-aliasing was added in BeepBox 3.0 (v6->v7) and JummBox 1.3 (v1->v2 roughly but some leakage possible)\r\n                if (((beforeSeven && fromBeepBox) || (beforeTwo && fromJummBox)) && (instrumentType == InstrumentType.chip || instrumentType == InstrumentType.customChipWave || instrumentType == InstrumentType.pwm)) {\r\n                    instrument.aliases = true;\r\n                    instrument.distortion = 0;\r\n                    instrument.effects |= 1 << EffectType.distortion;\r\n                }\r\n                if (useSlowerArpSpeed) {\r\n                    instrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\r\n                }\r\n                if (useFastTwoNoteArp) {\r\n                    instrument.fastTwoNoteArp = true;\r\n                }\r\n\r\n                if (beforeSeven && fromBeepBox) {\r\n                    // instrument.effects = 0;\r\n                    // Chip/noise instruments had arpeggio and FM had custom interval but neither\r\n                    // explicitly saved the chorus setting beforeSeven so enable it here.\r\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\r\n                        // Enable chord if it was used.\r\n                        instrument.effects |= 1 << EffectType.chord;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.preset: {\r\n                const presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\r\n                // Picked string was inserted before custom chip in JB v5, so bump up preset index.\r\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\r\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.pickedString) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.customChipWave;\r\n                    }\r\n                }\r\n                // Similar story, supersaw is also before custom chip (and mod, but mods can't have presets).\r\n                else if ((fromJummBox && beforeSix) || (fromUltraBox && beforeFive)) {\r\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.supersaw ) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.customChipWave;\r\n                    }\r\n                    // ultra code for 6-op fm maybe\r\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.mod ) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.fm6op;\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.fm6op;\r\n                    }\r\n                }\r\n                // BeepBox directly tweaked \"grand piano\", but JB kept it the same. The most up to date version is now \"grand piano 3\"\r\n                if (fromBeepBox && presetValue == EditorConfig.nameToPresetValue(\"grand piano 1\") ) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = EditorConfig.nameToPresetValue(\"grand piano 3\")!;\r\n                }\r\n            } break;\r\n            case SongTagCode.wave: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                    instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n\r\n                    // Version 2 didn't save any settings for settings for filters, or envelopes,\r\n                    // just waves, so initialize them here I guess.\r\n                    instrument.convertLegacySettings(legacySettingsCache![channelIndex][0], forceSimpleFilter);\r\n\r\n                } else if (beforeSix && fromBeepBox) {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (const instrument of this.channels[channelIndex].instruments) {\r\n                            if (channelIndex >= this.pitchChannelCount) {\r\n                                instrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            } else {\r\n                                instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && fromBeepBox) {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    } else {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                    }\r\n                } else {\r\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type == InstrumentType.noise) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    } else {\t\r\n\t\t\t\tif (fromUltraBox) {\r\n\t\t\t\t\tconst chipWaveReal = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tconst chipWaveCounter = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\r\n\t\t\t\t\tif (chipWaveCounter == 3) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 186);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t} else if (chipWaveCounter == 2) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 124);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t} else if (chipWaveCounter == 1) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 62);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t}\r\n\t\t }\r\n        \t}\r\n            } break;\r\n            case SongTagCode.eqFilter: {\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                    if (beforeSeven && fromBeepBox) {\r\n                        const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\r\n                        //const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\r\n                        const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\r\n\r\n                        if (beforeThree && fromBeepBox) {\r\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\r\n                            const legacyFilter: number = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\r\n                            legacySettings.filterResonance = 0;\r\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\r\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                        } else if (beforeSix && fromBeepBox) {\r\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\r\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\r\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\r\n                                    const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n                                    if (channelIndex < this.pitchChannelCount) {\r\n                                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\r\n                                        legacySettings.filterResonance = 0;\r\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\r\n                                    } else {\r\n                                        legacySettings.filterCutoff = 10;\r\n                                        legacySettings.filterResonance = 0;\r\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[\"none\"];\r\n                                    }\r\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\r\n                            legacySettings.filterResonance = 0;\r\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\r\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                        }\r\n                    } else {\r\n                        const filterCutoffRange: number = 11;\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                        legacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                    }\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    if (fromBeepBox || typeCheck == 0) {\r\n                        instrument.eqFilterType = false;\r\n                        if (fromJummBox || fromGoldBox || fromUltraBox)\r\n                            typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next to get control point count\r\n                        const originalControlPointCount: number = typeCheck;\r\n                        instrument.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\r\n                        for (let i: number = instrument.eqFilter.controlPoints.length; i < instrument.eqFilter.controlPointCount; i++) {\r\n                            instrument.eqFilter.controlPoints[i] = new FilterControlPoint();\r\n                        }\r\n                        for (let i: number = 0; i < instrument.eqFilter.controlPointCount; i++) {\r\n                            const point: FilterControlPoint = instrument.eqFilter.controlPoints[i];\r\n                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                        for (let i: number = instrument.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\r\n                            charIndex += 3;\r\n                        }\r\n\r\n                        // Get subfilters as well. Skip Index 0, is a copy of the base filter.\r\n                        instrument.eqSubFilters[0] = instrument.eqFilter;\r\n                        if ((fromJummBox && !beforeFive) || (fromGoldBox && !beforeFour) || fromUltraBox) {\r\n                            let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                                if (usingSubFilterBitfield & (1 << j)) {\r\n                                    // Number of control points\r\n                                    const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                                    if (instrument.eqSubFilters[j + 1] == null)\r\n                                        instrument.eqSubFilters[j + 1] = new FilterSettings();\r\n                                    instrument.eqSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\r\n                                    for (let i: number = instrument.eqSubFilters[j + 1]!.controlPoints.length; i < instrument.eqSubFilters[j + 1]!.controlPointCount; i++) {\r\n                                        instrument.eqSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\r\n                                    }\r\n                                    for (let i: number = 0; i < instrument.eqSubFilters[j + 1]!.controlPointCount; i++) {\r\n                                        const point: FilterControlPoint = instrument.eqSubFilters[j + 1]!.controlPoints[i];\r\n                                        point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                    }\r\n                                    for (let i: number = instrument.eqSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\r\n                                        charIndex += 3;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        instrument.eqFilterType = true;\r\n                        instrument.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.filterResonance: {\r\n                if (fromUltraBox) {\r\n                    if (beforeThree) {\r\n                        // Still have to support the old and bad loop control data format written as a test, sigh.\r\n                        const sampleLoopInfoEncodedLength = decode32BitNumber(compressed, charIndex);\r\n                        charIndex += 6;\r\n                        const sampleLoopInfoEncoded = compressed.slice(charIndex, charIndex + sampleLoopInfoEncodedLength);\r\n                        charIndex += sampleLoopInfoEncodedLength;\r\n                        interface SampleLoopInfo {\r\n                            isUsingAdvancedLoopControls: boolean;\r\n                            chipWaveLoopStart: number;\r\n                            chipWaveLoopEnd: number;\r\n                            chipWaveLoopMode: number;\r\n                            chipWavePlayBackwards: boolean;\r\n                            chipWaveStartOffset: number;\r\n                        }\r\n                        interface SampleLoopInfoEntry {\r\n                            channel: number;\r\n                            instrument: number;\r\n                            info: SampleLoopInfo;\r\n                        }\r\n                        const sampleLoopInfo: SampleLoopInfoEntry[] = JSON.parse(atob(sampleLoopInfoEncoded));\r\n                        for (const entry of sampleLoopInfo) {\r\n                            const channelIndex: number = entry[\"channel\"];\r\n                            const instrumentIndex: number = entry[\"instrument\"];\r\n                            const info: SampleLoopInfo = entry[\"info\"];\r\n                            const instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\r\n                            instrument.isUsingAdvancedLoopControls = info[\"isUsingAdvancedLoopControls\"];\r\n                            instrument.chipWaveLoopStart = info[\"chipWaveLoopStart\"];\r\n                            instrument.chipWaveLoopEnd = info[\"chipWaveLoopEnd\"];\r\n                            instrument.chipWaveLoopMode = info[\"chipWaveLoopMode\"];\r\n                            instrument.chipWavePlayBackwards = info[\"chipWavePlayBackwards\"];\r\n                            instrument.chipWaveStartOffset = info[\"chipWaveStartOffset\"];\r\n                            // @TODO: Whenever chipWaveReleaseMode is implemented, it should be set here to the default.\r\n                        }\r\n                    } else {\r\n                        // Read the new loop control data format.\r\n                        // See Song.toBase64String for details on the encodings used here.\r\n                        const encodedLoopMode: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const isUsingAdvancedLoopControls: boolean = Boolean(encodedLoopMode & 1);\r\n                        const chipWaveLoopMode: number = encodedLoopMode >> 1;\r\n                        const encodedReleaseMode: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const chipWavePlayBackwards: boolean = Boolean(encodedReleaseMode & 1);\r\n                        // const chipWaveReleaseMode: number = encodedReleaseMode >> 1;\r\n                        const chipWaveLoopStart: number = decode32BitNumber(compressed, charIndex);\r\n                        charIndex += 6;\r\n                        const chipWaveLoopEnd: number = decode32BitNumber(compressed, charIndex);\r\n                        charIndex += 6;\r\n                        const chipWaveStartOffset: number = decode32BitNumber(compressed, charIndex);\r\n                        charIndex += 6;\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        instrument.isUsingAdvancedLoopControls = isUsingAdvancedLoopControls;\r\n                        instrument.chipWaveLoopStart = chipWaveLoopStart;\r\n                        instrument.chipWaveLoopEnd = chipWaveLoopEnd;\r\n                        instrument.chipWaveLoopMode = chipWaveLoopMode;\r\n                        instrument.chipWavePlayBackwards = chipWavePlayBackwards;\r\n                        instrument.chipWaveStartOffset = chipWaveStartOffset;\r\n                        // instrument.chipWaveReleaseMode = chipWaveReleaseMode;\r\n                    }\r\n                }\r\n                else if (fromGoldBox && !beforeFour && beforeSix) {\r\n                    if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\r\n                            if (!willLoadLegacySamplesForOldSongs) {\r\n                                willLoadLegacySamplesForOldSongs = true;\r\n                                Config.willReloadForCustomSamples = true;\r\n                                EditorConfig.customSamples = [\"legacySamples\"];\r\n                                loadBuiltInSamples(0);\r\n                            }\r\n                    }\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 125);\t\t\t\t\t\t\r\n                } else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    const filterResonanceRange: number = 8;\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.drumsetEnvelopes: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                    if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)){\r\n\r\n                    }\r\n                    if (instrument.type == InstrumentType.drumset) {\r\n                        for (let i: number = 0; i < Config.drumCount; i++) {\r\n                            let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\r\n                            instrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(aa).index;\r\n                        }\r\n                    } else {\r\n                        // This used to be used for general filter envelopes.\r\n                        // The presence of an envelope affects how convertLegacySettings\r\n                        // decides the closest possible approximation, so update it.\r\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                        let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\r\n                        legacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(aa);\r\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                    }\r\n                } else {\r\n                    // This tag is now only used for drumset filter envelopes.\r\n                    for (let i: number = 0; i < Config.drumCount; i++) {\r\n                        let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\r\n                        instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, aa);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.pulseWidth: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                instrument.pulseWidth = clamp(0, Config.pulseWidthRange + (+(fromJummBox)) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                if (fromBeepBox) {\r\n                    // BeepBox formula\r\n                    instrument.pulseWidth = Math.round(Math.pow(0.5, (7 - instrument.pulseWidth) * Config.pulseWidthStepPower) * Config.pulseWidthRange);\r\n\r\n                }\r\n\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                    const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\r\n                    legacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(aa);\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                }\r\n\r\n                if (fromUltraBox && !beforeFour) {\r\n                    instrument.decimalOffset = clamp(0, 99 + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n\r\n            } break;\r\n            case SongTagCode.stringSustain: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                const sustainValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\tinstrument.stringSustain = clamp(0, Config.stringSustainRange, sustainValue & 0x1F);\r\n\t\t\t\tinstrument.stringSustainType = Config.enableAcousticSustain ? clamp(0, SustainType.length, sustainValue >> 5) : SustainType.bright;\r\n            } break;\r\n            case SongTagCode.fadeInOut: {\r\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    // this tag was used for a combination of transition and fade in/out.\r\n                    const legacySettings = [\r\n                        { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\r\n                        { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\r\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\r\n                    ];\r\n                    if (beforeThree && fromBeepBox) {\r\n                        const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\r\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\r\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\r\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\r\n                            // Enable transition if it was used.\r\n                            instrument.effects |= 1 << EffectType.transition;\r\n                        }\r\n                    } else if (beforeSix && fromBeepBox) {\r\n                        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                            for (const instrument of this.channels[channelIndex].instruments) {\r\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                                instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\r\n                                instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\r\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\r\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\r\n                                    // Enable transition if it was used.\r\n                                    instrument.effects |= 1 << EffectType.transition;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if ((beforeFour && !fromGoldBox && !fromUltraBox) || fromBeepBox) {\r\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\r\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\r\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\r\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\r\n                            // Enable transition if it was used.\r\n                            instrument.effects |= 1 << EffectType.transition;\r\n                        }\r\n                    } else {\r\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\r\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\r\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\r\n\r\n                        // Read tie-note \r\n                        if (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] > 0) {\r\n                            // Set legacy tie over flag, which is only used to port notes in patterns using this instrument as tying.\r\n                            instrument.legacyTieOver = true;\r\n\r\n                        }\r\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n\r\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index || instrument.clicklessTransition) {\r\n                            // Enable transition if it was used.\r\n                            instrument.effects |= 1 << EffectType.transition;\r\n                        }\r\n                    }\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    if (fromJummBox||fromGoldBox||fromUltraBox)\r\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n                }\r\n            } break;\r\n            case SongTagCode.vibrato: {\r\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    if (beforeSeven && fromBeepBox) {\r\n                        if (beforeThree && fromBeepBox) {\r\n                            const legacyEffects: number[] = [0, 3, 2, 0];\r\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"tremolo2\"];\r\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\r\n                            instrument.vibrato = legacyEffects[effect];\r\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\r\n                                // Imitate the legacy tremolo with a filter envelope.\r\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\r\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                            }\r\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                                // Enable vibrato if it was used.\r\n                                instrument.effects |= 1 << EffectType.vibrato;\r\n                            }\r\n                        } else if (beforeSix && fromBeepBox) {\r\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\r\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\r\n                                    const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\r\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\r\n                                    instrument.vibrato = legacyEffects[effect];\r\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\r\n                                        // Imitate the legacy tremolo with a filter envelope.\r\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\r\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                                    }\r\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                                        // Enable vibrato if it was used.\r\n                                        instrument.effects |= 1 << EffectType.vibrato;\r\n                                    }\r\n                                    if ((legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) && !this.getChannelIsNoise(channelIndex)) {\r\n                                        // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\r\n                                        instrument.effects |= 1 << EffectType.reverb;\r\n                                        instrument.reverb = legacyGlobalReverb;\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\r\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                            instrument.vibrato = legacyEffects[effect];\r\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\r\n                                // Imitate the legacy tremolo with a filter envelope.\r\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\r\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                            }\r\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                                // Enable vibrato if it was used.\r\n                                instrument.effects |= 1 << EffectType.vibrato;\r\n                            }\r\n                            if (legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                                // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\r\n                                instrument.effects |= 1 << EffectType.reverb;\r\n                                instrument.reverb = legacyGlobalReverb;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        const vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.vibrato = vibrato;\r\n                        if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                            // Enable vibrato if it was used.\r\n                            instrument.effects |= 1 << EffectType.vibrato;\r\n                        }\r\n                        // Custom vibrato\r\n                        if (vibrato == Config.vibratos.length) {\r\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50;\r\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 2;\r\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.effects |= 1 << EffectType.vibrato;\r\n                        }\r\n                        // Enforce standard vibrato settings\r\n                        else {\r\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\r\n                            instrument.vibratoSpeed = 10; // Normal speed\r\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\r\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.arpeggioSpeed: {\r\n                // Deprecated, but supported for legacy purposes\r\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.arpeggioSpeed = clamp(0, Config.modulators.dictionary[\"arp speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\r\n                }\r\n                else {\r\n                    // Do nothing, deprecated for now\r\n                }\r\n            } break;\r\n            case SongTagCode.unison: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channelIndex].instruments[0].unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    const instrument = this.channels[channelIndex].instruments[0];\r\n                    instrument.unisonVoices = Config.unisons[instrument.unison].voices;\r\n                    instrument.unisonSpread = Config.unisons[instrument.unison].spread;\r\n                    instrument.unisonOffset = Config.unisons[instrument.unison].offset;\r\n                    instrument.unisonExpression = Config.unisons[instrument.unison].expression;\r\n                    instrument.unisonSign = Config.unisons[instrument.unison].sign;\r\n                } else if (beforeSix && fromBeepBox) {\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (const instrument of this.channels[channelIndex].instruments) {\r\n                            const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            let unison: number = clamp(0, Config.unisons.length, originalValue);\r\n                            if (originalValue == 8) {\r\n                                // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n                                unison = 2;\r\n                                instrument.chord = 3;\r\n                            }\r\n                            instrument.unison = unison;\r\n                            instrument.unisonVoices = Config.unisons[instrument.unison].voices;\r\n                            instrument.unisonSpread = Config.unisons[instrument.unison].spread;\r\n                            instrument.unisonOffset = Config.unisons[instrument.unison].offset;\r\n                            instrument.unisonExpression = Config.unisons[instrument.unison].expression;\r\n                            instrument.unisonSign = Config.unisons[instrument.unison].sign;\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && fromBeepBox) {\r\n                    const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    let unison: number = clamp(0, Config.unisons.length, originalValue);\r\n                    if (originalValue == 8) {\r\n                        // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n                        unison = 2;\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\r\n                    }\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = unison;\r\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.unisonVoices = Config.unisons[instrument.unison].voices;\r\n                    instrument.unisonSpread = Config.unisons[instrument.unison].spread;\r\n                    instrument.unisonOffset = Config.unisons[instrument.unison].offset;\r\n                    instrument.unisonExpression = Config.unisons[instrument.unison].expression;\r\n                    instrument.unisonSign = Config.unisons[instrument.unison].sign;\r\n                } else {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = clamp(0, Config.unisons.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    \r\n                    if ((fromUltraBox && !beforeFive) && (instrument.unison == Config.unisons.length))  {\r\n                    // if (instrument.unison == Config.unisons.length) {\r\n                        instrument.unisonVoices = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                        const unisonSpreadNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const unisonSpread: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\r\n\r\n                        const unisonOffsetNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const unisonOffset: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\r\n\r\n                        const unisonExpressionNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const unisonExpression: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\r\n                        \r\n                        const unisonSignNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const unisonSign: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\r\n\r\n\r\n                        instrument.unisonSpread = unisonSpread / 1000;\r\n                        if (unisonSpreadNegative == 0) instrument.unisonSpread *= -1;\r\n\r\n                        instrument.unisonOffset = unisonOffset / 1000;\r\n                        if (unisonOffsetNegative == 0) instrument.unisonOffset *= -1;\r\n\r\n                        instrument.unisonExpression = unisonExpression / 1000;\r\n                        if (unisonExpressionNegative == 0) instrument.unisonExpression *= -1;\r\n\r\n                        instrument.unisonSign = unisonSign / 1000;\r\n                        if (unisonSignNegative == 0) instrument.unisonSign *= -1;\r\n                    } else {\r\n                        instrument.unisonVoices = Config.unisons[instrument.unison].voices;\r\n                        instrument.unisonSpread = Config.unisons[instrument.unison].spread;\r\n                        instrument.unisonOffset = Config.unisons[instrument.unison].offset;\r\n                        instrument.unisonExpression = Config.unisons[instrument.unison].expression;\r\n                        instrument.unisonSign = Config.unisons[instrument.unison].sign;\r\n                    }\r\n                }\r\n            \r\n            } break;\r\n            case SongTagCode.chord: {\r\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\r\n                        // Enable chord if it was used.\r\n                        instrument.effects |= 1 << EffectType.chord;\r\n                    }\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.effects: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                    instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << EffectType.length) - 1));\r\n                    if (legacyGlobalReverb == 0 && !((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\r\n                        // Disable reverb if legacy song reverb was zero.\r\n                        instrument.effects &= ~(1 << EffectType.reverb);\r\n                    } else if (effectsIncludeReverb(instrument.effects)) {\r\n                        instrument.reverb = legacyGlobalReverb;\r\n                    }\r\n                    // @jummbus - Enabling pan effect on song import no matter what to make it a default.\r\n                    //if (instrument.pan != Config.panCenter) {\r\n                    instrument.effects |= 1 << EffectType.panning;\r\n                    //}\r\n                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\r\n                        // Enable vibrato if it was used.\r\n                        instrument.effects |= 1 << EffectType.vibrato;\r\n                    }\r\n                    if (instrument.detune != Config.detuneCenter) {\r\n                        // Enable detune if it was used.\r\n                        instrument.effects |= 1 << EffectType.detune;\r\n                    }\r\n                    if (instrument.aliases)\r\n                        instrument.effects |= 1 << EffectType.distortion;\r\n                    else\r\n                        instrument.effects &= ~(1 << EffectType.distortion);\r\n\r\n                    // convertLegacySettings may need to force-enable note filter, call\r\n                    // it again here to make sure that this override takes precedence.\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                } else {\r\n                    // BeepBox currently uses two base64 characters at 6 bits each for a bitfield representing all the enabled effects.\r\n                    if (EffectType.length > 12) throw new Error();\r\n                    instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\r\n                    if (effectsIncludeNoteFilter(instrument.effects)) {\r\n                        let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        if (fromBeepBox || typeCheck == 0) {\r\n                            instrument.noteFilterType = false;\r\n                            if (fromJummBox || fromGoldBox || fromUltraBox)\r\n                                typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next index in jummbox to get actual count\r\n                            instrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, typeCheck);\r\n                            for (let i: number = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {\r\n                                instrument.noteFilter.controlPoints[i] = new FilterControlPoint();\r\n                            }\r\n                            for (let i: number = 0; i < instrument.noteFilter.controlPointCount; i++) {\r\n                                const point: FilterControlPoint = instrument.noteFilter.controlPoints[i];\r\n                                point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            }\r\n                            for (let i: number = instrument.noteFilter.controlPointCount; i < typeCheck; i++) {\r\n                                charIndex += 3;\r\n                            }\r\n\r\n                            // Get subfilters as well. Skip Index 0, is a copy of the base filter.\r\n                            instrument.noteSubFilters[0] = instrument.noteFilter;\r\n                            if ((fromJummBox && !beforeFive) || (fromGoldBox) || (fromUltraBox)) {\r\n                                let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\r\n                                    if (usingSubFilterBitfield & (1 << j)) {\r\n                                        // Number of control points\r\n                                        const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                                        if (instrument.noteSubFilters[j + 1] == null)\r\n                                            instrument.noteSubFilters[j + 1] = new FilterSettings();\r\n                                        instrument.noteSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\r\n                                        for (let i: number = instrument.noteSubFilters[j + 1]!.controlPoints.length; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\r\n                                            instrument.noteSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\r\n                                        }\r\n                                        for (let i: number = 0; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\r\n                                            const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[i];\r\n                                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                        }\r\n                                        for (let i: number = instrument.noteSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\r\n                                            charIndex += 3;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            instrument.noteFilterType = true;\r\n                            instrument.noteFilter.reset();\r\n                            instrument.noteFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.noteFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\r\n                        }\r\n                    }\r\n                    if (effectsIncludeTransition(instrument.effects)) {\r\n                        instrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    if (effectsIncludeChord(instrument.effects)) {\r\n                        instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        // Custom arpeggio speed... only in JB, and only if the instrument arpeggiates.\r\n                        if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index && (fromJummBox||fromGoldBox||fromUltraBox)) {\r\n                            instrument.arpeggioSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            instrument.fastTwoNoteArp = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\r\n                        }\r\n                    }\r\n                    if (effectsIncludePitchShift(instrument.effects)) {\r\n                        instrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    if (effectsIncludeDetune(instrument.effects)) {\r\n                        if (fromBeepBox) {\r\n                            // Convert from BeepBox's formula\r\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.detune = Math.round((instrument.detune - 9) * (Math.abs(instrument.detune - 9) + 1) / 2 + Config.detuneCenter);\r\n                        } else {\r\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                    if (effectsIncludeVibrato(instrument.effects)) {\r\n                        instrument.vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\r\n                        // Custom vibrato\r\n                        if (instrument.vibrato == Config.vibratos.length && (fromJummBox || fromGoldBox || fromUltraBox)) {\r\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\r\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                        // Enforce standard vibrato settings\r\n                        else {\r\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\r\n                            instrument.vibratoSpeed = 10; // Normal speed\r\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\r\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\r\n                        }\r\n                    }\r\n                    if (effectsIncludeDistortion(instrument.effects)) {\r\n                        instrument.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        if ((fromJummBox && !beforeFive) || fromGoldBox || fromUltraBox)\r\n                            instrument.aliases = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n                    }\r\n                    if (effectsIncludeBitcrusher(instrument.effects)) {\r\n                        instrument.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    if (effectsIncludePanning(instrument.effects)) {\r\n                        if (fromBeepBox) {\r\n                            // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\r\n                            instrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\r\n                        }\r\n                        else {\r\n                            instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n\r\n                        // Now, pan delay follows on new versions of jummbox.\r\n                        if ((fromJummBox && !beforeTwo) || fromGoldBox || fromUltraBox)\r\n                            instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    }\r\n                    if (effectsIncludeChorus(instrument.effects)) {\r\n                        if (fromBeepBox) {\r\n                            // BeepBox has 4 chorus values vs. JB's 8\r\n                            instrument.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\r\n                        }\r\n                        else {\r\n                            instrument.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                    if (effectsIncludeEcho(instrument.effects)) {\r\n                        instrument.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    if (effectsIncludeReverb(instrument.effects)) {\r\n                        if (fromBeepBox) {\r\n                            instrument.reverb = clamp(0, Config.reverbRange, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * Config.reverbRange / 3.0));\r\n                        } else {\r\n                            instrument.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                }\r\n                // Clamp the range.\r\n                instrument.effects &= (1 << EffectType.length) - 1;\r\n            } break;\r\n            case SongTagCode.volume: {\r\n                if (beforeThree && fromBeepBox) {\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                } else if (beforeSix && fromBeepBox) {\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (const instrument of this.channels[channelIndex].instruments) {\r\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && fromBeepBox) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                } else if (fromBeepBox) {\r\n                    // Beepbox v9's volume range is 0-7 (0 is max, 7 is mute)\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    // Volume is stored in two bytes in jummbox just in case range ever exceeds one byte, e.g. through later waffling on the subject.\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\r\n                }\r\n            } break;\r\n            case SongTagCode.pan: {\r\n                if (beforeNine && fromBeepBox) {\r\n                    // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0));\r\n                } else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    // Pan delay follows on v3 + v4\r\n                    if (fromJummBox && !beforeThree || fromGoldBox || fromUltraBox) {\r\n                        instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    }\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.detune: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\r\n                    // Before jummbox v5, detune was -50 to 50. Now it is 0 to 400\r\n                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4);\r\n                    instrument.effects |= 1 << EffectType.detune;\r\n                } else {\r\n                    // Now in v5, tag code is deprecated and handled thru detune effects.\r\n                }\r\n            } break;\r\n            case SongTagCode.customChipWave: {\r\n                let instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                // Pop custom wave values\r\n                for (let j: number = 0; j < 64; j++) {\r\n                    instrument.customChipWave[j]\r\n                        = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\r\n                }\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n                    sum += instrument.customChipWave[i];\r\n                }\r\n                const average: number = sum / instrument.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = instrument.customChipWave[i] - average;\r\n                    instrument.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                // 65th, last sample is for anti-aliasing\r\n                instrument.customChipWaveIntegral[64] = 0.0;\r\n\r\n            } break;\r\n            case SongTagCode.limiterSettings: {\r\n                let nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                // Check if limiter settings are used... if not, restore to default\r\n                if (nextValue == 0x3f) {\r\n                    this.restoreLimiterDefaults();\r\n                }\r\n                else {\r\n                    // Limiter is used, grab values\r\n                    this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\r\n                    nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\r\n                    this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\r\n                    this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n                    this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n                    this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\r\n                }\r\n            } break;\r\n            case SongTagCode.channelNames: {\r\n                for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                    // Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\r\n                    var channelNameLength;\r\n                    if (beforeFour && !fromGoldBox && !fromUltraBox)\r\n                        channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\r\n                    else\r\n                        channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\r\n\r\n                    charIndex += channelNameLength;\r\n                }\r\n            } break;\r\n            case SongTagCode.algorithm: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if (instrument.type == InstrumentType.fm) {\r\n                    instrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                else {\r\n                    instrument.algorithm6Op = clamp(0, Config.algorithms6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.customAlgorithm.fromPreset(instrument.algorithm6Op);\r\n                    if (compressed.charCodeAt(charIndex) == SongTagCode.chord) {\r\n                        let carrierCountTemp = clamp(1, Config.operatorCount + 2+1, base64CharCodeToInt[compressed.charCodeAt(charIndex + 1)]);\r\n                        charIndex++\r\n                        let tempModArray: number[][] = [];\r\n                        if (compressed.charCodeAt(charIndex+1) == SongTagCode.effects) {\r\n                            charIndex++\r\n                            let j: number = 0;\r\n                            charIndex++\r\n                            while (compressed.charCodeAt(charIndex) != SongTagCode.effects) {\r\n                                tempModArray[j] = [];\r\n                                let o: number = 0;\r\n                                while (compressed.charCodeAt(charIndex) != SongTagCode.operatorWaves) {\r\n                                    tempModArray[j][o] = clamp(1, Config.operatorCount + 3, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\r\n                                    o++\r\n                                    charIndex++\r\n                                }\r\n                                j++;\r\n                                charIndex++\r\n                            }\r\n                            instrument.customAlgorithm.set(carrierCountTemp, tempModArray);\r\n                            charIndex++; //????\r\n                        }\r\n                    }\r\n                }\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                    // The algorithm determines the carrier count, which affects how legacy settings are imported.\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                }\r\n            } break;\r\n            case SongTagCode.supersaw: {\r\n                if (fromGoldBox && !beforeFour && beforeSix) {\r\n                    //is it more useful to save base64 characters or url length?\r\n                    const chipWaveForCompat = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    if ((chipWaveForCompat + 62) > 85) {\r\n                        if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\r\n                            if (!willLoadLegacySamplesForOldSongs) {\r\n                                willLoadLegacySamplesForOldSongs = true;\r\n                                Config.willReloadForCustomSamples = true;\r\n                                EditorConfig.customSamples = [\"legacySamples\"];\r\n                                loadBuiltInSamples(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    if ((chipWaveForCompat + 62) > 78) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 63);\t\r\n                    }\r\n                    else if ((chipWaveForCompat + 62) > 67) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 61);\t\r\n                    }\r\n                    else if ((chipWaveForCompat + 62) == 67) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = 40;\t\r\n                    }\r\n                    else {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 62);\t\t\t\r\n                    }\t\t\t\t\t\t\t\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.supersawShape = clamp(0, Config.supersawShapeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n\t\t\t} break;\r\n            case SongTagCode.feedbackType: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if (instrument.type == InstrumentType.fm) {\r\n                    instrument.feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                else {\r\n                    instrument.feedbackType6Op = clamp(0, Config.feedbacks6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.customFeedbackType.fromPreset(instrument.feedbackType6Op);\r\n                    let tempModArray: number[][] = [];\r\n                    if (compressed.charCodeAt(charIndex) == SongTagCode.effects) {\r\n                        let j: number = 0;\r\n                        charIndex++\r\n                        while (compressed.charCodeAt(charIndex) != SongTagCode.effects) {\r\n                            tempModArray[j] = [];\r\n                            let o: number = 0;\r\n                            while (compressed.charCodeAt(charIndex) != SongTagCode.operatorWaves) {\r\n                                tempModArray[j][o] = clamp(1, Config.operatorCount + 2, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\r\n                                o++\r\n                                charIndex++\r\n                            }\r\n                            j++;\r\n                            charIndex++\r\n                        }\r\n                        instrument.customFeedbackType.set(tempModArray);\r\n                        charIndex++; //???? weirdly needs to skip the end character or it'll use that next loop instead of like just moving to the next one itself\r\n                    }\r\n                }\r\n\r\n            } break;\r\n            case SongTagCode.feedbackAmplitude: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.feedbackEnvelope: {\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                    const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    \r\n                    let aa:number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\r\n                    legacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[aa]);\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                } else {\r\n                    // Do nothing? This song tag code is deprecated for now.\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorFrequencies: {\r\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                            if (beforeThree && fromGoldBox) {\r\n\t\t\t\t\t\t\t\tconst freqToGold3 = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 22, 24, 2, 1, 9, 17, 19, 21, 23, 0, 3];\r\n                               \r\n\t\t\t\t\t\t\t\tfor (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                                    instrument.operators[o].frequency = freqToGold3[clamp(0, freqToGold3.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                                }\r\n                            }\r\n\t\t\t\t\t\t\telse if (!fromGoldBox && !fromUltraBox) {\r\n\t\t\t\t\t\t\t\tconst freqToUltraBox = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 23, 27, 2, 1, 9, 17, 19, 21, 23, 0, 3];\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                                    instrument.operators[o].frequency = freqToUltraBox[clamp(0, freqToUltraBox.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                                }\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n                            else {\r\n                                for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                                    instrument.operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                                }\r\n                            }\r\n            } break;\r\n            case SongTagCode.operatorAmplitudes: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                    instrument.operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.envelopes: {\r\n                const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\r\n                const jummToUltraEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 58, 59, 60];\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\r\n                    legacySettings.operatorEnvelopes = [];\r\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                        let aa:number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        if ((beforeTwo && fromGoldBox) || (fromBeepBox)) aa = pregoldToEnvelope[aa];\r\n                        if (fromJummBox) aa = jummToUltraEnvelope[aa];\r\n                        legacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(aa);\r\n                    }\r\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\r\n                } else {\r\n                    const envelopeCount: number = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    // JB v6 adds some envelope options here in the sequence.\r\n                    if ((fromJummBox && !beforeSix) || (fromUltraBox && !beforeFive)) {\r\n                        instrument.envelopeSpeed = clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.discreteEnvelope = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\r\n                    }\r\n                    for (let i: number = 0; i < envelopeCount; i++) {\r\n                        const target: number = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        let index: number = 0;\r\n                        const maxCount: number = Config.instrumentAutomationTargets[target].maxCount;\r\n                        if (maxCount > 1) {\r\n                            index = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                        let aa:number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        if ((beforeTwo && fromGoldBox) || (fromBeepBox)) aa = pregoldToEnvelope[aa]; \r\n                        if (fromJummBox) aa = jummToUltraEnvelope[aa];\r\n                        const envelope: number = clamp(0, Config.envelopes.length, aa);\r\n                        instrument.addEnvelope(target, index, envelope);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorWaves: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n                if (beforeThree && fromGoldBox) {\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        const pre3To3g = [0, 1, 3, 2, 2, 2, 4, 5];\r\n                        const old: number = clamp(0, pre3To3g.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        if (old == 3) {\r\n                            instrument.operators[o].pulseWidth = 5;\r\n                        } else if (old == 4) {\r\n                            instrument.operators[o].pulseWidth = 4;\r\n                        } else if (old == 5) {\r\n                            instrument.operators[o].pulseWidth = 6;\r\n                        }\r\n                        instrument.operators[o].waveform = pre3To3g[old];\r\n                    }\r\n                } else {\r\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\r\n                        if (fromJummBox) {\r\n                            const jummToG = [0, 1, 3, 2, 4, 5];\r\n                            instrument.operators[o].waveform = jummToG[clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        } else {\r\n                            instrument.operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                        // Pulse width follows, if it is a pulse width operator wave\r\n                        if (instrument.operators[o].waveform == 2) {\r\n                            instrument.operators[o].pulseWidth = clamp(0, Config.pwmOperatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            } break;\r\n            case SongTagCode.spectrum: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if (instrument.type == InstrumentType.spectrum) {\r\n                    const byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                        instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n                    }\r\n                    instrument.spectrumWave.markCustomWaveDirty();\r\n                    charIndex += byteCount;\r\n                } else if (instrument.type == InstrumentType.drumset) {\r\n                    const byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n                        }\r\n                        instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\r\n                    }\r\n                    charIndex += byteCount;\r\n                } else {\r\n                    throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\r\n                }\r\n            } break;\r\n            case SongTagCode.harmonics: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                const byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\r\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                    instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\r\n                }\r\n                instrument.harmonicsWave.markCustomWaveDirty();\r\n                charIndex += byteCount;\r\n            } break;\r\n            case SongTagCode.aliases: {\r\n                if ((fromJummBox && beforeFive) || (fromGoldBox && beforeFour)) {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.aliases = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\r\n                    if (instrument.aliases) {\r\n                        instrument.distortion = 0;\r\n                        instrument.effects |= 1 << EffectType.distortion;\r\n                    }\r\n                } else {\r\n                    if (fromUltraBox) {\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];  \r\n                        instrument.decimalOffset = clamp(0, 50 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                }\r\n            }\r\n                break;\r\n            case SongTagCode.bars: {\r\n                let subStringLength: number;\r\n                if (beforeThree && fromBeepBox) {\r\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    subStringLength = Math.ceil(barCount * 0.5);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let i: number = 0; i < barCount; i++) {\r\n                        this.channels[channelIndex].bars[i] = bits.read(3) + 1;\r\n                    }\r\n                } else if (beforeFive && fromBeepBox) {\r\n                    let neededBits: number = 0;\r\n                    while ((1 << neededBits) < this.patternsPerChannel) neededBits++;\r\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (let i: number = 0; i < this.barCount; i++) {\r\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;\r\n                        }\r\n                    }\r\n                } else {\r\n                    let neededBits: number = 0;\r\n                    while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                        for (let i: number = 0; i < this.barCount; i++) {\r\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits);\r\n                        }\r\n                    }\r\n                }\r\n                charIndex += subStringLength;\r\n            } break;\r\n            case SongTagCode.patterns: {\r\n                let bitStringLength: number = 0;\r\n                let channelIndex: number;\r\n                let largerChords: boolean = !((beforeFour && fromJummBox) || fromBeepBox);\r\n                let recentPitchBitLength: number = (largerChords ? 4 : 3);\r\n                let recentPitchLength: number = (largerChords ? 16 : 8);\r\n                if (beforeThree && fromBeepBox) {\r\n                    channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    // The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default. \r\n                    charIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    bitStringLength = bitStringLength << 6;\r\n                    bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    channelIndex = 0;\r\n                    let bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    while (bitStringLengthLength > 0) {\r\n                        bitStringLength = bitStringLength << 6;\r\n                        bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        bitStringLengthLength--;\r\n                    }\r\n                }\r\n\r\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\r\n                charIndex += bitStringLength;\r\n\r\n                const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\r\n                let songReverbChannel: number = -1;\r\n                let songReverbInstrument: number = -1;\r\n                let songReverbIndex: number = -1;\r\n\r\n                // @TODO: Include GoldBox here.\r\n                const shouldCorrectTempoMods: boolean = fromJummBox;\r\n                const jummboxTempoMin: number = 30;\r\n\r\n                while (true) {\r\n                    const channel: Channel = this.channels[channelIndex];\r\n                    const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\r\n                    const isModChannel: boolean = this.getChannelIsMod(channelIndex);\r\n\r\n                    const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\r\n                    const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\r\n\r\n                    const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\r\n\r\n                    // Some info about modulator settings immediately follows in mod channels.\r\n                    if (isModChannel) {\r\n                        let jumfive: boolean = (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)\r\n\r\n                        // 2 more indices for 'all' and 'active'\r\n                        const neededModInstrumentIndexBits: number = (jumfive) ? neededInstrumentIndexBits : Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\r\n\r\n                        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n\r\n                            let instrument: Instrument = channel.instruments[instrumentIndex];\r\n\r\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\r\n                                // 0 - For pitch/noise\r\n                                // 1 - (used to be For noise, not needed)\r\n                                // 2 - For song\r\n                                // 3 - None\r\n                                let status: number = bits.read(2);\r\n\r\n                                switch (status) {\r\n                                    case 0: // Pitch\r\n                                        instrument.modChannels[mod] = clamp(0, this.pitchChannelCount + this.noiseChannelCount + 1, bits.read(8));\r\n                                        instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededModInstrumentIndexBits));\r\n                                        break;\r\n                                    case 1: // Noise\r\n                                        // Getting a status of 1 means this is legacy mod info. Need to add pitch channel count, as it used to just store noise channel index and not overall channel index\r\n                                        instrument.modChannels[mod] = this.pitchChannelCount + clamp(0, this.noiseChannelCount + 1, bits.read(8));\r\n                                        instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededInstrumentIndexBits));\r\n                                        break;\r\n                                    case 2: // For song\r\n                                        instrument.modChannels[mod] = -1;\r\n                                        break;\r\n                                    case 3: // None\r\n                                        instrument.modChannels[mod] = -2;\r\n                                        break;\r\n                                }\r\n\r\n                                // Mod setting is only used if the status isn't \"none\".\r\n                                if (status != 3) {\r\n                                    instrument.modulators[mod] = bits.read(6);\r\n                                }\r\n\r\n                                if (!jumfive && (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\")) {\r\n                                    instrument.modFilterTypes[mod] = bits.read(6);\r\n                                }\r\n\r\n                                if (jumfive && instrument.modChannels[mod] >= 0) {\r\n                                    let forNoteFilter: boolean = effectsIncludeNoteFilter(this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects);\r\n\r\n                                    // For legacy filter cut/peak, need to denote since scaling must be applied\r\n                                    if (instrument.modulators[mod] == 7) {\r\n                                        // Legacy filter cut index\r\n                                        // Check if there is no filter dot on prospective filter. If so, add a low pass at max possible freq.\r\n\r\n                                        if (forNoteFilter) {\r\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt cut\"].index;\r\n                                        }\r\n                                        else {\r\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt cut\"].index;\r\n                                        }\r\n\r\n                                        instrument.modFilterTypes[mod] = 1; // Dot 1 X\r\n\r\n                                    }\r\n                                    else if (instrument.modulators[mod] == 8) {\r\n                                        // Legacy filter peak index\r\n                                        if (forNoteFilter) {\r\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt peak\"].index;\r\n                                        }\r\n                                        else {\r\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt peak\"].index;\r\n                                        }\r\n\r\n                                        instrument.modFilterTypes[mod] = 2; // Dot 1 Y\r\n                                    }\r\n                                }\r\n                                else if (jumfive) {\r\n                                    // Check for song reverb mod, which must be handled differently now that it is a multiplier\r\n                                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"song reverb\"].index) {\r\n                                        songReverbChannel = channelIndex;\r\n                                        songReverbInstrument = instrumentIndex;\r\n                                        songReverbIndex = mod;\r\n                                    }\r\n                                }\r\n\r\n                                // Based on setting, enable some effects for the modulated instrument. This isn't always set, say if the instrument's pan was right in the center.\r\n                                // Only used on import of old songs, because sometimes an invalid effect can be set in a mod in the new version that is actually unused. In that case,\r\n                                // keeping the mod invalid is better since it preserves the state.\r\n                                if (jumfive && Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length) {\r\n                                    this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects |= 1 << Config.modulators[instrument.modulators[mod]].associatedEffect;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Scalar applied to detune mods since its granularity was upped. Could be repurposed later if any other granularity changes occur.\r\n                    const detuneScaleNotes: number[][] = [];\r\n                    for (let j: number = 0; j < channel.instruments.length; j++) {\r\n                        detuneScaleNotes[j] = [];\r\n                        for (let i: number = 0; i < Config.modCount; i++) {\r\n                            detuneScaleNotes[j][Config.modCount - 1 - i] = 1 + 3 * +(((beforeFive && fromJummBox) || (beforeFour&&fromGoldBox)) && isModChannel && (channel.instruments[j].modulators[i] == Config.modulators.dictionary[\"detune\"].index));\r\n                        }\r\n                    }\r\n                    const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * 12;\r\n                    let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : octaveOffset);\r\n                    const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\r\n                    const recentShapes: any[] = [];\r\n                    for (let i: number = 0; i < recentPitches.length; i++) {\r\n                        recentPitches[i] += octaveOffset;\r\n                    }\r\n                    for (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n                        const newPattern: Pattern = channel.patterns[i];\r\n\r\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\r\n                            newPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));\r\n                            newPattern.instruments.length = 1;\r\n                        } else {\r\n                            if (this.patternInstruments) {\r\n                                const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);\r\n                                for (let j: number = 0; j < instrumentCount; j++) {\r\n                                    newPattern.instruments[j] = validateRange(0, channel.instruments.length - 1 + +(isModChannel) * 2, bits.read(neededInstrumentIndexBits));\r\n                                }\r\n                                newPattern.instruments.length = instrumentCount;\r\n                            } else {\r\n                                newPattern.instruments[0] = 0;\r\n                                newPattern.instruments.length = Config.instrumentCountMin;\r\n                            }\r\n                        }\r\n\r\n                        if (!(fromBeepBox && beforeThree) && bits.read(1) == 0) {\r\n                            newPattern.notes.length = 0;\r\n                            continue;\r\n                        }\r\n\r\n                        let curPart: number = 0;\r\n                        const newNotes: Note[] = newPattern.notes;\r\n                        let noteCount: number = 0;\r\n                        // Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\r\n                        while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\r\n                            const useOldShape: boolean = bits.read(1) == 1;\r\n                            let newNote: boolean = false;\r\n                            let shapeIndex: number = 0;\r\n                            if (useOldShape) {\r\n                                shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\r\n                            } else {\r\n                                newNote = bits.read(1) == 1;\r\n                            }\r\n\r\n                            if (!useOldShape && !newNote) {\r\n                                // For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\r\n                                if (isModChannel) {\r\n                                    const isBackwards: boolean = bits.read(1) == 1;\r\n                                    const restLength: number = bits.readPartDuration();\r\n                                    if (isBackwards) {\r\n                                        curPart -= restLength;\r\n                                    }\r\n                                    else {\r\n                                        curPart += restLength;\r\n                                    }\r\n                                } else {\r\n                                    const restLength: number = (beforeSeven && fromBeepBox)\r\n                                        ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n                                        : bits.readPartDuration();\r\n                                    curPart += restLength;\r\n\r\n                                }\r\n                            } else {\r\n                                let shape: any;\r\n                                if (useOldShape) {\r\n                                    shape = recentShapes[shapeIndex];\r\n                                    recentShapes.splice(shapeIndex, 1);\r\n                                } else {\r\n                                    shape = {};\r\n\r\n                                    if (!largerChords) {\r\n                                        // Old format: X 1's followed by a 0 => X+1 pitches, up to 4\r\n                                        shape.pitchCount = 1;\r\n                                        while (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\r\n                                    }\r\n                                    else {\r\n                                        // New format is:\r\n                                        //      0: 1 pitch\r\n                                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n                                        if (bits.read(1) == 1) {\r\n                                            shape.pitchCount = bits.read(3) + 2;\r\n                                        }\r\n                                        else {\r\n                                            shape.pitchCount = 1;\r\n                                        }\r\n                                    }\r\n\r\n                                    shape.pinCount = bits.readPinCount();\r\n                                    if (fromBeepBox) {\r\n                                        shape.initialSize = bits.read(2) * 2;\r\n                                    } else if (!isModChannel) {\r\n                                        shape.initialSize = bits.read(bitsPerNoteSize);\r\n                                    } else {\r\n                                        shape.initialSize = bits.read(9);\r\n                                    }\r\n\r\n                                    shape.pins = [];\r\n                                    shape.length = 0;\r\n                                    shape.bendCount = 0;\r\n                                    for (let j: number = 0; j < shape.pinCount; j++) {\r\n                                        let pinObj: any = {};\r\n                                        pinObj.pitchBend = bits.read(1) == 1;\r\n                                        if (pinObj.pitchBend) shape.bendCount++;\r\n                                        shape.length += (beforeSeven && fromBeepBox)\r\n                                            ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n                                            : bits.readPartDuration();\r\n                                        pinObj.time = shape.length;\r\n                                        if (fromBeepBox) {\r\n                                            pinObj.size = bits.read(2) * 2;\r\n                                        } else if (!isModChannel) {\r\n                                            pinObj.size = bits.read(bitsPerNoteSize);\r\n                                        }\r\n                                        else {\r\n                                            pinObj.size = bits.read(9);\r\n                                        }\r\n                                        shape.pins.push(pinObj);\r\n                                    }\r\n                                }\r\n                                recentShapes.unshift(shape);\r\n                                if (recentShapes.length > 10) recentShapes.pop(); // TODO: Use Deque?\r\n\r\n                                let note: Note;\r\n                                if (newNotes.length <= noteCount) {\r\n                                    note = new Note(0, curPart, curPart + shape.length, shape.initialSize);\r\n                                    newNotes[noteCount++] = note;\r\n                                } else {\r\n                                    note = newNotes[noteCount++];\r\n                                    note.start = curPart;\r\n                                    note.end = curPart + shape.length;\r\n                                    note.pins[0].size = shape.initialSize;\r\n                                }\r\n\r\n                                let pitch: number;\r\n                                let pitchCount: number = 0;\r\n                                const pitchBends: number[] = []; // TODO: allocate this array only once! keep separate length and iterator index. Use Deque?\r\n                                for (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\r\n                                    const useOldPitch: boolean = bits.read(1) == 1;\r\n                                    if (!useOldPitch) {\r\n                                        const interval: number = bits.readPitchInterval();\r\n                                        pitch = lastPitch;\r\n                                        let intervalIter: number = interval;\r\n                                        while (intervalIter > 0) {\r\n                                            pitch++;\r\n                                            while (recentPitches.indexOf(pitch) != -1) pitch++;\r\n                                            intervalIter--;\r\n                                        }\r\n                                        while (intervalIter < 0) {\r\n                                            pitch--;\r\n                                            while (recentPitches.indexOf(pitch) != -1) pitch--;\r\n                                            intervalIter++;\r\n                                        }\r\n                                    } else {\r\n                                        const pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\r\n                                        pitch = recentPitches[pitchIndex];\r\n                                        recentPitches.splice(pitchIndex, 1);\r\n                                    }\r\n\r\n                                    recentPitches.unshift(pitch);\r\n                                    if (recentPitches.length > recentPitchLength) recentPitches.pop();\r\n\r\n                                    if (j < shape.pitchCount) {\r\n                                        note.pitches[pitchCount++] = pitch;\r\n                                    } else {\r\n                                        pitchBends.push(pitch);\r\n                                    }\r\n\r\n                                    if (j == shape.pitchCount - 1) {\r\n                                        lastPitch = note.pitches[0];\r\n                                    } else {\r\n                                        lastPitch = pitch;\r\n                                    }\r\n                                }\r\n                                note.pitches.length = pitchCount;\r\n                                pitchBends.unshift(note.pitches[0]); // TODO: Use Deque?\r\n                                const noteIsForTempoMod: boolean = isModChannel && channel.instruments[newPattern.instruments[0]].modulators[Config.modCount - 1 - note.pitches[0]] === Config.modulators.dictionary[\"tempo\"].index;\r\n                                let tempoOffset: number = 0;\r\n                                if (shouldCorrectTempoMods && noteIsForTempoMod) {\r\n                                    tempoOffset = jummboxTempoMin - Config.tempoMin; // convertRealFactor will add back Config.tempoMin as necessary\r\n                                }\r\n                                if (isModChannel) {\r\n                                    note.pins[0].size += tempoOffset;\r\n                                    note.pins[0].size *= detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\r\n                                }\r\n                                let pinCount: number = 1;\r\n                                for (const pinObj of shape.pins) {\r\n                                    if (pinObj.pitchBend) pitchBends.shift();\r\n\r\n                                    const interval: number = pitchBends[0] - note.pitches[0];\r\n                                    if (note.pins.length <= pinCount) {\r\n                                        if (isModChannel) {\r\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset);\r\n                                        } else {\r\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);\r\n                                        }\r\n                                    } else {\r\n                                        const pin: NotePin = note.pins[pinCount++];\r\n                                        pin.interval = interval;\r\n                                        pin.time = pinObj.time;\r\n                                        if (isModChannel) {\r\n                                            pin.size = pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset;\r\n                                        } else {\r\n                                            pin.size = pinObj.size;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                note.pins.length = pinCount;\r\n\r\n                                if (note.start == 0) {\r\n                                    if (!((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)||(beforeFour&&fromGoldBox))) {\r\n                                        note.continuesLastPattern = (bits.read(1) == 1);\r\n                                    } else {\r\n                                        if ((beforeFour && !fromUltraBox) || fromBeepBox) {\r\n                                            note.continuesLastPattern = false;\r\n                                        } else {\r\n                                            note.continuesLastPattern = channel.instruments[newPattern.instruments[0]].legacyTieOver;\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\r\n                            }\r\n                        }\r\n                        newNotes.length = noteCount;\r\n                    }\r\n\r\n                    if (beforeThree && fromBeepBox) {\r\n                        break;\r\n                    } else {\r\n                        channelIndex++;\r\n                        if (channelIndex >= this.getChannelCount()) break;\r\n                    }\r\n                } // while (true)\r\n\r\n                // Correction for old JB songs that had song reverb mods. Change all instruments using reverb to max reverb\r\n                if (((fromJummBox && beforeFive)||(beforeFour && fromGoldBox)) && songReverbIndex >= 0) {\r\n                    for (let channelIndex: number = 0; channelIndex < this.channels.length; channelIndex++) {\r\n                        for (let instrumentIndex: number = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\r\n                            const instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\r\n                            if (effectsIncludeReverb(instrument.effects)) {\r\n                                instrument.reverb = Config.reverbRange - 1;\r\n                            }\r\n                            // Set song reverb via mod to the old setting at song start.\r\n                            if (songReverbChannel == channelIndex && songReverbInstrument == instrumentIndex) {\r\n                                const patternIndex: number = this.channels[channelIndex].bars[0];\r\n                                if (patternIndex > 0) {\r\n                                    // Doesn't work if 1st pattern isn't using the right ins for song reverb...\r\n                                    // Add note to start of pattern\r\n                                    const pattern: Pattern = this.channels[channelIndex].patterns[patternIndex - 1];\r\n                                    let lowestPart: number = 6;\r\n                                    for (const note of pattern.notes) {\r\n                                        if (note.pitches[0] == Config.modCount - 1 - songReverbIndex) {\r\n                                            lowestPart = Math.min(lowestPart, note.start);\r\n                                        }\r\n                                    }\r\n\r\n                                    if (lowestPart > 0) {\r\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, lowestPart, legacyGlobalReverb));\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // Add pattern\r\n                                    if (this.channels[channelIndex].patterns.length < Config.barCountMax) {\r\n                                        const pattern: Pattern = new Pattern();\r\n                                        this.channels[channelIndex].patterns.push(pattern);\r\n                                        this.channels[channelIndex].bars[0] = this.channels[channelIndex].patterns.length;\r\n                                        if (this.channels[channelIndex].patterns.length > this.patternsPerChannel) {\r\n                                            for (let chn: number = 0; chn < this.channels.length; chn++) {\r\n                                                if (this.channels[chn].patterns.length <= this.patternsPerChannel) {\r\n                                                    this.channels[chn].patterns.push(new Pattern());\r\n                                                }\r\n                                            }\r\n                                            this.patternsPerChannel++;\r\n                                        }\r\n                                        pattern.instruments.length = 1;\r\n                                        pattern.instruments[0] = songReverbInstrument;\r\n                                        pattern.notes.length = 0;\r\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, 6, legacyGlobalReverb));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } break;\r\n            default: {\r\n                throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1) + \" \" + compressed.substring(/*charIndex - 2*/0, charIndex));\r\n            } break;\r\n        }\r\n\r\n        if (Config.willReloadForCustomSamples) {\r\n            window.location.hash = this.toBase64String();\r\n            setTimeout(() => { location.reload(); }, 50);\r\n        }\r\n    }\r\n\r\n    private static _isProperUrl(string: string): boolean {\r\n        try { \r\n            if (OFFLINE) {\r\n                return Boolean(string); \r\n            } else {\r\n                return Boolean(new URL(string)); \r\n            }\r\n        }\r\n        catch(x){ \r\n            return false; \r\n        }\r\n    }\r\n\r\n    // @TODO: Share more of this code with AddSamplesPrompt.\r\n    private static _parseAndConfigureCustomSample(url: string, customSampleUrls: string[], customSamplePresets: Preset[], sampleLoadingState: SampleLoadingState, parseOldSyntax: boolean): boolean {\r\n        const defaultIndex: number = 0;\r\n        const defaultIntegratedSamples: Float32Array = Config.chipWaves[defaultIndex].samples;\r\n        const defaultSamples: Float32Array = Config.rawRawChipWaves[defaultIndex].samples;\r\n\r\n        const customSampleUrlIndex: number = customSampleUrls.length;\r\n        customSampleUrls.push(url);\r\n        // This depends on `Config.chipWaves` being the same\r\n        // length as `Config.rawRawChipWaves`.\r\n        const chipWaveIndex: number = Config.chipWaves.length;\r\n\r\n        let urlSliced: string = url;\r\n\r\n        let customSampleRate: number = 44100;\r\n        let isCustomPercussive: boolean = false;\r\n        let customRootKey: number = 60;\r\n        let presetIsUsingAdvancedLoopControls: boolean = false;\r\n        let presetChipWaveLoopStart: number | null = null;\r\n        let presetChipWaveLoopEnd: number | null = null;\r\n        let presetChipWaveStartOffset: number | null = null;\r\n        let presetChipWaveLoopMode: number | null = null;\r\n        let presetChipWavePlayBackwards: boolean = false;\r\n\r\n        let parsedSampleOptions: boolean = false;\r\n        let optionsStartIndex: number = url.indexOf(\"!\");\r\n        let optionsEndIndex: number = -1;\r\n        if (optionsStartIndex === 0) {\r\n            optionsEndIndex = url.indexOf(\"!\", optionsStartIndex + 1);\r\n            if (optionsEndIndex !== -1) {\r\n                const rawOptions: string[] = url.slice(optionsStartIndex + 1, optionsEndIndex).split(\",\");\r\n                for (const rawOption of rawOptions) {\r\n                    const optionCode: string = rawOption.charAt(0);\r\n                    const optionData: string = rawOption.slice(1, rawOption.length);\r\n                    if (optionCode === \"s\") {\r\n                        customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(optionData, 44100));\r\n                    } else if (optionCode === \"r\") {\r\n                        customRootKey = parseFloatWithDefault(optionData, 60);\r\n                    } else if (optionCode === \"p\") {\r\n                        isCustomPercussive = true;\r\n                    } else if (optionCode === \"a\") {\r\n                        presetChipWaveLoopStart = parseIntWithDefault(optionData, null);\r\n                        if (presetChipWaveLoopStart != null) {\r\n                            presetIsUsingAdvancedLoopControls = true;\r\n                        }\r\n                    } else if (optionCode === \"b\") {\r\n                        presetChipWaveLoopEnd = parseIntWithDefault(optionData, null);\r\n                        if (presetChipWaveLoopEnd != null) {\r\n                            presetIsUsingAdvancedLoopControls = true;\r\n                        }\r\n                    } else if (optionCode === \"c\") {\r\n                        presetChipWaveStartOffset = parseIntWithDefault(optionData, null);\r\n                        if (presetChipWaveStartOffset != null) {\r\n                            presetIsUsingAdvancedLoopControls = true;\r\n                        }\r\n                    } else if (optionCode === \"d\") {\r\n                        presetChipWaveLoopMode = parseIntWithDefault(optionData, null);\r\n                        if (presetChipWaveLoopMode != null) {\r\n                            // @TODO: Error-prone. This should be automatically\r\n                            // derived from the list of available loop modes.\r\n                            presetChipWaveLoopMode = clamp(0, 3 + 1, presetChipWaveLoopMode);\r\n                            presetIsUsingAdvancedLoopControls = true;\r\n                        }\r\n                    } else if (optionCode === \"e\") {\r\n                        presetChipWavePlayBackwards = true;\r\n                        presetIsUsingAdvancedLoopControls = true;\r\n                    }\r\n                }\r\n                urlSliced = url.slice(optionsEndIndex + 1, url.length);\r\n                parsedSampleOptions = true;\r\n            }\r\n        }\r\n\r\n        let parsedUrl: URL | string | null = null;\r\n        if (Song._isProperUrl(urlSliced)) {\r\n            if (OFFLINE) {\r\n                parsedUrl = urlSliced;\r\n            } else {\r\n                parsedUrl = new URL(urlSliced);\r\n            }\r\n        }\r\n        else {\r\n            alert(url + \" is not a valid url\");\r\n            return false;\r\n        }\r\n\r\n        if (parseOldSyntax) {\r\n            if (!parsedSampleOptions && parsedUrl != null) {\r\n                if (url.indexOf(\"@\") != -1) {\r\n                    //urlSliced = url.slice(url.indexOf(\"@\"), url.indexOf(\"@\"));\r\n                    urlSliced = url.replaceAll(\"@\", \"\")\r\n                    if (OFFLINE) {\r\n                        parsedUrl = urlSliced;\r\n                    } else {\r\n                        parsedUrl = new URL(urlSliced);\r\n                    }\r\n                    isCustomPercussive = true;\t\r\n                }\t\r\n\r\n                function sliceForSampleRate() {\r\n                    urlSliced = url.slice(0, url.indexOf(\",\"));\r\n                    if (OFFLINE) {\r\n                        parsedUrl = urlSliced;\r\n                    } else {\r\n                        parsedUrl = new URL(urlSliced);\r\n                    }\r\n                    customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(url.slice(url.indexOf(\",\") + 1), 44100));\r\n                    //should this be parseFloat or parseInt?\r\n                    //ig floats let you do decimals and such, but idk where that would be useful\r\n                }\r\n\r\n                function sliceForRootKey() {\r\n                    urlSliced = url.slice(0, url.indexOf(\"!\"));\r\n                    if (OFFLINE) {\r\n                        parsedUrl = urlSliced;\r\n                    } else {\r\n                        parsedUrl = new URL(urlSliced);\r\n                    }\r\n                    customRootKey = parseFloatWithDefault(url.slice(url.indexOf(\"!\") + 1), 60);\r\n                }\r\n\r\n\r\n                if (url.indexOf(\",\") != -1 && url.indexOf(\"!\") != -1) {\r\n                    if (url.indexOf(\",\") < url.indexOf(\"!\")) {\r\n                        sliceForRootKey();\r\n                        sliceForSampleRate();\r\n                    }\r\n                    else {\r\n                        sliceForSampleRate();\r\n                        sliceForRootKey();\r\n                    }\t\r\n                }\r\n                else {\r\n                    if (url.indexOf(\",\") != -1) {\r\n                        sliceForSampleRate();\r\n                    }\t\r\n                    if (url.indexOf(\"!\") != -1) {\r\n                        sliceForRootKey();\r\n                    }\t\r\n                }\r\n            }\r\n        }\r\n\r\n        if (parsedUrl != null) {\r\n            // Store in the new format.\r\n            let urlWithNamedOptions = urlSliced;\r\n            const namedOptions: string[] = [];\r\n            if (customSampleRate !== 44100) namedOptions.push(\"s\" + customSampleRate);\r\n            if (customRootKey !== 60) namedOptions.push(\"r\" + customRootKey);\r\n            if (isCustomPercussive) namedOptions.push(\"p\");\r\n            if (presetIsUsingAdvancedLoopControls) {\r\n                if (presetChipWaveLoopStart != null) namedOptions.push(\"a\" + presetChipWaveLoopStart);\r\n                if (presetChipWaveLoopEnd != null) namedOptions.push(\"b\" + presetChipWaveLoopEnd);\r\n                if (presetChipWaveStartOffset != null) namedOptions.push(\"c\" + presetChipWaveStartOffset);\r\n                if (presetChipWaveLoopMode != null) namedOptions.push(\"d\" + presetChipWaveLoopMode);\r\n                if (presetChipWavePlayBackwards) namedOptions.push(\"e\");\r\n            }\r\n            if (namedOptions.length > 0) {\r\n                urlWithNamedOptions = \"!\" + namedOptions.join(\",\") + \"!\" + urlSliced;\r\n            }\r\n            customSampleUrls[customSampleUrlIndex] = urlWithNamedOptions;\r\n\r\n            // @TODO: Could also remove known extensions, but it\r\n            // would probably be much better to be able to specify\r\n            // a custom name.\r\n            // @TODO: If for whatever inexplicable reason someone\r\n            // uses an url like `https://example.com`, this will\r\n            // result in an empty name here.\r\n            let name: string;\r\n            if (OFFLINE) {\r\n                //@ts-ignore\r\n                name = decodeURIComponent(parsedUrl.replace(/^([^\\/]*\\/)+/, \"\"));\r\n            } else {\r\n                //@ts-ignore\r\n                name = decodeURIComponent(parsedUrl.pathname.replace(/^([^\\/]*\\/)+/, \"\"));\r\n            }\r\n            // @TODO: What to do about samples with the same name?\r\n            // The problem with using the url is that the name is\r\n            // user-facing and long names break assumptions of the\r\n            // UI.\r\n            const expression: number = 1.0;\r\n            Config.chipWaves[chipWaveIndex] = {\r\n                name: name,\r\n                expression: expression,\r\n                isCustomSampled: true,\r\n                isPercussion: isCustomPercussive,\r\n                rootKey: customRootKey,\r\n                sampleRate: customSampleRate,\r\n                samples: defaultIntegratedSamples,\r\n                index: chipWaveIndex,\r\n            };\r\n            Config.rawChipWaves[chipWaveIndex] = {\r\n                name: name,\r\n                expression: expression,\r\n                isCustomSampled: true,\r\n                isPercussion: isCustomPercussive,\r\n                rootKey: customRootKey,\r\n                sampleRate: customSampleRate,\r\n                samples: defaultSamples,\r\n                index: chipWaveIndex,\r\n            };\r\n            Config.rawRawChipWaves[chipWaveIndex] = {\r\n                name: name,\r\n                expression: expression,\r\n                isCustomSampled: true,\r\n                isPercussion: isCustomPercussive,\r\n                rootKey: customRootKey,\r\n                sampleRate: customSampleRate,\r\n                samples: defaultSamples,\r\n                index: chipWaveIndex,\r\n            };\r\n            const customSamplePresetSettings: Dictionary<any> = {\r\n                \"type\": \"chip\",\r\n                \"eqFilter\": [],\r\n                \"effects\": [],\r\n                \"transition\": \"normal\",\r\n                \"fadeInSeconds\": 0,\r\n                \"fadeOutTicks\": -3,\r\n                \"chord\": \"harmony\",\r\n                \"wave\": name,\r\n                \"unison\": \"none\",\r\n                \"envelopes\": [],\r\n            };\r\n            if (presetIsUsingAdvancedLoopControls) {\r\n                customSamplePresetSettings[\"isUsingAdvancedLoopControls\"] = true;\r\n                customSamplePresetSettings[\"chipWaveLoopStart\"] = presetChipWaveLoopStart != null ? presetChipWaveLoopStart : 0;\r\n                customSamplePresetSettings[\"chipWaveLoopEnd\"] = presetChipWaveLoopEnd != null ? presetChipWaveLoopEnd : 2;\r\n                customSamplePresetSettings[\"chipWaveLoopMode\"] = presetChipWaveLoopMode != null ? presetChipWaveLoopMode : 0;\r\n                customSamplePresetSettings[\"chipWavePlayBackwards\"] = presetChipWavePlayBackwards;\r\n                customSamplePresetSettings[\"chipWaveStartOffset\"] = presetChipWaveStartOffset != null ? presetChipWaveStartOffset : 0;\r\n            }\r\n            const customSamplePreset: Preset = {\r\n                index: 0, // This should be overwritten by toNameMap, in our caller.\r\n                name: name,\r\n                midiProgram: 80,\r\n                settings: customSamplePresetSettings,\r\n            };\r\n            customSamplePresets.push(customSamplePreset);\r\n            if (!Config.willReloadForCustomSamples) {\r\n                const rawLoopOptions: any = {\r\n                    \"isUsingAdvancedLoopControls\": presetIsUsingAdvancedLoopControls,\r\n                    \"chipWaveLoopStart\": presetChipWaveLoopStart,\r\n                    \"chipWaveLoopEnd\": presetChipWaveLoopEnd,\r\n                    \"chipWaveLoopMode\": presetChipWaveLoopMode,\r\n                    \"chipWavePlayBackwards\": presetChipWavePlayBackwards,\r\n                    \"chipWaveStartOffset\": presetChipWaveStartOffset,\r\n                };\r\n                startLoadingSample(urlSliced, chipWaveIndex, customSamplePresetSettings, rawLoopOptions, customSampleRate);\r\n            }\r\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\r\n            sampleLoadingState.urlTable[chipWaveIndex] = urlSliced;\r\n            sampleLoadingState.totalSamples++;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private static _restoreChipWaveListToDefault(): void {\r\n        Config.chipWaves = toNameMap(Config.chipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\r\n        Config.rawChipWaves = toNameMap(Config.rawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\r\n        Config.rawRawChipWaves = toNameMap(Config.rawRawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\r\n    }\r\n\r\n    private static _clearSamples(): void {\r\n        EditorConfig.customSamples = null;\r\n\r\n        Song._restoreChipWaveListToDefault();\r\n\r\n        sampleLoadingState.statusTable = {};\r\n        sampleLoadingState.urlTable = {};\r\n        sampleLoadingState.totalSamples = 0;\r\n        sampleLoadingState.samplesLoaded = 0;\r\n        sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\r\n            sampleLoadingState.totalSamples,\r\n            sampleLoadingState.samplesLoaded\r\n        ));\r\n    }\r\n\r\n    public toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\r\n        const channelArray: Object[] = [];\r\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n            const channel: Channel = this.channels[channelIndex];\r\n            const instrumentArray: Object[] = [];\r\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\r\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\r\n            for (const instrument of channel.instruments) {\r\n                instrumentArray.push(instrument.toJsonObject());\r\n            }\r\n\r\n            const patternArray: Object[] = [];\r\n            for (const pattern of channel.patterns) {\r\n                patternArray.push(pattern.toJsonObject(this, channel, isModChannel));\r\n            }\r\n\r\n            const sequenceArray: number[] = [];\r\n            if (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\r\n                sequenceArray.push(channel.bars[i]);\r\n            }\r\n            for (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\r\n                sequenceArray.push(channel.bars[i]);\r\n            }\r\n            if (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\r\n                sequenceArray.push(channel.bars[i]);\r\n            }\r\n\r\n            const channelObject: any = {\r\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\r\n                \"name\": channel.name,\r\n                \"instruments\": instrumentArray,\r\n                \"patterns\": patternArray,\r\n                \"sequence\": sequenceArray,\r\n            };\r\n            if (!isNoiseChannel) {\r\n                // For compatibility with old versions the octave is offset by one.\r\n                channelObject[\"octaveScrollBar\"] = channel.octave - 1;\r\n            }\r\n            channelArray.push(channelObject);\r\n        }\r\n\r\n        const result: any = {\r\n            \"name\": this.title,\r\n            \"format\": Song._format,\r\n            \"version\": Song._latestUltraBoxVersion,\r\n            \"scale\": Config.scales[this.scale].name,\r\n            \"customScale\": this.scaleCustom,\r\n            \"key\": Config.keys[this.key].name,\r\n            \"keyOctave\": this.octave,\r\n            \"introBars\": this.loopStart,\r\n            \"loopBars\": this.loopLength,\r\n            \"beatsPerBar\": this.beatsPerBar,\r\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\r\n            \"beatsPerMinute\": this.tempo,\r\n            \"reverb\": this.reverb,\r\n            \"masterGain\": this.masterGain,\r\n            \"compressionThreshold\": this.compressionThreshold,\r\n            \"limitThreshold\": this.limitThreshold,\r\n            \"limitDecay\": this.limitDecay,\r\n            \"limitRise\": this.limitRise,\r\n            \"limitRatio\": this.limitRatio,\r\n            \"compressionRatio\": this.compressionRatio,\r\n            //\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\r\n            //\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\r\n            \"layeredInstruments\": this.layeredInstruments,\r\n            \"patternInstruments\": this.patternInstruments,\r\n            \"channels\": channelArray,\r\n        };\r\n\r\n        if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\r\n            result[\"customSamples\"] = EditorConfig.customSamples;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public fromJsonObject(jsonObject: any, jsonFormat: string = \"auto\"): void {\r\n        this.initToDefault(true);\r\n        if (!jsonObject) return;\r\n\r\n        //const version: number = jsonObject[\"version\"] | 0;\r\n        //if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\r\n\r\n        // Code for auto-detect mode; if statements that are lower down have 'higher priority'\r\n        if (jsonFormat == \"auto\") {\r\n            if (jsonObject[\"format\"] == \"BeepBox\") {\r\n                // Assume that if there is a \"riff\" song setting then it must be modbox\r\n                if (jsonObject[\"riff\"] != undefined) {\r\n                    jsonFormat = \"modbox\";\r\n                }\r\n\r\n                // Assume that if there are limiter song settings then it must be jummbox\r\n                // Despite being added in JB 2.1, json export for the limiter settings wasn't added until 2.3\r\n                if (jsonObject[\"masterGain\"] != undefined) {\r\n                    jsonFormat = \"jummbox\";\r\n                }\r\n            }\r\n        }\r\n\r\n        const format: string = (jsonFormat == \"auto\" ? jsonObject[\"format\"] : jsonFormat).toLowerCase();\r\n\r\n        if (jsonObject[\"name\"] != undefined) {\r\n            this.title = jsonObject[\"name\"];\r\n        }\r\n\r\n        if (jsonObject[\"customSamples\"] != undefined) {\r\n            const customSamples: string[] = jsonObject[\"customSamples\"];\r\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != customSamples.join(\", \")) {\r\n                // Have to duplicate the work done in Song.fromBase64String\r\n                // early here, because Instrument.fromJsonObject depends on the\r\n                // chip wave list having the correct items already in memory.\r\n\r\n                Config.willReloadForCustomSamples = true;\r\n\r\n                Song._restoreChipWaveListToDefault();\r\n\r\n                let willLoadLegacySamples: boolean = false;\r\n                let willLoadNintariboxSamples: boolean = false;\r\n                let willLoadMarioPaintboxSamples: boolean = false;\r\n                const customSampleUrls: string[] = [];\r\n                const customSamplePresets: Preset[] = [];\r\n                for (const url of customSamples) {\r\n                    if (url.toLowerCase() === \"legacysamples\") {\r\n                        if (!willLoadLegacySamples) {\r\n                            willLoadLegacySamples = true;\r\n                            customSampleUrls.push(url);\r\n                            loadBuiltInSamples(0);\r\n                        }\r\n                    } \r\n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\r\n                        if (!willLoadNintariboxSamples) {\r\n                            willLoadNintariboxSamples = true;\r\n                            customSampleUrls.push(url);\r\n                            loadBuiltInSamples(1);\r\n                        }\r\n                    }\r\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\r\n                        if (!willLoadMarioPaintboxSamples) {\r\n                            willLoadMarioPaintboxSamples = true;\r\n                            customSampleUrls.push(url);\r\n                            loadBuiltInSamples(2);\r\n                        }\r\n                    }\r\n                    \r\n                    else {\r\n                        // When EditorConfig.customSamples is saved in the json\r\n                        // export, it should be using the new syntax, unless\r\n                        // the user has manually modified the URL, so we don't\r\n                        // really need to parse the old syntax here.\r\n                        const parseOldSyntax: boolean = false;\r\n                        Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\r\n                    }\r\n                }\r\n                if (customSampleUrls.length > 0) {\r\n                    EditorConfig.customSamples = customSampleUrls;\r\n                }\r\n                if (customSamplePresets.length > 0) {\r\n                    const customSamplePresetsMap: DictionaryArray<Preset> = toNameMap(customSamplePresets);\r\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\r\n                        name: \"Custom Sample Presets\",\r\n                        presets: customSamplePresetsMap,\r\n                        index: EditorConfig.presetCategories.length,\r\n                    };\r\n                }\r\n            }\r\n        } else {\r\n            // No custom samples, so the only possibility at this point is that\r\n            // we need to load the legacy samples. Let's check whether that's\r\n            // necessary.\r\n            let shouldLoadLegacySamples: boolean = false;\r\n            if (jsonObject[\"channels\"] != undefined) {\r\n                for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\r\n                    const channelObject: any = jsonObject[\"channels\"][channelIndex];\r\n                    if (channelObject[\"type\"] !== \"pitch\") {\r\n                        // Legacy samples can only exist in pitch channels.\r\n                        continue;\r\n                    }\r\n                    if (Array.isArray(channelObject[\"instruments\"])) {\r\n                        const instrumentObjects: any[] = channelObject[\"instruments\"];\r\n                        for (let i: number = 0; i < instrumentObjects.length; i++) {\r\n                            const instrumentObject: any = instrumentObjects[i];\r\n                            if (instrumentObject[\"type\"] !== \"chip\") {\r\n                                // Legacy samples can only exist in chip wave\r\n                                // instruments.\r\n                                continue;\r\n                            }\r\n                            if (instrumentObject[\"wave\"] == null) {\r\n                                // This should exist if things got saved\r\n                                // correctly, but if they didn't, skip this.\r\n                                continue;\r\n                            }\r\n                            const waveName: string = instrumentObject[\"wave\"];\r\n                            // @TODO: Avoid this duplication.\r\n                            const names: string[] = [\r\n                                \"paandorasbox kick\",\r\n                                \"paandorasbox snare\",\r\n                                \"paandorasbox piano1\",\r\n                                \"paandorasbox WOW\",\r\n                                \"paandorasbox overdrive\",\r\n                                \"paandorasbox trumpet\",\r\n                                \"paandorasbox saxophone\",\r\n                                \"paandorasbox orchestrahit\",\r\n                                \"paandorasbox detatched violin\",\r\n                                \"paandorasbox synth\",\r\n                                \"paandorasbox sonic3snare\",\r\n                                \"paandorasbox come on\",\r\n                                \"paandorasbox choir\",\r\n                                \"paandorasbox overdriveguitar\",\r\n                                \"paandorasbox flute\",\r\n                                \"paandorasbox legato violin\",\r\n                                \"paandorasbox tremolo violin\",\r\n                                \"paandorasbox amen break\",\r\n                                \"paandorasbox pizzicato violin\",\r\n                                \"paandorasbox tim allen grunt\",\r\n                                \"paandorasbox tuba\",\r\n                                \"paandorasbox loopingcymbal\",\r\n                                \"paandorasbox standardkick\",\r\n                                \"paandorasbox standardsnare\",\r\n                                \"paandorasbox closedhihat\",\r\n                                \"paandorasbox foothihat\",\r\n                                \"paandorasbox openhihat\",\r\n                                \"paandorasbox crashcymbal\",\r\n                                \"paandorasbox pianoC4\",\r\n                                \"paandorasbox liver pad\",\r\n                                \"paandorasbox marimba\",\r\n                                \"paandorasbox susdotwav\",\r\n                                \"paandorasbox wackyboxtts\",\r\n                                \"paandorasbox peppersteak_1\",\r\n                                \"paandorasbox peppersteak_2\",\r\n                                \"paandorasbox vinyl_noise\",\r\n                                \"paandorasbeta slap bass\",\r\n                                \"paandorasbeta HD EB overdrive guitar\",\r\n                                \"paandorasbeta sunsoft bass\",\r\n                                \"paandorasbeta masculine choir\",\r\n                                \"paandorasbeta feminine choir\",\r\n                                \"paandorasbeta tololoche\",\r\n                                \"paandorasbeta harp\",\r\n                                \"paandorasbeta pan flute\",\r\n                                \"paandorasbeta krumhorn\",\r\n                                \"paandorasbeta timpani\",\r\n                                \"paandorasbeta crowd hey\",\r\n                                \"paandorasbeta wario land 4 brass\",\r\n                                \"paandorasbeta wario land 4 rock organ\",\r\n                                \"paandorasbeta wario land 4 DAOW\",\r\n                                \"paandorasbeta wario land 4 hour chime\",\r\n                                \"paandorasbeta wario land 4 tick\",\r\n                                \"paandorasbeta kirby kick\",\r\n                                \"paandorasbeta kirby snare\",\r\n                                \"paandorasbeta kirby bongo\",\r\n                                \"paandorasbeta kirby click\",\r\n                                \"paandorasbeta sonor kick\",\r\n                                \"paandorasbeta sonor snare\",\r\n                                \"paandorasbeta sonor snare (left hand)\",\r\n                                \"paandorasbeta sonor snare (right hand)\",\r\n                                \"paandorasbeta sonor high tom\",\r\n                                \"paandorasbeta sonor low tom\",\r\n                                \"paandorasbeta sonor hihat (closed)\",\r\n                                \"paandorasbeta sonor hihat (half opened)\",\r\n                                \"paandorasbeta sonor hihat (open)\",\r\n                                \"paandorasbeta sonor hihat (open tip)\",\r\n                                \"paandorasbeta sonor hihat (pedal)\",\r\n                                \"paandorasbeta sonor crash\",\r\n                                \"paandorasbeta sonor crash (tip)\",\r\n                                \"paandorasbeta sonor ride\"\r\n                            ];\r\n                            // The difference for these is in the doubled a.\r\n                            const oldNames: string[] = [\r\n                                \"pandoraasbox kick\",\r\n                                \"pandoraasbox snare\",\r\n                                \"pandoraasbox piano1\",\r\n                                \"pandoraasbox WOW\",\r\n                                \"pandoraasbox overdrive\",\r\n                                \"pandoraasbox trumpet\",\r\n                                \"pandoraasbox saxophone\",\r\n                                \"pandoraasbox orchestrahit\",\r\n                                \"pandoraasbox detatched violin\",\r\n                                \"pandoraasbox synth\",\r\n                                \"pandoraasbox sonic3snare\",\r\n                                \"pandoraasbox come on\",\r\n                                \"pandoraasbox choir\",\r\n                                \"pandoraasbox overdriveguitar\",\r\n                                \"pandoraasbox flute\",\r\n                                \"pandoraasbox legato violin\",\r\n                                \"pandoraasbox tremolo violin\",\r\n                                \"pandoraasbox amen break\",\r\n                                \"pandoraasbox pizzicato violin\",\r\n                                \"pandoraasbox tim allen grunt\",\r\n                                \"pandoraasbox tuba\",\r\n                                \"pandoraasbox loopingcymbal\",\r\n                                \"pandoraasbox standardkick\",\r\n                                \"pandoraasbox standardsnare\",\r\n                                \"pandoraasbox closedhihat\",\r\n                                \"pandoraasbox foothihat\",\r\n                                \"pandoraasbox openhihat\",\r\n                                \"pandoraasbox crashcymbal\",\r\n                                \"pandoraasbox pianoC4\",\r\n                                \"pandoraasbox liver pad\",\r\n                                \"pandoraasbox marimba\",\r\n                                \"pandoraasbox susdotwav\",\r\n                                \"pandoraasbox wackyboxtts\",\r\n                                \"pandoraasbox peppersteak_1\",\r\n                                \"pandoraasbox peppersteak_2\",\r\n                                \"pandoraasbox vinyl_noise\",\r\n                                \"pandoraasbeta slap bass\",\r\n                                \"pandoraasbeta HD EB overdrive guitar\",\r\n                                \"pandoraasbeta sunsoft bass\",\r\n                                \"pandoraasbeta masculine choir\",\r\n                                \"pandoraasbeta feminine choir\",\r\n                                \"pandoraasbeta tololoche\",\r\n                                \"pandoraasbeta harp\",\r\n                                \"pandoraasbeta pan flute\",\r\n                                \"pandoraasbeta krumhorn\",\r\n                                \"pandoraasbeta timpani\",\r\n                                \"pandoraasbeta crowd hey\",\r\n                                \"pandoraasbeta wario land 4 brass\",\r\n                                \"pandoraasbeta wario land 4 rock organ\",\r\n                                \"pandoraasbeta wario land 4 DAOW\",\r\n                                \"pandoraasbeta wario land 4 hour chime\",\r\n                                \"pandoraasbeta wario land 4 tick\",\r\n                                \"pandoraasbeta kirby kick\",\r\n                                \"pandoraasbeta kirby snare\",\r\n                                \"pandoraasbeta kirby bongo\",\r\n                                \"pandoraasbeta kirby click\",\r\n                                \"pandoraasbeta sonor kick\",\r\n                                \"pandoraasbeta sonor snare\",\r\n                                \"pandoraasbeta sonor snare (left hand)\",\r\n                                \"pandoraasbeta sonor snare (right hand)\",\r\n                                \"pandoraasbeta sonor high tom\",\r\n                                \"pandoraasbeta sonor low tom\",\r\n                                \"pandoraasbeta sonor hihat (closed)\",\r\n                                \"pandoraasbeta sonor hihat (half opened)\",\r\n                                \"pandoraasbeta sonor hihat (open)\",\r\n                                \"pandoraasbeta sonor hihat (open tip)\",\r\n                                \"pandoraasbeta sonor hihat (pedal)\",\r\n                                \"pandoraasbeta sonor crash\",\r\n                                \"pandoraasbeta sonor crash (tip)\",\r\n                                \"pandoraasbeta sonor ride\"\r\n                            ];\r\n                            // This mirrors paandorasboxWaveNames, which is unprefixed.\r\n                            const veryOldNames: string[] = [\r\n                                \"kick\",\r\n                                \"snare\",\r\n                                \"piano1\",\r\n                                \"WOW\",\r\n                                \"overdrive\",\r\n                                \"trumpet\",\r\n                                \"saxophone\",\r\n                                \"orchestrahit\",\r\n                                \"detatched violin\",\r\n                                \"synth\",\r\n                                \"sonic3snare\",\r\n                                \"come on\",\r\n                                \"choir\",\r\n                                \"overdriveguitar\",\r\n                                \"flute\",\r\n                                \"legato violin\",\r\n                                \"tremolo violin\",\r\n                                \"amen break\",\r\n                                \"pizzicato violin\",\r\n                                \"tim allen grunt\",\r\n                                \"tuba\",\r\n                                \"loopingcymbal\",\r\n                                \"standardkick\",\r\n                                \"standardsnare\",\r\n                                \"closedhihat\",\r\n                                \"foothihat\",\r\n                                \"openhihat\",\r\n                                \"crashcymbal\",\r\n                                \"pianoC4\",\r\n                                \"liver pad\",\r\n                                \"marimba\",\r\n                                \"susdotwav\",\r\n                                \"wackyboxtts\"\r\n                            ];\r\n                            if (names.includes(waveName)) {\r\n                                shouldLoadLegacySamples = true;\r\n                            } else if (oldNames.includes(waveName)) {\r\n                                shouldLoadLegacySamples = true;\r\n                                // If we see one of these old names, update it\r\n                                // to the corresponding new name.\r\n                                instrumentObject[\"wave\"] = names[oldNames.findIndex(x => x === waveName)];\r\n                            } else if (veryOldNames.includes(waveName)) {\r\n                                if ((waveName === \"trumpet\" || waveName === \"flute\") && (format != \"paandorasbox\")) {\r\n                                    // If we see chip waves named trumpet or flute, and if the format isn't PaandorasBox, we leave them as-is\r\n                                } else {\r\n                                    // There's no other chip waves with ambiguous names like that, so it should\r\n                                    // be okay to assume we'll need to load the legacy samples now.\r\n                                    shouldLoadLegacySamples = true;\r\n                                    // If we see one of these old names, update it\r\n                                    // to the corresponding new name.\r\n                                    instrumentObject[\"wave\"] = names[veryOldNames.findIndex(x => x === waveName)];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (shouldLoadLegacySamples) {\r\n                Config.willReloadForCustomSamples = true;\r\n\r\n                Song._restoreChipWaveListToDefault();\r\n\r\n                loadBuiltInSamples(0);\r\n                EditorConfig.customSamples = [\"legacySamples\"];\r\n            } else {\r\n                // We don't need to load the legacy samples, but we may have\r\n                // leftover samples in memory. If we do, clear them.\r\n                if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\r\n                    // We need to reload anyway in this case, because (for now)\r\n                    // the chip wave lists won't be correctly updated.\r\n                    Config.willReloadForCustomSamples = true;\r\n                    Song._clearSamples();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.scale = 0; // default to free.\r\n        if (jsonObject[\"scale\"] != undefined) {\r\n            const oldScaleNames: Dictionary<string> = {\r\n                \"romani :)\": \"double harmonic :)\",\r\n\t\t\t\t\"romani :(\": \"double harmonic :(\",\r\n\t\t\t\t\"dbl harmonic :)\": \"double harmonic :)\",\r\n\t\t\t\t\"dbl harmonic :(\": \"double harmonic :(\",\r\n                \"enigma\": \"strange\",\r\n            };\r\n            const scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\r\n            const scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\r\n            if (scale != -1) this.scale = scale;\r\n            if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\r\n                if (jsonObject[\"customScale\"] != undefined) {\r\n                    for (var i of jsonObject[\"customScale\"].keys()) {\r\n                        this.scaleCustom[i] = jsonObject[\"customScale\"][i];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (jsonObject[\"key\"] != undefined) {\r\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\r\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\r\n            } else if (typeof (jsonObject[\"key\"]) == \"string\") {\r\n                const key: string = jsonObject[\"key\"];\r\n                // This conversion code depends on C through B being\r\n                // available as keys, of course.\r\n                if (key === \"C+\") {\r\n                    this.key = 0;\r\n                    this.octave = 1;\r\n                } else if (key === \"G- (actually F#-)\") {\r\n                    this.key = 6;\r\n                    this.octave = -1;\r\n                } else if (key === \"C-\") {\r\n                    this.key = 0;\r\n                    this.octave = -1;\r\n                } else if (key === \"oh no (F-)\") {\r\n                    this.key = 5;\r\n                    this.octave = -1;\r\n                } else {\r\n                    const letter: string = key.charAt(0).toUpperCase();\r\n                    const symbol: string = key.charAt(1).toLowerCase();\r\n                    const letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\r\n                    const accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\r\n                    let index: number | undefined = letterMap[letter];\r\n                    const offset: number | undefined = accidentalMap[symbol];\r\n                    if (index != undefined) {\r\n                        if (offset != undefined) index += offset;\r\n                        if (index < 0) index += 12;\r\n                        index = index % 12;\r\n                        this.key = index;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\r\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\r\n        }\r\n\r\n        if (jsonObject[\"keyOctave\"] != undefined) {\r\n            this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, jsonObject[\"keyOctave\"] | 0);\r\n        }\r\n\r\n        let legacyGlobalReverb: number = 0; // In older songs, reverb was song-global, record that here and pass it to Instrument.fromJsonObject() for context.\r\n        if (jsonObject[\"reverb\"] != undefined) {\r\n            legacyGlobalReverb = clamp(0, 32, jsonObject[\"reverb\"] | 0);\r\n        }\r\n\r\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\r\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\r\n        }\r\n\r\n        let importedPartsPerBeat: number = 4;\r\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\r\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\r\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\r\n            if (this.rhythm == -1) {\r\n                this.rhythm = 1;\r\n            }\r\n        }\r\n\r\n        // Read limiter settings. Ranges and defaults are based on slider settings\r\n\r\n        if (jsonObject[\"masterGain\"] != undefined) {\r\n            this.masterGain = Math.max(0.0, Math.min(5.0, jsonObject[\"masterGain\"] || 0));\r\n        } else {\r\n            this.masterGain = 1.0;\r\n        }\r\n\r\n        if (jsonObject[\"limitThreshold\"] != undefined) {\r\n            this.limitThreshold = Math.max(0.0, Math.min(2.0, jsonObject[\"limitThreshold\"] || 0));\r\n        }\r\n        else {\r\n            this.limitThreshold = 1.0;\r\n        }\r\n\r\n        if (jsonObject[\"compressionThreshold\"] != undefined) {\r\n            this.compressionThreshold = Math.max(0.0, Math.min(1.1, jsonObject[\"compressionThreshold\"] || 0));\r\n        }\r\n        else {\r\n            this.compressionThreshold = 1.0;\r\n        }\r\n\r\n        if (jsonObject[\"limitRise\"] != undefined) {\r\n            this.limitRise = Math.max(2000.0, Math.min(10000.0, jsonObject[\"limitRise\"] || 0));\r\n        }\r\n        else {\r\n            this.limitRise = 4000.0;\r\n        }\r\n\r\n        if (jsonObject[\"limitDecay\"] != undefined) {\r\n            this.limitDecay = Math.max(1.0, Math.min(30.0, jsonObject[\"limitDecay\"] || 0));\r\n        }\r\n        else {\r\n            this.limitDecay = 4.0;\r\n        }\r\n\r\n        if (jsonObject[\"limitRatio\"] != undefined) {\r\n            this.limitRatio = Math.max(0.0, Math.min(11.0, jsonObject[\"limitRatio\"] || 0));\r\n        }\r\n        else {\r\n            this.limitRatio = 1.0;\r\n        }\r\n\r\n        if (jsonObject[\"compressionRatio\"] != undefined) {\r\n            this.compressionRatio = Math.max(0.0, Math.min(1.168, jsonObject[\"compressionRatio\"] || 0));\r\n        }\r\n        else {\r\n            this.compressionRatio = 1.0;\r\n        }\r\n\r\n        let maxInstruments: number = 1;\r\n        let maxPatterns: number = 1;\r\n        let maxBars: number = 1;\r\n        if (jsonObject[\"channels\"] != undefined) {\r\n            for (const channelObject of jsonObject[\"channels\"]) {\r\n                if (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\r\n                if (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\r\n                if (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\r\n            }\r\n        }\r\n\r\n        if (jsonObject[\"layeredInstruments\"] != undefined) {\r\n            this.layeredInstruments = !!jsonObject[\"layeredInstruments\"];\r\n        } else {\r\n            this.layeredInstruments = false;\r\n        }\r\n        if (jsonObject[\"patternInstruments\"] != undefined) {\r\n            this.patternInstruments = !!jsonObject[\"patternInstruments\"];\r\n        } else {\r\n            this.patternInstruments = (maxInstruments > 1);\r\n        }\r\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\r\n        this.barCount = Math.min(maxBars, Config.barCountMax);\r\n\r\n        if (jsonObject[\"introBars\"] != undefined) {\r\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\r\n        }\r\n        if (jsonObject[\"loopBars\"] != undefined) {\r\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\r\n        }\r\n\r\n        const newPitchChannels: Channel[] = [];\r\n        const newNoiseChannels: Channel[] = [];\r\n        const newModChannels: Channel[] = [];\r\n        if (jsonObject[\"channels\"] != undefined) {\r\n            for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\r\n                let channelObject: any = jsonObject[\"channels\"][channelIndex];\r\n\r\n                const channel: Channel = new Channel();\r\n\r\n                let isNoiseChannel: boolean = false;\r\n                let isModChannel: boolean = false;\r\n                if (channelObject[\"type\"] != undefined) {\r\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\r\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\r\n                } else {\r\n                    // for older files, assume drums are channel 3.\r\n                    isNoiseChannel = (channelIndex >= 3);\r\n                }\r\n                if (isNoiseChannel) {\r\n                    newNoiseChannels.push(channel);\r\n                } else if (isModChannel) {\r\n                    newModChannels.push(channel);\r\n                }\r\n                else {\r\n                    newPitchChannels.push(channel);\r\n                }\r\n\r\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\r\n                    channel.octave = clamp(0, Config.pitchOctaves, (channelObject[\"octaveScrollBar\"] | 0) + 1);\r\n                    if (isNoiseChannel) channel.octave = 0;\r\n                }\r\n\r\n                if (channelObject[\"name\"] != undefined) {\r\n                    channel.name = channelObject[\"name\"];\r\n                }\r\n                else {\r\n                    channel.name = \"\";\r\n                }\r\n\r\n                if (Array.isArray(channelObject[\"instruments\"])) {\r\n                    const instrumentObjects: any[] = channelObject[\"instruments\"];\r\n                    for (let i: number = 0; i < instrumentObjects.length; i++) {\r\n                        if (i >= this.getMaxInstrumentsPerChannel()) break;\r\n                        const instrument: Instrument = new Instrument(isNoiseChannel, isModChannel);\r\n                        channel.instruments[i] = instrument;\r\n                        instrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, isModChannel, false, false, legacyGlobalReverb, format);\r\n                    }\r\n\r\n                }\r\n\r\n                for (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n                    const pattern: Pattern = new Pattern();\r\n                    channel.patterns[i] = pattern;\r\n\r\n                    let patternObject: any = undefined;\r\n                    if (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\r\n                    if (patternObject == undefined) continue;\r\n\r\n                    pattern.fromJsonObject(patternObject, this, channel, importedPartsPerBeat, isNoiseChannel, isModChannel, format);\r\n                }\r\n                channel.patterns.length = this.patternsPerChannel;\r\n\r\n                for (let i: number = 0; i < this.barCount; i++) {\r\n                    channel.bars[i] = (channelObject[\"sequence\"] != undefined) ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\r\n                }\r\n                channel.bars.length = this.barCount;\r\n            }\r\n        }\r\n\r\n        if (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\r\n        if (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\r\n        if (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\r\n        this.pitchChannelCount = newPitchChannels.length;\r\n        this.noiseChannelCount = newNoiseChannels.length;\r\n        this.modChannelCount = newModChannels.length;\r\n        this.channels.length = 0;\r\n        Array.prototype.push.apply(this.channels, newPitchChannels);\r\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\r\n        Array.prototype.push.apply(this.channels, newModChannels);\r\n\r\n        if (Config.willReloadForCustomSamples) {\r\n            window.location.hash = this.toBase64String();\r\n            // The prompt seems to get stuck if reloading is done too quickly.\r\n            setTimeout(() => { location.reload(); }, 50);\r\n        }\r\n    }\r\n\r\n    public getPattern(channelIndex: number, bar: number): Pattern | null {\r\n        if (bar < 0 || bar >= this.barCount) return null;\r\n        const patternIndex: number = this.channels[channelIndex].bars[bar];\r\n        if (patternIndex == 0) return null;\r\n        return this.channels[channelIndex].patterns[patternIndex - 1];\r\n    }\r\n\r\n    public getBeatsPerMinute(): number {\r\n        return this.tempo;\r\n    }\r\n\r\n    public static getNeededBits(maxValue: number): number {\r\n        return 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);\r\n    }\r\n\r\n    public restoreLimiterDefaults(): void {\r\n        this.compressionRatio = 1.0;\r\n        this.limitRatio = 1.0;\r\n        this.limitRise = 4000.0;\r\n        this.limitDecay = 4.0;\r\n        this.limitThreshold = 1.0;\r\n        this.compressionThreshold = 1.0;\r\n        this.masterGain = 1.0;\r\n    }\r\n}\r\n\r\nclass PickedString {\r\n    public delayLine: Float32Array | null = null;\r\n    public delayIndex: number;\r\n    public allPassSample: number;\r\n    public allPassPrevInput: number;\r\n    public sustainFilterSample: number;\r\n\tpublic sustainFilterPrevOutput2: number;\r\n\tpublic sustainFilterPrevInput1: number;\r\n\tpublic sustainFilterPrevInput2: number;\r\n    public fractionalDelaySample: number;\r\n    public prevDelayLength: number;\r\n    public delayLengthDelta: number;\r\n    public delayResetOffset: number;\r\n\r\n    public allPassG: number = 0.0;\r\n    public allPassGDelta: number = 0.0;\r\n    public sustainFilterA1: number = 0.0;\r\n\tpublic sustainFilterA1Delta: number = 0.0;\r\n\tpublic sustainFilterA2: number = 0.0;\r\n\tpublic sustainFilterA2Delta: number = 0.0;\r\n\tpublic sustainFilterB0: number = 0.0;\r\n\tpublic sustainFilterB0Delta: number = 0.0;\r\n\tpublic sustainFilterB1: number = 0.0;\r\n\tpublic sustainFilterB1Delta: number = 0.0;\r\n\tpublic sustainFilterB2: number = 0.0;\r\n\tpublic sustainFilterB2Delta: number = 0.0;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.delayIndex = -1;\r\n        this.allPassSample = 0.0;\r\n        this.allPassPrevInput = 0.0;\r\n        this.sustainFilterSample = 0.0;\r\n\t\tthis.sustainFilterPrevOutput2 = 0.0;\r\n\t\tthis.sustainFilterPrevInput1 = 0.0;\r\n\t\tthis.sustainFilterPrevInput2 = 0.0;\r\n        this.fractionalDelaySample = 0.0;\r\n        this.prevDelayLength = -1.0;\r\n        this.delayResetOffset = 0;\r\n    }\r\n\r\n    public update(synth: Synth, instrumentState: InstrumentState, tone: Tone, stringIndex: number, roundedSamplesPerTick: number, stringDecayStart: number, stringDecayEnd: number, sustainType: SustainType): void {\r\n        const allPassCenter: number = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\r\n\r\n        const prevDelayLength: number = this.prevDelayLength;\r\n\r\n        const phaseDeltaStart: number = tone.phaseDeltas[stringIndex];\r\n        const phaseDeltaScale: number = tone.phaseDeltaScales[stringIndex];\r\n        const phaseDeltaEnd: number = phaseDeltaStart * Math.pow(phaseDeltaScale, roundedSamplesPerTick);\r\n\r\n        const radiansPerSampleStart: number = Math.PI * 2.0 * phaseDeltaStart;\r\n        const radiansPerSampleEnd: number = Math.PI * 2.0 * phaseDeltaEnd;\r\n\r\n        const centerHarmonicStart: number = radiansPerSampleStart * 2.0;\r\n        const centerHarmonicEnd: number = radiansPerSampleEnd * 2.0;\r\n\r\n        const allPassRadiansStart: number = Math.min(Math.PI, radiansPerSampleStart * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart, Config.pickedStringDispersionFreqScale));\r\n        const allPassRadiansEnd: number = Math.min(Math.PI, radiansPerSampleEnd * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd, Config.pickedStringDispersionFreqScale));\r\n        const shelfRadians: number = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\r\n\t\tconst decayCurveStart: number = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\r\n\t\tconst decayCurveEnd: number   = (Math.pow(100.0, stringDecayEnd  ) - 1.0) / 99.0;\r\n\t\tconst register: number = sustainType == SustainType.acoustic ? 0.25 : 0.0;\r\n\t\tconst registerShelfCenter: number = 15.6;\r\n\t\tconst registerLowpassCenter: number = 3.0 * synth.samplesPerSecond / 48000;\r\n\t\t//const decayRateStart: number = Math.pow(0.5, decayCurveStart * shelfRadians / radiansPerSampleStart);\r\n\t\t//const decayRateEnd: number   = Math.pow(0.5, decayCurveEnd   * shelfRadians / radiansPerSampleEnd);\r\n\t\tconst decayRateStart: number = Math.pow(0.5, decayCurveStart * Math.pow(shelfRadians / (radiansPerSampleStart * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\r\n\t\tconst decayRateEnd:   number = Math.pow(0.5, decayCurveEnd   * Math.pow(shelfRadians / (radiansPerSampleEnd   * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\r\n        \r\n        const expressionDecayStart: number = Math.pow(decayRateStart, 0.002);\r\n        const expressionDecayEnd: number = Math.pow(decayRateEnd, 0.002);\r\n\r\n        Synth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart);\r\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\r\n        const allPassGStart: number = Synth.tempFilterStartCoefficients.b[0]; /* same as a[1] */\r\n        const allPassPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\r\n\r\n        Synth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd);\r\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\r\n        const allPassGEnd: number = Synth.tempFilterEndCoefficients.b[0]; /* same as a[1] */\r\n        const allPassPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\r\n\r\n        // 1st order shelf filters and 2nd order lowpass filters have differently shaped frequency\r\n\t\t// responses, as well as adjustable shapes. I originally picked a 1st order shelf filter,\r\n\t\t// but I kinda prefer 2nd order lowpass filters now and I designed a couple settings:\r\n\t\tconst enum PickedStringBrightnessType {\r\n\t\t\tbright, // 1st order shelf\r\n\t\t\tnormal, // 2nd order lowpass, rounded corner\r\n\t\t\tresonant, // 3rd order lowpass, harder corner\r\n\t\t}\r\n\t\tconst brightnessType: PickedStringBrightnessType = <any> sustainType == SustainType.bright ? PickedStringBrightnessType.bright : PickedStringBrightnessType.normal;\r\n\t\tif (brightnessType == PickedStringBrightnessType.bright) {\r\n\t\t\tconst shelfGainStart: number = Math.pow(decayRateStart, Config.stringDecayRate);\r\n\t\t\tconst shelfGainEnd: number   = Math.pow(decayRateEnd,   Config.stringDecayRate);\r\n\t\t\tSynth.tempFilterStartCoefficients.highShelf2ndOrder(shelfRadians, shelfGainStart, 0.5);\r\n\t\t\tSynth.tempFilterEndCoefficients.highShelf2ndOrder(shelfRadians, shelfGainEnd, 0.5);\r\n\t\t} else {\r\n\t\t\tconst cornerHardness: number = Math.pow(brightnessType == PickedStringBrightnessType.normal ? 0.0 : 1.0, 0.25);\r\n\t\t\tconst lowpass1stOrderCutoffRadiansStart: number = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleStart * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveStart, .5);\r\n\t\t\tconst lowpass1stOrderCutoffRadiansEnd:   number = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleEnd   * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveEnd,   .5);\r\n\t\t\tconst lowpass2ndOrderCutoffRadiansStart: number = lowpass1stOrderCutoffRadiansStart * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\r\n\t\t\tconst lowpass2ndOrderCutoffRadiansEnd:   number = lowpass1stOrderCutoffRadiansEnd   * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\r\n\t\t\tconst lowpass2ndOrderGainStart: number = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\r\n\t\t\tconst lowpass2ndOrderGainEnd:   number = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\r\n\t\t\tSynth.tempFilterStartCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansStart), lowpass2ndOrderGainStart);\r\n\t\t\tSynth.tempFilterEndCoefficients  .lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansEnd),   lowpass2ndOrderGainEnd);\r\n\t\t}\r\n\r\n\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\r\n\t\tconst sustainFilterA1Start: number = Synth.tempFilterStartCoefficients.a[1];\r\n\t\tconst sustainFilterA2Start: number = Synth.tempFilterStartCoefficients.a[2];\r\n\t\tconst sustainFilterB0Start: number = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart;\r\n\t\tconst sustainFilterB1Start: number = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart;\r\n\t\tconst sustainFilterB2Start: number = Synth.tempFilterStartCoefficients.b[2] * expressionDecayStart;\r\n\t\tconst sustainFilterPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\r\n\r\n\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\r\n\t\tconst sustainFilterA1End: number = Synth.tempFilterEndCoefficients.a[1];\r\n\t\tconst sustainFilterA2End: number = Synth.tempFilterEndCoefficients.a[2];\r\n\t\tconst sustainFilterB0End: number = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd;\r\n\t\tconst sustainFilterB1End: number = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd;\r\n\t\tconst sustainFilterB2End: number = Synth.tempFilterEndCoefficients.b[2] * expressionDecayEnd;\r\n\t\tconst sustainFilterPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\r\n\r\n\t\tconst periodLengthStart: number = 1.0 / phaseDeltaStart;\r\n\t\tconst periodLengthEnd: number = 1.0 / phaseDeltaEnd;\r\n\t\tconst minBufferLength: number = Math.ceil(Math.max(periodLengthStart, periodLengthEnd) * 2);\r\n\t\tconst delayLength: number = periodLengthStart - allPassPhaseDelayStart - sustainFilterPhaseDelayStart;\r\n\t\tconst delayLengthEnd: number = periodLengthEnd - allPassPhaseDelayEnd - sustainFilterPhaseDelayEnd;\r\n\r\n\t\tthis.prevDelayLength = delayLength;\r\n\t\tthis.delayLengthDelta = (delayLengthEnd - delayLength) / roundedSamplesPerTick;\r\n\t\tthis.allPassG = allPassGStart;\r\n\t\tthis.sustainFilterA1 = sustainFilterA1Start;\r\n\t\tthis.sustainFilterA2 = sustainFilterA2Start;\r\n\t\tthis.sustainFilterB0 = sustainFilterB0Start;\r\n\t\tthis.sustainFilterB1 = sustainFilterB1Start;\r\n\t\tthis.sustainFilterB2 = sustainFilterB2Start;\r\n\t\tthis.allPassGDelta = (allPassGEnd - allPassGStart) / roundedSamplesPerTick;\r\n\t\tthis.sustainFilterA1Delta = (sustainFilterA1End - sustainFilterA1Start) / roundedSamplesPerTick;\r\n\t\tthis.sustainFilterA2Delta = (sustainFilterA2End - sustainFilterA2Start) / roundedSamplesPerTick;\r\n\t\tthis.sustainFilterB0Delta = (sustainFilterB0End - sustainFilterB0Start) / roundedSamplesPerTick;\r\n\t\tthis.sustainFilterB1Delta = (sustainFilterB1End - sustainFilterB1Start) / roundedSamplesPerTick;\r\n\t\tthis.sustainFilterB2Delta = (sustainFilterB2End - sustainFilterB2Start) / roundedSamplesPerTick;\r\n\r\n        const pitchChanged: boolean = Math.abs(Math.log2(delayLength / prevDelayLength)) > 0.01;\r\n\r\n        const reinitializeImpulse: boolean = (this.delayIndex == -1 || pitchChanged);\r\n        if (this.delayLine == null || this.delayLine.length <= minBufferLength) {\r\n            // The delay line buffer will get reused for other tones so might as well\r\n            // start off with a buffer size that is big enough for most notes.\r\n            const likelyMaximumLength: number = Math.ceil(2 * synth.samplesPerSecond / Instrument.frequencyFromPitch(12));\r\n            const newDelayLine: Float32Array = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\r\n            if (!reinitializeImpulse && this.delayLine != null) {\r\n                // If the tone has already started but the buffer needs to be reallocated,\r\n                // transfer the old data to the new buffer.\r\n                const oldDelayBufferMask: number = (this.delayLine.length - 1) >> 0;\r\n                const startCopyingFromIndex: number = this.delayIndex + this.delayResetOffset;\r\n                this.delayIndex = this.delayLine.length - this.delayResetOffset;\r\n                for (let i: number = 0; i < this.delayLine.length; i++) {\r\n                    newDelayLine[i] = this.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\r\n                }\r\n            }\r\n            this.delayLine = newDelayLine;\r\n        }\r\n        const delayLine: Float32Array = this.delayLine;\r\n        const delayBufferMask: number = (delayLine.length - 1) >> 0;\r\n\r\n        if (reinitializeImpulse) {\r\n            // -1 delay index means the tone was reset.\r\n            // Also, if the pitch changed suddenly (e.g. from seamless or arpeggio) then reset the wave.\r\n\r\n            this.delayIndex = 0;\r\n            this.allPassSample = 0.0;\r\n            this.allPassPrevInput = 0.0;\r\n            this.sustainFilterSample = 0.0;\r\n\t\t\tthis.sustainFilterPrevOutput2 = 0.0;\r\n\t\t\tthis.sustainFilterPrevInput1 = 0.0;\r\n\t\t\tthis.sustainFilterPrevInput2 = 0.0;\r\n            this.fractionalDelaySample = 0.0;\r\n\r\n            // Clear away a region of the delay buffer for the new impulse.\r\n            const startImpulseFrom: number = -delayLength;\r\n            const startZerosFrom: number = Math.floor(startImpulseFrom - periodLengthStart / 2);\r\n            const stopZerosAt: number = Math.ceil(startZerosFrom + periodLengthStart * 2);\r\n            this.delayResetOffset = stopZerosAt; // And continue clearing the area in front of the delay line.\r\n            for (let i: number = startZerosFrom; i <= stopZerosAt; i++) {\r\n                delayLine[i & delayBufferMask] = 0.0;\r\n            }\r\n\r\n            const impulseWave: Float32Array = instrumentState.wave!;\r\n            const impulseWaveLength: number = impulseWave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n            const impulsePhaseDelta: number = impulseWaveLength / periodLengthStart;\r\n\r\n            const fadeDuration: number = Math.min(periodLengthStart * 0.2, synth.samplesPerSecond * 0.003);\r\n            const startImpulseFromSample: number = Math.ceil(startImpulseFrom);\r\n            const stopImpulseAt: number = startImpulseFrom + periodLengthStart + fadeDuration;\r\n            const stopImpulseAtSample: number = stopImpulseAt;\r\n            let impulsePhase: number = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\r\n            let prevWaveIntegral: number = 0.0;\r\n            for (let i: number = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\r\n                const impulsePhaseInt: number = impulsePhase | 0;\r\n                const index: number = impulsePhaseInt % impulseWaveLength;\r\n                let nextWaveIntegral: number = impulseWave[index];\r\n                const phaseRatio: number = impulsePhase - impulsePhaseInt;\r\n                nextWaveIntegral += (impulseWave[index + 1] - nextWaveIntegral) * phaseRatio;\r\n                const sample: number = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\r\n                const fadeIn: number = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\r\n                const fadeOut: number = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\r\n                const combinedFade: number = fadeIn * fadeOut;\r\n                const curvedFade: number = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade); // A cubic sigmoid from 0 to 1.\r\n                delayLine[i & delayBufferMask] += sample * curvedFade;\r\n                prevWaveIntegral = nextWaveIntegral;\r\n                impulsePhase += impulsePhaseDelta;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass EnvelopeComputer {\r\n    // \"Unscaled\" values do not increase with Envelope Speed's timescale factor. Thus they are \"real\" seconds since the start of the note.\r\n    // Fade envelopes notable use unscaled values instead of being ties to Envelope Speed.\r\n    public noteSecondsStart: number = 0.0;\r\n    public noteSecondsStartUnscaled: number = 0.0;\r\n    public noteSecondsEnd: number = 0.0;\r\n    public noteSecondsEndUnscaled: number = 0.0;\r\n    public noteTicksStart: number = 0.0;\r\n    public noteTicksEnd: number = 0.0;\r\n    public noteSizeStart: number = Config.noteSizeMax;\r\n    public noteSizeEnd: number = Config.noteSizeMax;\r\n    public prevNoteSize: number = Config.noteSizeMax;\r\n    public nextNoteSize: number = Config.noteSizeMax;\r\n    private _noteSizeFinal: number = Config.noteSizeMax;\r\n    public prevNoteSecondsStart: number = 0.0;\r\n    public prevNoteSecondsStartUnscaled: number = 0.0;\r\n    public prevNoteSecondsEnd: number = 0.0;\r\n    public prevNoteSecondsEndUnscaled: number = 0.0;\r\n    public prevNoteTicksStart: number = 0.0;\r\n    public prevNoteTicksEnd: number = 0.0;\r\n    private _prevNoteSizeFinal: number = Config.noteSizeMax;\r\n\r\n    public prevSlideStart: boolean = false;\r\n    public prevSlideEnd: boolean = false;\r\n    public nextSlideStart: boolean = false;\r\n    public nextSlideEnd: boolean = false;\r\n    public prevSlideRatioStart: number = 0.0;\r\n    public prevSlideRatioEnd: number = 0.0;\r\n    public nextSlideRatioStart: number = 0.0;\r\n    public nextSlideRatioEnd: number = 0.0;\r\n\r\n    public readonly envelopeStarts: number[] = [];\r\n    public readonly envelopeEnds: number[] = [];\r\n    private readonly _modifiedEnvelopeIndices: number[] = [];\r\n    private _modifiedEnvelopeCount: number = 0;\r\n    public lowpassCutoffDecayVolumeCompensation: number = 1.0;\r\n\r\n    constructor(/*private _perNote: boolean*/) {\r\n        //const length: number = this._perNote ? EnvelopeComputeIndex.length : InstrumentAutomationIndex.length;\r\n        const length: number = EnvelopeComputeIndex.length;\r\n        for (let i: number = 0; i < length; i++) {\r\n            this.envelopeStarts[i] = 1.0;\r\n            this.envelopeEnds[i] = 1.0;\r\n        }\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.noteSecondsEnd = 0.0;\r\n        this.noteSecondsEndUnscaled = 0.0;\r\n        this.noteTicksEnd = 0.0;\r\n        this._noteSizeFinal = Config.noteSizeMax;\r\n        this.prevNoteSecondsEnd = 0.0;\r\n        this.prevNoteSecondsEndUnscaled = 0.0;\r\n        this.prevNoteTicksEnd = 0.0;\r\n        this._prevNoteSizeFinal = Config.noteSizeMax;\r\n        this._modifiedEnvelopeCount = 0;\r\n    }\r\n\r\n    public computeEnvelopes(instrument: Instrument, currentPart: number, tickTimeStart: number, tickTimeStartReal: number, secondsPerTick: number, tone: Tone | null, timeScale: number): void {\r\n        const secondsPerTickUnscaled: number = secondsPerTick;\r\n        secondsPerTick *= timeScale;\r\n        const transition: Transition = instrument.getTransition();\r\n        if (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\r\n            this.prevNoteSecondsEnd = this.noteSecondsEnd;\r\n            this.prevNoteSecondsEndUnscaled = this.noteSecondsEndUnscaled;\r\n            this.prevNoteTicksEnd = this.noteTicksEnd;\r\n            this._prevNoteSizeFinal = this._noteSizeFinal;\r\n            this.noteSecondsEnd = 0.0;\r\n            this.noteSecondsEndUnscaled = 0.0;\r\n            this.noteTicksEnd = 0.0;\r\n        }\r\n        if (tone != null) {\r\n            if (tone.note != null) {\r\n                this._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;\r\n            } else {\r\n                this._noteSizeFinal = Config.noteSizeMax;\r\n            }\r\n        }\r\n        const tickTimeEnd: number = tickTimeStart + timeScale;\r\n        const tickTimeEndReal: number = tickTimeStartReal + 1.0;\r\n        const noteSecondsStart: number = this.noteSecondsEnd;\r\n        const noteSecondsStartUnscaled: number = this.noteSecondsEndUnscaled;\r\n        const noteSecondsEnd: number = noteSecondsStart + secondsPerTick;\r\n        const noteSecondsEndUnscaled: number = noteSecondsStartUnscaled + secondsPerTickUnscaled;\r\n        const noteTicksStart: number = this.noteTicksEnd;\r\n        const noteTicksEnd: number = noteTicksStart + 1.0;\r\n        const prevNoteSecondsStart: number = this.prevNoteSecondsEnd;\r\n        const prevNoteSecondsStartUnscaled: number = this.prevNoteSecondsEndUnscaled;\r\n        const prevNoteSecondsEnd: number = prevNoteSecondsStart + secondsPerTick;\r\n        const prevNoteSecondsEndUnscaled: number = prevNoteSecondsStartUnscaled + secondsPerTickUnscaled;\r\n        const prevNoteTicksStart: number = this.prevNoteTicksEnd;\r\n        const prevNoteTicksEnd: number = prevNoteTicksStart + 1.0;\r\n\r\n        const beatsPerTick: number = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);\r\n        const beatTimeStart: number = beatsPerTick * tickTimeStart;\r\n        const beatTimeEnd: number = beatsPerTick * tickTimeEnd;\r\n\r\n        let noteSizeStart: number = this._noteSizeFinal;\r\n        let noteSizeEnd: number = this._noteSizeFinal;\r\n        let prevNoteSize: number = this._prevNoteSizeFinal;\r\n        let nextNoteSize: number = 0;\r\n        let prevSlideStart: boolean = false;\r\n        let prevSlideEnd: boolean = false;\r\n        let nextSlideStart: boolean = false;\r\n        let nextSlideEnd: boolean = false;\r\n        let prevSlideRatioStart: number = 0.0;\r\n        let prevSlideRatioEnd: number = 0.0;\r\n        let nextSlideRatioStart: number = 0.0;\r\n        let nextSlideRatioEnd: number = 0.0;\r\n        if (tone != null && tone.note != null && !tone.passedEndOfNote) {\r\n            const endPinIndex: number = tone.note.getEndPinIndex(currentPart);\r\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\r\n            const endPin: NotePin = tone.note.pins[endPinIndex];\r\n            const startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\r\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\r\n            const ratioStart: number = (tickTimeStartReal - startPinTick) / (endPinTick - startPinTick);\r\n            const ratioEnd: number = (tickTimeEndReal - startPinTick) / (endPinTick - startPinTick);\r\n            noteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;\r\n            noteSizeEnd = startPin.size + (endPin.size - startPin.size) * ratioEnd;\r\n\r\n            if (transition.slides) {\r\n                const noteStartTick: number = tone.noteStartPart * Config.ticksPerPart;\r\n                const noteEndTick: number = tone.noteEndPart * Config.ticksPerPart;\r\n                const noteLengthTicks: number = noteEndTick - noteStartTick;\r\n                const maximumSlideTicks: number = noteLengthTicks * 0.5;\r\n                const slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n                if (tone.prevNote != null && !tone.forceContinueAtStart) {\r\n                    if (tickTimeStartReal - noteStartTick < slideTicks) {\r\n                        prevSlideStart = true;\r\n                        prevSlideRatioStart = 0.5 * (1.0 - (tickTimeStartReal - noteStartTick) / slideTicks);\r\n                    }\r\n                    if (tickTimeEndReal - noteStartTick < slideTicks) {\r\n                        prevSlideEnd = true;\r\n                        prevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEndReal - noteStartTick) / slideTicks);\r\n                    }\r\n                }\r\n                if (tone.nextNote != null && !tone.forceContinueAtEnd) {\r\n                    nextNoteSize = tone.nextNote.pins[0].size\r\n                    if (noteEndTick - tickTimeStartReal < slideTicks) {\r\n                        nextSlideStart = true;\r\n                        nextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStartReal) / slideTicks);\r\n                    }\r\n                    if (noteEndTick - tickTimeEndReal < slideTicks) {\r\n                        nextSlideEnd = true;\r\n                        nextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEndReal) / slideTicks);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let lowpassCutoffDecayVolumeCompensation: number = 1.0;\r\n        let usedNoteSize: boolean = false;\r\n        for (let envelopeIndex: number = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {\r\n            let automationTarget: AutomationTarget;\r\n            let targetIndex: number;\r\n            let envelope: Envelope;\r\n            if (envelopeIndex == instrument.envelopeCount) {\r\n                if (usedNoteSize /*|| !this._perNote*/) break;\r\n                // Special case: if no other envelopes used note size, default to applying it to note volume.\r\n                automationTarget = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\r\n                targetIndex = 0;\r\n                envelope = Config.envelopes.dictionary[\"note size\"];\r\n            } else {\r\n                let envelopeSettings: EnvelopeSettings = instrument.envelopes[envelopeIndex];\r\n                automationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];\r\n                targetIndex = envelopeSettings.index;\r\n                envelope = Config.envelopes[envelopeSettings.envelope];\r\n                if (envelope.type == EnvelopeType.noteSize) usedNoteSize = true;\r\n            }\r\n            if (/*automationTarget.perNote == this._perNote &&*/ automationTarget.computeIndex != null) {\r\n                const computeIndex: number = automationTarget.computeIndex + targetIndex;\r\n                let envelopeStart: number = EnvelopeComputer.computeEnvelope(envelope, noteSecondsStart, beatTimeStart, noteSizeStart);\r\n                if (prevSlideStart) {\r\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsStart, beatTimeStart, prevNoteSize);\r\n                    envelopeStart += (other - envelopeStart) * prevSlideRatioStart;\r\n                }\r\n                if (nextSlideStart) {\r\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeStart, nextNoteSize);\r\n                    envelopeStart += (other - envelopeStart) * nextSlideRatioStart;\r\n                }\r\n                let envelopeEnd: number = envelopeStart;\r\n                if (instrument.discreteEnvelope == false) {\r\n                    envelopeEnd = EnvelopeComputer.computeEnvelope(envelope, noteSecondsEnd, beatTimeEnd, noteSizeEnd);\r\n                    if (prevSlideEnd) {\r\n                        const other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsEnd, beatTimeEnd, prevNoteSize);\r\n                        envelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;\r\n                    }\r\n                    if (nextSlideEnd) {\r\n                        const other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeEnd, nextNoteSize);\r\n                        envelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;\r\n                    }\r\n                }\r\n\r\n                this.envelopeStarts[computeIndex] *= envelopeStart;\r\n                this.envelopeEnds[computeIndex] *= envelopeEnd;\r\n                this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++] = computeIndex;\r\n\r\n                if (automationTarget.isFilter) {\r\n                    const filterSettings: FilterSettings = /*this._perNote ?*/ (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter /*: instrument.eqFilter*/;\r\n                    if (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == FilterType.lowPass) {\r\n                        lowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.noteSecondsStart = noteSecondsStart;\r\n        this.noteSecondsStartUnscaled = noteSecondsStartUnscaled;\r\n        this.noteSecondsEnd = noteSecondsEnd;\r\n        this.noteSecondsEndUnscaled = noteSecondsEndUnscaled;\r\n        this.noteTicksStart = noteTicksStart;\r\n        this.noteTicksEnd = noteTicksEnd;\r\n        this.prevNoteSecondsStart = prevNoteSecondsStart;\r\n        this.prevNoteSecondsStartUnscaled = prevNoteSecondsStartUnscaled;\r\n        this.prevNoteSecondsEnd = prevNoteSecondsEnd;\r\n        this.prevNoteSecondsEndUnscaled = prevNoteSecondsEndUnscaled;\r\n        this.prevNoteTicksStart = prevNoteTicksStart;\r\n        this.prevNoteTicksEnd = prevNoteTicksEnd;\r\n        this.prevNoteSize = prevNoteSize;\r\n        this.nextNoteSize = nextNoteSize;\r\n        this.noteSizeStart = noteSizeStart;\r\n        this.noteSizeEnd = noteSizeEnd;\r\n        this.prevSlideStart = prevSlideStart;\r\n        this.prevSlideEnd = prevSlideEnd;\r\n        this.nextSlideStart = nextSlideStart;\r\n        this.nextSlideEnd = nextSlideEnd;\r\n        this.prevSlideRatioStart = prevSlideRatioStart;\r\n        this.prevSlideRatioEnd = prevSlideRatioEnd;\r\n        this.nextSlideRatioStart = nextSlideRatioStart;\r\n        this.nextSlideRatioEnd = nextSlideRatioEnd;\r\n        this.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;\r\n    }\r\n\r\n    public clearEnvelopes(): void {\r\n        for (let envelopeIndex: number = 0; envelopeIndex < this._modifiedEnvelopeCount; envelopeIndex++) {\r\n            const computeIndex: number = this._modifiedEnvelopeIndices[envelopeIndex];\r\n            this.envelopeStarts[computeIndex] = 1.0;\r\n            this.envelopeEnds[computeIndex] = 1.0;\r\n        }\r\n        this._modifiedEnvelopeCount = 0;\r\n    }\r\n\r\n    public static computeEnvelope(envelope: Envelope, time: number, beats: number, noteSize: number): number {\r\n        switch (envelope.type) {\r\n            case EnvelopeType.noteSize: return Synth.noteSizeToVolumeMult(noteSize);\r\n            case EnvelopeType.none: return 1.0;\r\n            case EnvelopeType.twang: return 1.0 / (1.0 + time * envelope.speed);\r\n            case EnvelopeType.swell: return 1.0 - 1.0 / (1.0 + time * envelope.speed);\r\n            case EnvelopeType.tremolo: return 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\r\n            case EnvelopeType.tremolo2: return 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\r\n            case EnvelopeType.punch: return Math.max(1.0, 2.0 - time * 10.0);\r\n            case EnvelopeType.flare: const attack: number = 0.25 / Math.sqrt(envelope.speed); return time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * envelope.speed);\r\n            case EnvelopeType.decay: return Math.pow(2, -envelope.speed * time);\r\n            case EnvelopeType.blip: return 1.0 * +(time < (0.25 / Math.sqrt(envelope.speed)));\r\n            case EnvelopeType.wibble:\r\n                let temp = 0.5 - Math.cos(beats * envelope.speed) * 0.5;\r\n                temp = 1.0 / (1.0 + time * (envelope.speed - (temp / (1.5 / envelope.speed))));\r\n                temp = temp > 0.0 ? temp : 0.0;\r\n                return temp;\r\n            case EnvelopeType.linear: {\r\n                let lin = (1.0 - (time / (16 / envelope.speed)));\r\n                lin = lin > 0.0 ? lin : 0.0;\r\n                return lin;\r\n            }\r\n            case EnvelopeType.rise: {\r\n                let lin = (time / (16 / envelope.speed));\r\n                lin = lin < 1.0 ? lin : 1.0;\r\n                return lin;\r\n            }\r\n            default: throw new Error(\"Unrecognized operator envelope type.\");\r\n        }\r\n\r\n    }\r\n\r\n    public static getLowpassCutoffDecayVolumeCompensation(envelope: Envelope): number {\r\n        // This is a little hokey in the details, but I designed it a while ago and keep it \r\n        // around for compatibility. This decides how much to increase the volume (or\r\n        // expression) to compensate for a decaying lowpass cutoff to maintain perceived\r\n        // volume overall.\r\n        if (envelope.type == EnvelopeType.decay) return 1.25 + 0.025 * envelope.speed;\r\n        if (envelope.type == EnvelopeType.twang) return 1.0 + 0.02 * envelope.speed;\r\n        return 1.0;\r\n    }\r\n}\r\n\r\nclass Tone {\r\n    public instrumentIndex: number;\r\n    public readonly pitches: number[] = Array(Config.maxChordSize+2).fill(0);\r\n    public pitchCount: number = 0;\r\n    public chordSize: number = 0;\r\n    public drumsetPitch: number | null = null;\r\n    public note: Note | null = null;\r\n    public prevNote: Note | null = null;\r\n    public nextNote: Note | null = null;\r\n    public prevNotePitchIndex: number = 0;\r\n    public nextNotePitchIndex: number = 0;\r\n    public freshlyAllocated: boolean = true;\r\n    public atNoteStart: boolean = false;\r\n    public isOnLastTick: boolean = false; // Whether the tone is finished fading out and ready to be freed.\r\n    public passedEndOfNote: boolean = false;\r\n    public forceContinueAtStart: boolean = false;\r\n    public forceContinueAtEnd: boolean = false;\r\n    public noteStartPart: number = 0;\r\n    public noteEndPart: number = 0;\r\n    public ticksSinceReleased: number = 0;\r\n    public liveInputSamplesHeld: number = 0;\r\n    public lastInterval: number = 0;\r\n    public noiseSample: number = 0.0;\r\n    public noiseSampleA: number = 0.0;\r\n    public noiseSampleB: number = 0.0;\r\n    public stringSustainStart: number = 0;\r\n    public stringSustainEnd: number = 0;\r\n    public readonly phases: number[] = [];\r\n    public readonly operatorWaves: OperatorWave[] = [];\r\n    public readonly phaseDeltas: number[] = [];\r\n\t\t\t// advloop addition\r\n        public directions: number[] = [];\r\n        public chipWaveCompletions: number[] = [];\r\n        public chipWavePrevWaves: number[] = [];\r\n        public chipWaveCompletionsLastWave: number[] = [];\r\n           // advloop addition\r\n    public readonly phaseDeltaScales: number[] = [];\r\n    public expression: number = 0.0;\r\n    public expressionDelta: number = 0.0;\r\n    public readonly operatorExpressions: number[] = [];\r\n    public readonly operatorExpressionDeltas: number[] = [];\r\n    public readonly prevPitchExpressions: Array<number | null> = Array(Config.maxPitchOrOperatorCount).fill(null);\r\n    public prevVibrato: number | null = null;\r\n    public prevStringDecay: number | null = null;\r\n    public pulseWidth: number = 0.0;\r\n    public pulseWidthDelta: number = 0.0;\r\n    public decimalOffset: number = 0.0;\r\n    public supersawDynamism: number = 0.0;\r\n\tpublic supersawDynamismDelta: number = 0.0;\r\n\tpublic supersawUnisonDetunes: number[] = []; // These can change over time, but slowly enough that I'm not including corresponding delta values within a tick run.\r\n\tpublic supersawShape: number = 0.0;\r\n\tpublic supersawShapeDelta: number = 0.0;\r\n\tpublic supersawDelayLength: number = 0.0;\r\n\tpublic supersawDelayLengthDelta: number = 0.0;\r\n\tpublic supersawDelayLine: Float32Array | null = null;\r\n\tpublic supersawDelayIndex: number = -1;\r\n\tpublic supersawPrevPhaseDelta: number | null = null;\r\n    public readonly pickedStrings: PickedString[] = [];\r\n\r\n    public readonly noteFilters: DynamicBiquadFilter[] = [];\r\n    public noteFilterCount: number = 0;\r\n    public initialNoteFilterInput1: number = 0.0;\r\n    public initialNoteFilterInput2: number = 0.0;\r\n\r\n    public specialIntervalExpressionMult: number = 1.0;\r\n    public readonly feedbackOutputs: number[] = [];\r\n    public feedbackMult: number = 0.0;\r\n    public feedbackDelta: number = 0.0;\r\n    public stereoVolumeLStart: number = 0.0;\r\n    public stereoVolumeRStart: number = 0.0;\r\n    public stereoVolumeLDelta: number = 0.0;\r\n    public stereoVolumeRDelta: number = 0.0;\r\n    public stereoDelayStart: number = 0.0;\r\n    public stereoDelayEnd: number = 0.0;\r\n    public stereoDelayDelta: number = 0.0;\r\n    public customVolumeStart: number = 0.0;\r\n    public customVolumeEnd: number = 0.0;\r\n    public filterResonanceStart: number = 0.0;\r\n    public filterResonanceDelta: number = 0.0;\r\n    public isFirstOrder: boolean = false;\r\n\r\n    public readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(/*true*/);\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.noiseSample = 0.0;\r\n        this.noiseSampleA = 0.0;\r\n        this.noiseSampleB = 0.0;\r\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\r\n            this.phases[i] = 0.0;\r\n\t\t\t\t\t\t// advloop addition\r\n                this.directions[i] = 1;\r\n                this.chipWaveCompletions[i] = 0;\r\n                this.chipWavePrevWaves[i] = 0;\r\n                this.chipWaveCompletionsLastWave[i] = 0;\r\n                // advloop addition\r\n            this.operatorWaves[i] = Config.operatorWaves[0];\r\n            this.feedbackOutputs[i] = 0.0;\r\n            this.prevPitchExpressions[i] = null;\r\n        }\r\n        for (let i: number = 0; i < this.noteFilterCount; i++) {\r\n            this.noteFilters[i].resetOutput();\r\n        }\r\n        this.noteFilterCount = 0;\r\n        this.initialNoteFilterInput1 = 0.0;\r\n        this.initialNoteFilterInput2 = 0.0;\r\n        this.liveInputSamplesHeld = 0;\r\n        this.supersawDelayIndex = -1;\r\n        for (const pickedString of this.pickedStrings) {\r\n            pickedString.reset();\r\n        }\r\n        this.envelopeComputer.reset();\r\n        this.prevVibrato = null;\r\n        this.prevStringDecay = null;\r\n        this.supersawPrevPhaseDelta = null;\r\n        this.drumsetPitch = null;\r\n    }\r\n}\r\n\r\nclass InstrumentState {\r\n    public awake: boolean = false; // Whether the instrument's effects-processing loop should continue.\r\n    public computed: boolean = false; // Whether the effects-processing parameters are up-to-date for the current synth run.\r\n    public tonesAddedInThisTick: boolean = false; // Whether any instrument tones are currently active.\r\n    public flushingDelayLines: boolean = false; // If no tones were active recently, enter a mode where the delay lines are filled with zeros to reset them for later use.\r\n    public deactivateAfterThisTick: boolean = false; // Whether the instrument is ready to be deactivated because the delay lines, if any, are fully zeroed.\r\n    public attentuationProgress: number = 0.0; // How long since an active tone introduced an input signal to the delay lines, normalized from 0 to 1 based on how long to wait until the delay lines signal will have audibly dissapated.\r\n    public flushedSamples: number = 0; // How many delay line samples have been flushed to zero.\r\n    public readonly activeTones: Deque<Tone> = new Deque<Tone>();\r\n    public readonly activeModTones: Deque<Tone> = new Deque<Tone>();\r\n    public readonly releasedTones: Deque<Tone> = new Deque<Tone>(); // Tones that are in the process of fading out after the corresponding notes ended.\r\n    public readonly liveInputTones: Deque<Tone> = new Deque<Tone>(); // Tones that are initiated by a source external to the loaded song data.\r\n\r\n    public type: InstrumentType = InstrumentType.chip;\r\n    public synthesizer: Function | null = null;\r\n    public wave: Float32Array | null = null;\r\n\t\t\t\t // advloop addition\r\n            public isUsingAdvancedLoopControls = false;\r\n            public chipWaveLoopStart = 0;\r\n            public chipWaveLoopEnd = 0;\r\n            public chipWaveLoopMode = 0;\r\n            public chipWavePlayBackwards = false;\r\n            public chipWaveStartOffset = 0;\r\n            // advloop addition\r\n    public noisePitchFilterMult: number = 1.0;\r\n    public unison: Unison | null = null;\r\n    public unisonVoices: number = 1;\r\n    public unisonSpread: number = 0.0;\r\n    public unisonOffset: number = 0.0;\r\n    public unisonExpression: number = 1.4;\r\n    public unisonSign: number = 1.0;\r\n    public chord: Chord | null = null;\r\n    public effects: number = 0;\r\n\r\n    public volumeScale: number = 0;\r\n    public aliases: boolean = false;\r\n    public arpTime: number = 0;\r\n    public vibratoTime: number = 0;\r\n    public nextVibratoTime: number = 0;\r\n    public envelopeTime: number = 0;\r\n\r\n    public eqFilterVolume: number = 1.0;\r\n    public eqFilterVolumeDelta: number = 0.0;\r\n    public mixVolume: number = 1.0;\r\n    public mixVolumeDelta: number = 0.0;\r\n    public delayInputMult: number = 0.0;\r\n    public delayInputMultDelta: number = 0.0;\r\n\r\n    public distortion: number = 0.0;\r\n    public distortionDelta: number = 0.0;\r\n    public distortionDrive: number = 0.0;\r\n    public distortionDriveDelta: number = 0.0;\r\n    public distortionFractionalInput1: number = 0.0;\r\n    public distortionFractionalInput2: number = 0.0;\r\n    public distortionFractionalInput3: number = 0.0;\r\n    public distortionPrevInput: number = 0.0;\r\n    public distortionNextOutput: number = 0.0;\r\n\r\n    public bitcrusherPrevInput: number = 0.0;\r\n    public bitcrusherCurrentOutput: number = 0.0;\r\n    public bitcrusherPhase: number = 1.0;\r\n    public bitcrusherPhaseDelta: number = 0.0;\r\n    public bitcrusherPhaseDeltaScale: number = 1.0;\r\n    public bitcrusherScale: number = 1.0;\r\n    public bitcrusherScaleScale: number = 1.0;\r\n    public bitcrusherFoldLevel: number = 1.0;\r\n    public bitcrusherFoldLevelScale: number = 1.0;\r\n\r\n    public readonly eqFilters: DynamicBiquadFilter[] = [];\r\n    public eqFilterCount: number = 0;\r\n    public initialEqFilterInput1: number = 0.0;\r\n    public initialEqFilterInput2: number = 0.0;\r\n\r\n    public panningDelayLine: Float32Array | null = null;\r\n    public panningDelayPos: number = 0;\r\n    public panningVolumeL: number = 0.0;\r\n    public panningVolumeR: number = 0.0;\r\n    public panningVolumeDeltaL: number = 0.0;\r\n    public panningVolumeDeltaR: number = 0.0;\r\n    public panningOffsetL: number = 0.0;\r\n    public panningOffsetR: number = 0.0;\r\n    public panningOffsetDeltaL: number = 0.0;\r\n    public panningOffsetDeltaR: number = 0.0;\r\n\r\n    public chorusDelayLineL: Float32Array | null = null;\r\n    public chorusDelayLineR: Float32Array | null = null;\r\n    public chorusDelayLineDirty: boolean = false;\r\n    public chorusDelayPos: number = 0;\r\n    public chorusPhase: number = 0;\r\n    public chorusVoiceMult: number = 0;\r\n    public chorusVoiceMultDelta: number = 0;\r\n    public chorusCombinedMult: number = 0;\r\n    public chorusCombinedMultDelta: number = 0;\r\n\r\n    public echoDelayLineL: Float32Array | null = null;\r\n    public echoDelayLineR: Float32Array | null = null;\r\n    public echoDelayLineDirty: boolean = false;\r\n    public echoDelayPos: number = 0;\r\n    public echoDelayOffsetStart: number = 0;\r\n    public echoDelayOffsetEnd: number | null = null;\r\n    public echoDelayOffsetRatio: number = 0.0;\r\n    public echoDelayOffsetRatioDelta: number = 0.0;\r\n    public echoMult: number = 0.0;\r\n    public echoMultDelta: number = 0.0;\r\n    public echoShelfA1: number = 0.0;\r\n    public echoShelfB0: number = 0.0;\r\n    public echoShelfB1: number = 0.0;\r\n    public echoShelfSampleL: number = 0.0;\r\n    public echoShelfSampleR: number = 0.0;\r\n    public echoShelfPrevInputL: number = 0.0;\r\n    public echoShelfPrevInputR: number = 0.0;\r\n\r\n    public reverbDelayLine: Float32Array | null = null;\r\n    public reverbDelayLineDirty: boolean = false;\r\n    public reverbDelayPos: number = 0;\r\n    public reverbMult: number = 0.0;\r\n    public reverbMultDelta: number = 0.0;\r\n    public reverbShelfA1: number = 0.0;\r\n    public reverbShelfB0: number = 0.0;\r\n    public reverbShelfB1: number = 0.0;\r\n    public reverbShelfSample0: number = 0.0;\r\n    public reverbShelfSample1: number = 0.0;\r\n    public reverbShelfSample2: number = 0.0;\r\n    public reverbShelfSample3: number = 0.0;\r\n    public reverbShelfPrevInput0: number = 0.0;\r\n    public reverbShelfPrevInput1: number = 0.0;\r\n    public reverbShelfPrevInput2: number = 0.0;\r\n    public reverbShelfPrevInput3: number = 0.0;\r\n\r\n    //public readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(false);\r\n\r\n    public readonly spectrumWave: SpectrumWaveState = new SpectrumWaveState();\r\n    public readonly harmonicsWave: HarmonicsWaveState = new HarmonicsWaveState();\r\n    public readonly drumsetSpectrumWaves: SpectrumWaveState[] = [];\r\n\r\n    constructor() {\r\n        for (let i: number = 0; i < Config.drumCount; i++) {\r\n            this.drumsetSpectrumWaves[i] = new SpectrumWaveState();\r\n        }\r\n    }\r\n\r\n\r\n    public allocateNecessaryBuffers(synth: Synth, instrument: Instrument, samplesPerTick: number): void {\r\n        if (effectsIncludePanning(instrument.effects)) {\r\n            if (this.panningDelayLine == null || this.panningDelayLine.length < synth.panningDelayBufferSize) {\r\n                this.panningDelayLine = new Float32Array(synth.panningDelayBufferSize);\r\n            }\r\n        }\r\n        if (effectsIncludeChorus(instrument.effects)) {\r\n            if (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {\r\n                this.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);\r\n            }\r\n            if (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {\r\n                this.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);\r\n            }\r\n        }\r\n        if (effectsIncludeEcho(instrument.effects)) {\r\n            // account for tempo and delay automation changing delay length during a tick?\r\n            const safeEchoDelaySteps: number = Math.max(Config.echoDelayRange >> 1, (instrument.echoDelay + 1)); // The delay may be very short now, but if it increases later make sure we have enough sample history.\r\n            const baseEchoDelayBufferSize: number = Synth.fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);\r\n            const safeEchoDelayBufferSize: number = baseEchoDelayBufferSize * 2; // If the tempo or delay changes and we suddenly need a longer delay, make sure that we have enough sample history to accomodate the longer delay.\r\n\r\n            if (this.echoDelayLineL == null || this.echoDelayLineR == null) {\r\n                this.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);\r\n                this.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);\r\n            } else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {\r\n                // The echo delay length may change whlie the song is playing if tempo changes,\r\n                // so buffers may need to be reallocated, but we don't want to lose any echoes\r\n                // so we need to copy the contents of the old buffer to the new one.\r\n                const newDelayLineL: Float32Array = new Float32Array(safeEchoDelayBufferSize);\r\n                const newDelayLineR: Float32Array = new Float32Array(safeEchoDelayBufferSize);\r\n                const oldMask: number = this.echoDelayLineL.length - 1;\r\n\r\n                for (let i = 0; i < this.echoDelayLineL.length; i++) {\r\n                    newDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\r\n                    newDelayLineR[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\r\n                }\r\n\r\n                this.echoDelayPos = this.echoDelayLineL.length;\r\n                this.echoDelayLineL = newDelayLineL;\r\n                this.echoDelayLineR = newDelayLineR;\r\n            }\r\n        }\r\n        if (effectsIncludeReverb(instrument.effects)) {\r\n            // TODO: Make reverb delay line sample rate agnostic. Maybe just double buffer size for 96KHz? Adjust attenuation and shelf cutoff appropriately?\r\n            if (this.reverbDelayLine == null) {\r\n                this.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);\r\n            }\r\n        }\r\n    }\r\n\r\n    public deactivate(): void {\r\n        this.bitcrusherPrevInput = 0.0;\r\n        this.bitcrusherCurrentOutput = 0.0;\r\n        this.bitcrusherPhase = 1.0;\r\n        for (let i: number = 0; i < this.eqFilterCount; i++) {\r\n            this.eqFilters[i].resetOutput();\r\n        }\r\n        this.eqFilterCount = 0;\r\n        this.initialEqFilterInput1 = 0.0;\r\n        this.initialEqFilterInput2 = 0.0;\r\n        this.distortionFractionalInput1 = 0.0;\r\n        this.distortionFractionalInput2 = 0.0;\r\n        this.distortionFractionalInput3 = 0.0;\r\n        this.distortionPrevInput = 0.0;\r\n        this.distortionNextOutput = 0.0;\r\n        this.panningDelayPos = 0;\r\n        if (this.panningDelayLine != null) for (let i: number = 0; i < this.panningDelayLine.length; i++) this.panningDelayLine[i] = 0.0;\r\n        this.echoDelayOffsetEnd = null;\r\n        this.echoShelfSampleL = 0.0;\r\n        this.echoShelfSampleR = 0.0;\r\n        this.echoShelfPrevInputL = 0.0;\r\n        this.echoShelfPrevInputR = 0.0;\r\n        this.reverbShelfSample0 = 0.0;\r\n        this.reverbShelfSample1 = 0.0;\r\n        this.reverbShelfSample2 = 0.0;\r\n        this.reverbShelfSample3 = 0.0;\r\n        this.reverbShelfPrevInput0 = 0.0;\r\n        this.reverbShelfPrevInput1 = 0.0;\r\n        this.reverbShelfPrevInput2 = 0.0;\r\n        this.reverbShelfPrevInput3 = 0.0;\r\n\r\n        this.volumeScale = 1.0;\r\n        this.aliases = false;\r\n\r\n        this.awake = false;\r\n        this.flushingDelayLines = false;\r\n        this.deactivateAfterThisTick = false;\r\n        this.attentuationProgress = 0.0;\r\n        this.flushedSamples = 0;\r\n    }\r\n\r\n    public resetAllEffects(): void {\r\n        this.deactivate();\r\n        // LFOs are reset here rather than in deactivate() for periodic oscillation that stays \"on the beat\". Resetting in deactivate() will cause it to reset with each note.\r\n        this.vibratoTime = 0;\r\n        this.nextVibratoTime = 0;\r\n        this.arpTime = 0;\r\n        this.envelopeTime = 0;\r\n\r\n        if (this.chorusDelayLineDirty) {\r\n            for (let i: number = 0; i < this.chorusDelayLineL!.length; i++) this.chorusDelayLineL![i] = 0.0;\r\n            for (let i: number = 0; i < this.chorusDelayLineR!.length; i++) this.chorusDelayLineR![i] = 0.0;\r\n        }\r\n        if (this.echoDelayLineDirty) {\r\n            for (let i: number = 0; i < this.echoDelayLineL!.length; i++) this.echoDelayLineL![i] = 0.0;\r\n            for (let i: number = 0; i < this.echoDelayLineR!.length; i++) this.echoDelayLineR![i] = 0.0;\r\n        }\r\n        if (this.reverbDelayLineDirty) {\r\n            for (let i: number = 0; i < this.reverbDelayLine!.length; i++) this.reverbDelayLine![i] = 0.0;\r\n        }\r\n\r\n        this.chorusPhase = 0.0;\r\n    }\r\n\r\n    public compute(synth: Synth, instrument: Instrument, samplesPerTick: number, roundedSamplesPerTick: number, tone: Tone | null, channelIndex: number, instrumentIndex: number): void {\r\n        this.computed = true;\r\n\r\n        this.type = instrument.type;\r\n        this.synthesizer = Synth.getInstrumentSynthFunction(instrument);\r\n        this.unison = Config.unisons[instrument.unison];\r\n        this.chord = instrument.getChord();\r\n        this.noisePitchFilterMult = Config.chipNoises[instrument.chipNoise].pitchFilterMult;\r\n        this.effects = instrument.effects;\t\r\n\r\n        this.aliases = instrument.aliases;\r\n        this.volumeScale = 1.0;\r\n\r\n        this.allocateNecessaryBuffers(synth, instrument, samplesPerTick);\r\n\r\n        const samplesPerSecond: number = synth.samplesPerSecond;\r\n        this.updateWaves(instrument, samplesPerSecond);\r\n\r\n        //const ticksIntoBar: number = synth.getTicksIntoBar();\r\n        //const tickTimeStart: number = ticksIntoBar;\r\n        //const tickTimeEnd:   number = ticksIntoBar + 1.0;\r\n        //const secondsPerTick: number = samplesPerTick / synth.samplesPerSecond;\r\n        //const currentPart: number = synth.getCurrentPart();\r\n        //this.envelopeComputer.computeEnvelopes(instrument, currentPart, tickTimeStart, secondsPerTick, tone);\r\n        //const envelopeStarts: number[] = this.envelopeComputer.envelopeStarts;\r\n        //const envelopeEnds: number[] = this.envelopeComputer.envelopeEnds;\r\n\r\n        const usesDistortion: boolean = effectsIncludeDistortion(this.effects);\r\n        const usesBitcrusher: boolean = effectsIncludeBitcrusher(this.effects);\r\n        const usesPanning: boolean = effectsIncludePanning(this.effects);\r\n        const usesChorus: boolean = effectsIncludeChorus(this.effects);\r\n        const usesEcho: boolean = effectsIncludeEcho(this.effects);\r\n        const usesReverb: boolean = effectsIncludeReverb(this.effects);\r\n\r\n        if (usesDistortion) {\r\n            let useDistortionStart: number = instrument.distortion;\r\n            let useDistortionEnd: number = instrument.distortion;\r\n\r\n            // Check for distortion mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex)) {\r\n                useDistortionStart = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, false);\r\n                useDistortionEnd = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            const distortionSliderStart = Math.min(1.0, /*envelopeStarts[InstrumentAutomationIndex.distortion] **/ useDistortionStart / (Config.distortionRange - 1));\r\n            const distortionSliderEnd = Math.min(1.0, /*envelopeEnds[  InstrumentAutomationIndex.distortion] **/ useDistortionEnd / (Config.distortionRange - 1));\r\n            const distortionStart: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderStart) - 1.0) / 19.0, 2.0);\r\n            const distortionEnd: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderEnd) - 1.0) / 19.0, 2.0);\r\n            const distortionDriveStart: number = (1.0 + 2.0 * distortionSliderStart) / Config.distortionBaseVolume;\r\n            const distortionDriveEnd: number = (1.0 + 2.0 * distortionSliderEnd) / Config.distortionBaseVolume;\r\n            this.distortion = distortionStart;\r\n            this.distortionDelta = (distortionEnd - distortionStart) / roundedSamplesPerTick;\r\n            this.distortionDrive = distortionDriveStart;\r\n            this.distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / roundedSamplesPerTick;\r\n        }\r\n\r\n        if (usesBitcrusher) {\r\n            let freqSettingStart: number = instrument.bitcrusherFreq /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherFrequency])*/;\r\n            let freqSettingEnd: number = instrument.bitcrusherFreq /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherFrequency])*/;\r\n\r\n            // Check for freq crush mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex)) {\r\n                freqSettingStart = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, false);\r\n                freqSettingEnd = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            let quantizationSettingStart: number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherQuantization])*/;\r\n            let quantizationSettingEnd: number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherQuantization])*/;\r\n\r\n            // Check for bitcrush mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex)) {\r\n                quantizationSettingStart = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, false);\r\n                quantizationSettingEnd = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            const basePitch: number = Config.keys[synth.song!.key].basePitch + (Config.pitchesPerOctave * synth.song!.octave); // TODO: What if there's a key change mid-song?\r\n            const freqStart: number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);\r\n            const freqEnd: number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd) * Config.bitcrusherOctaveStep);\r\n            const phaseDeltaStart: number = Math.min(1.0, freqStart / samplesPerSecond);\r\n            const phaseDeltaEnd: number = Math.min(1.0, freqEnd / samplesPerSecond);\r\n            this.bitcrusherPhaseDelta = phaseDeltaStart;\r\n            this.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / roundedSamplesPerTick);\r\n\r\n            const scaleStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));\r\n            const scaleEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd) * 0.5));\r\n            this.bitcrusherScale = scaleStart;\r\n            this.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / roundedSamplesPerTick);\r\n\r\n            const foldLevelStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);\r\n            const foldLevelEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);\r\n            this.bitcrusherFoldLevel = foldLevelStart;\r\n            this.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / roundedSamplesPerTick);\r\n        }\r\n\r\n        let eqFilterVolume: number = 1.0; //this.envelopeComputer.lowpassCutoffDecayVolumeCompensation;\r\n        if (instrument.eqFilterType) {\r\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\r\n            const eqFilterSettingsStart: FilterSettings = instrument.eqFilter;\r\n            if (instrument.eqSubFilters[1] == null)\r\n                instrument.eqSubFilters[1] = new FilterSettings();\r\n            const eqFilterSettingsEnd: FilterSettings = instrument.eqSubFilters[1];\r\n\r\n            // Change location based on slider values\r\n            let startSimpleFreq: number = instrument.eqFilterSimpleCut;\r\n            let startSimpleGain: number = instrument.eqFilterSimplePeak;\r\n            let endSimpleFreq: number = instrument.eqFilterSimpleCut;\r\n            let endSimpleGain: number = instrument.eqFilterSimplePeak;\r\n\r\n            let filterChanges: boolean = false;\r\n\r\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex)) {\r\n                startSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, false);\r\n                endSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, true);\r\n                filterChanges = true;\r\n            }\r\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex)) {\r\n                startSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, false);\r\n                endSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, true);\r\n                filterChanges = true;\r\n            }\r\n\r\n            let startPoint: FilterControlPoint;\r\n\r\n            if (filterChanges) {\r\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\r\n                eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\r\n\r\n                startPoint = eqFilterSettingsStart.controlPoints[0];\r\n                let endPoint: FilterControlPoint = eqFilterSettingsEnd.controlPoints[0];\r\n\r\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\r\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\r\n\r\n                if (this.eqFilters.length < 1) this.eqFilters[0] = new DynamicBiquadFilter();\r\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\r\n\r\n            } else {\r\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\r\n\r\n                startPoint = eqFilterSettingsStart.controlPoints[0];\r\n\r\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\r\n\r\n                if (this.eqFilters.length < 1) this.eqFilters[0] = new DynamicBiquadFilter();\r\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\r\n\r\n            }\r\n\r\n            eqFilterVolume *= startPoint.getVolumeCompensationMult();\r\n\r\n            this.eqFilterCount = 1;\r\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\r\n        }\r\n        else {\r\n            const eqFilterSettings: FilterSettings = (instrument.tmpEqFilterStart != null) ? instrument.tmpEqFilterStart : instrument.eqFilter;\r\n            //const eqAllFreqsEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterAllFreqs];\r\n            //const eqAllFreqsEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterAllFreqs];\r\n            for (let i: number = 0; i < eqFilterSettings.controlPointCount; i++) {\r\n                //const eqFreqEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterFreq0 + i];\r\n                //const eqFreqEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterFreq0 + i];\r\n                //const eqPeakEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterGain0 + i];\r\n                //const eqPeakEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterGain0 + i];\r\n                let startPoint: FilterControlPoint = eqFilterSettings.controlPoints[i];\r\n                let endPoint: FilterControlPoint = (instrument.tmpEqFilterEnd != null && instrument.tmpEqFilterEnd.controlPoints[i] != null) ? instrument.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\r\n\r\n                // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\r\n                if (startPoint.type != endPoint.type) {\r\n                    startPoint = endPoint;\r\n                }\r\n\r\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeStart * eqFreqEnvelopeStart*/ 1.0, /*eqPeakEnvelopeStart*/ 1.0);\r\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeEnd   * eqFreqEnvelopeEnd*/   1.0, /*eqPeakEnvelopeEnd*/   1.0);\r\n                if (this.eqFilters.length <= i) this.eqFilters[i] = new DynamicBiquadFilter();\r\n                this.eqFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\r\n                eqFilterVolume *= startPoint.getVolumeCompensationMult();\r\n\r\n            }\r\n            this.eqFilterCount = eqFilterSettings.controlPointCount;\r\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\r\n        }\r\n\r\n        const mainInstrumentVolume: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\r\n        this.mixVolume = mainInstrumentVolume /** envelopeStarts[InstrumentAutomationIndex.mixVolume]*/;\r\n        let mixVolumeEnd: number = mainInstrumentVolume /** envelopeEnds[  InstrumentAutomationIndex.mixVolume]*/;\r\n\r\n        // Check for mod-related volume delta\r\n        if (synth.isModActive(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex)) {\r\n            // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n            const startVal: number = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, false);\r\n            const endVal: number = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, true)\r\n            this.mixVolume *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\r\n            mixVolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\r\n        }\r\n\r\n        // Check for SONG mod-related volume delta\r\n        if (synth.isModActive(Config.modulators.dictionary[\"song volume\"].index)) {\r\n            this.mixVolume *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, false)) / 100.0;\r\n            mixVolumeEnd *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, true)) / 100.0;\r\n        }\r\n\r\n        this.mixVolumeDelta = (mixVolumeEnd - this.mixVolume) / roundedSamplesPerTick;\r\n\r\n        let eqFilterVolumeStart: number = eqFilterVolume;\r\n        let eqFilterVolumeEnd: number = eqFilterVolume;\r\n        let delayInputMultStart: number = 1.0;\r\n        let delayInputMultEnd: number = 1.0;\r\n\r\n        if (usesPanning) {\r\n            //const panEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.panning] * 2.0 - 1.0;\r\n            //const panEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.panning] * 2.0 - 1.0;\r\n\r\n            let usePanStart: number = instrument.pan;\r\n            let usePanEnd: number = instrument.pan;\r\n            // Check for pan mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex)) {\r\n                usePanStart = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, false);\r\n                usePanEnd = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            let panStart: number = Math.max(-1.0, Math.min(1.0, (usePanStart - Config.panCenter) / Config.panCenter /** panEnvelopeStart*/));\r\n            let panEnd: number = Math.max(-1.0, Math.min(1.0, (usePanEnd - Config.panCenter) / Config.panCenter /** panEnvelopeEnd  */));\r\n\r\n            const volumeStartL: number = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;\r\n            const volumeStartR: number = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;\r\n            const volumeEndL: number = Math.cos((1 + panEnd) * Math.PI * 0.25) * 1.414;\r\n            const volumeEndR: number = Math.cos((1 - panEnd) * Math.PI * 0.25) * 1.414;\r\n            const maxDelaySamples: number = samplesPerSecond * Config.panDelaySecondsMax;\r\n\r\n            let usePanDelayStart: number = instrument.panDelay;\r\n            let usePanDelayEnd: number = instrument.panDelay;\r\n            // Check for pan delay mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex)) {\r\n                usePanDelayStart = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, false);\r\n                usePanDelayEnd = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            const delayStart: number = panStart * usePanDelayStart * maxDelaySamples / 10;\r\n            const delayEnd: number = panEnd * usePanDelayEnd * maxDelaySamples / 10;\r\n            const delayStartL: number = Math.max(0.0, delayStart);\r\n            const delayStartR: number = Math.max(0.0, -delayStart);\r\n            const delayEndL: number = Math.max(0.0, delayEnd);\r\n            const delayEndR: number = Math.max(0.0, -delayEnd);\r\n\r\n            this.panningVolumeL = volumeStartL;\r\n            this.panningVolumeR = volumeStartR;\r\n            this.panningVolumeDeltaL = (volumeEndL - volumeStartL) / roundedSamplesPerTick;\r\n            this.panningVolumeDeltaR = (volumeEndR - volumeStartR) / roundedSamplesPerTick;\r\n            this.panningOffsetL = this.panningDelayPos - delayStartL + synth.panningDelayBufferSize;\r\n            this.panningOffsetR = this.panningDelayPos - delayStartR + synth.panningDelayBufferSize;\r\n            this.panningOffsetDeltaL = (delayEndL - delayStartL) / roundedSamplesPerTick;\r\n            this.panningOffsetDeltaR = (delayEndR - delayStartR) / roundedSamplesPerTick;\r\n        }\r\n\r\n        if (usesChorus) {\r\n            //const chorusEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.chorus];\r\n            //const chorusEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.chorus];\r\n            let useChorusStart: number = instrument.chorus;\r\n            let useChorusEnd: number = instrument.chorus;\r\n            // Check for chorus mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex)) {\r\n                useChorusStart = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, false);\r\n                useChorusEnd = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n\r\n            let chorusStart: number = Math.min(1.0, /*chorusEnvelopeStart **/ useChorusStart / (Config.chorusRange - 1));\r\n            let chorusEnd: number = Math.min(1.0, /*chorusEnvelopeEnd   **/ useChorusEnd / (Config.chorusRange - 1));\r\n            chorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;\r\n            chorusEnd = chorusEnd * 0.6 + (Math.pow(chorusEnd, 6.0)) * 0.4;\r\n            const chorusCombinedMultStart = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\r\n            const chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\r\n            this.chorusVoiceMult = chorusStart;\r\n            this.chorusVoiceMultDelta = (chorusEnd - chorusStart) / roundedSamplesPerTick;\r\n            this.chorusCombinedMult = chorusCombinedMultStart;\r\n            this.chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMultStart) / roundedSamplesPerTick;\r\n        }\r\n\r\n        let maxEchoMult = 0.0;\r\n        let averageEchoDelaySeconds: number = 0.0;\r\n        if (usesEcho) {\r\n            //const echoSustainEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.echoSustain];\r\n            //const echoSustainEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.echoSustain];\r\n            let useEchoSustainStart: number = instrument.echoSustain;\r\n            let useEchoSustainEnd: number = instrument.echoSustain;\r\n            // Check for echo mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex)) {\r\n                useEchoSustainStart = Math.max( 0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, false) );\r\n                useEchoSustainEnd = Math.max( 0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, true) );\r\n            }\r\n            const echoMultStart: number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeStart **/ useEchoSustainStart / Config.echoSustainRange, 1.1)) * 0.9;\r\n            const echoMultEnd: number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeEnd   **/ useEchoSustainEnd / Config.echoSustainRange, 1.1)) * 0.9;\r\n            this.echoMult = echoMultStart;\r\n            this.echoMultDelta = Math.max(0.0, (echoMultEnd - echoMultStart) / roundedSamplesPerTick);\r\n            maxEchoMult = Math.max(echoMultStart, echoMultEnd);\r\n\r\n            // TODO: After computing a tick's settings once for multiple run lengths (which is\r\n            // good for audio worklet threads), compute the echo delay envelopes at tick (or\r\n            // part) boundaries to interpolate between two delay taps.\r\n            //const echoDelayEnvelopeStart:   number = envelopeStarts[InstrumentAutomationIndex.echoDelay];\r\n            //const echoDelayEnvelopeEnd:     number = envelopeEnds[  InstrumentAutomationIndex.echoDelay];\r\n            let useEchoDelayStart: number = instrument.echoDelay;\r\n            let useEchoDelayEnd: number = instrument.echoDelay;\r\n            let ignoreTicks: boolean = false;\r\n            // Check for pan delay mods\r\n            if (synth.isModActive(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex)) {\r\n                useEchoDelayStart = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, false);\r\n                useEchoDelayEnd = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, true);\r\n                ignoreTicks = true;\r\n            }\r\n\r\n            const tmpEchoDelayOffsetStart: number = Math.round((useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick);\r\n            const tmpEchoDelayOffsetEnd: number = Math.round((useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick);\r\n            if (this.echoDelayOffsetEnd != null && !ignoreTicks) {\r\n                this.echoDelayOffsetStart = this.echoDelayOffsetEnd;\r\n            } else {\r\n                this.echoDelayOffsetStart = tmpEchoDelayOffsetStart;\r\n            }\r\n\r\n            this.echoDelayOffsetEnd = tmpEchoDelayOffsetEnd;\r\n            averageEchoDelaySeconds = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;\r\n\r\n            this.echoDelayOffsetRatio = 0.0;\r\n            this.echoDelayOffsetRatioDelta = 1.0 / roundedSamplesPerTick;\r\n\r\n            const shelfRadians: number = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;\r\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);\r\n            this.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];\r\n            this.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];\r\n            this.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];\r\n        }\r\n\r\n        let maxReverbMult = 0.0;\r\n        if (usesReverb) {\r\n            //const reverbEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.reverb];\r\n            //const reverbEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.reverb];\r\n\r\n            let useReverbStart: number = instrument.reverb;\r\n            let useReverbEnd: number = instrument.reverb;\r\n\r\n            // Check for mod reverb, instrument level\r\n            if (synth.isModActive(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex)) {\r\n                useReverbStart = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, false);\r\n                useReverbEnd = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, true);\r\n            }\r\n            // Check for mod reverb, song scalar\r\n            if (synth.isModActive(Config.modulators.dictionary[\"song reverb\"].index, channelIndex, instrumentIndex)) {\r\n                useReverbStart *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, false) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\r\n                useReverbEnd *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, true) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\r\n            }\r\n\r\n            const reverbStart: number = Math.min(1.0, Math.pow(/*reverbEnvelopeStart **/ useReverbStart / Config.reverbRange, 0.667)) * 0.425;\r\n            const reverbEnd: number = Math.min(1.0, Math.pow(/*reverbEnvelopeEnd   **/ useReverbEnd / Config.reverbRange, 0.667)) * 0.425;\r\n\r\n            this.reverbMult = reverbStart;\r\n            this.reverbMultDelta = (reverbEnd - reverbStart) / roundedSamplesPerTick;\r\n            maxReverbMult = Math.max(reverbStart, reverbEnd);\r\n\r\n            const shelfRadians: number = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;\r\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);\r\n            this.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];\r\n            this.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];\r\n            this.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];\r\n        }\r\n\r\n        if (this.tonesAddedInThisTick) {\r\n            this.attentuationProgress = 0.0;\r\n            this.flushedSamples = 0;\r\n            this.flushingDelayLines = false;\r\n        } else if (!this.flushingDelayLines) {\r\n            // If this instrument isn't playing tones anymore, the volume can fade out by the\r\n            // end of the first tick. It's possible for filters and the panning delay line to\r\n            // continue past the end of the tone but they should have mostly dissipated by the\r\n            // end of the tick anyway.\r\n            if (this.attentuationProgress == 0.0) {\r\n                eqFilterVolumeEnd = 0.0;\r\n            } else {\r\n                eqFilterVolumeStart = 0.0;\r\n                eqFilterVolumeEnd = 0.0;\r\n            }\r\n\r\n            const attenuationThreshold: number = 1.0 / 256.0; // when the delay line signal has attenuated this much, it should be inaudible and should be flushed to zero.\r\n            const halfLifeMult: number = -Math.log2(attenuationThreshold);\r\n            let delayDuration: number = 0.0;\r\n\r\n            if (usesChorus) {\r\n                delayDuration += Config.chorusMaxDelay;\r\n            }\r\n\r\n            if (usesEcho) {\r\n                const attenuationPerSecond: number = Math.pow(maxEchoMult, 1.0 / averageEchoDelaySeconds);\r\n                const halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\r\n                const echoDuration: number = halfLife * halfLifeMult;\r\n                delayDuration += echoDuration;\r\n            }\r\n\r\n            if (usesReverb) {\r\n                const averageMult: number = maxReverbMult * 2.0;\r\n                const averageReverbDelaySeconds: number = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;\r\n                const attenuationPerSecond: number = Math.pow(averageMult, 1.0 / averageReverbDelaySeconds);\r\n                const halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\r\n                const reverbDuration: number = halfLife * halfLifeMult;\r\n                delayDuration += reverbDuration;\r\n            }\r\n\r\n            const secondsInTick: number = samplesPerTick / samplesPerSecond;\r\n            const progressInTick: number = secondsInTick / delayDuration;\r\n            const progressAtEndOfTick: number = this.attentuationProgress + progressInTick;\r\n            if (progressAtEndOfTick >= 1.0) {\r\n                delayInputMultEnd = 0.0;\r\n            }\r\n\r\n            this.attentuationProgress = progressAtEndOfTick;\r\n            if (this.attentuationProgress >= 1.0) {\r\n                this.flushingDelayLines = true;\r\n            }\r\n        } else {\r\n            // Flushing delay lines to zero since the signal has mostly dissipated.\r\n            eqFilterVolumeStart = 0.0;\r\n            eqFilterVolumeEnd = 0.0;\r\n            delayInputMultStart = 0.0;\r\n            delayInputMultEnd = 0.0;\r\n\r\n            let totalDelaySamples: number = 0;\r\n            if (usesChorus) totalDelaySamples += synth.chorusDelayBufferSize;\r\n            if (usesEcho) totalDelaySamples += this.echoDelayLineL!.length;\r\n            if (usesReverb) totalDelaySamples += Config.reverbDelayBufferSize;\r\n\r\n            this.flushedSamples += roundedSamplesPerTick;\r\n            if (this.flushedSamples >= totalDelaySamples) {\r\n                this.deactivateAfterThisTick = true;\r\n            }\r\n        }\r\n\r\n        this.eqFilterVolume = eqFilterVolumeStart;\r\n        this.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\r\n        this.delayInputMult = delayInputMultStart;\r\n        this.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / roundedSamplesPerTick;\r\n    }\r\n\r\n    public updateWaves(instrument: Instrument, samplesPerSecond: number): void {\r\n        this.volumeScale = 1.0;\r\n        if (instrument.type == InstrumentType.chip) {\r\n            this.wave = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samples;\r\n\t\t\t\t\t\t // advloop addition\r\n                this.isUsingAdvancedLoopControls = instrument.isUsingAdvancedLoopControls;\r\n                this.chipWaveLoopStart = instrument.chipWaveLoopStart;\r\n                this.chipWaveLoopEnd = instrument.chipWaveLoopEnd;\r\n                this.chipWaveLoopMode = instrument.chipWaveLoopMode;\r\n                this.chipWavePlayBackwards = instrument.chipWavePlayBackwards;\r\n                this.chipWaveStartOffset = instrument.chipWaveStartOffset;\r\n               // advloop addition\r\n\r\n               this.unisonVoices = instrument.unisonVoices;\r\n            this.unisonSpread = instrument.unisonSpread;\r\n            this.unisonOffset = instrument.unisonOffset;\r\n            this.unisonExpression = instrument.unisonExpression;\r\n            this.unisonSign = instrument.unisonSign;\r\n        } else if (instrument.type == InstrumentType.pwm) {\r\n            this.unisonVoices = instrument.unisonVoices;\r\n            this.unisonSpread = instrument.unisonSpread;\r\n            this.unisonOffset = instrument.unisonOffset;\r\n            this.unisonExpression = instrument.unisonExpression;\r\n            this.unisonSign = instrument.unisonSign;\r\n        } else if (instrument.type == InstrumentType.customChipWave) {\r\n            this.wave = (this.aliases) ? instrument.customChipWave! : instrument.customChipWaveIntegral!;\r\n            this.volumeScale = 0.05;\r\n            this.unisonVoices = instrument.unisonVoices;\r\n            this.unisonSpread = instrument.unisonSpread;\r\n            this.unisonOffset = instrument.unisonOffset;\r\n            this.unisonExpression = instrument.unisonExpression;\r\n            this.unisonSign = instrument.unisonSign;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            this.wave = getDrumWave(instrument.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n            this.unisonVoices = instrument.unisonVoices;\r\n            this.unisonSpread = instrument.unisonSpread;\r\n            this.unisonOffset = instrument.unisonOffset;\r\n            this.unisonExpression = instrument.unisonExpression;\r\n            this.unisonSign = instrument.unisonSign;\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\r\n            this.unisonVoices = instrument.unisonVoices;\r\n            this.unisonSpread = instrument.unisonSpread;\r\n            this.unisonOffset = instrument.unisonOffset;\r\n            this.unisonExpression = instrument.unisonExpression;\r\n            this.unisonSign = instrument.unisonSign;\r\n        } else if (instrument.type == InstrumentType.pickedString) {\r\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\r\n            this.unisonVoices = instrument.unisonVoices;\r\n            this.unisonSpread = instrument.unisonSpread;\r\n            this.unisonOffset = instrument.unisonOffset;\r\n            this.unisonExpression = instrument.unisonExpression;\r\n            this.unisonSign = instrument.unisonSign;\r\n        } else if (instrument.type == InstrumentType.spectrum) {\r\n            this.wave = this.spectrumWave.getCustomWave(instrument.spectrumWave, 8);\r\n            this.unisonVoices = instrument.unisonVoices;\r\n            this.unisonSpread = instrument.unisonSpread;\r\n            this.unisonOffset = instrument.unisonOffset;\r\n            this.unisonExpression = instrument.unisonExpression;\r\n            this.unisonSign = instrument.unisonSign;\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            for (let i: number = 0; i < Config.drumCount; i++) {\r\n                this.drumsetSpectrumWaves[i].getCustomWave(instrument.drumsetSpectrumWaves[i], InstrumentState._drumsetIndexToSpectrumOctave(i));\r\n            }\r\n            this.wave = null;\r\n        } else {\r\n            this.wave = null;\r\n        }\r\n    }\r\n\r\n    public getDrumsetWave(pitch: number): Float32Array {\r\n        if (this.type == InstrumentType.drumset) {\r\n            return this.drumsetSpectrumWaves[pitch].wave!;\r\n        } else {\r\n            throw new Error(\"Unhandled instrument type in getDrumsetWave\");\r\n        }\r\n    }\r\n\r\n    public static drumsetIndexReferenceDelta(index: number): number {\r\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\r\n    }\r\n\r\n    private static _drumsetIndexToSpectrumOctave(index: number): number {\r\n        return 15 + Math.log2(InstrumentState.drumsetIndexReferenceDelta(index));\r\n    }\r\n}\r\n\r\nclass ChannelState {\r\n    public readonly instruments: InstrumentState[] = [];\r\n    public muted: boolean = false;\r\n    public singleSeamlessInstrument: number | null = null; // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\r\n}\r\n\r\nexport class Synth {\r\n\r\n    private syncSongState(): void {\r\n        const channelCount: number = this.song!.getChannelCount();\r\n        for (let i: number = this.channels.length; i < channelCount; i++) {\r\n            this.channels[i] = new ChannelState();\r\n        }\r\n        this.channels.length = channelCount;\r\n        for (let i: number = 0; i < channelCount; i++) {\r\n            const channel: Channel = this.song!.channels[i];\r\n            const channelState: ChannelState = this.channels[i];\r\n            for (let j: number = channelState.instruments.length; j < channel.instruments.length; j++) {\r\n                channelState.instruments[j] = new InstrumentState();\r\n            }\r\n            channelState.instruments.length = channel.instruments.length;\r\n\r\n            if (channelState.muted != channel.muted) {\r\n                channelState.muted = channel.muted;\r\n                if (channelState.muted) {\r\n                    for (const instrumentState of channelState.instruments) {\r\n                        instrumentState.resetAllEffects();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public initModFilters(song: Song | null): void {\r\n        if (song != null) {\r\n            for (let channelIndex: number = 0; channelIndex < song.getChannelCount(); channelIndex++) {\r\n                for (let instrumentIndex: number = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\r\n                    const instrument: Instrument = song.channels[channelIndex].instruments[instrumentIndex];\r\n                    instrument.tmpEqFilterStart = instrument.eqFilter;\r\n                    instrument.tmpEqFilterEnd = null;\r\n                    instrument.tmpNoteFilterStart = instrument.noteFilter;\r\n                    instrument.tmpNoteFilterEnd = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public warmUpSynthesizer(song: Song | null): void {\r\n        // Don't bother to generate the drum waves unless the song actually\r\n        // uses them, since they may require a lot of computation.\r\n        if (song != null) {\r\n            this.syncSongState();\r\n            const samplesPerTick: number = this.getSamplesPerTick();\r\n            for (let channelIndex: number = 0; channelIndex < song.getChannelCount(); channelIndex++) {\r\n                for (let instrumentIndex: number = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\r\n                    const instrument: Instrument = song.channels[channelIndex].instruments[instrumentIndex];\r\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[instrumentIndex];\r\n                    Synth.getInstrumentSynthFunction(instrument);\r\n                    instrumentState.vibratoTime = 0;\r\n                    instrumentState.nextVibratoTime = 0;\r\n                    instrumentState.envelopeTime = 0;\r\n                    instrumentState.arpTime = 0;\r\n                    instrumentState.updateWaves(instrument, this.samplesPerSecond);\r\n                    instrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);\r\n                }\r\n\r\n            }\r\n        }\r\n        // JummBox needs to run synth functions for at least one sample (for JIT purposes)\r\n\t\t// before starting audio callbacks to avoid skipping the initial output.\r\n        var dummyArray = new Float32Array(1);\r\n        this.isPlayingSong = true;\r\n        this.synthesize(dummyArray, dummyArray, 1, true);\r\n        this.isPlayingSong = false;\r\n    }\r\n\r\n    public computeLatestModValues(): void {\r\n\r\n        if (this.song != null && this.song.modChannelCount > 0) {\r\n\r\n            // Clear all mod values, and set up temp variables for the time a mod would be set at.\r\n            let latestModTimes: (number | null)[] = [];\r\n            let latestModInsTimes: (number | null)[][][] = [];\r\n            this.modValues = [];\r\n            this.nextModValues = [];\r\n            this.modInsValues = [];\r\n            this.nextModInsValues = [];\r\n            this.heldMods = [];\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                latestModInsTimes[channel] = [];\r\n                this.modInsValues[channel] = [];\r\n                this.nextModInsValues[channel] = [];\r\n\r\n                for (let instrument: number = 0; instrument < this.song.channels[channel].instruments.length; instrument++) {\r\n                    this.modInsValues[channel][instrument] = [];\r\n                    this.nextModInsValues[channel][instrument] = [];\r\n                    latestModInsTimes[channel][instrument] = [];\r\n                }\r\n            }\r\n\r\n            // Find out where we're at in the fraction of the current bar.\r\n            let currentPart: number = this.beat * Config.partsPerBeat + this.part;\r\n\r\n            // For mod channels, calculate last set value for each mod\r\n            for (let channelIndex: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex < this.song.getChannelCount(); channelIndex++) {\r\n                if (!(this.song.channels[channelIndex].muted)) {\r\n\r\n                    let pattern: Pattern | null;\r\n\r\n                    for (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\r\n                        pattern = this.song.getPattern(channelIndex, currentBar);\r\n\r\n                        if (pattern != null) {\r\n                            let instrumentIdx: number = pattern.instruments[0];\r\n                            let instrument: Instrument = this.song.channels[channelIndex].instruments[instrumentIdx];\r\n                            let latestPinParts: number[] = [];\r\n                            let latestPinValues: number[] = [];\r\n\r\n                            let partsInBar: number = (currentBar == this.bar)\r\n                                ? currentPart\r\n                                : this.findPartsInBar(currentBar);\r\n\r\n                            for (const note of pattern.notes) {\r\n                                if (note.start <= partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\r\n                                    if (note.start == partsInBar) { // This can happen with next bar mods, and the value of the aligned note's start pin will be used.\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.start;\r\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[0].size;\r\n                                    }\r\n                                    if (note.end <= partsInBar) {\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\r\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].size;\r\n                                    }\r\n                                    else {\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\r\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\r\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\r\n\r\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\r\n                                                pinIdx = note.pins.length;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            // Set modulator value, if it wasn't set in another pattern already scanned\r\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                if (latestPinParts[mod] != null) {\r\n                                    if (Config.modulators[instrument.modulators[mod]].forSong) {\r\n                                        if (latestModTimes[instrument.modulators[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modulators[mod]] as number)) {\r\n                                            this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], instrument.modInstruments[mod], instrument.modulators[mod]);\r\n                                            latestModTimes[instrument.modulators[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        // Generate list of used instruments\r\n                                        let usedInstruments: number[] = [];\r\n                                        // All\r\n                                        if (instrument.modInstruments[mod] == this.song.channels[instrument.modChannels[mod]].instruments.length) {\r\n                                            for (let i: number = 0; i < this.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\r\n                                                usedInstruments.push(i);\r\n                                            }\r\n                                        }\r\n                                        // Active\r\n                                        else if (instrument.modInstruments[mod] > this.song.channels[instrument.modChannels[mod]].instruments.length) {\r\n                                            const tgtPattern: Pattern | null = this.song.getPattern(instrument.modChannels[mod], currentBar);\r\n                                            if (tgtPattern != null)\r\n                                                usedInstruments = tgtPattern.instruments;\r\n                                        } else {\r\n                                            usedInstruments.push(instrument.modInstruments[mod]);\r\n                                        }\r\n                                        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\r\n                                            // Iterate through all used instruments by this modulator\r\n                                            // Special indices for mod filter targets, since they control multiple things.\r\n                                            const eqFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index;\r\n                                            const noteFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\r\n                                            let modulatorAdjust: number = instrument.modulators[mod];\r\n                                            if (eqFilterParam) {\r\n                                                modulatorAdjust = Config.modulators.length + (instrument.modFilterTypes[mod] | 0);\r\n                                            } else if (noteFilterParam) {\r\n                                                // Skip all possible indices for eq filter\r\n                                                modulatorAdjust = Config.modulators.length + 1 + (2 * Config.filterMaxPoints) + (instrument.modFilterTypes[mod] | 0);\r\n                                            }\r\n\r\n                                            if (latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] == null\r\n                                                || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust]!) {\r\n\r\n                                                if (eqFilterParam) {\r\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\r\n                                                    if (instrument.modFilterTypes[mod] == 0) {\r\n                                                        tgtInstrument.tmpEqFilterStart = tgtInstrument.eqSubFilters[latestPinValues[mod]];\r\n                                                    } else {\r\n                                                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                                                            if (tgtInstrument.tmpEqFilterStart != null && tgtInstrument.tmpEqFilterStart == tgtInstrument.eqSubFilters[i]) {\r\n                                                                tgtInstrument.tmpEqFilterStart = new FilterSettings();\r\n                                                                tgtInstrument.tmpEqFilterStart.fromJsonObject(tgtInstrument.eqSubFilters[i]!.toJsonObject());\r\n                                                                i = Config.filterMorphCount;\r\n                                                            }\r\n                                                        }\r\n                                                        if (tgtInstrument.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpEqFilterStart.controlPointCount) {\r\n                                                            if (instrument.modFilterTypes[mod] % 2)\r\n                                                                tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\r\n                                                            else\r\n                                                                tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\r\n                                                        }\r\n                                                    }\r\n                                                    tgtInstrument.tmpEqFilterEnd = tgtInstrument.tmpEqFilterStart;\r\n                                                } else if (noteFilterParam) {\r\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\r\n                                                    if (instrument.modFilterTypes[mod] == 0) {\r\n                                                        tgtInstrument.tmpNoteFilterStart = tgtInstrument.noteSubFilters[latestPinValues[mod]];\r\n                                                    } else {\r\n                                                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                                                            if (tgtInstrument.tmpNoteFilterStart != null && tgtInstrument.tmpNoteFilterStart == tgtInstrument.noteSubFilters[i]) {\r\n                                                                tgtInstrument.tmpNoteFilterStart = new FilterSettings();\r\n                                                                tgtInstrument.tmpNoteFilterStart.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\r\n                                                                i = Config.filterMorphCount;\r\n                                                            }\r\n                                                        }\r\n                                                        if (tgtInstrument.tmpNoteFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpNoteFilterStart.controlPointCount) {\r\n                                                            if (instrument.modFilterTypes[mod] % 2)\r\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\r\n                                                            else\r\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\r\n                                                        }\r\n                                                    }\r\n                                                    tgtInstrument.tmpNoteFilterEnd = tgtInstrument.tmpNoteFilterStart;\r\n                                                }\r\n                                                else this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], usedInstruments[instrumentIndex], modulatorAdjust);\r\n\r\n                                                latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Detects if a modulator is set, but not valid for the current effects/instrument type/filter type\r\n    // Note, setting 'none' or the intermediary steps when clicking to add a mod, like an unset channel/unset instrument, counts as valid.\r\n    // TODO: This kind of check is mirrored in SongEditor.ts' whenUpdated. Creates a lot of redundancy for adding new mods. Can be moved into new properties for mods, to avoid this later.\r\n    public determineInvalidModulators(instrument: Instrument): void {\r\n        if (this.song == null)\r\n            return;\r\n        for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n            instrument.invalidModulators[mod] = true;\r\n            // For song modulator, valid if any setting used\r\n            if (instrument.modChannels[mod] == -1) {\r\n                if (instrument.modulators[mod] != 0)\r\n                    instrument.invalidModulators[mod] = false;\r\n                continue;\r\n            }\r\n            const channel: Channel | null = this.song.channels[instrument.modChannels[mod]];\r\n            if (channel == null) continue;\r\n            let tgtInstrumentList: Instrument[] = [];\r\n            if (instrument.modInstruments[mod] >= channel.instruments.length) { // All or active\r\n                tgtInstrumentList = channel.instruments;\r\n            } else {\r\n                tgtInstrumentList = [channel.instruments[instrument.modInstruments[mod]]];\r\n            }\r\n            for (let i: number = 0; i < tgtInstrumentList.length; i++) {\r\n                const tgtInstrument: Instrument | null = tgtInstrumentList[i];\r\n                if (tgtInstrument == null) continue;\r\n                const str: string = Config.modulators[instrument.modulators[mod]].name;\r\n                // Check effects\r\n                if (!((Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length && !(tgtInstrument.effects & (1 << Config.modulators[instrument.modulators[mod]].associatedEffect)))\r\n                    // Instrument type specific\r\n                    || ((tgtInstrument.type != InstrumentType.fm && tgtInstrument.type != InstrumentType.fm6op) && (str == \"fm slider 1\" || str == \"fm slider 2\" || str == \"fm slider 3\" || str == \"fm slider 4\" || str == \"fm feedback\"))\r\n                    || tgtInstrument.type != InstrumentType.fm6op && (str == \"fm slider 5\" || str == \"fm slider 6\")\r\n                    || ((tgtInstrument.type != InstrumentType.pwm && tgtInstrument.type != InstrumentType.supersaw) && (str == \"pulse width\" || str == \"decimal offset\"))\r\n                    || ((tgtInstrument.type != InstrumentType.supersaw) && (str == \"dynamism\" || str == \"spread\" || str == \"saw shape\"))\r\n                    // Arp check\r\n                    || (!tgtInstrument.getChord().arpeggiates && (str == \"arp speed\" || str == \"reset arp\"))\r\n                    // EQ Filter check\r\n                    || (tgtInstrument.eqFilterType && str == \"eq filter\")\r\n                    || (!tgtInstrument.eqFilterType && (str == \"eq filt cut\" || str == \"eq filt peak\"))\r\n                    || (str == \"eq filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(false))\r\n                    // Note Filter check\r\n                    || (tgtInstrument.noteFilterType && str == \"note filter\")\r\n                    || (!tgtInstrument.noteFilterType && (str == \"note filt cut\" || str == \"note filt peak\"))\r\n                    || (str == \"note filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(true)))) {\r\n\r\n                    instrument.invalidModulators[mod] = false;\r\n                    i = tgtInstrumentList.length;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private static operatorAmplitudeCurve(amplitude: number): number {\r\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\r\n    }\r\n\r\n    public samplesPerSecond: number = 44100;\r\n    public panningDelayBufferSize: number;\r\n    public panningDelayBufferMask: number;\r\n    public chorusDelayBufferSize: number;\r\n    public chorusDelayBufferMask: number;\r\n    // TODO: reverb\r\n\r\n    public song: Song | null = null;\r\n    public preferLowerLatency: boolean = false; // enable when recording performances from keyboard or MIDI. Takes effect next time you activate audio.\r\n    public anticipatePoorPerformance: boolean = false; // enable on mobile devices to reduce audio stutter glitches. Takes effect next time you activate audio.\r\n    public liveInputDuration: number = 0;\r\n    public liveBassInputDuration: number = 0;\r\n    public liveInputStarted: boolean = false;\r\n    public liveBassInputStarted: boolean = false;\r\n    public liveInputPitches: number[] = [];\r\n    public liveBassInputPitches: number[] = [];\r\n    public liveInputChannel: number = 0;\r\n    public liveBassInputChannel: number = 0;\r\n    public liveInputInstruments: number[] = [];\r\n    public liveBassInputInstruments: number[] = [];\r\n    public loopRepeatCount: number = -1;\r\n    public volume: number = 1.0;\r\n    public oscRefreshEventTimer: number = 0;\r\n    public oscEnabled: boolean = true;\r\n    public enableMetronome: boolean = false;\r\n    public countInMetronome: boolean = false;\r\n    public renderingSong: boolean = false;\r\n    public heldMods: HeldMod[] = [];\r\n    private wantToSkip: boolean = false;\r\n    private playheadInternal: number = 0.0;\r\n    private bar: number = 0;\r\n    private prevBar: number | null = null;\r\n    private nextBar: number | null = null;\r\n    private beat: number = 0;\r\n    private part: number = 0;\r\n    private tick: number = 0;\r\n    public isAtStartOfTick: boolean = true;\r\n    public isAtEndOfTick: boolean = true;\r\n    public tickSampleCountdown: number = 0;\r\n    private modValues: (number | null)[] = [];\r\n    private modInsValues: (number | null)[][][] = [];\r\n    private nextModValues: (number | null)[] = [];\r\n    private nextModInsValues: (number | null)[][][] = [];\r\n    private isPlayingSong: boolean = false;\r\n    private isRecording: boolean = false;\r\n    private liveInputEndTime: number = 0.0;\r\n    private browserAutomaticallyClearsAudioBuffer: boolean = true; // Assume true until proven otherwise. Older Chrome does not clear the buffer so it needs to be cleared manually.\r\n\r\n    public static readonly tempFilterStartCoefficients: FilterCoefficients = new FilterCoefficients();\r\n    public static readonly tempFilterEndCoefficients: FilterCoefficients = new FilterCoefficients();\r\n    private tempDrumSetControlPoint: FilterControlPoint = new FilterControlPoint();\r\n    public tempFrequencyResponse: FrequencyResponse = new FrequencyResponse();\r\n    public loopBarStart: number = -1;\r\n    public loopBarEnd: number = -1;\r\n\r\n    private static readonly fmSynthFunctionCache: Dictionary<Function> = {};\r\n    private static readonly fm6SynthFunctionCache: Dictionary<Function> = {};\r\n    private static readonly effectsFunctionCache: Function[] = Array(1 << 7).fill(undefined); // keep in sync with the number of post-process effects.\r\n    private static readonly pickedStringFunctionCache: Function[] = Array(3).fill(undefined); // keep in sync with the number of unison voices.\r\n\r\n    private readonly channels: ChannelState[] = [];\r\n    private readonly tonePool: Deque<Tone> = new Deque<Tone>();\r\n    private readonly tempMatchedPitchTones: Array<Tone | null> = Array(Config.maxChordSize).fill(null);\r\n\r\n    private startedMetronome: boolean = false;\r\n    private metronomeSamplesRemaining: number = -1;\r\n    private metronomeAmplitude: number = 0.0;\r\n    private metronomePrevAmplitude: number = 0.0;\r\n    private metronomeFilter: number = 0.0;\r\n    private limit: number = 0.0;\r\n\r\n    private tempMonoInstrumentSampleBuffer: Float32Array | null = null;\r\n\r\n    private audioCtx: any | null = null;\r\n    private scriptNode: any | null = null;\r\n\r\n    public get playing(): boolean {\r\n        return this.isPlayingSong;\r\n    }\r\n\r\n    public get recording(): boolean {\r\n        return this.isRecording;\r\n    }\r\n\r\n    public get playhead(): number {\r\n        return this.playheadInternal;\r\n    }\r\n\r\n    public set playhead(value: number) {\r\n        if (this.song != null) {\r\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\r\n            let remainder: number = this.playheadInternal;\r\n            this.bar = Math.floor(remainder);\r\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\r\n            this.beat = Math.floor(remainder);\r\n            remainder = Config.partsPerBeat * (remainder - this.beat);\r\n            this.part = Math.floor(remainder);\r\n            remainder = Config.ticksPerPart * (remainder - this.part);\r\n            this.tick = Math.floor(remainder);\r\n            this.tickSampleCountdown = 0;\r\n            this.isAtStartOfTick = true;\r\n            this.prevBar = null;\r\n        }\r\n    }\r\n\r\n    public getSamplesPerBar(): number {\r\n        if (this.song == null) throw new Error();\r\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\r\n    }\r\n\r\n    public getTicksIntoBar(): number {\r\n        return (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\r\n    }\r\n    public getCurrentPart(): number {\r\n        return (this.beat * Config.partsPerBeat + this.part);\r\n    }\r\n\r\n    private findPartsInBar(bar: number): number {\r\n        if (this.song == null) return 0;\r\n        let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n            let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n            if (pattern != null) {\r\n                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\r\n                        for (const note of pattern.notes) {\r\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n                                // Find the earliest next bar note.\r\n                                if (partsInBar > note.start)\r\n                                    partsInBar = note.start;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return partsInBar;\r\n    }\r\n\r\n    // Returns the total samples in the song\r\n    public getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\r\n        if (this.song == null)\r\n            return -1;\r\n\r\n        // Compute the window to be checked (start bar to end bar)\r\n        let startBar: number = enableIntro ? 0 : this.song.loopStart;\r\n        let endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\r\n        let hasTempoMods: boolean = false;\r\n        let hasNextBarMods: boolean = false;\r\n        let prevTempo: number = this.song.tempo;\r\n\r\n        // Determine if any tempo or next bar mods happen anywhere in the window\r\n        for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\r\n            for (let bar: number = startBar; bar < endBar; bar++) {\r\n                let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n                if (pattern != null) {\r\n                    let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\r\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\r\n                            hasTempoMods = true;\r\n                        }\r\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\r\n                            hasNextBarMods = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\r\n        if (startBar > 0) {\r\n            let latestTempoPin: number | null = null;\r\n            let latestTempoValue: number = 0;\r\n\r\n            for (let bar: number = startBar - 1; bar >= 0; bar--) {\r\n                for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\r\n                    let pattern = this.song.getPattern(channel, bar);\r\n\r\n                    if (pattern != null) {\r\n                        let instrumentIdx: number = pattern.instruments[0];\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\r\n                        let partsInBar: number = this.findPartsInBar(bar);\r\n\r\n                        for (const note of pattern.notes) {\r\n                            if (instrument.modulators[Config.modCount - 1 - note.pitches[0]] == Config.modulators.dictionary[\"tempo\"].index) {\r\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\r\n                                    if (note.end <= partsInBar) {\r\n                                        latestTempoPin = note.end;\r\n                                        latestTempoValue = note.pins[note.pins.length - 1].size;\r\n                                    }\r\n                                    else {\r\n                                        latestTempoPin = partsInBar;\r\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\r\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\r\n\r\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\r\n                                                pinIdx = note.pins.length;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Done once you process a pattern where tempo mods happened, since the search happens backward\r\n                if (latestTempoPin != null) {\r\n                    prevTempo = latestTempoValue + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\r\n                    bar = -1;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasTempoMods || hasNextBarMods) {\r\n            // Run from start bar to end bar and observe looping, computing average tempo across each bar\r\n            let bar: number = startBar;\r\n            let ended: boolean = false;\r\n            let totalSamples: number = 0;\r\n\r\n            while (!ended) {\r\n                // Compute the subsection of the pattern that will play\r\n                let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n                let currentPart: number = 0;\r\n\r\n                if (hasNextBarMods) {\r\n                    partsInBar = this.findPartsInBar(bar);\r\n                }\r\n\r\n                // Compute average tempo in this tick window, or use last tempo if nothing happened\r\n                if (hasTempoMods) {\r\n                    let foundMod: boolean = false;\r\n                    for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\r\n                        if (foundMod == false) {\r\n                            let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n                            if (pattern != null) {\r\n                                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\r\n                                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                    if (foundMod == false && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index\r\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\r\n                                        // Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\r\n                                        foundMod = true;\r\n                                        // Need to re-sort the notes by start time to make the next part much less painful.\r\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\r\n                                        for (const note of pattern.notes) {\r\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n                                                // Compute samples up to this note\r\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n                                                if (note.start < partsInBar) {\r\n                                                    for (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\r\n                                                        // Compute samples up to this pin\r\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\r\n                                                            const tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\r\n                                                            const prevPinTempo: number = note.pins[pinIdx - 1].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\r\n                                                            let currPinTempo: number = note.pins[pinIdx].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\r\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                                // Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\r\n                                                                currPinTempo = note.pins[pinIdx - 1].size + (note.pins[pinIdx].size - note.pins[pinIdx - 1].size) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time) + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\r\n                                                            }\r\n                                                            let bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\r\n\r\n                                                            if (currPinTempo != prevPinTempo) {\r\n\r\n                                                                // Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\r\n                                                                // The starting formula is\r\n                                                                // SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\r\n                                                                //\r\n                                                                // This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\r\n                                                                // But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\r\n                                                                // ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\r\n                                                                // Substituting BPM for a step variable that moves with respect to the current tick, we get\r\n                                                                // SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\r\n                                                                //\r\n                                                                // When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\r\n                                                                //   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\r\n\r\n                                                                totalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\r\n\r\n                                                            }\r\n                                                            else {\r\n\r\n                                                                // No tempo change between the two pins.\r\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\r\n\r\n                                                            }\r\n                                                            prevTempo = currPinTempo;\r\n                                                        }\r\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Compute samples for the rest of the bar\r\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n                bar++;\r\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\r\n                    bar = this.song.loopStart;\r\n                    if (loop > 0) loop--;\r\n                }\r\n                if (bar >= endBar) {\r\n                    ended = true;\r\n                }\r\n\r\n            }\r\n\r\n            return Math.ceil(totalSamples);\r\n        }\r\n        else {\r\n            // No tempo or next bar mods... phew! Just calculate normally.\r\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\r\n        }\r\n    }\r\n\r\n    public getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\r\n        if (this.song == null) throw new Error();\r\n        let bars: number = this.song.loopLength * (useLoopCount + 1);\r\n        if (enableIntro) bars += this.song.loopStart;\r\n        if (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\r\n        return bars;\r\n    }\r\n\r\n    constructor(song: Song | string | null = null) {\r\n        this.computeDelayBufferSizes();\r\n        if (song != null) this.setSong(song);\r\n    }\r\n\r\n    public setSong(song: Song | string): void {\r\n        if (typeof (song) == \"string\") {\r\n            this.song = new Song(song);\r\n        } else if (song instanceof Song) {\r\n            this.song = song;\r\n        }\r\n        this.prevBar = null;\r\n    }\r\n\r\n    private computeDelayBufferSizes(): void {\r\n        this.panningDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);\r\n        this.panningDelayBufferMask = this.panningDelayBufferSize - 1;\r\n        this.chorusDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);\r\n        this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;\r\n    }\r\n\r\n    private activateAudio(): void {\r\n        const bufferSize: number = this.anticipatePoorPerformance ? (this.preferLowerLatency ? 2048 : 4096) : (this.preferLowerLatency ? 512 : 2048);\r\n        if (this.audioCtx == null || this.scriptNode == null || this.scriptNode.bufferSize != bufferSize) {\r\n            if (this.scriptNode != null) this.deactivateAudio();\r\n            const latencyHint: string = this.anticipatePoorPerformance ? (this.preferLowerLatency ? \"balanced\" : \"playback\") : (this.preferLowerLatency ? \"interactive\" : \"balanced\");\r\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({ latencyHint: latencyHint });\r\n            this.samplesPerSecond = this.audioCtx.sampleRate;\r\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(bufferSize, 0, 2) : this.audioCtx.createJavaScriptNode(bufferSize, 0, 2); // bufferSize samples per callback buffer, 0 input channels, 2 output channels (left/right)\r\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\r\n            this.scriptNode.channelCountMode = 'explicit';\r\n            this.scriptNode.channelInterpretation = 'speakers';\r\n            this.scriptNode.connect(this.audioCtx.destination);\r\n\r\n            this.computeDelayBufferSizes();\r\n        }\r\n        this.audioCtx.resume();\r\n    }\r\n\r\n    private deactivateAudio(): void {\r\n        if (this.audioCtx != null && this.scriptNode != null) {\r\n            this.scriptNode.disconnect(this.audioCtx.destination);\r\n            this.scriptNode = null;\r\n            if (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\r\n            this.audioCtx = null;\r\n        }\r\n    }\r\n\r\n    public maintainLiveInput(): void {\r\n        this.activateAudio();\r\n        this.liveInputEndTime = performance.now() + 10000.0;\r\n    }\r\n\r\n    public play(): void {\r\n        if (this.isPlayingSong) return;\r\n        this.initModFilters(this.song);\r\n        this.computeLatestModValues();\r\n        this.activateAudio();\r\n        this.warmUpSynthesizer(this.song);\r\n        this.isPlayingSong = true;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.isPlayingSong) return;\r\n        this.isPlayingSong = false;\r\n        this.isRecording = false;\r\n        this.modValues = [];\r\n        this.nextModValues = [];\r\n        this.heldMods = [];\r\n        if (this.song != null) {\r\n            this.song.inVolumeCap = 0.0;\r\n            this.song.outVolumeCap = 0.0;\r\n            for (let channelIndex: number = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\r\n                this.modInsValues[channelIndex] = [];\r\n                this.nextModInsValues[channelIndex] = [];\r\n            }\r\n        }\r\n    }\r\n\r\n    public startRecording(): void {\r\n        this.preferLowerLatency = true;\r\n        this.isRecording = true;\r\n        this.play();\r\n    }\r\n\r\n    public resetEffects(): void {\r\n        this.limit = 0.0;\r\n        this.freeAllTones();\r\n        if (this.song != null) {\r\n            for (const channelState of this.channels) {\r\n                for (const instrumentState of channelState.instruments) {\r\n                    instrumentState.resetAllEffects();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public setModValue(volumeStart: number, volumeEnd: number, channelIndex: number, instrumentIndex: number, setting: number): number {\r\n        let val: number = volumeStart + Config.modulators[setting].convertRealFactor;\r\n        let nextVal: number = volumeEnd + Config.modulators[setting].convertRealFactor;\r\n        if (Config.modulators[setting].forSong) {\r\n            if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\r\n                this.modValues[setting] = val;\r\n                this.nextModValues[setting] = nextVal;\r\n            }\r\n        } else {\r\n            if (this.modInsValues[channelIndex][instrumentIndex][setting] == null\r\n                || this.modInsValues[channelIndex][instrumentIndex][setting] != val\r\n                || this.nextModInsValues[channelIndex][instrumentIndex][setting] != nextVal) {\r\n                this.modInsValues[channelIndex][instrumentIndex][setting] = val;\r\n                this.nextModInsValues[channelIndex][instrumentIndex][setting] = nextVal;\r\n            }\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    public getModValue(setting: number, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\r\n        const forSong: boolean = Config.modulators[setting].forSong;\r\n        if (forSong) {\r\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\r\n                return nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\r\n            }\r\n        } else if (channel != undefined && instrument != undefined) {\r\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n                return nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\r\n    public isAnyModActive(channel: number, instrument: number): boolean {\r\n        for (let setting: number = 0; setting < Config.modulators.length; setting++) {\r\n            if ((this.modValues != undefined && this.modValues[setting] != null)\r\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public unsetMod(setting: number, channel?: number, instrument?: number) {\r\n        if (this.isModActive(setting) || (channel != undefined && instrument != undefined && this.isModActive(setting, channel, instrument))) {\r\n            this.modValues[setting] = null;\r\n            this.nextModValues[setting] = null;\r\n            for (let i: number = 0; i < this.heldMods.length; i++) {\r\n                if (channel != undefined && instrument != undefined) {\r\n                    if (this.heldMods[i].channelIndex == channel && this.heldMods[i].instrumentIndex == instrument && this.heldMods[i].setting == setting)\r\n                        this.heldMods.splice(i, 1);\r\n                } else {\r\n                    if (this.heldMods[i].setting == setting)\r\n                        this.heldMods.splice(i, 1);\r\n                }\r\n            }\r\n            if (channel != undefined && instrument != undefined) {\r\n                this.modInsValues[channel][instrument][setting] = null;\r\n                this.nextModInsValues[channel][instrument][setting] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public isFilterModActive(forNoteFilter: boolean, channelIdx: number, instrumentIdx: number) {\r\n        const instrument: Instrument = this.song!.channels[channelIdx].instruments[instrumentIdx];\r\n\r\n        if (forNoteFilter) {\r\n            if (instrument.noteFilterType)\r\n                return false;\r\n            if (instrument.tmpNoteFilterEnd != null)\r\n                return true;\r\n        }\r\n        else {\r\n            if (instrument.eqFilterType)\r\n                return false;\r\n            if (instrument.tmpEqFilterEnd != null)\r\n                return true;\r\n        }\r\n        return false\r\n    }\r\n\r\n    public isModActive(setting: number, channel?: number, instrument?: number): boolean {\r\n        const forSong: boolean = Config.modulators[setting].forSong;\r\n        if (forSong) {\r\n            return (this.modValues != undefined && this.modValues[setting] != null);\r\n        } else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null) {\r\n            return (this.modInsValues[channel][instrument][setting] != null);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Force a modulator to be held at the given volumeStart for a brief duration.\r\n    public forceHoldMods(volumeStart: number, channelIndex: number, instrumentIndex: number, setting: number): void {\r\n        let found: boolean = false;\r\n        for (let i: number = 0; i < this.heldMods.length; i++) {\r\n            if (this.heldMods[i].channelIndex == channelIndex && this.heldMods[i].instrumentIndex == instrumentIndex && this.heldMods[i].setting == setting) {\r\n                this.heldMods[i].volume = volumeStart;\r\n                this.heldMods[i].holdFor = 24;\r\n                found = true;\r\n            }\r\n        }\r\n        // Default: hold for 24 ticks / 12 parts (half a beat).\r\n        if (!found)\r\n            this.heldMods.push({ volume: volumeStart, channelIndex: channelIndex, instrumentIndex: instrumentIndex, setting: setting, holdFor: 24 });\r\n    }\r\n\r\n    public snapToStart(): void {\r\n        this.bar = 0;\r\n        this.resetEffects();\r\n        this.snapToBar();\r\n    }\r\n\r\n    public goToBar(bar: number): void {\r\n        this.bar = bar;\r\n        this.resetEffects();\r\n        this.playheadInternal = this.bar;\r\n    }\r\n\r\n    public snapToBar(): void {\r\n        this.playheadInternal = this.bar;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n        this.tick = 0;\r\n        this.tickSampleCountdown = 0;\r\n    }\r\n\r\n    public jumpIntoLoop(): void {\r\n        if (!this.song) return;\r\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\r\n            const oldBar: number = this.bar;\r\n            this.bar = this.song.loopStart;\r\n            this.playheadInternal += this.bar - oldBar;\r\n\r\n            if (this.playing)\r\n                this.computeLatestModValues();\r\n        }\r\n    }\r\n\r\n    public goToNextBar(): void {\r\n        if (!this.song) return;\r\n        this.prevBar = this.bar;\r\n        const oldBar: number = this.bar;\r\n        this.bar++;\r\n        if (this.bar >= this.song.barCount) {\r\n            this.bar = 0;\r\n        }\r\n        this.playheadInternal += this.bar - oldBar;\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    public goToPrevBar(): void {\r\n        if (!this.song) return;\r\n        this.prevBar = null;\r\n        const oldBar: number = this.bar;\r\n        this.bar--;\r\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\r\n            this.bar = this.song.barCount - 1;\r\n        }\r\n        this.playheadInternal += this.bar - oldBar;\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    private getNextBar(): number {\r\n        let nextBar: number = this.bar + 1;\r\n        if (this.isRecording) {\r\n            if (nextBar >= this.song!.barCount) {\r\n                nextBar = this.song!.barCount - 1;\r\n            }\r\n        } else if (this.bar == this.loopBarEnd && !this.renderingSong) {\r\n            nextBar = this.loopBarStart;\r\n        }\r\n        else if (this.loopRepeatCount != 0 && nextBar == Math.max(this.loopBarEnd+1, this.song!.loopStart + this.song!.loopLength)) {\r\n            nextBar = this.song!.loopStart;\r\n        }\r\n        return nextBar;\r\n    }\r\n\r\n    public skipBar(): void {\r\n        if (!this.song) return;\r\n        const samplesPerTick: number = this.getSamplesPerTick();\r\n        this.prevBar = this.bar; // Bugfix by LeoV\r\n        if (this.loopBarEnd != this.bar)\r\n            this.bar++;\r\n        else {\r\n            this.bar = this.loopBarStart;\r\n        }\r\n        this.beat = 0;\r\n        this.part = 0;\r\n        this.tick = 0;\r\n        this.tickSampleCountdown = samplesPerTick;\r\n\t    this.isAtStartOfTick = true;\r\n\r\n        if (this.loopRepeatCount != 0 && this.bar == Math.max(this.song.loopStart + this.song.loopLength, this.loopBarEnd)) {\r\n            this.bar = this.song.loopStart;\r\n            if (this.loopBarStart != -1)\r\n                this.bar = this.loopBarStart;\r\n            if (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n        }\r\n\r\n    }\r\n\r\n    private audioProcessCallback = (audioProcessingEvent: any): void => {\r\n        const outputBuffer = audioProcessingEvent.outputBuffer;\r\n        const outputDataL: Float32Array = outputBuffer.getChannelData(0);\r\n        const outputDataR: Float32Array = outputBuffer.getChannelData(1);\r\n\r\n        if (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length - 1] != 0.0 || outputDataR[outputBuffer.length - 1] != 0.0)) {\r\n            // If the buffer is ever initially nonzero, then this must be an older browser that doesn't automatically clear the audio buffer.\r\n            this.browserAutomaticallyClearsAudioBuffer = false;\r\n        }\r\n        if (!this.browserAutomaticallyClearsAudioBuffer) {\r\n            // If this browser does not clear the buffer automatically, do so manually before continuing.\r\n            const length: number = outputBuffer.length;\r\n            for (let i: number = 0; i < length; i++) {\r\n                outputDataL[i] = 0.0;\r\n                outputDataR[i] = 0.0;\r\n            }\r\n        }\r\n\r\n        if (!this.isPlayingSong && performance.now() >= this.liveInputEndTime) {\r\n            this.deactivateAudio();\r\n        } else {\r\n            this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\r\n\r\n            if (this.oscEnabled) {\r\n                if (this.oscRefreshEventTimer <= 0) {\r\n                    events.raise(\"oscilloscopeUpdate\", outputDataL, outputDataR);\r\n                    this.oscRefreshEventTimer = 2;\r\n                } else {\r\n                    this.oscRefreshEventTimer--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\r\n        if (this.song == null) {\r\n            for (let i: number = 0; i < outputBufferLength; i++) {\r\n                outputDataL[i] = 0.0;\r\n                outputDataR[i] = 0.0;\r\n            }\r\n            this.deactivateAudio();\r\n            return;\r\n        }\r\n\r\n        const song: Song = this.song;\r\n        this.song.inVolumeCap = 0.0 // Reset volume cap for this run\r\n        this.song.outVolumeCap = 0.0;\r\n\r\n        let samplesPerTick: number = this.getSamplesPerTick();\r\n        let ended: boolean = false;\r\n\r\n        // Check the bounds of the playhead:\r\n        if (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > samplesPerTick) {\r\n            this.tickSampleCountdown = samplesPerTick;\r\n            this.isAtStartOfTick = true;\r\n        }\r\n        if (playSong) {\r\n            if (this.beat >= song.beatsPerBar) {\r\n                this.beat = 0;\r\n                this.part = 0;\r\n                this.tick = 0;\r\n                this.tickSampleCountdown = samplesPerTick;\r\n                this.isAtStartOfTick = true;\r\n\r\n                this.prevBar = this.bar;\r\n                this.bar = this.getNextBar();\r\n                if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\r\n            }\r\n            if (this.bar >= song.barCount) {\r\n                this.bar = 0;\r\n                if (this.loopRepeatCount != -1) {\r\n                    ended = true;\r\n                    this.pause();\r\n                }\r\n            }\r\n        }\r\n\r\n        //const synthStartTime: number = performance.now();\r\n\r\n        this.syncSongState();\r\n\r\n        if (this.tempMonoInstrumentSampleBuffer == null || this.tempMonoInstrumentSampleBuffer.length < outputBufferLength) {\r\n            this.tempMonoInstrumentSampleBuffer = new Float32Array(outputBufferLength);\r\n        }\r\n\r\n        // Post processing parameters:\r\n        const volume: number = +this.volume;\r\n        const limitDecay: number = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond);\r\n        const limitRise: number = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond);\r\n        let limit: number = +this.limit;\r\n\t    \t\t\tlet skippedBars = [];\r\n        let firstSkippedBufferIndex = -1;\r\n\r\n        let bufferIndex: number = 0;\r\n        while (bufferIndex < outputBufferLength && !ended) {\r\n\r\n            this.nextBar = this.getNextBar();\r\n            if (this.nextBar >= song.barCount) this.nextBar = null;\r\n\r\n            const samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\r\n            const samplesLeftInTick: number = Math.ceil(this.tickSampleCountdown);\r\n            const runLength: number = Math.min(samplesLeftInTick, samplesLeftInBuffer);\r\n            const runEnd: number = bufferIndex + runLength;\r\n\r\n            // Handle mod synth\r\n            if (this.isPlayingSong || this.renderingSong) {\r\n\r\n                // First modulation pass. Determines active tones.\r\n                // Runs everything but Dot X/Y mods, to let them always come after morph.\r\n                for (let channelIndex: number = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\r\n                    const channel: Channel = song.channels[channelIndex];\r\n                    const channelState: ChannelState = this.channels[channelIndex];\r\n\r\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong);\r\n                    for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n                        const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n                        for (let i: number = 0; i < instrumentState.activeModTones.count(); i++) {\r\n                            const tone: Tone = instrumentState.activeModTones.get(i);\r\n                            const channel: Channel = song.channels[channelIndex];\r\n                            const instrument: Instrument = channel.instruments[tone.instrumentIndex];\r\n                            let mod: number = Config.modCount - 1 - tone.pitches[0];\r\n\r\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\r\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index)\r\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\r\n                                continue;\r\n                            }\r\n                            this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                 // Second modulation pass.\r\n                // Only for Dot X/Y mods.\r\n                for (let channelIndex: number = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\r\n                    const channel: Channel = song.channels[channelIndex];\r\n                    const channelState: ChannelState = this.channels[channelIndex];\r\n\r\n                    for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n                        const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n                        for (let i: number = 0; i < instrumentState.activeModTones.count(); i++) {\r\n                            const tone: Tone = instrumentState.activeModTones.get(i);\r\n                            const channel: Channel = song.channels[channelIndex];\r\n                            const instrument: Instrument = channel.instruments[tone.instrumentIndex];\r\n                            let mod: number = Config.modCount - 1 - tone.pitches[0];\r\n\r\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\r\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index)\r\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\r\n\r\n                                this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Handle next bar mods if they were set\r\n            if (this.wantToSkip) {\r\n\t\t    \t\t\t\t\t// Unable to continue, as we have skipped back to a previously visited bar without generating new samples, which means we are infinitely skipping.\r\n                // In this case processing will return before the designated number of samples are processed. In other words, silence will be generated.\r\n                let barVisited = skippedBars.includes(this.bar);\r\n                if (barVisited && bufferIndex == firstSkippedBufferIndex) {\r\n                    this.pause();\r\n                    return;\r\n                }\r\n                if (firstSkippedBufferIndex == -1) {\r\n                    firstSkippedBufferIndex = bufferIndex;\r\n                }\r\n                if (!barVisited)\r\n                    skippedBars.push(this.bar);\r\n                this.wantToSkip = false;\r\n                this.skipBar();\r\n\t\t    \tcontinue;\r\n            }\r\n\r\n            for (let channelIndex: number = 0; channelIndex < song.pitchChannelCount + song.noiseChannelCount; channelIndex++) {\r\n                const channel: Channel = song.channels[channelIndex];\r\n                const channelState: ChannelState = this.channels[channelIndex];\r\n\r\n                if (this.isAtStartOfTick) {\r\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong && !this.countInMetronome);\r\n                    this.determineLiveInputTones(song, channelIndex, samplesPerTick);\r\n                }\r\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\r\n                    const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n\r\n                    if (this.isAtStartOfTick) {\r\n                        let tonesPlayedInThisInstrument: number = instrumentState.activeTones.count() + instrumentState.liveInputTones.count();\r\n\r\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\r\n                            const tone: Tone = instrumentState.releasedTones.get(i);\r\n                            if (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {\r\n                                this.freeReleasedTone(instrumentState, i);\r\n                                i--;\r\n                                continue;\r\n                            }\r\n                            const shouldFadeOutFast: boolean = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);\r\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, true, shouldFadeOutFast);\r\n                            tonesPlayedInThisInstrument++;\r\n                        }\r\n\r\n                        if (instrumentState.awake) {\r\n                            if (!instrumentState.computed) {\r\n                                instrumentState.compute(this, instrument, samplesPerTick, Math.ceil(samplesPerTick), null, channelIndex, instrumentIndex);\r\n                            }\r\n\r\n                            instrumentState.computed = false;\r\n                            //instrumentState.envelopeComputer.clearEnvelopes();\r\n                        }\r\n                    }\r\n\r\n                    for (let i: number = 0; i < instrumentState.activeTones.count(); i++) {\r\n                        const tone: Tone = instrumentState.activeTones.get(i);\r\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\r\n                    }\r\n\r\n                    for (let i: number = 0; i < instrumentState.liveInputTones.count(); i++) {\r\n                        const tone: Tone = instrumentState.liveInputTones.get(i);\r\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\r\n                    }\r\n\r\n                    for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\r\n                        const tone: Tone = instrumentState.releasedTones.get(i);\r\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\r\n                    }\r\n\r\n                    if (instrumentState.awake) {\r\n                        Synth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\r\n                    }\r\n\r\n                    // Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\r\n\r\n                    const tickSampleCountdown: number = this.tickSampleCountdown;\r\n                    const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n                    const endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n                    const ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\r\n                    const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n                    const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n                    const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n                    const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n                    let useVibratoSpeed: number = instrument.vibratoSpeed;\r\n\r\n                    instrumentState.vibratoTime = instrumentState.nextVibratoTime;\r\n\r\n                    if (this.isModActive(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex)) {\r\n                        useVibratoSpeed = this.getModValue(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex);\r\n                    }\r\n\r\n                    if (useVibratoSpeed == 0) {\r\n                        instrumentState.vibratoTime = 0;\r\n                        instrumentState.nextVibratoTime = 0;\r\n                    }\r\n                    else {\r\n                        instrumentState.nextVibratoTime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.enableMetronome || this.countInMetronome) {\r\n                if (this.part == 0) {\r\n                    if (!this.startedMetronome) {\r\n                        const midBeat: boolean = (song.beatsPerBar > 4 && (song.beatsPerBar % 2 == 0) && this.beat == song.beatsPerBar / 2);\r\n                        const periods: number = (this.beat == 0) ? 8 : midBeat ? 6 : 4;\r\n                        const hz: number = (this.beat == 0) ? 1600 : midBeat ? 1200 : 800;\r\n                        const amplitude: number = (this.beat == 0) ? 0.06 : midBeat ? 0.05 : 0.04;\r\n                        const samplesPerPeriod: number = this.samplesPerSecond / hz;\r\n                        const radiansPerSample: number = Math.PI * 2.0 / samplesPerPeriod;\r\n                        this.metronomeSamplesRemaining = Math.floor(samplesPerPeriod * periods);\r\n                        this.metronomeFilter = 2.0 * Math.cos(radiansPerSample);\r\n                        this.metronomeAmplitude = amplitude * Math.sin(radiansPerSample);\r\n                        this.metronomePrevAmplitude = 0.0;\r\n\r\n                        this.startedMetronome = true;\r\n                    }\r\n                    if (this.metronomeSamplesRemaining > 0) {\r\n                        const stopIndex: number = Math.min(runEnd, bufferIndex + this.metronomeSamplesRemaining);\r\n                        this.metronomeSamplesRemaining -= stopIndex - bufferIndex;\r\n                        for (let i: number = bufferIndex; i < stopIndex; i++) {\r\n                            outputDataL[i] += this.metronomeAmplitude;\r\n                            outputDataR[i] += this.metronomeAmplitude;\r\n                            const tempAmplitude: number = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;\r\n                            this.metronomePrevAmplitude = this.metronomeAmplitude;\r\n                            this.metronomeAmplitude = tempAmplitude;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.startedMetronome = false;\r\n                }\r\n            }\r\n\r\n            // Post processing:\r\n            for (let i: number = bufferIndex; i < runEnd; i++) {\r\n                // A compressor/limiter.\r\n                const sampleL = outputDataL[i] * song.masterGain * song.masterGain;\r\n                const sampleR = outputDataR[i] * song.masterGain * song.masterGain;\r\n                const absL: number = sampleL < 0.0 ? -sampleL : sampleL;\r\n                const absR: number = sampleR < 0.0 ? -sampleR : sampleR;\r\n                const abs: number = absL > absR ? absL : absR;\r\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\r\n                // Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\r\n                const limitRange: number = (+(abs > song.compressionThreshold)) + (+(abs > song.limitThreshold));\r\n                // Determine the target amplification based on the range of the curve\r\n                const limitTarget: number =\r\n                    (+(limitRange == 0)) * (((abs + 1 - song.compressionThreshold) * 0.8 + 0.25) * song.compressionRatio + 1.05 * (1 - song.compressionRatio))\r\n                    + (+(limitRange == 1)) * (1.05)\r\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - song.limitThreshold) * song.limitRatio + (1 - song.limitThreshold)));\r\n                // Move the limit towards the target\r\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\r\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\r\n                outputDataL[i] = sampleL * limitedVolume;\r\n                outputDataR[i] = sampleR * limitedVolume;\r\n\r\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\r\n            }\r\n\r\n            bufferIndex += runLength;\r\n\r\n            this.isAtStartOfTick = false;\r\n            this.tickSampleCountdown -= runLength;\r\n            if (this.tickSampleCountdown <= 0) {\r\n                this.isAtStartOfTick = true;\r\n\r\n                // Track how long tones have been released, and free them if there are too many.\r\n                // Also reset awake InstrumentStates that didn't have any Tones during this tick.\r\n                for (const channelState of this.channels) {\r\n                    for (const instrumentState of channelState.instruments) {\r\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\r\n                            const tone: Tone = instrumentState.releasedTones.get(i);\r\n                            if (tone.isOnLastTick) {\r\n                                this.freeReleasedTone(instrumentState, i);\r\n                                i--;\r\n                            } else {\r\n                                tone.ticksSinceReleased++;\r\n                            }\r\n                        }\r\n                        if (instrumentState.deactivateAfterThisTick) {\r\n                            instrumentState.deactivate();\r\n                        }\r\n                        instrumentState.tonesAddedInThisTick = false;\r\n                    }\r\n                }\r\n\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                        let instrumentState: InstrumentState = this.channels[channel].instruments[instrumentIdx];\r\n\r\n                        // Update arpeggio time, which is used to calculate arpeggio position\r\n                        let useArpeggioSpeed: number = instrument.arpeggioSpeed;\r\n                        if (this.isModActive(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx)) {\r\n                            useArpeggioSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length-1, this.getModValue(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx, false)));\r\n                            if (Number.isInteger(useArpeggioSpeed)) {\r\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n                            } else {\r\n                                // Linear interpolate arpeggio values\r\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\r\n                            }\r\n                        }\r\n                        else {\r\n                            instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n                        }\r\n\r\n                        // Update envelope time, which is used to calculate (all envelopes') position\r\n                        let useEnvelopeSpeed: number = instrument.envelopeSpeed;\r\n                        if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx)) {\r\n                            useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length-1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx, false)));\r\n                            if (Number.isInteger(useEnvelopeSpeed)) {\r\n                                instrumentState.envelopeTime += Config.arpSpeedScale[useEnvelopeSpeed];\r\n                            } else {\r\n                                // Linear interpolate envelope values\r\n                                instrumentState.envelopeTime += (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)];\r\n                            }\r\n                        }\r\n                        else {\r\n                            instrumentState.envelopeTime += Config.arpSpeedScale[useEnvelopeSpeed];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Update next-used filters after each run\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                        if (instrument.tmpEqFilterEnd != null) {\r\n                            instrument.tmpEqFilterStart = instrument.tmpEqFilterEnd;\r\n                        } else {\r\n                            instrument.tmpEqFilterStart = instrument.eqFilter;\r\n                        }\r\n                        if (instrument.tmpNoteFilterEnd != null) {\r\n                            instrument.tmpNoteFilterStart = instrument.tmpNoteFilterEnd;\r\n                        } else {\r\n                            instrument.tmpNoteFilterStart = instrument.noteFilter;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this.tick++;\r\n                this.tickSampleCountdown += samplesPerTick;\r\n                if (this.tick == Config.ticksPerPart) {\r\n                    this.tick = 0;\r\n                    this.part++;\r\n                    this.liveInputDuration--;\r\n                    this.liveBassInputDuration--;\r\n                    // Decrement held modulator counters after each run\r\n                    for (let i: number = 0; i < this.heldMods.length; i++) {\r\n                        this.heldMods[i].holdFor--;\r\n                        if (this.heldMods[i].holdFor <= 0) {\r\n                            this.heldMods.splice(i, 1);\r\n                        }\r\n                    }\r\n\r\n                    if (this.part == Config.partsPerBeat) {\r\n                        this.part = 0;\r\n\r\n                        if (playSong) {\r\n                            this.beat++;\r\n                            if (this.beat == song.beatsPerBar) {\r\n                                // bar changed, reset for next bar:\r\n                                this.beat = 0;\r\n\r\n                                if (this.countInMetronome) {\r\n                                    this.countInMetronome = false;\r\n                                } else {\r\n                                    this.prevBar = this.bar;\r\n                                    this.bar = this.getNextBar();\r\n                                    if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n\r\n                                    if (this.bar >= song.barCount) {\r\n                                        this.bar = 0;\r\n                                        if (this.loopRepeatCount != -1) {\r\n                                            ended = true;\r\n                                            this.resetEffects();\r\n                                            this.pause();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Update mod values so that next values copy to current values\r\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\r\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\r\n                    this.modValues[setting] = this.nextModValues[setting];\r\n            }\r\n\r\n            // Set samples per tick if song tempo mods changed it\r\n            if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\r\n                samplesPerTick = this.getSamplesPerTick();\r\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\r\n            }\r\n\r\n            // Bound LFO times to be within their period (to keep values from getting large)\r\n            // I figured this modulo math probably doesn't have to happen every LFO tick.\r\n            for (let channelIndex: number = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\r\n                for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\r\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[instrumentIndex];\r\n                    const instrument: Instrument = this.song.channels[channelIndex].instruments[instrumentIndex];\r\n                    instrumentState.nextVibratoTime = (instrumentState.nextVibratoTime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\r\n                    instrumentState.arpTime = (instrumentState.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\r\n                    instrumentState.envelopeTime = (instrumentState.envelopeTime % (Config.partsPerBeat * Config.ticksPerPart * this.song.beatsPerBar));\r\n                }\r\n            }\r\n\r\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let instrument: number = 0; instrument < this.song.getMaxInstrumentsPerChannel(); instrument++) {\r\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Optimization: Avoid persistent reverb values in the float denormal range.\r\n        if (!Number.isFinite(limit) || Math.abs(limit) < epsilon) limit = 0.0;\r\n        this.limit = limit;\r\n\r\n        if (playSong && !this.countInMetronome) {\r\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;\r\n        }\r\n\r\n        /*\r\n        const synthDuration: number = performance.now() - synthStartTime;\r\n        // Performance measurements:\r\n        samplesAccumulated += outputBufferLength;\r\n        samplePerformance += synthDuration;\r\n    \t\r\n        if (samplesAccumulated >= 44100 * 4) {\r\n            const secondsGenerated = samplesAccumulated / 44100;\r\n            const secondsRequired = samplePerformance / 1000;\r\n            const ratio = secondsRequired / secondsGenerated;\r\n            console.log(ratio);\r\n            samplePerformance = 0;\r\n            samplesAccumulated = 0;\r\n        }\r\n        */\r\n    }\r\n\r\n    private freeTone(tone: Tone): void {\r\n        this.tonePool.pushBack(tone);\r\n    }\r\n\r\n    private newTone(): Tone {\r\n        if (this.tonePool.count() > 0) {\r\n            const tone: Tone = this.tonePool.popBack();\r\n            tone.freshlyAllocated = true;\r\n            return tone;\r\n        }\r\n        return new Tone();\r\n    }\r\n\r\n    private releaseTone(instrumentState: InstrumentState, tone: Tone): void {\r\n        instrumentState.releasedTones.pushFront(tone);\r\n        tone.atNoteStart = false;\r\n        tone.passedEndOfNote = true;\r\n    }\r\n\r\n    private freeReleasedTone(instrumentState: InstrumentState, toneIndex: number): void {\r\n        this.freeTone(instrumentState.releasedTones.get(toneIndex));\r\n        instrumentState.releasedTones.remove(toneIndex);\r\n    }\r\n\r\n    public freeAllTones(): void {\r\n        for (const channelState of this.channels) {\r\n            for (const instrumentState of channelState.instruments) {\r\n                while (instrumentState.activeTones.count() > 0) this.freeTone(instrumentState.activeTones.popBack());\r\n                while (instrumentState.activeModTones.count() > 0) this.freeTone(instrumentState.activeModTones.popBack());\r\n                while (instrumentState.releasedTones.count() > 0) this.freeTone(instrumentState.releasedTones.popBack());\r\n                while (instrumentState.liveInputTones.count() > 0) this.freeTone(instrumentState.liveInputTones.popBack());\r\n            }\r\n        }\r\n    }\r\n\r\n    private determineLiveInputTones(song: Song, channelIndex: number, samplesPerTick: number): void {\r\n        const channel: Channel = song.channels[channelIndex];\r\n        const channelState: ChannelState = this.channels[channelIndex];\r\n        const pitches: number[] = this.liveInputPitches;\r\n        const bassPitches: number[] = this.liveBassInputPitches;\r\n\r\n        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n            const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n            const toneList: Deque<Tone> = instrumentState.liveInputTones;\r\n            let toneCount: number = 0;\r\n            if (this.liveInputDuration > 0 && (channelIndex == this.liveInputChannel) && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {\r\n                const instrument: Instrument = channel.instruments[instrumentIndex];\r\n\r\n                if (instrument.getChord().singleTone) {\r\n                    let tone: Tone;\r\n                    if (toneList.count() <= toneCount) {\r\n                        tone = this.newTone();\r\n                        toneList.pushBack(tone);\r\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\r\n                        tone = this.newTone();\r\n                        toneList.set(toneCount, tone);\r\n                    } else {\r\n                        tone = toneList.get(toneCount);\r\n                    }\r\n                    toneCount++;\r\n\r\n                    for (let i: number = 0; i < pitches.length; i++) {\r\n                        tone.pitches[i] = pitches[i];\r\n                    }\r\n                    tone.pitchCount = pitches.length;\r\n                    tone.chordSize = 1;\r\n                    tone.instrumentIndex = instrumentIndex;\r\n                    tone.note = tone.prevNote = tone.nextNote = null;\r\n                    tone.atNoteStart = this.liveInputStarted;\r\n                    tone.forceContinueAtStart = false;\r\n                    tone.forceContinueAtEnd = false;\r\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                } else {\r\n                    //const transition: Transition = instrument.getTransition();\r\n\r\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, pitches);\r\n\r\n                    for (let i: number = 0; i < pitches.length; i++) {\r\n                        //const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n                        let tone: Tone;\r\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\r\n                            tone = this.tempMatchedPitchTones[toneCount]!;\r\n                            this.tempMatchedPitchTones[toneCount] = null;\r\n                            if (tone.pitchCount != 1 || tone.pitches[0] != pitches[i]) {\r\n                                this.releaseTone(instrumentState, tone);\r\n                                tone = this.newTone();\r\n                            }\r\n                            toneList.pushBack(tone);\r\n                        } else {\r\n                            tone = this.newTone();\r\n                            toneList.pushBack(tone);\r\n                        }\r\n                        toneCount++;\r\n\r\n                        tone.pitches[0] = pitches[i];\r\n                        tone.pitchCount = 1;\r\n                        tone.chordSize = pitches.length;\r\n                        tone.instrumentIndex = instrumentIndex;\r\n                        tone.note = tone.prevNote = tone.nextNote = null;\r\n                        tone.atNoteStart = this.liveInputStarted;\r\n                        tone.forceContinueAtStart = false;\r\n                        tone.forceContinueAtEnd = false;\r\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.liveBassInputDuration > 0 && (channelIndex == this.liveBassInputChannel) && bassPitches.length > 0 && this.liveBassInputInstruments.indexOf(instrumentIndex) != -1) {\r\n                const instrument: Instrument = channel.instruments[instrumentIndex];\r\n\r\n                if (instrument.getChord().singleTone) {\r\n                    let tone: Tone;\r\n                    if (toneList.count() <= toneCount) {\r\n                        tone = this.newTone();\r\n                        toneList.pushBack(tone);\r\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\r\n                        tone = this.newTone();\r\n                        toneList.set(toneCount, tone);\r\n                    } else {\r\n                        tone = toneList.get(toneCount);\r\n                    }\r\n                    toneCount++;\r\n\r\n                    for (let i: number = 0; i < bassPitches.length; i++) {\r\n                        tone.pitches[i] = bassPitches[i];\r\n                    }\r\n                    tone.pitchCount = bassPitches.length;\r\n                    tone.chordSize = 1;\r\n                    tone.instrumentIndex = instrumentIndex;\r\n                    tone.note = tone.prevNote = tone.nextNote = null;\r\n                    tone.atNoteStart = this.liveBassInputStarted;\r\n                    tone.forceContinueAtStart = false;\r\n                    tone.forceContinueAtEnd = false;\r\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                } else {\r\n                    //const transition: Transition = instrument.getTransition();\r\n\r\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, bassPitches);\r\n\r\n                    for (let i: number = 0; i < bassPitches.length; i++) {\r\n                        //const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n                        let tone: Tone;\r\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\r\n                            tone = this.tempMatchedPitchTones[toneCount]!;\r\n                            this.tempMatchedPitchTones[toneCount] = null;\r\n                            if (tone.pitchCount != 1 || tone.pitches[0] != bassPitches[i]) {\r\n                                this.releaseTone(instrumentState, tone);\r\n                                tone = this.newTone();\r\n                            }\r\n                            toneList.pushBack(tone);\r\n                        } else {\r\n                            tone = this.newTone();\r\n                            toneList.pushBack(tone);\r\n                        }\r\n                        toneCount++;\r\n\r\n                        tone.pitches[0] = bassPitches[i];\r\n                        tone.pitchCount = 1;\r\n                        tone.chordSize = bassPitches.length;\r\n                        tone.instrumentIndex = instrumentIndex;\r\n                        tone.note = tone.prevNote = tone.nextNote = null;\r\n                        tone.atNoteStart = this.liveBassInputStarted;\r\n                        tone.forceContinueAtStart = false;\r\n                        tone.forceContinueAtEnd = false;\r\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            while (toneList.count() > toneCount) {\r\n                this.releaseTone(instrumentState, toneList.popBack());\r\n            }\r\n\r\n            this.clearTempMatchedPitchTones(toneCount, instrumentState);\r\n        }\r\n\r\n        this.liveInputStarted = false;\r\n        this.liveBassInputStarted = false;\r\n    }\r\n\r\n    // Returns the chord type of the instrument in the adjacent pattern if it is compatible for a\r\n    // seamless transition across patterns, otherwise returns null.\r\n    private adjacentPatternHasCompatibleInstrumentTransition(song: Song, channel: Channel, pattern: Pattern, otherPattern: Pattern, instrumentIndex: number, transition: Transition, chord: Chord, note: Note, otherNote: Note, forceContinue: boolean): Chord | null {\r\n        if (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {\r\n            // The adjacent pattern does not contain the same instrument as the current pattern.\r\n\r\n            if (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {\r\n                // The current or adjacent pattern contains more than one instrument, don't bother\r\n                // trying to connect them.\r\n                return null;\r\n            }\r\n            // Otherwise, the two patterns each contain one instrument, but not the same instrument.\r\n            // Try to connect them.\r\n            const otherInstrument: Instrument = channel.instruments[otherPattern.instruments[0]];\r\n\r\n            if (forceContinue) {\r\n                // Even non-seamless instruments can be connected across patterns if forced.\r\n                return otherInstrument.getChord();\r\n            }\r\n\r\n            // Otherwise, check that both instruments are seamless across patterns.\r\n            const otherTransition: Transition = otherInstrument.getTransition();\r\n            if (transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {\r\n                return otherInstrument.getChord();\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            // If both patterns contain the same instrument, check that it is seamless across patterns.\r\n            return (forceContinue || transition.includeAdjacentPatterns) ? chord : null;\r\n        }\r\n    }\r\n\r\n    public static adjacentNotesHaveMatchingPitches(firstNote: Note, secondNote: Note): boolean {\r\n        if (firstNote.pitches.length != secondNote.pitches.length) return false;\r\n        const firstNoteInterval: number = firstNote.pins[firstNote.pins.length - 1].interval;\r\n        for (const pitch of firstNote.pitches) {\r\n            if (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private moveTonesIntoOrderedTempMatchedList(toneList: Deque<Tone>, notePitches: number[]): void {\r\n        // The tones are about to seamlessly transition to a new note. The pitches\r\n        // from the old note may or may not match any of the pitches in the new\r\n        // note, and not necessarily in order, but if any do match, they'll sound\r\n        // better if those tones continue to have the same pitch. Attempt to find\r\n        // the right spot for each old tone in the new chord if possible.\r\n\r\n        for (let i: number = 0; i < toneList.count(); i++) {\r\n            const tone: Tone = toneList.get(i);\r\n            const pitch: number = tone.pitches[0] + tone.lastInterval;\r\n            for (let j: number = 0; j < notePitches.length; j++) {\r\n                if (notePitches[j] == pitch) {\r\n                    this.tempMatchedPitchTones[j] = tone;\r\n                    toneList.remove(i);\r\n                    i--;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Any tones that didn't get matched should just fill in the gaps.\r\n        while (toneList.count() > 0) {\r\n            const tone: Tone = toneList.popFront();\r\n            for (let j: number = 0; j < this.tempMatchedPitchTones.length; j++) {\r\n                if (this.tempMatchedPitchTones[j] == null) {\r\n                    this.tempMatchedPitchTones[j] = tone;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private determineCurrentActiveTones(song: Song, channelIndex: number, samplesPerTick: number, playSong: boolean): void {\r\n        const channel: Channel = song.channels[channelIndex];\r\n        const channelState: ChannelState = this.channels[channelIndex];\r\n        const pattern: Pattern | null = song.getPattern(channelIndex, this.bar);\r\n        const currentPart: number = this.getCurrentPart();\r\n        const currentTick: number = this.tick + Config.ticksPerPart * currentPart;\r\n\r\n        if (playSong && song.getChannelIsMod(channelIndex)) {\r\n\r\n            // For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\r\n            // The same transition logic should apply though, even though it isn't really used by mod channels.\r\n            let notes: (Note | null)[] = [];\r\n            let prevNotes: (Note | null)[] = [];\r\n            let nextNotes: (Note | null)[] = [];\r\n            let fillCount: number = Config.modCount;\r\n            while (fillCount--) {\r\n                notes.push(null);\r\n                prevNotes.push(null);\r\n                nextNotes.push(null);\r\n            }\r\n\r\n            if (pattern != null && !channel.muted) {\r\n                for (let i: number = 0; i < pattern.notes.length; i++) {\r\n                    if (pattern.notes[i].end <= currentPart) {\r\n                        // Actually need to check which note starts closer to the start of this note.\r\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                        }\r\n                    }\r\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\r\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                    }\r\n                    else if (pattern.notes[i].start > currentPart) {\r\n                        // Actually need to check which note starts closer to the end of this note.\r\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            let modToneCount: number = 0;\r\n            const newInstrumentIndex: number = (song.patternInstruments && (pattern != null)) ? pattern!.instruments[0] : 0;\r\n            const instrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\r\n            const toneList: Deque<Tone> = instrumentState.activeModTones;\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                if (notes[mod] != null) {\r\n                    if (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\r\n                    if (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\r\n\r\n                }\r\n\r\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\r\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\r\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\r\n                    while (sourceInstrumentState.activeModTones.count() > 0) {\r\n                        destInstrumentState.activeModTones.pushFront(sourceInstrumentState.activeModTones.popBack());\r\n                    }\r\n                }\r\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\r\n\r\n                if (notes[mod] != null) {\r\n                    let prevNoteForThisInstrument: Note | null = prevNotes[mod];\r\n                    let nextNoteForThisInstrument: Note | null = nextNotes[mod];\r\n\r\n                    let forceContinueAtStart: boolean = false;\r\n                    let forceContinueAtEnd: boolean = false;\r\n                    const atNoteStart: boolean = (Config.ticksPerPart * notes[mod]!.start == currentTick) && this.isAtStartOfTick;\r\n                    let tone: Tone;\r\n                    if (toneList.count() <= modToneCount) {\r\n                        tone = this.newTone();\r\n                        toneList.pushBack(tone);\r\n                    } else if (atNoteStart && (prevNoteForThisInstrument == null)) {\r\n                        const oldTone: Tone = toneList.get(modToneCount);\r\n                        if (oldTone.isOnLastTick) {\r\n                            this.freeTone(oldTone);\r\n                        } else {\r\n                            this.releaseTone(instrumentState, oldTone);\r\n                        }\r\n                        tone = this.newTone();\r\n                        toneList.set(modToneCount, tone);\r\n                    } else {\r\n                        tone = toneList.get(modToneCount);\r\n                    }\r\n                    modToneCount++;\r\n\r\n                    for (let i: number = 0; i < notes[mod]!.pitches.length; i++) {\r\n                        tone.pitches[i] = notes[mod]!.pitches[i];\r\n                    }\r\n                    tone.pitchCount = notes[mod]!.pitches.length;\r\n                    tone.chordSize = 1;\r\n                    tone.instrumentIndex = newInstrumentIndex;\r\n                    tone.note = notes[mod];\r\n                    tone.noteStartPart = notes[mod]!.start;\r\n                    tone.noteEndPart = notes[mod]!.end;\r\n                    tone.prevNote = prevNoteForThisInstrument;\r\n                    tone.nextNote = nextNoteForThisInstrument;\r\n                    tone.prevNotePitchIndex = 0;\r\n                    tone.nextNotePitchIndex = 0;\r\n                    tone.atNoteStart = atNoteStart;\r\n                    tone.passedEndOfNote = false;\r\n                    tone.forceContinueAtStart = forceContinueAtStart;\r\n                    tone.forceContinueAtEnd = forceContinueAtEnd;\r\n                }\r\n            }\r\n            // Automatically free or release seamless tones if there's no new note to take over.\r\n            while (toneList.count() > modToneCount) {\r\n                const tone: Tone = toneList.popBack();\r\n                const channel: Channel = song.channels[channelIndex];\r\n                if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\r\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];\r\n                    this.releaseTone(instrumentState, tone);\r\n                } else {\r\n                    this.freeTone(tone);\r\n                }\r\n            }\r\n\r\n        }\r\n        else if (!song.getChannelIsMod(channelIndex)) {\r\n\r\n            let note: Note | null = null;\r\n            let prevNote: Note | null = null;\r\n            let nextNote: Note | null = null;\r\n\r\n            if (playSong && pattern != null && !channel.muted && (!this.isRecording || this.liveInputChannel != channelIndex)) {\r\n                for (let i: number = 0; i < pattern.notes.length; i++) {\r\n                    if (pattern.notes[i].end <= currentPart) {\r\n                        prevNote = pattern.notes[i];\r\n                    } else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\r\n                        note = pattern.notes[i];\r\n                    } else if (pattern.notes[i].start > currentPart) {\r\n                        nextNote = pattern.notes[i];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (note != null) {\r\n                    if (prevNote != null && prevNote.end != note.start) prevNote = null;\r\n                    if (nextNote != null && nextNote.start != note.end) nextNote = null;\r\n                }\r\n            }\r\n\r\n            // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\r\n            if (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {\r\n                const newInstrumentIndex: number = song.patternInstruments ? pattern.instruments[0] : 0;\r\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\r\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\r\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\r\n                    while (sourceInstrumentState.activeTones.count() > 0) {\r\n                        destInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());\r\n                    }\r\n                }\r\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\r\n            } else {\r\n                channelState.singleSeamlessInstrument = null;\r\n            }\r\n\r\n            for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\r\n                const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\r\n                const toneList: Deque<Tone> = instrumentState.activeTones;\r\n                let toneCount: number = 0;\r\n                if ((note != null) && (!song.patternInstruments || (pattern!.instruments.indexOf(instrumentIndex) != -1))) {\r\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\r\n                    let prevNoteForThisInstrument: Note | null = prevNote;\r\n                    let nextNoteForThisInstrument: Note | null = nextNote;\r\n\r\n                    const partsPerBar: Number = Config.partsPerBeat * song.beatsPerBar;\r\n                    const transition: Transition = instrument.getTransition();\r\n                    const chord: Chord = instrument.getChord();\r\n                    let forceContinueAtStart: boolean = false;\r\n                    let forceContinueAtEnd: boolean = false;\r\n                    let tonesInPrevNote: number = 0;\r\n                    let tonesInNextNote: number = 0;\r\n                    if (note.start == 0) {\r\n                        // If the beginning of the note coincides with the beginning of the pattern,\r\n                        let prevPattern: Pattern | null = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);\r\n                        if (prevPattern != null) {\r\n                            const lastNote: Note | null = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];\r\n                            if (lastNote != null && lastNote.end == partsPerBar) {\r\n                                const patternForcesContinueAtStart: boolean = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);\r\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart);\r\n                                if (chordOfCompatibleInstrument != null) {\r\n                                    prevNoteForThisInstrument = lastNote;\r\n                                    tonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\r\n                                    forceContinueAtStart = patternForcesContinueAtStart;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (prevNoteForThisInstrument != null) {\r\n                        tonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\r\n                    }\r\n                    if (note.end == partsPerBar) {\r\n                        // If the end of the note coincides with the end of the pattern, look for an\r\n                        // adjacent note at the beginning of the next pattern.\r\n                        let nextPattern: Pattern | null = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);\r\n                        if (nextPattern != null) {\r\n                            const firstNote: Note | null = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];\r\n                            if (firstNote != null && firstNote.start == 0) {\r\n                                const nextPatternForcesContinueAtStart: boolean = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);\r\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart);\r\n                                if (chordOfCompatibleInstrument != null) {\r\n                                    nextNoteForThisInstrument = firstNote;\r\n                                    tonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\r\n                                    forceContinueAtEnd = nextPatternForcesContinueAtStart;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (nextNoteForThisInstrument != null) {\r\n                        tonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\r\n                    }\r\n\r\n                    if (chord.singleTone) {\r\n                        const atNoteStart: boolean = (Config.ticksPerPart * note.start == currentTick);\r\n                        let tone: Tone;\r\n                        if (toneList.count() <= toneCount) {\r\n                            tone = this.newTone();\r\n                            toneList.pushBack(tone);\r\n                        } else if (atNoteStart && ((!(transition.isSeamless || instrument.clicklessTransition) && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {\r\n                            const oldTone: Tone = toneList.get(toneCount);\r\n                            if (oldTone.isOnLastTick) {\r\n                                this.freeTone(oldTone);\r\n                            } else {\r\n                                this.releaseTone(instrumentState, oldTone);\r\n                            }\r\n                            tone = this.newTone();\r\n                            toneList.set(toneCount, tone);\r\n                        } else {\r\n                            tone = toneList.get(toneCount);\r\n                        }\r\n                        toneCount++;\r\n\r\n                        for (let i: number = 0; i < note.pitches.length; i++) {\r\n                            tone.pitches[i] = note.pitches[i];\r\n                        }\r\n                        tone.pitchCount = note.pitches.length;\r\n                        tone.chordSize = 1;\r\n                        tone.instrumentIndex = instrumentIndex;\r\n                        tone.note = note;\r\n                        tone.noteStartPart = note.start;\r\n                        tone.noteEndPart = note.end;\r\n                        tone.prevNote = prevNoteForThisInstrument;\r\n                        tone.nextNote = nextNoteForThisInstrument;\r\n                        tone.prevNotePitchIndex = 0;\r\n                        tone.nextNotePitchIndex = 0;\r\n                        tone.atNoteStart = atNoteStart;\r\n                        tone.passedEndOfNote = false;\r\n                        tone.forceContinueAtStart = forceContinueAtStart;\r\n                        tone.forceContinueAtEnd = forceContinueAtEnd;\r\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                    } else {\r\n                        const transition: Transition = instrument.getTransition();\r\n\r\n                        if (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && prevNoteForThisInstrument != null) {\r\n                            this.moveTonesIntoOrderedTempMatchedList(toneList, note.pitches);\r\n                        }\r\n\r\n                        let strumOffsetParts: number = 0;\r\n                        for (let i: number = 0; i < note.pitches.length; i++) {\r\n\r\n                            let prevNoteForThisTone: Note | null = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;\r\n                            let noteForThisTone: Note = note;\r\n                            let nextNoteForThisTone: Note | null = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;\r\n                            let noteStartPart: number = noteForThisTone.start + strumOffsetParts;\r\n                            let passedEndOfNote: boolean = false;\r\n\r\n                            // Strumming may mean that a note's actual start time may be after the\r\n                            // note's displayed start time. If the note start hasn't been reached yet,\r\n                            // carry over the previous tone if available and seamless, otherwise skip\r\n                            // the new tone until it is ready to start.\r\n                            if (noteStartPart > currentPart) {\r\n                                if (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {\r\n                                    // Continue the previous note's chord until the current one takes over.\r\n                                    nextNoteForThisTone = noteForThisTone;\r\n                                    noteForThisTone = prevNoteForThisTone;\r\n                                    prevNoteForThisTone = null;\r\n                                    noteStartPart = noteForThisTone.start + strumOffsetParts;\r\n                                    passedEndOfNote = true;\r\n                                } else {\r\n                                    // This and the rest of the tones in the chord shouldn't start yet.\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            let noteEndPart: number = noteForThisTone.end;\r\n                            if ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {\r\n                                noteEndPart = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEndPart + strumOffsetParts);\r\n                            }\r\n                            if ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {\r\n                                strumOffsetParts += chord.strumParts;\r\n                            }\r\n\r\n                            const atNoteStart: boolean = (Config.ticksPerPart * noteStartPart == currentTick);\r\n                            let tone: Tone;\r\n                            if (this.tempMatchedPitchTones[toneCount] != null) {\r\n                                tone = this.tempMatchedPitchTones[toneCount]!;\r\n                                this.tempMatchedPitchTones[toneCount] = null;\r\n                                toneList.pushBack(tone);\r\n                            } else if (toneList.count() <= toneCount) {\r\n                                tone = this.newTone();\r\n                                toneList.pushBack(tone);\r\n                            } else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {\r\n                                const oldTone: Tone = toneList.get(toneCount);\r\n                                if (oldTone.isOnLastTick) {\r\n                                    this.freeTone(oldTone);\r\n                                } else {\r\n                                    this.releaseTone(instrumentState, oldTone);\r\n                                }\r\n                                tone = this.newTone();\r\n                                toneList.set(toneCount, tone);\r\n                            } else {\r\n                                tone = toneList.get(toneCount);\r\n                            }\r\n                            toneCount++;\r\n\r\n                            tone.pitches[0] = noteForThisTone.pitches[i];\r\n                            tone.pitchCount = 1;\r\n                            tone.chordSize = noteForThisTone.pitches.length;\r\n                            tone.instrumentIndex = instrumentIndex;\r\n                            tone.note = noteForThisTone;\r\n                            tone.noteStartPart = noteStartPart;\r\n                            tone.noteEndPart = noteEndPart;\r\n                            tone.prevNote = prevNoteForThisTone;\r\n                            tone.nextNote = nextNoteForThisTone;\r\n                            tone.prevNotePitchIndex = i;\r\n                            tone.nextNotePitchIndex = i;\r\n                            tone.atNoteStart = atNoteStart;\r\n                            tone.passedEndOfNote = passedEndOfNote;\r\n                            tone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;\r\n                            tone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;\r\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\r\n                        }\r\n                    }\r\n                }\r\n                // Automatically free or release seamless tones if there's no new note to take over.\r\n                while (toneList.count() > toneCount) {\r\n                    const tone: Tone = toneList.popBack();\r\n                    const channel: Channel = song.channels[channelIndex];\r\n                    if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\r\n                        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\r\n                        this.releaseTone(instrumentState, tone);\r\n                    } else {\r\n                        this.freeTone(tone);\r\n                    }\r\n                }\r\n\r\n                this.clearTempMatchedPitchTones(toneCount, instrumentState);\r\n            }\r\n        }\r\n    }\r\n\r\n    private clearTempMatchedPitchTones(toneCount: number, instrumentState: InstrumentState): void {\r\n        for (let i: number = toneCount; i < this.tempMatchedPitchTones.length; i++) {\r\n            const oldTone: Tone | null = this.tempMatchedPitchTones[i];\r\n            if (oldTone != null) {\r\n                if (oldTone.isOnLastTick) {\r\n                    this.freeTone(oldTone);\r\n                } else {\r\n                    this.releaseTone(instrumentState, oldTone);\r\n                }\r\n                this.tempMatchedPitchTones[i] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private playTone(channelIndex: number, bufferIndex: number, runLength: number, tone: Tone): void {\r\n        const channelState: ChannelState = this.channels[channelIndex];\r\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\r\n\r\n        if (instrumentState.synthesizer != null) instrumentState.synthesizer!(this, bufferIndex, runLength, tone, instrumentState);\r\n        tone.envelopeComputer.clearEnvelopes();\r\n    }\r\n\r\n    // Computes mod note position at the start and end of the window and \"plays\" the mod tone, setting appropriate mod data.\r\n    private playModTone(song: Song, channelIndex: number, samplesPerTick: number, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n        const channel: Channel = song.channels[channelIndex];\r\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\r\n\r\n        if (tone.note != null) {\r\n            const ticksIntoBar: number = this.getTicksIntoBar();\r\n            const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n            const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n            const tickSampleCountdown: number = this.tickSampleCountdown;\r\n            const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n            const endRatio: number = 1.0 - (tickSampleCountdown - roundedSamplesPerTick) / samplesPerTick;\r\n            const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n            const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n            const tickTimeStart: number = Config.ticksPerPart * partTimeStart;\r\n            const tickTimeEnd: number = Config.ticksPerPart * partTimeEnd;\r\n            const endPinIndex: number = tone.note.getEndPinIndex(this.getCurrentPart());\r\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\r\n            const endPin: NotePin = tone.note.pins[endPinIndex];\r\n            const startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\r\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\r\n            const ratioStart: number = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\r\n            const ratioEnd: number = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);\r\n            tone.expression = startPin.size + (endPin.size - startPin.size) * ratioStart;\r\n            tone.expressionDelta = (startPin.size + (endPin.size - startPin.size) * ratioEnd) - tone.expression;\r\n\r\n            Synth.modSynth(this, bufferIndex, roundedSamplesPerTick, tone, instrument);\r\n        }\r\n    }\r\n\r\n    private static computeChordExpression(chordSize: number): number {\r\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\r\n    }\r\n\r\n    private computeTone(song: Song, channelIndex: number, samplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n        const roundedSamplesPerTick: number = Math.ceil(samplesPerTick);\r\n        const channel: Channel = song.channels[channelIndex];\r\n        const channelState: ChannelState = this.channels[channelIndex];\r\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\r\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\r\n        instrumentState.awake = true;\r\n        instrumentState.tonesAddedInThisTick = true;\r\n        if (!instrumentState.computed) {\r\n            instrumentState.compute(this, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, tone.instrumentIndex);\r\n        }\r\n        const transition: Transition = instrument.getTransition();\r\n        const chord: Chord = instrument.getChord();\r\n        const chordExpression: number = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);\r\n        const isNoiseChannel: boolean = song.getChannelIsNoise(channelIndex);\r\n        const intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\r\n        const secondsPerPart: number = Config.ticksPerPart * samplesPerTick / this.samplesPerSecond;\r\n        const sampleTime: number = 1.0 / this.samplesPerSecond;\r\n        const beatsPerPart: number = 1.0 / Config.partsPerBeat;\r\n        const ticksIntoBar: number = this.getTicksIntoBar();\r\n        const partTimeStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n        const partTimeEnd: number = (ticksIntoBar + 1.0) / Config.ticksPerPart;\r\n        const currentPart: number = this.getCurrentPart();\r\n\r\n        let specialIntervalMult: number = 1.0;\r\n        tone.specialIntervalExpressionMult = 1.0;\r\n\r\n        //if (synth.isModActive(ModSetting.mstPan, channelIndex, tone.instrumentIndex)) {\r\n        //    startPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\r\n        //    endPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\r\n        //}\r\n\r\n        let toneIsOnLastTick: boolean = shouldFadeOutFast;\r\n        let intervalStart: number = 0.0;\r\n        let intervalEnd: number = 0.0;\r\n        let fadeExpressionStart: number = 1.0;\r\n        let fadeExpressionEnd: number = 1.0;\r\n        let chordExpressionStart: number = chordExpression;\r\n        let chordExpressionEnd: number = chordExpression;\r\n\r\n        let expressionReferencePitch: number = 16; // A low \"E\" as a MIDI pitch.\r\n        let basePitch: number = Config.keys[song.key].basePitch + (Config.pitchesPerOctave * song.octave);\r\n        let baseExpression: number = 1.0;\r\n        let pitchDamping: number = 48;\r\n        if (instrument.type == InstrumentType.spectrum) {\r\n            baseExpression = Config.spectrumBaseExpression;\r\n            if (isNoiseChannel) {\r\n                basePitch = Config.spectrumBasePitch;\r\n                baseExpression *= 2.0; // Note: spectrum is louder for drum channels than pitch channels!\r\n            }\r\n            expressionReferencePitch = Config.spectrumBasePitch;\r\n            pitchDamping = 28;\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            basePitch = Config.spectrumBasePitch;\r\n            baseExpression = Config.drumsetBaseExpression;\r\n            expressionReferencePitch = basePitch;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            // dogebox2 code, makes basic noise affected by keys in pitch channels\r\n            basePitch = isNoiseChannel ? Config.chipNoises[instrument.chipNoise].basePitch : basePitch + Config.chipNoises[instrument.chipNoise].basePitch - 12;\r\n            // maybe also lower expression in pitch channels?\r\n            baseExpression = Config.noiseBaseExpression;\r\n            expressionReferencePitch = basePitch;\r\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\r\n        } else if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\r\n            baseExpression = Config.fmBaseExpression;\r\n        } else if (instrument.type == InstrumentType.chip){\r\n                baseExpression = Config.chipBaseExpression;\r\n\t\t\t\tif (Config.chipWaves[instrument.chipWave].isCustomSampled) {\r\n\t\t\t\t\tif (Config.chipWaves[instrument.chipWave].isPercussion){\r\n\t\t\t\t\t\tbasePitch = -84.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length/Config.chipWaves[instrument.chipWave].sampleRate!) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey!);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tbasePitch += -96.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length/Config.chipWaves[instrument.chipWave].sampleRate!) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey!); \r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (Config.chipWaves[instrument.chipWave].isSampled && !Config.chipWaves[instrument.chipWave].isPercussion) {\r\n\t\t\t\t\t\tbasePitch = basePitch - 63 + Config.chipWaves[instrument.chipWave].extraSampleDetune!\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (Config.chipWaves[instrument.chipWave].isSampled && Config.chipWaves[instrument.chipWave].isPercussion) {\r\n\t\t\t\t\tbasePitch = -51 + Config.chipWaves[instrument.chipWave].extraSampleDetune!;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n            } else if (instrument.type == InstrumentType.customChipWave) {\r\n            baseExpression = Config.chipBaseExpression;\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            baseExpression = Config.harmonicsBaseExpression;\r\n        } else if (instrument.type == InstrumentType.pwm) {\r\n            baseExpression = Config.pwmBaseExpression;\r\n        } else if (instrument.type == InstrumentType.supersaw) {\r\n\t\t\tbaseExpression = Config.supersawBaseExpression;\r\n        } else if (instrument.type == InstrumentType.pickedString) {\r\n            baseExpression = Config.pickedStringBaseExpression;\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            baseExpression = 1.0;\r\n            expressionReferencePitch = 0;\r\n            pitchDamping = 1.0;\r\n            basePitch = 0;\r\n        } else {\r\n            throw new Error(\"Unknown instrument type in computeTone.\");\r\n        }\r\n\r\n        if ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {\r\n            tone.reset();\r\n\t\t\t    // advloop addition\r\n            if (instrument.type == InstrumentType.chip && instrument.isUsingAdvancedLoopControls) {\r\n                const chipWaveLength = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;\r\n                const firstOffset = instrument.chipWaveStartOffset / chipWaveLength;\r\n                // const lastOffset = (chipWaveLength - 0.01) / chipWaveLength;\r\n                // @TODO: This is silly and I should actually figure out how to\r\n                // properly keep lastOffset as 1.0 and not get it wrapped back\r\n                // to 0 once it's in `Synth.loopableChipSynth`.\r\n                const lastOffset = 0.999999999999999;\r\n                for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\r\n                    tone.phases[i] = instrument.chipWavePlayBackwards ? Math.max(0, Math.min(lastOffset, firstOffset)) : Math.max(0, firstOffset);\r\n                    tone.directions[i] = instrument.chipWavePlayBackwards ? -1 : 1;\r\n                    tone.chipWaveCompletions[i] = 0;\r\n                    tone.chipWavePrevWaves[i] = 0;\r\n                    tone.chipWaveCompletionsLastWave[i] = 0;\r\n                }\r\n            }\r\n                // advloop addition\r\n        }\r\n        tone.freshlyAllocated = false;\r\n\r\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\r\n            tone.phaseDeltas[i] = 0.0;\r\n            tone.phaseDeltaScales[i] = 0.0;\r\n            tone.operatorExpressions[i] = 0.0;\r\n            tone.operatorExpressionDeltas[i] = 0.0;\r\n        }\r\n        tone.expression = 0.0;\r\n        tone.expressionDelta = 0.0;\r\n        for (let i: number = 0; i < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); i++) {\r\n            tone.operatorWaves[i] = Synth.getOperatorWave(instrument.operators[i].waveform, instrument.operators[i].pulseWidth);\r\n        }\r\n\r\n        if (released) {\r\n            const startTicksSinceReleased: number = tone.ticksSinceReleased;\r\n            const endTicksSinceReleased: number = tone.ticksSinceReleased + 1.0;\r\n            intervalStart = intervalEnd = tone.lastInterval;\r\n            const fadeOutTicks: number = Math.abs(instrument.getFadeOutTicks());\r\n            fadeExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\r\n            fadeExpressionEnd = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\r\n\r\n            if (shouldFadeOutFast) {\r\n                fadeExpressionEnd = 0.0;\r\n            }\r\n\r\n            if (tone.ticksSinceReleased + 1 >= fadeOutTicks) toneIsOnLastTick = true;\r\n        } else if (tone.note == null) {\r\n            fadeExpressionStart = fadeExpressionEnd = 1.0;\r\n            tone.lastInterval = 0;\r\n            tone.ticksSinceReleased = 0;\r\n            tone.liveInputSamplesHeld += roundedSamplesPerTick;\r\n        } else {\r\n            const note: Note = tone.note;\r\n            const nextNote: Note | null = tone.nextNote;\r\n\r\n            const noteStartPart: number = tone.noteStartPart;\r\n            const noteEndPart: number = tone.noteEndPart;\r\n\r\n\r\n            const endPinIndex: number = note.getEndPinIndex(currentPart);\r\n            const startPin: NotePin = note.pins[endPinIndex - 1];\r\n            const endPin: NotePin = note.pins[endPinIndex];\r\n            const noteStartTick: number = noteStartPart * Config.ticksPerPart;\r\n            const noteEndTick: number = noteEndPart * Config.ticksPerPart;\r\n            const pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\r\n            const pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\r\n\r\n            tone.ticksSinceReleased = 0;\r\n\r\n            const tickTimeStart: number = currentPart * Config.ticksPerPart + this.tick;\r\n            const tickTimeEnd: number = tickTimeStart + 1.0;\r\n            const noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\r\n            const noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\r\n            const pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\r\n            const pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\r\n            fadeExpressionStart = 1.0;\r\n            fadeExpressionEnd = 1.0;\r\n            intervalStart = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\r\n            intervalEnd = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\r\n            tone.lastInterval = intervalEnd;\r\n\r\n            if ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {\r\n                const fadeOutTicks: number = -instrument.getFadeOutTicks();\r\n                if (fadeOutTicks > 0.0) {\r\n                    // If the tone should fade out before the end of the note, do so here.\r\n                    const noteLengthTicks: number = noteEndTick - noteStartTick;\r\n                    fadeExpressionStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);\r\n                    fadeExpressionEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);\r\n                    if (tickTimeEnd >= noteStartTick + noteLengthTicks) toneIsOnLastTick = true;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        tone.isOnLastTick = toneIsOnLastTick;\r\n\r\n        let tmpNoteFilter: FilterSettings = instrument.noteFilter;\r\n        let startPoint: FilterControlPoint;\r\n        let endPoint: FilterControlPoint;\r\n\r\n        if (instrument.noteFilterType) {\r\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\r\n            const noteFilterSettingsStart: FilterSettings = instrument.noteFilter;\r\n            if (instrument.noteSubFilters[1] == null)\r\n                instrument.noteSubFilters[1] = new FilterSettings();\r\n            const noteFilterSettingsEnd: FilterSettings = instrument.noteSubFilters[1];\r\n\r\n            // Change location based on slider values\r\n            let startSimpleFreq: number = instrument.noteFilterSimpleCut;\r\n            let startSimpleGain: number = instrument.noteFilterSimplePeak;\r\n            let endSimpleFreq: number = instrument.noteFilterSimpleCut;\r\n            let endSimpleGain: number = instrument.noteFilterSimplePeak;\r\n            let filterChanges: boolean = false;\r\n\r\n            if (this.isModActive(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex)) {\r\n                startSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, false);\r\n                endSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, true);\r\n                filterChanges = true;\r\n            }\r\n            if (this.isModActive(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex)) {\r\n                startSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, false);\r\n                endSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, true);\r\n                filterChanges = true;\r\n            }\r\n\r\n            noteFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, !filterChanges);\r\n            noteFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain, !filterChanges);\r\n\r\n            startPoint = noteFilterSettingsStart.controlPoints[0];\r\n            endPoint = noteFilterSettingsEnd.controlPoints[0];\r\n\r\n            // Temporarily override so that envelope computer uses appropriate computed note filter\r\n            instrument.noteFilter = noteFilterSettingsStart;\r\n            instrument.tmpNoteFilterStart = noteFilterSettingsStart;\r\n        }\r\n\r\n        // Compute envelopes *after* resetting the tone, otherwise the envelope computer gets reset too!\r\n        const envelopeComputer: EnvelopeComputer = tone.envelopeComputer;\r\n        let useEnvelopeSpeed: number = Config.arpSpeedScale[instrument.envelopeSpeed];\r\n        if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex)) {\r\n            useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex, false)));\r\n            if (Number.isInteger(useEnvelopeSpeed)) {\r\n                useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed];\r\n            } else {\r\n                // Linear interpolate envelope values\r\n                useEnvelopeSpeed = (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)];\r\n            }\r\n        }\r\n        envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, Config.ticksPerPart * partTimeStart, samplesPerTick / this.samplesPerSecond, tone, useEnvelopeSpeed);\r\n        const envelopeStarts: number[] = tone.envelopeComputer.envelopeStarts;\r\n        const envelopeEnds: number[] = tone.envelopeComputer.envelopeEnds;\r\n        instrument.noteFilter = tmpNoteFilter;\r\n\r\n        if (tone.note != null && transition.slides) {\r\n            // Slide interval and chordExpression at the start and/or end of the note if necessary.\r\n            const prevNote: Note | null = tone.prevNote;\r\n            const nextNote: Note | null = tone.nextNote;\r\n            if (prevNote != null) {\r\n                const intervalDiff: number = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval - tone.pitches[0];\r\n                if (envelopeComputer.prevSlideStart) intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;\r\n                if (envelopeComputer.prevSlideEnd) intervalEnd += intervalDiff * envelopeComputer.prevSlideRatioEnd;\r\n                if (!chord.singleTone) {\r\n                    const chordSizeDiff: number = prevNote.pitches.length - tone.chordSize;\r\n                    if (envelopeComputer.prevSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);\r\n                    if (envelopeComputer.prevSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);\r\n                }\r\n            }\r\n            if (nextNote != null) {\r\n                const intervalDiff: number = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length - 1].interval);\r\n                if (envelopeComputer.nextSlideStart) intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;\r\n                if (envelopeComputer.nextSlideEnd) intervalEnd += intervalDiff * envelopeComputer.nextSlideRatioEnd;\r\n                if (!chord.singleTone) {\r\n                    const chordSizeDiff: number = nextNote.pitches.length - tone.chordSize;\r\n                    if (envelopeComputer.nextSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);\r\n                    if (envelopeComputer.nextSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (effectsIncludePitchShift(instrument.effects)) {\r\n            let pitchShift: number = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;\r\n            let pitchShiftScalarStart: number = 1.0;\r\n            let pitchShiftScalarEnd: number = 1.0;\r\n            if (this.isModActive(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex)) {\r\n                pitchShift = Config.justIntonationSemitones[Config.justIntonationSemitones.length - 1];\r\n                pitchShiftScalarStart = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pitchShiftCenter);\r\n                pitchShiftScalarEnd = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pitchShiftCenter);\r\n            }\r\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.pitchShift];\r\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.pitchShift];\r\n            intervalStart += pitchShift * envelopeStart * pitchShiftScalarStart;\r\n            intervalEnd += pitchShift * envelopeEnd * pitchShiftScalarEnd;\r\n        }\r\n        if (effectsIncludeDetune(instrument.effects) || this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\r\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.detune];\r\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.detune];\r\n            let modDetuneStart: number = instrument.detune;\r\n            let modDetuneEnd: number = instrument.detune;\r\n            if (this.isModActive(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex)) {\r\n                modDetuneStart = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, false) + Config.detuneCenter;\r\n                modDetuneEnd = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, true) + Config.detuneCenter;\r\n            }\r\n            if (this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\r\n                modDetuneStart += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, false);\r\n                modDetuneEnd += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, true);\r\n            }\r\n            intervalStart += Synth.detuneToCents(modDetuneStart) * envelopeStart * Config.pitchesPerOctave / (12.0 * 100.0);\r\n            intervalEnd += Synth.detuneToCents(modDetuneEnd) * envelopeEnd * Config.pitchesPerOctave / (12.0 * 100.0);\r\n        }\r\n\r\n        if (effectsIncludeVibrato(instrument.effects)) {\r\n            let delayTicks: number;\r\n            let vibratoAmplitudeStart: number;\r\n            let vibratoAmplitudeEnd: number;\r\n            // Custom vibrato\r\n            if (instrument.vibrato == Config.vibratos.length) {\r\n                delayTicks = instrument.vibratoDelay * 2; // Delay was changed from parts to ticks in BB v9\r\n                // Special case: if vibrato delay is max, NEVER vibrato.\r\n                if (instrument.vibratoDelay == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol)\r\n                    delayTicks = Number.POSITIVE_INFINITY;\r\n                vibratoAmplitudeStart = instrument.vibratoDepth;\r\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\r\n            } else {\r\n                delayTicks = Config.vibratos[instrument.vibrato].delayTicks;\r\n                vibratoAmplitudeStart = Config.vibratos[instrument.vibrato].amplitude;\r\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\r\n            }\r\n\r\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex)) {\r\n                delayTicks = this.getModValue(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex, false) * 2; // Delay was changed from parts to ticks in BB v9\r\n                if (delayTicks == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol * 2)\r\n                    delayTicks = Number.POSITIVE_INFINITY;\r\n\r\n            }\r\n\r\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex)) {\r\n                vibratoAmplitudeStart = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, false) / 25;\r\n                vibratoAmplitudeEnd = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, true) / 25;\r\n            }\r\n\r\n\r\n            // To maintain pitch continuity, (mostly for picked string which retriggers impulse\r\n            // otherwise) remember the vibrato at the end of this run and reuse it at the start\r\n            // of the next run if available.\r\n            let vibratoStart: number;\r\n            if (tone.prevVibrato != null) {\r\n                vibratoStart = tone.prevVibrato;\r\n            } else {\r\n                let vibratoLfoStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.vibratoTime);\r\n                const vibratoDepthEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.vibratoDepth];\r\n                vibratoStart = vibratoAmplitudeStart * vibratoLfoStart * vibratoDepthEnvelopeStart;\r\n                if (delayTicks > 0.0) {\r\n                    const ticksUntilVibratoStart: number = delayTicks - envelopeComputer.noteTicksStart;\r\n                    vibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));\r\n                }\r\n            }\r\n\r\n            let vibratoLfoEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.nextVibratoTime);\r\n            const vibratoDepthEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.vibratoDepth];\r\n            if (instrument.type != InstrumentType.mod) {\r\n                let vibratoEnd: number = vibratoAmplitudeEnd * vibratoLfoEnd * vibratoDepthEnvelopeEnd;\r\n                if (delayTicks > 0.0) {\r\n                    const ticksUntilVibratoEnd: number = delayTicks - envelopeComputer.noteTicksEnd;\r\n                    vibratoEnd *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd / 2.0));\r\n                }\r\n\r\n                tone.prevVibrato = vibratoEnd;\r\n\r\n                intervalStart += vibratoStart;\r\n                intervalEnd += vibratoEnd;\r\n            }\r\n        }\r\n\r\n        if ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {\r\n            // Fade in the beginning of the note.\r\n            const fadeInSeconds: number = instrument.getFadeInSeconds();\r\n            if (fadeInSeconds > 0.0) {\r\n                fadeExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStartUnscaled / fadeInSeconds);\r\n                fadeExpressionEnd *= Math.min(1.0, envelopeComputer.noteSecondsEndUnscaled / fadeInSeconds);\r\n            }\r\n        }\r\n\r\n\r\n        if (instrument.type == InstrumentType.drumset && tone.drumsetPitch == null) {\r\n            // It's possible that the note will change while the user is editing it,\r\n            // but the tone's pitches don't get updated because the tone has already\r\n            // ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\r\n            tone.drumsetPitch = tone.pitches[0];\r\n            if (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\r\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\r\n        }\r\n\r\n        let noteFilterExpression: number = envelopeComputer.lowpassCutoffDecayVolumeCompensation;\r\n        if (!effectsIncludeNoteFilter(instrument.effects)) {\r\n            tone.noteFilterCount = 0;\r\n        } else {\r\n\r\n            const noteAllFreqsEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterAllFreqs];\r\n            const noteAllFreqsEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterAllFreqs];\r\n\r\n            // Simple note filter\r\n            if (instrument.noteFilterType) {\r\n                const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0];\r\n                const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0];\r\n                const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0];\r\n                const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0];\r\n\r\n                startPoint!.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\r\n                endPoint!.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\r\n\r\n                if (tone.noteFilters.length < 1) tone.noteFilters[0] = new DynamicBiquadFilter();\r\n                tone.noteFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint!.type == FilterType.lowPass);\r\n                noteFilterExpression *= startPoint!.getVolumeCompensationMult();\r\n\r\n                tone.noteFilterCount = 1;\r\n            }\r\n            else {\r\n                const noteFilterSettings: FilterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\r\n\r\n                for (let i: number = 0; i < noteFilterSettings.controlPointCount; i++) {\r\n                    const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0 + i];\r\n                    const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0 + i];\r\n                    const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0 + i];\r\n                    const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0 + i];\r\n                    let startPoint: FilterControlPoint = noteFilterSettings.controlPoints[i];\r\n                    const endPoint: FilterControlPoint = (instrument.tmpNoteFilterEnd != null && instrument.tmpNoteFilterEnd.controlPoints[i] != null) ? instrument.tmpNoteFilterEnd.controlPoints[i] : noteFilterSettings.controlPoints[i];\r\n\r\n                    // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\r\n                    if (startPoint.type != endPoint.type) {\r\n                        startPoint = endPoint;\r\n                    }\r\n\r\n                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\r\n                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\r\n                    if (tone.noteFilters.length <= i) tone.noteFilters[i] = new DynamicBiquadFilter();\r\n                    tone.noteFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\r\n                    noteFilterExpression *= startPoint.getVolumeCompensationMult();\r\n                }\r\n                tone.noteFilterCount = noteFilterSettings.controlPointCount;\r\n            }\r\n        }\r\n\r\n        if (instrument.type == InstrumentType.drumset) {\r\n            const drumsetFilterEnvelope: Envelope = instrument.getDrumsetEnvelope(tone.drumsetPitch!);\r\n\r\n            // If the drumset lowpass cutoff decays, compensate by increasing expression.\r\n            noteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope)\r\n\r\n            // Drumset filters use the same envelope timing as the rest of the envelopes, but do not include support for slide transitions.\r\n            let drumsetFilterEnvelopeStart: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.noteSizeStart);\r\n\r\n            // Apply slide interpolation to drumset envelope.\r\n            if (envelopeComputer.prevSlideStart) {\r\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.prevNoteSize);\r\n                drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.prevSlideRatioStart;\r\n            }\r\n            if (envelopeComputer.nextSlideStart) {\r\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeStart, envelopeComputer.nextNoteSize);\r\n                drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.nextSlideRatioStart;\r\n            }\r\n            \r\n            let drumsetFilterEnvelopeEnd: number = drumsetFilterEnvelopeStart;\r\n\r\n            if ( instrument.discreteEnvelope == false ) {\r\n                drumsetFilterEnvelopeEnd = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.noteSizeEnd);\r\n\r\n                if (envelopeComputer.prevSlideEnd) {\r\n                    const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.prevNoteSize);\r\n                    drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.prevSlideRatioEnd;\r\n                }\r\n                if (envelopeComputer.nextSlideEnd) {\r\n                    const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeEnd, envelopeComputer.nextNoteSize);\r\n                    drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.nextSlideRatioEnd;\r\n                }\r\n            }\r\n\r\n            const point: FilterControlPoint = this.tempDrumSetControlPoint;\r\n            point.type = FilterType.lowPass;\r\n            point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.5);\r\n            point.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);\r\n            // Drumset envelopes are warped to better imitate the legacy simplified 2nd order lowpass at ~48000Hz that I used to use.\r\n            point.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);\r\n            point.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);\r\n            if (tone.noteFilters.length == tone.noteFilterCount) tone.noteFilters[tone.noteFilterCount] = new DynamicBiquadFilter();\r\n            tone.noteFilters[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\r\n            tone.noteFilterCount++;\r\n        }\r\n\r\n        noteFilterExpression = Math.min(3.0, noteFilterExpression);\r\n\r\n        if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\r\n            // phase modulation!\r\n\r\n            let sineExpressionBoost: number = 1.0;\r\n            let totalCarrierExpression: number = 0.0;\r\n\r\n            let arpeggioInterval: number = 0;\r\n            const arpeggiates: boolean = chord.arpeggiates;\r\n            if (tone.pitchCount > 1 && arpeggiates) {\r\n                const arpeggio: number = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\r\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n            }\r\n\r\n\r\n            const carrierCount: number = (instrument.type == InstrumentType.fm6op ? instrument.customAlgorithm.carrierCount : Config.algorithms[instrument.algorithm].carrierCount);\r\n            for (let i: number = 0; i < (instrument.type == InstrumentType.fm6op? 6 : Config.operatorCount); i++) {\r\n\r\n                const associatedCarrierIndex: number = (instrument.type == InstrumentType.fm6op ? instrument.customAlgorithm.associatedCarrier[i]-1:Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1);\r\n                const pitch: number = tone.pitches[arpeggiates ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\r\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\r\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\r\n                const pitchStart: number = basePitch + (pitch + intervalStart) * intervalScale + interval;\r\n                const pitchEnd: number = basePitch + (pitch + intervalEnd) * intervalScale + interval;\r\n                const baseFreqStart: number = Instrument.frequencyFromPitch(pitchStart);\r\n                const baseFreqEnd: number = Instrument.frequencyFromPitch(pitchEnd);\r\n                const hzOffset: number = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\r\n                const targetFreqStart: number = freqMult * baseFreqStart + hzOffset;\r\n                const targetFreqEnd: number = freqMult * baseFreqEnd + hzOffset;\r\n\r\n                \r\n                const freqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.operatorFrequency0 + i];\r\n                const freqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.operatorFrequency0 + i];\r\n                let freqStart: number;\r\n                let freqEnd: number;\r\n                if (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {\r\n                    freqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;\r\n                    freqEnd = Math.pow(2.0, Math.log2(targetFreqEnd / baseFreqEnd) * freqEnvelopeEnd) * baseFreqEnd;\r\n                } else {\r\n                    freqStart = targetFreqStart;\r\n                    freqEnd = targetFreqEnd;\r\n                }\r\n                tone.phaseDeltas[i] = freqStart * sampleTime;\r\n                tone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / roundedSamplesPerTick);\r\n\r\n                let amplitudeStart: number = instrument.operators[i].amplitude;\r\n                let amplitudeEnd: number = instrument.operators[i].amplitude;\r\n                if (i < 4){\r\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex)) {\r\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, false) / 15.0;\r\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, true) / 15.0;\r\n                    }\r\n                } else {\r\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 5\"].index + i-4, channelIndex, tone.instrumentIndex)) {\r\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i-4, channelIndex, tone.instrumentIndex, false) / 15.0;\r\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i-4, channelIndex, tone.instrumentIndex, true) / 15.0;\r\n                    }\r\n                }\r\n\r\n                const amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\r\n                const amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\r\n                const amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n                const amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n\r\n                let expressionStart: number = amplitudeMultStart;\r\n                let expressionEnd: number = amplitudeMultEnd;\r\n\r\n\r\n                if (i < carrierCount) {\r\n                    // carrier\r\n                    let pitchExpressionStart: number;\r\n                    if (tone.prevPitchExpressions[i] != null) {\r\n                        pitchExpressionStart = tone.prevPitchExpressions[i]!;\r\n                    } else {\r\n                        pitchExpressionStart = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);\r\n                    }\r\n                    const pitchExpressionEnd: number = Math.pow(2.0, -(pitchEnd - expressionReferencePitch) / pitchDamping);\r\n                    tone.prevPitchExpressions[i] = pitchExpressionEnd;\r\n                    expressionStart *= pitchExpressionStart;\r\n                    expressionEnd *= pitchExpressionEnd;\r\n\r\n                    totalCarrierExpression += amplitudeCurveEnd;\r\n                } else {\r\n                    // modulator\r\n                    expressionStart *= Config.sineWaveLength * 1.5;\r\n                    expressionEnd *= Config.sineWaveLength * 1.5;\r\n\r\n                    sineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\r\n                }\r\n\r\n                expressionStart *= envelopeStarts[EnvelopeComputeIndex.operatorAmplitude0 + i];\r\n                expressionEnd *= envelopeEnds[EnvelopeComputeIndex.operatorAmplitude0 + i];\r\n\r\n                // Check for mod-related volume delta\r\n                // @jummbus - This amplification is also applied to modulator FM operators which distorts the sound.\r\n                // The fix is to apply this only to carriers, but as this is a legacy bug and it can cause some interesting sounds, it's left in.\r\n                // You can use the mix volume modulator instead to avoid this effect.\r\n\r\n                if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n                    const startVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\r\n                    const endVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true);\r\n                    expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\r\n                    expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\r\n                }\r\n\r\n                tone.operatorExpressions[i] = expressionStart;\r\n                tone.operatorExpressionDeltas[i] = (expressionEnd - expressionStart) / roundedSamplesPerTick;\r\n\r\n            }\r\n\r\n            sineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;\r\n            sineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);\r\n            sineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;\r\n            const expressionStart: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionStart * chordExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume];\r\n            const expressionEnd: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionEnd * chordExpressionEnd * envelopeEnds[EnvelopeComputeIndex.noteVolume];\r\n            tone.expression = expressionStart;\r\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\r\n\r\n\r\n            let useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\r\n            let useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\r\n            if (this.isModActive(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex)) {\r\n                useFeedbackAmplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, false) / 15.0;\r\n                useFeedbackAmplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, true) / 15.0;\r\n            }\r\n\r\n            let feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\r\n            const feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\r\n\r\n            let feedbackStart: number = feedbackAmplitudeStart * envelopeStarts[EnvelopeComputeIndex.feedbackAmplitude];\r\n            let feedbackEnd: number = feedbackAmplitudeEnd * envelopeEnds[EnvelopeComputeIndex.feedbackAmplitude];\r\n            tone.feedbackMult = feedbackStart;\r\n            tone.feedbackDelta = (feedbackEnd - feedbackStart) / roundedSamplesPerTick;\r\n\r\n\r\n        } else {\r\n            const freqEndRatio: number = Math.pow(2.0, (intervalEnd - intervalStart) * intervalScale / 12.0);\r\n\t\t\tconst basePhaseDeltaScale: number = Math.pow(freqEndRatio, 1.0 / roundedSamplesPerTick);\r\n\r\n\r\n            let pitch: number = tone.pitches[0];\r\n            if (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval)) {\r\n                const arpeggio: number = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\r\n                if (chord.customInterval) {\r\n                    const intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n                    specialIntervalMult = Math.pow(2.0, intervalOffset / 12.0);\r\n                    tone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);\r\n                } else {\r\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\r\n                }\r\n            }\r\n\r\n            const startPitch: number = basePitch + (pitch + intervalStart) * intervalScale;\r\n            const endPitch: number = basePitch + (pitch + intervalEnd) * intervalScale;\r\n            let pitchExpressionStart: number;\r\n            // TODO: use the second element of prevPitchExpressions for the unison voice, compute a separate expression delta for it.\r\n            if (tone.prevPitchExpressions[0] != null) {\r\n                pitchExpressionStart = tone.prevPitchExpressions[0]!;\r\n            } else {\r\n                pitchExpressionStart = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);\r\n            }\r\n            const pitchExpressionEnd: number = Math.pow(2.0, -(endPitch - expressionReferencePitch) / pitchDamping);\r\n            tone.prevPitchExpressions[0] = pitchExpressionEnd;\r\n            let settingsExpressionMult: number = baseExpression * noteFilterExpression;\r\n\r\n            if (instrument.type == InstrumentType.noise) {\r\n                settingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;\r\n            }\r\n            if (instrument.type == InstrumentType.chip) {\r\n                settingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;\r\n            }\r\n            if (instrument.type == InstrumentType.pwm) {\r\n                const basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\r\n\r\n                // Check for PWM mods to this instrument\r\n                let pulseWidthModStart: number = basePulseWidth;\r\n                let pulseWidthModEnd: number = basePulseWidth;\r\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\r\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\r\n                }\r\n\r\n                const pulseWidthStart: number = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\r\n                const pulseWidthEnd: number = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\r\n                tone.pulseWidth = pulseWidthStart;\r\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;\r\n\r\n                //decimal offset mods\r\n                let decimalOffsetModStart: number = instrument.decimalOffset;\r\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\r\n                }\r\n \r\n                const decimalOffsetStart: number = decimalOffsetModStart * envelopeStarts[EnvelopeComputeIndex.decimalOffset];\r\n                tone.decimalOffset = decimalOffsetStart;\r\n                \r\n                tone.pulseWidth -= (tone.decimalOffset) / 10000;\r\n            }\r\n            if (instrument.type == InstrumentType.pickedString) {\r\n                // Check for sustain mods\r\n                let useSustainStart: number = instrument.stringSustain;\r\n                let useSustainEnd: number = instrument.stringSustain;\r\n                if (this.isModActive(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    useSustainStart = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, false);\r\n                    useSustainEnd = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, true);\r\n                }\r\n\r\n                tone.stringSustainStart = useSustainStart;\r\n                tone.stringSustainEnd = useSustainEnd;\r\n\r\n                // Increase expression to compensate for string decay.\r\n                settingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - useSustainStart / (Config.stringSustainRange - 1)));\r\n\r\n            }\r\n\r\n            const startFreq: number = Instrument.frequencyFromPitch(startPitch);\r\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString || instrument.type == InstrumentType.spectrum || instrument.type == InstrumentType.pwm || instrument.type == InstrumentType.noise) {\r\n                // These instruments have two waves at different frequencies for the unison feature.\r\n                //const unison: Unison = Config.unisons[instrument.unison];\r\n                const unisonVoices: number = instrument.unisonVoices;\r\n                const unisonSpread: number = instrument.unisonSpread;\r\n                const unisonOffset: number = instrument.unisonOffset;\r\n                const unisonExpression: number = instrument.unisonExpression;\r\n                //const unisonSign: number = Config.unisons[instrument.unisonSign];\r\n                //const unison: Unison = [voices:, ];\r\n                const voiceCountExpression: number = (instrument.type == InstrumentType.pickedString) ? 1 : unisonVoices / 2.0;\r\n                settingsExpressionMult *= unisonExpression * voiceCountExpression;\r\n                const unisonEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.unison];\r\n                const unisonEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.unison];\r\n                const unisonAStart: number = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeStart / 12.0);\r\n                const unisonAEnd: number = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeEnd / 12.0);\r\n                const unisonBStart: number = Math.pow(2.0, (unisonOffset - unisonSpread) * unisonEnvelopeStart / 12.0) * specialIntervalMult;\r\n                const unisonBEnd: number = Math.pow(2.0, (unisonOffset- unisonSpread) * unisonEnvelopeEnd / 12.0) * specialIntervalMult;\r\n                tone.phaseDeltas[0] = startFreq * sampleTime * unisonAStart;\r\n                tone.phaseDeltas[1] = startFreq * sampleTime * unisonBStart;\r\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonAEnd / unisonAStart, 1.0 / roundedSamplesPerTick);\r\n                tone.phaseDeltaScales[1] = basePhaseDeltaScale * Math.pow(unisonBEnd / unisonBStart, 1.0 / roundedSamplesPerTick);\r\n            } else {\r\n                tone.phaseDeltas[0] = startFreq * sampleTime;\r\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale;\r\n            }\r\n\r\n             // TODO: make expressionStart and expressionEnd variables earlier and modify those\r\n\t\t\t// instead of these supersawExpression variables.\r\n\t\t\tlet supersawExpressionStart: number = 1.0;\r\n\t\t\tlet supersawExpressionEnd: number = 1.0;\r\n\t\t\tif (instrument.type == InstrumentType.supersaw) {\r\n\t\t\t\tconst minFirstVoiceAmplitude: number = 1.0 / Math.sqrt(Config.supersawVoiceCount);\r\n\r\n                // Dynamism mods\r\n                let useDynamismStart: number = instrument.supersawDynamism / Config.supersawDynamismMax;\r\n                let useDynamismEnd: number = instrument.supersawDynamism / Config.supersawDynamismMax;\r\n                if (this.isModActive(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    useDynamismStart = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawDynamismMax;\r\n                    useDynamismEnd = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawDynamismMax;\r\n                }\r\n\r\n\t\t\t\tconst curvedDynamismStart: number = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismStart * envelopeStarts[EnvelopeComputeIndex.supersawDynamism]), 0.2);\r\n\t\t\t\tconst curvedDynamismEnd:   number = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismEnd * envelopeEnds[  EnvelopeComputeIndex.supersawDynamism]), 0.2);\r\n\t\t\t\tconst firstVoiceAmplitudeStart: number = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismStart);\r\n\t\t\t\tconst firstVoiceAmplitudeEnd:   number = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismEnd);\r\n\r\n\t\t\t\tconst dynamismStart: number = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeStart, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\r\n\t\t\t\tconst dynamismEnd:   number = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeEnd, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\r\n\t\t\t\ttone.supersawDynamism = dynamismStart;\r\n\t\t\t\ttone.supersawDynamismDelta = (dynamismEnd - dynamismStart) / roundedSamplesPerTick;\r\n\r\n\t\t\t\tconst initializeSupersaw: boolean = (tone.supersawDelayIndex == -1);\r\n\t\t\t\tif (initializeSupersaw) {\r\n\t\t\t\t\t// Goal: generate sawtooth phases such that the combined initial amplitude\r\n\t\t\t\t\t// cancel out to minimize pop. Algorithm: generate sorted phases, iterate over\r\n\t\t\t\t\t// their sawtooth drop points to find a combined zero crossing, then offset the\r\n\t\t\t\t\t// phases so they start there.\r\n\r\n\t\t\t\t\t// Generate random phases in ascending order by adding positive randomly\r\n\t\t\t\t\t// sized gaps between adjacent phases. For a proper distribution of random\r\n\t\t\t\t\t// events, the gaps sizes should be an \"exponential distribution\", which is\r\n\t\t\t\t\t// just: -Math.log(Math.random()). At the end, normalize the phases to a 0-1\r\n\t\t\t\t\t// range by dividing by the final value of the accumulator.\r\n\t\t\t\t\tlet accumulator: number = 0.0;\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\r\n\t\t\t\t\t\ttone.phases[i] = accumulator;\r\n\t\t\t\t\t\taccumulator += -Math.log(Math.random());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst amplitudeSum: number = 1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart;\r\n\t\t\t\t\tconst slope: number = amplitudeSum;\r\n\r\n\t\t\t\t\t// Find the initial amplitude of the sum of sawtooths with the normalized\r\n\t\t\t\t\t// set of phases.\r\n\t\t\t\t\tlet sample: number = 0.0;\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\r\n\t\t\t\t\t\tconst amplitude: number = (i == 0) ? 1.0 : dynamismStart;\r\n\t\t\t\t\t\tconst normalizedPhase: number = tone.phases[i] / accumulator;\r\n\t\t\t\t\t\ttone.phases[i] = normalizedPhase;\r\n\t\t\t\t\t\tsample += (normalizedPhase - 0.5) * amplitude;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Find the phase of the zero crossing of the sum of the sawtooths. You can\r\n\t\t\t\t\t// use a constant slope and the distance between sawtooth drops to determine if\r\n\t\t\t\t\t// the zero crossing occurs between them. Note that a small phase means that\r\n\t\t\t\t\t// the corresponding drop for that wave is far away, and a big phase means the\r\n\t\t\t\t\t// drop is nearby, so to iterate forward through the drops we iterate backward\r\n\t\t\t\t\t// through the phases.\r\n\t\t\t\t\tlet zeroCrossingPhase: number = 1.0;\r\n\t\t\t\t\tlet prevDrop: number = 0.0;\r\n\t\t\t\t\tfor (let i: number = Config.supersawVoiceCount - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tconst nextDrop: number = 1.0 - tone.phases[i];\r\n\t\t\t\t\t\tconst phaseDelta: number = nextDrop - prevDrop;\r\n\t\t\t\t\t\tif (sample < 0.0) {\r\n\t\t\t\t\t\t\tconst distanceToZeroCrossing: number = -sample / slope;\r\n\t\t\t\t\t\t\tif (distanceToZeroCrossing < phaseDelta) {\r\n\t\t\t\t\t\t\t\tzeroCrossingPhase = prevDrop + distanceToZeroCrossing;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst amplitude: number = (i == 0) ? 1.0 : dynamismStart;\r\n\t\t\t\t\t\tsample += phaseDelta * slope - amplitude;\r\n\t\t\t\t\t\tprevDrop = nextDrop;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\r\n\t\t\t\t\t\ttone.phases[i] += zeroCrossingPhase;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Randomize the (initially sorted) order of the phases (aside from the\r\n\t\t\t\t\t// first one) so that they don't correlate to the detunes that are also\r\n\t\t\t\t\t// based on index.\r\n\t\t\t\t\tfor (let i: number = 1; i < Config.supersawVoiceCount - 1; i++) {\r\n\t\t\t\t\t\tconst swappedIndex: number = i + Math.floor(Math.random() * (Config.supersawVoiceCount - i));\r\n\t\t\t\t\t\tconst temp: number = tone.phases[i];\r\n\t\t\t\t\t\ttone.phases[i] = tone.phases[swappedIndex];\r\n\t\t\t\t\t\ttone.phases[swappedIndex] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst baseSpreadSlider: number = instrument.supersawSpread / Config.supersawSpreadMax;\r\n\t\t\t\t// Spread mods\r\n\t\t\t\tlet useSpreadStart: number = baseSpreadSlider;\r\n\t\t\t\tlet useSpreadEnd:   number = baseSpreadSlider;\r\n                if (this.isModActive(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    useSpreadStart = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawSpreadMax;\r\n                    useSpreadEnd = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawSpreadMax;\r\n                }\r\n\r\n\t\t\t\tconst spreadSliderStart: number = useSpreadStart * envelopeStarts[EnvelopeComputeIndex.supersawSpread];\r\n\t\t\t\tconst spreadSliderEnd:   number = useSpreadEnd * envelopeEnds[  EnvelopeComputeIndex.supersawSpread];\r\n\t\t\t\t// Just use the average detune for the current tick in the below loop.\r\n\t\t\t\tconst averageSpreadSlider: number = (spreadSliderStart + spreadSliderEnd) * 0.5;\r\n\t\t\t\tconst curvedSpread: number = Math.pow(1.0 - Math.sqrt(Math.max(0.0, 1.0 - averageSpreadSlider)), 1.75);\r\n\t\t\t\tfor (let i = 0; i < Config.supersawVoiceCount; i++) {\r\n\t\t\t\t\t// Spread out the detunes around the center;\r\n\t\t\t\t\tconst offset: number = (i == 0) ? 0.0 : Math.pow((((i + 1) >> 1) - 0.5 + 0.025 * ((i & 2) - 1)) / (Config.supersawVoiceCount >> 1), 1.1) * ((i & 1) * 2 - 1);\r\n\t\t\t\t\ttone.supersawUnisonDetunes[i] = Math.pow(2.0, curvedSpread * offset / 12.0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst baseShape: number = instrument.supersawShape / Config.supersawShapeMax;\r\n\t\t\t\t// Saw shape mods\r\n\t\t\t\tlet useShapeStart: number = baseShape * envelopeStarts[EnvelopeComputeIndex.supersawShape];\r\n\t\t\t\tlet useShapeEnd:   number = baseShape * envelopeEnds[  EnvelopeComputeIndex.supersawShape];\r\n                if (this.isModActive(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    useShapeStart = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawShapeMax;\r\n                    useShapeEnd = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawShapeMax;\r\n                }\r\n\r\n\t\t\t\tconst shapeStart: number = useShapeStart * envelopeStarts[EnvelopeComputeIndex.supersawShape];\r\n\t\t\t\tconst shapeEnd:   number = useShapeEnd * envelopeEnds[EnvelopeComputeIndex.supersawShape];\r\n\t\t\t\ttone.supersawShape = shapeStart;\r\n\t\t\t\ttone.supersawShapeDelta = (shapeEnd - shapeStart) / roundedSamplesPerTick;\r\n\r\n                //decimal offset mods\r\n                let decimalOffsetModStart: number = instrument.decimalOffset;\r\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\r\n                }\r\n \r\n                const decimalOffsetStart: number = decimalOffsetModStart * envelopeStarts[EnvelopeComputeIndex.decimalOffset];\r\n                // ...is including tone.decimalOffset still necessary?\r\n                tone.decimalOffset = decimalOffsetStart;\r\n\r\n                const basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\r\n\r\n                // Check for PWM mods to this instrument\r\n                let pulseWidthModStart: number = basePulseWidth;\r\n                let pulseWidthModEnd: number = basePulseWidth;\r\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\r\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\r\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\r\n                }\r\n\r\n                let pulseWidthStart: number = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\r\n                let pulseWidthEnd: number = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\r\n                pulseWidthStart -= decimalOffsetStart / 10000;\r\n                pulseWidthEnd -= decimalOffsetStart / 10000;\r\n\t\t\t\tconst phaseDeltaStart: number = (tone.supersawPrevPhaseDelta != null) ? tone.supersawPrevPhaseDelta : startFreq * sampleTime;\r\n\t\t\t\tconst phaseDeltaEnd: number = startFreq * sampleTime * freqEndRatio;\r\n\t\t\t\ttone.supersawPrevPhaseDelta = phaseDeltaEnd;\r\n\t\t\t\tconst delayLengthStart = pulseWidthStart / phaseDeltaStart;\r\n\t\t\t\tconst delayLengthEnd = pulseWidthEnd / phaseDeltaEnd;\r\n\t\t\t\ttone.supersawDelayLength = delayLengthStart;\r\n\t\t\t\ttone.supersawDelayLengthDelta = (delayLengthEnd - delayLengthStart) / roundedSamplesPerTick;\r\n\t\t\t\tconst minBufferLength: number = Math.ceil(Math.max(delayLengthStart, delayLengthEnd)) + 2;\r\n\r\n\t\t\t\tif (tone.supersawDelayLine == null || tone.supersawDelayLine.length <= minBufferLength) {\r\n\t\t\t\t\t// The delay line buffer will get reused for other tones so might as well\r\n\t\t\t\t\t// start off with a buffer size that is big enough for most notes.\r\n\t\t\t\t\tconst likelyMaximumLength: number = Math.ceil(0.5 * this.samplesPerSecond / Instrument.frequencyFromPitch(24));\r\n\t\t\t\t\tconst newDelayLine: Float32Array = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\r\n\t\t\t\t\tif (!initializeSupersaw && tone.supersawDelayLine != null) {\r\n\t\t\t\t\t\t// If the tone has already started but the buffer needs to be reallocated,\r\n\t\t\t\t\t\t// transfer the old data to the new buffer.\r\n\t\t\t\t\t\tconst oldDelayBufferMask: number = (tone.supersawDelayLine.length - 1) >> 0;\r\n\t\t\t\t\t\tconst startCopyingFromIndex: number = tone.supersawDelayIndex;\r\n\t\t\t\t\t\tfor (let i: number = 0; i < tone.supersawDelayLine.length; i++) {\r\n\t\t\t\t\t\t\tnewDelayLine[i] = tone.supersawDelayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttone.supersawDelayLine = newDelayLine;\r\n\t\t\t\t\ttone.supersawDelayIndex = tone.supersawDelayLine.length;\r\n\t\t\t\t} else if (initializeSupersaw) {\r\n\t\t\t\t\ttone.supersawDelayLine.fill(0.0);\r\n\t\t\t\t\ttone.supersawDelayIndex = tone.supersawDelayLine.length;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst pulseExpressionRatio: number = Config.pwmBaseExpression / Config.supersawBaseExpression;\r\n\t\t\t\tsupersawExpressionStart *= (1.0 + (pulseExpressionRatio - 1.0) * shapeStart) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart * dynamismStart);\r\n\t\t\t\tsupersawExpressionEnd *= (1.0 + (pulseExpressionRatio - 1.0) * shapeEnd) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismEnd * dynamismEnd);\r\n\t\t\t}\r\n\r\n\t\t\tlet expressionStart: number = settingsExpressionMult * fadeExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume] * supersawExpressionStart;\r\n\t\t\tlet expressionEnd:   number = settingsExpressionMult * fadeExpressionEnd   * chordExpressionEnd   * pitchExpressionEnd   * envelopeEnds[  EnvelopeComputeIndex.noteVolume] * supersawExpressionEnd;\r\n\r\n            // Check for mod-related volume delta\r\n            if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\r\n                // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n                const startVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\r\n                const endVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true)\r\n                expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\r\n                expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\r\n            }\r\n\r\n            tone.expression = expressionStart;\r\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\r\n\r\n\r\n            if (instrument.type == InstrumentType.pickedString) {\r\n                let stringDecayStart: number;\r\n                if (tone.prevStringDecay != null) {\r\n                    stringDecayStart = tone.prevStringDecay;\r\n                } else {\r\n                    const sustainEnvelopeStart: number = tone.envelopeComputer.envelopeStarts[EnvelopeComputeIndex.stringSustain];\r\n                    stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));\r\n                }\r\n                const sustainEnvelopeEnd: number = tone.envelopeComputer.envelopeEnds[EnvelopeComputeIndex.stringSustain];\r\n                let stringDecayEnd: number = 1.0 - Math.min(1.0, sustainEnvelopeEnd * tone.stringSustainEnd / (Config.stringSustainRange - 1));\r\n                tone.prevStringDecay = stringDecayEnd;\r\n\r\n                //const unison: Unison = Config.unisons[instrument.unison];\r\n                const unisonVoices: number = instrument.unisonVoices;\r\n                for (let i: number = tone.pickedStrings.length; i < unisonVoices; i++) {\r\n                    tone.pickedStrings[i] = new PickedString();\r\n                }\r\n\r\n                if (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\r\n                    for (const pickedString of tone.pickedStrings) {\r\n                        // Force the picked string to retrigger the attack impulse at the start of the note.\r\n                        pickedString.delayIndex = -1;\r\n                    }\r\n                }\r\n\r\n                for (let i: number = 0; i < unisonVoices; i++) {\r\n                    tone.pickedStrings[i].update(this, instrumentState, tone, i, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, instrument.stringSustainType);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\r\n        let effect: number = 0.0;\r\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\r\n            effect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);\r\n        }\r\n        return effect;\r\n    }\r\n\r\n\r\n    public static getInstrumentSynthFunction(instrument: Instrument): Function {\r\n        if (instrument.type == InstrumentType.fm) {\r\n            const fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\r\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\r\n                const synthSource: string[] = [];\r\n\r\n                for (const line of Synth.fmSourceTemplate) {\r\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n                        const outputs: string[] = [];\r\n                        for (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\r\n                            outputs.push(\"operator\" + j + \"Scaled\");\r\n                        }\r\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\r\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n                        for (let j: number = Config.operatorCount - 1; j >= 0; j--) {\r\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\r\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\r\n                                    let modulators = \"\";\r\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\r\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n                                    }\r\n\r\n                                    const feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\r\n                                    if (feedbackIndices.length > 0) {\r\n                                        modulators += \" + feedbackMult * (\";\r\n                                        const feedbacks: string[] = [];\r\n                                        for (const modulatorNumber of feedbackIndices) {\r\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\r\n                                        }\r\n                                        modulators += feedbacks.join(\" + \") + \")\";\r\n                                    }\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\r\n                                } else {\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (line.indexOf(\"#\") != -1) {\r\n                        for (let j: number = 0; j < Config.operatorCount; j++) {\r\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\r\n                        }\r\n                    } else {\r\n                        synthSource.push(line);\r\n                    }\r\n                }\r\n\r\n                //console.log(synthSource.join(\"\\n\"));\r\n\r\n                const wrappedFmSynth: string = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\r\n\r\n\t\t\t\tSynth.fmSynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFmSynth)(Config, Synth);\r\n\r\n            }\r\n            return Synth.fmSynthFunctionCache[fingerprint];\r\n        } else if (instrument.type == InstrumentType.chip) {\r\n\t\t                 // advloop addition\r\n                if (instrument.isUsingAdvancedLoopControls) {\r\n                    return Synth.loopableChipSynth;\r\n                }\r\n                // advloop addition\r\n            return Synth.chipSynth;\r\n        } else if (instrument.type == InstrumentType.customChipWave) {\r\n            return Synth.chipSynth;\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            return Synth.harmonicsSynth;\r\n        } else if (instrument.type == InstrumentType.pwm) {\r\n            return Synth.pulseWidthSynth;\r\n        } else if (instrument.type == InstrumentType.supersaw) {\r\n\t\t\treturn Synth.supersawSynth;\r\n        } else if (instrument.type == InstrumentType.pickedString) {\r\n            return Synth.pickedStringSynth;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            return Synth.noiseSynth;\r\n        } else if (instrument.type == InstrumentType.spectrum) {\r\n            return Synth.spectrumSynth;\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            return Synth.drumsetSynth;\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            return Synth.modSynth;\r\n        } else if (instrument.type == InstrumentType.fm6op) {\r\n            const fingerprint: string = instrument.customAlgorithm.name + \"_\" + instrument.customFeedbackType.name;\r\n            if (Synth.fm6SynthFunctionCache[fingerprint] == undefined) {\r\n                const synthSource: string[] = [];\r\n\r\n                for (const line of Synth.fmSourceTemplate) {\r\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n                        const outputs: string[] = [];\r\n                        for (let j: number = 0; j < instrument.customAlgorithm.carrierCount; j++) {\r\n                            outputs.push(\"operator\" + j + \"Scaled\");\r\n                        }\r\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\r\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n                        for (let j: number = Config.operatorCount+2 - 1; j >= 0; j--) {\r\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\r\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\r\n                                    let modulators = \"\";\r\n                                    for (const modulatorNumber of instrument.customAlgorithm.modulatedBy[j]) {\r\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n                                    }\r\n\r\n                                    const feedbackIndices: ReadonlyArray<number> = instrument.customFeedbackType.indices[j];\r\n                                    if (feedbackIndices.length > 0) {\r\n                                        modulators += \" + feedbackMult * (\";\r\n                                        const feedbacks: string[] = [];\r\n                                        for (const modulatorNumber of feedbackIndices) {\r\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\r\n                                        }\r\n                                        modulators += feedbacks.join(\" + \") + \")\";\r\n                                    }\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\r\n                                } else {\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (line.indexOf(\"#\") != -1) {\r\n                        for (let j = 0; j < Config.operatorCount+2; j++) {\r\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\r\n                        }\r\n                    } else {\r\n                        synthSource.push(line);\r\n                    }\r\n                }\r\n\r\n                //console.log(synthSource.join(\"\\n\"));\r\n\r\n                const wrappedFm6Synth: string = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\r\n\r\n\t\t\t\tSynth.fm6SynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFm6Synth)(Config, Synth);\r\n            }\r\n            return Synth.fm6SynthFunctionCache[fingerprint];\r\n        }else{\r\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\r\n        }\r\n    }\r\n// advloop addition\r\n        static wrap(x: number, b: number): number {\r\n            return (x % b + b) % b;\r\n        }\r\n        static loopableChipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\r\n            // @TODO:\r\n            // - Longer declicking? This is more difficult than I thought.\r\n            //   When determining this automatically is difficult (or the input\r\n            //   samples are expected to vary too much), this is left up to the\r\n            //   user.\r\n            const aliases: boolean = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\r\n            // const aliases = false;\r\n            const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n            const wave: Float32Array = instrumentState.wave!;\r\n            const volumeScale: number = instrumentState.volumeScale;\r\n            const waveLength: number = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\r\n            let chipWaveLoopEnd: number = Math.max(0, Math.min(waveLength, instrumentState.chipWaveLoopEnd));\r\n            let chipWaveLoopStart: number = Math.max(0, Math.min(chipWaveLoopEnd - 1, instrumentState.chipWaveLoopStart));\r\n\t\t\t// @TODO: This is where to set things up for the release loop mode.\r\n           // const ticksSinceReleased = tone.ticksSinceReleased;\r\n            // if (ticksSinceReleased > 0) {\r\n            //     chipWaveLoopStart = 0;\r\n            //     chipWaveLoopEnd = waveLength - 1;\r\n            // }\r\n            let chipWaveLoopLength: number = chipWaveLoopEnd - chipWaveLoopStart;\r\n\t\t\tif (chipWaveLoopLength < 2) {\r\n                chipWaveLoopStart = 0;\r\n                chipWaveLoopEnd = waveLength;\r\n                chipWaveLoopLength = waveLength;\r\n            }\r\n            const chipWaveLoopMode: number = instrumentState.chipWaveLoopMode;\r\n            const chipWavePlayBackwards: boolean = instrumentState.chipWavePlayBackwards;\r\n            const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n            if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval)\r\n                tone.phases[1] = tone.phases[0];\r\n            let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\r\n            let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\r\n            let directionA: number = tone.directions[0];\r\n            let directionB: number = tone.directions[1];\r\n            let chipWaveCompletionA: number = tone.chipWaveCompletions[0];\r\n            let chipWaveCompletionB: number = tone.chipWaveCompletions[1];\r\n            if (chipWaveLoopMode === 3 || chipWaveLoopMode === 2 || chipWaveLoopMode === 0) {\r\n                // If playing once or looping, we force the correct direction,\r\n                // since it shouldn't really change. This is mostly so that if\r\n                // the mode is changed midway through playback, it won't get\r\n                // stuck on the wrong direction.\r\n                if (!chipWavePlayBackwards) {\r\n                    directionA = 1;\r\n                    directionB = 1;\r\n                } else {\r\n                    directionA = -1;\r\n                    directionB = -1;\r\n                }\r\n            }\r\n            if (chipWaveLoopMode === 0 || chipWaveLoopMode === 1) {\r\n                // If looping or ping-ponging, we clear the completion status,\r\n                // as it's not relevant anymore. This is mostly so that if the\r\n                // mode is changed midway through playback, it won't get stuck\r\n                // on zero volume.\r\n                chipWaveCompletionA = 0;\r\n                chipWaveCompletionB = 0;\r\n            }\r\n            let lastWaveA: number = tone.chipWaveCompletionsLastWave[0];\r\n            let lastWaveB: number = tone.chipWaveCompletionsLastWave[1];\r\n            const chipWaveCompletionFadeLength: number = 1000;\r\n            const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\r\n            const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\r\n            let expression: number = +tone.expression;\r\n            const expressionDelta: number = +tone.expressionDelta;\r\n            let phaseA: number = Synth.wrap(tone.phases[0], 1) * waveLength;\r\n            let phaseB: number = Synth.wrap(tone.phases[1], 1) * waveLength;\r\n            let prevWaveIntegralA: number = 0;\r\n            let prevWaveIntegralB: number = 0;\r\n            if (!aliases) {\r\n                const phaseAInt = Math.floor(phaseA);\r\n                const phaseBInt = Math.floor(phaseB);\r\n                const indexA = Synth.wrap(phaseAInt, waveLength);\r\n               const indexB = Synth.wrap(phaseBInt, waveLength);\r\n                const phaseRatioA = phaseA - phaseAInt;\r\n                const phaseRatioB = phaseB - phaseBInt;\r\n                prevWaveIntegralA = +wave[indexA];\r\n                prevWaveIntegralB = +wave[indexB];\r\n                prevWaveIntegralA += (wave[Synth.wrap(indexA + 1, waveLength)] - prevWaveIntegralA) * phaseRatioA;\r\n                prevWaveIntegralB += (wave[Synth.wrap(indexB + 1, waveLength)] - prevWaveIntegralB) * phaseRatioB;\r\n           }\r\n            const filters = tone.noteFilters;\r\n            const filterCount: number = tone.noteFilterCount | 0;\r\n            let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n            let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n            const applyFilters: Function = Synth.applyFilters;\r\n            const stopIndex: number = bufferIndex + roundedSamplesPerTick;\r\n            let prevWaveA: number = tone.chipWavePrevWaves[0];\r\n            let prevWaveB: number = tone.chipWavePrevWaves[1];\r\n            for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n                if (chipWaveCompletionA > 0 && chipWaveCompletionA < chipWaveCompletionFadeLength) {\r\n                    chipWaveCompletionA++;\r\n                }\r\n                if (chipWaveCompletionB > 0 && chipWaveCompletionB < chipWaveCompletionFadeLength) {\r\n                    chipWaveCompletionB++;\r\n                }\r\n               let wrapped: number = 0;\r\n                phaseA += phaseDeltaA * directionA;\r\n                phaseB += phaseDeltaB * directionB;\r\n                if (chipWaveLoopMode === 2) {\r\n                    // once\r\n                    if (directionA === 1) {\r\n                        if (phaseA > waveLength) {\r\n                            if (chipWaveCompletionA <= 0) {\r\n                                lastWaveA = prevWaveA;\r\n                                chipWaveCompletionA++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionA === -1) {\r\n                        if (phaseA < 0) {\r\n                            if (chipWaveCompletionA <= 0) {\r\n                                lastWaveA = prevWaveA;\r\n                                chipWaveCompletionA++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n                    if (directionB === 1) {\r\n                        if (phaseB > waveLength) {\r\n                            if (chipWaveCompletionB <= 0) {\r\n                                lastWaveB = prevWaveB;\r\n                                chipWaveCompletionB++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionA === -1) {\r\n                        if (phaseB < 0) {\r\n                            if (chipWaveCompletionB <= 0) {\r\n                                lastWaveB = prevWaveB;\r\n                                chipWaveCompletionB++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n                } else if (chipWaveLoopMode === 3) {\r\n                    // loop once\r\n                    if (directionA === 1) {\r\n                        if (phaseA > chipWaveLoopEnd) {\r\n                            if (chipWaveCompletionA <= 0) {\r\n                                lastWaveA = prevWaveA;\r\n                                chipWaveCompletionA++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionA === -1) {\r\n                        if (phaseA < chipWaveLoopStart) {\r\n                            if (chipWaveCompletionA <= 0) {\r\n                                lastWaveA = prevWaveA;\r\n                                chipWaveCompletionA++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n                    if (directionB === 1) {\r\n                        if (phaseB > chipWaveLoopEnd) {\r\n                            if (chipWaveCompletionB <= 0) {\r\n                                lastWaveB = prevWaveB;\r\n                                chipWaveCompletionB++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionA === -1) {\r\n                        if (phaseB < chipWaveLoopStart) {\r\n                            if (chipWaveCompletionB <= 0) {\r\n                                lastWaveB = prevWaveB;\r\n                                chipWaveCompletionB++;\r\n                            }\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n                } else if (chipWaveLoopMode === 0) {\r\n                    // loop\r\n                    if (directionA === 1) {\r\n                        if (phaseA > chipWaveLoopEnd) {\r\n                            phaseA = chipWaveLoopStart + Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\r\n                            // phaseA = chipWaveLoopStart;\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionA === -1) {\r\n                        if (phaseA < chipWaveLoopStart) {\r\n                            phaseA = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\r\n                            // phaseA = chipWaveLoopEnd;\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n                    if (directionB === 1) {\r\n                        if (phaseB > chipWaveLoopEnd) {\r\n                            phaseB = chipWaveLoopStart + Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\r\n                            // phaseB = chipWaveLoopStart;\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionB === -1) {\r\n                        if (phaseB < chipWaveLoopStart) {\r\n                            phaseB = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\r\n                            // phaseB = chipWaveLoopEnd;\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n                } else if (chipWaveLoopMode === 1) {\r\n                    // ping-pong\r\n                    if (directionA === 1) {\r\n                        if (phaseA > chipWaveLoopEnd) {\r\n                            phaseA = chipWaveLoopEnd - Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\r\n                            // phaseA = chipWaveLoopEnd;\r\n                            directionA = -1;\r\n                           wrapped = 1;\r\n                        }\r\n                    } else if (directionA === -1) {\r\n                        if (phaseA < chipWaveLoopStart) {\r\n                            phaseA = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\r\n                            // phaseA = chipWaveLoopStart;\r\n                            directionA = 1;\r\n                           wrapped = 1;\r\n                        }\r\n                    }\r\n                    if (directionB === 1) {\r\n                        if (phaseB > chipWaveLoopEnd) {\r\n                            phaseB = chipWaveLoopEnd - Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\r\n                            // phaseB = chipWaveLoopEnd;\r\n                            directionB = -1;\r\n                            wrapped = 1;\r\n                        }\r\n                    } else if (directionB === -1) {\r\n                        if (phaseB < chipWaveLoopStart) {\r\n                            phaseB = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\r\n                            // phaseB = chipWaveLoopStart;\r\n                            directionB = 1;\r\n                            wrapped = 1;\r\n                        }\r\n                    }\r\n               }\r\n                let waveA = 0;\r\n                let waveB = 0;\r\n                let inputSample = 0;\r\n                if (aliases) {\r\n                    waveA = wave[Synth.wrap(Math.floor(phaseA), waveLength)];\r\n                    waveB = wave[Synth.wrap(Math.floor(phaseB), waveLength)];\r\n                    prevWaveA = waveA;\r\n                    prevWaveB = waveB;\r\n                    const completionFadeA: number = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\r\n                    const completionFadeB: number = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\r\n                    inputSample = 0;\r\n                    if (chipWaveCompletionA > 0) {\r\n                        inputSample += lastWaveA * completionFadeA;\r\n                    } else {\r\n                        inputSample += waveA;\r\n                    }\r\n                    if (chipWaveCompletionB > 0) {\r\n                        inputSample += lastWaveB * completionFadeB;\r\n                    } else {\r\n                        inputSample += waveB;\r\n                    }\r\n                }\r\n                else {\r\n                    const phaseAInt = Math.floor(phaseA);\r\n                    const phaseBInt = Math.floor(phaseB);\r\n                    const indexA = Synth.wrap(phaseAInt, waveLength);\r\n                    const indexB = Synth.wrap(phaseBInt, waveLength);\r\n                    let nextWaveIntegralA = wave[indexA];\r\n                    let nextWaveIntegralB = wave[indexB];\r\n                    const phaseRatioA = phaseA - phaseAInt;\r\n                    const phaseRatioB = phaseB - phaseBInt;\r\n                    nextWaveIntegralA += (wave[Synth.wrap(indexA + 1, waveLength)] - nextWaveIntegralA) * phaseRatioA;\r\n                    nextWaveIntegralB += (wave[Synth.wrap(indexB + 1, waveLength)] - nextWaveIntegralB) * phaseRatioB;\r\n                    if (!(chipWaveLoopMode === 0 && chipWaveLoopStart === 0 && chipWaveLoopEnd === waveLength) && wrapped !== 0) {\r\n                        let pwia = 0;\r\n                        let pwib = 0;\r\n                        const phaseA_ = Math.max(0, phaseA - phaseDeltaA * directionA);\r\n                        const phaseB_ = Math.max(0, phaseB - phaseDeltaB * directionB);\r\n                        const phaseAInt = Math.floor(phaseA_);\r\n                        const phaseBInt = Math.floor(phaseB_);\r\n                        const indexA = Synth.wrap(phaseAInt, waveLength);\r\n                        const indexB = Synth.wrap(phaseBInt, waveLength);\r\n                        pwia = wave[indexA];\r\n                        pwib = wave[indexB];\r\n                        pwia += (wave[Synth.wrap(indexA + 1, waveLength)] - pwia) * (phaseA_ - phaseAInt) * directionA;\r\n                        pwib += (wave[Synth.wrap(indexB + 1, waveLength)] - pwib) * (phaseB_ - phaseBInt) * directionB;\r\n                        prevWaveIntegralA = pwia;\r\n                        prevWaveIntegralB = pwib;\r\n\t\t\t\t   }\r\n                   if (chipWaveLoopMode === 1 && wrapped !== 0) {\r\n                       waveA = prevWaveA;\r\n                       waveB = prevWaveB;\r\n                   } else {\r\n                       waveA = (nextWaveIntegralA - prevWaveIntegralA) / (phaseDeltaA * directionA);\r\n                       waveB = (nextWaveIntegralB - prevWaveIntegralB) / (phaseDeltaB * directionB);\r\n                   }\r\n                   prevWaveA = waveA;\r\n                   prevWaveB = waveB;\r\n\t\t\t\t   prevWaveIntegralA = nextWaveIntegralA;\r\n\t\t\t\t   prevWaveIntegralB = nextWaveIntegralB;\r\n                    const completionFadeA = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\r\n                    const completionFadeB = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\r\n                    if (chipWaveCompletionA > 0) {\r\n                        inputSample += lastWaveA * completionFadeA;\r\n                    } else {\r\n                        inputSample += waveA;\r\n                    }\r\n                    if (chipWaveCompletionB > 0) {\r\n                        inputSample += lastWaveB * completionFadeB;\r\n                    } else {\r\n                        inputSample += waveB * unisonSign;\r\n                    }\r\n                }\r\n                const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n                initialFilterInput2 = initialFilterInput1;\r\n                initialFilterInput1 = inputSample * volumeScale;\r\n                phaseDeltaA *= phaseDeltaScaleA;\r\n                phaseDeltaB *= phaseDeltaScaleB;\r\n                const output = sample * expression;\r\n                expression += expressionDelta;\r\n                data[sampleIndex] += output;\r\n            }\r\n            tone.phases[0] = phaseA / waveLength;\r\n            tone.phases[1] = phaseB / waveLength;\r\n            tone.phaseDeltas[0] = phaseDeltaA / waveLength;\r\n            tone.phaseDeltas[1] = phaseDeltaB / waveLength;\r\n            tone.directions[0] = directionA;\r\n            tone.directions[1] = directionB;\r\n            tone.chipWaveCompletions[0] = chipWaveCompletionA;\r\n            tone.chipWaveCompletions[1] = chipWaveCompletionB;\r\n            tone.chipWavePrevWaves[0] = prevWaveA;\r\n            tone.chipWavePrevWaves[1] = prevWaveB;\r\n            tone.chipWaveCompletionsLastWave[0] = lastWaveA;\r\n            tone.chipWaveCompletionsLastWave[1] = lastWaveB;\r\n            tone.expression = expression;\r\n            synth.sanitizeFilters(filters);\r\n            tone.initialNoteFilterInput1 = initialFilterInput1;\r\n            tone.initialNoteFilterInput2 = initialFilterInput2;\r\n        }\r\n        // advloop addition\r\n    private static chipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const aliases: boolean = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        const wave: Float32Array = instrumentState.wave!;\r\n        const volumeScale = instrumentState.volumeScale;\r\n\r\n        const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\r\n\r\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\r\n        let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\r\n        let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\r\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\r\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n        let prevWaveIntegralA: number = 0;\r\n        let prevWaveIntegralB: number = 0;\r\n\r\n        if (!aliases) {\r\n            const phaseAInt: number = phaseA | 0;\r\n            const phaseBInt: number = phaseB | 0;\r\n            const indexA: number = phaseAInt % waveLength;\r\n            const indexB: number = phaseBInt % waveLength;\r\n            const phaseRatioA: number = phaseA - phaseAInt;\r\n            const phaseRatioB: number = phaseB - phaseBInt;\r\n            prevWaveIntegralA = +wave[indexA];\r\n            prevWaveIntegralB = +wave[indexB];\r\n            prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n            prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n        }\r\n\r\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\r\n            phaseA += phaseDeltaA;\r\n            phaseB += phaseDeltaB;\r\n\r\n            let waveA: number;\r\n            let waveB: number;\r\n            let inputSample: number;\r\n\r\n            if (aliases) {\r\n                waveA = wave[(0 | phaseA) % waveLength];\r\n                waveB = wave[(0 | phaseB) % waveLength];\r\n                inputSample = waveA + waveB;\r\n            } else {\r\n                const phaseAInt: number = phaseA | 0;\r\n                const phaseBInt: number = phaseB | 0;\r\n                const indexA: number = phaseAInt % waveLength;\r\n                const indexB: number = phaseBInt % waveLength;\r\n                let nextWaveIntegralA: number = wave[indexA];\r\n                let nextWaveIntegralB: number = wave[indexB];\r\n                const phaseRatioA: number = phaseA - phaseAInt;\r\n                const phaseRatioB: number = phaseB - phaseBInt;\r\n                nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n                nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n                waveA = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n                waveB = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n                prevWaveIntegralA = nextWaveIntegralA;\r\n                prevWaveIntegralB = nextWaveIntegralB;\r\n                inputSample = waveA + waveB * unisonSign;\r\n            }\r\n\r\n            const sample: number = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample * volumeScale;\r\n\r\n            phaseDeltaA *= phaseDeltaScaleA;\r\n            phaseDeltaB *= phaseDeltaScaleB;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phaseA / waveLength;\r\n        tone.phases[1] = phaseB / waveLength;\r\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\r\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\r\n        tone.expression = expression;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static harmonicsSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        const wave: Float32Array = instrumentState.wave!;\r\n        const waveLength: number = wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\r\n        let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\r\n        let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\r\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\r\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        const phaseAInt: number = phaseA | 0;\r\n        const phaseBInt: number = phaseB | 0;\r\n        const indexA: number = phaseAInt % waveLength;\r\n        const indexB: number = phaseBInt % waveLength;\r\n        const phaseRatioA: number = phaseA - phaseAInt;\r\n        const phaseRatioB: number = phaseB - phaseBInt;\r\n        let prevWaveIntegralA: number = +wave[indexA];\r\n        let prevWaveIntegralB: number = +wave[indexB];\r\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\r\n            phaseA += phaseDeltaA;\r\n            phaseB += phaseDeltaB;\r\n\r\n            const phaseAInt: number = phaseA | 0;\r\n            const phaseBInt: number = phaseB | 0;\r\n            const indexA: number = phaseAInt % waveLength;\r\n            const indexB: number = phaseBInt % waveLength;\r\n            let nextWaveIntegralA: number = wave[indexA];\r\n            let nextWaveIntegralB: number = wave[indexB];\r\n            const phaseRatioA: number = phaseA - phaseAInt;\r\n            const phaseRatioB: number = phaseB - phaseBInt;\r\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n            const waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n            const waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n            prevWaveIntegralA = nextWaveIntegralA;\r\n            prevWaveIntegralB = nextWaveIntegralB;\r\n\r\n            const inputSample: number = waveA + waveB * unisonSign;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phaseDeltaA *= phaseDeltaScaleA;\r\n            phaseDeltaB *= phaseDeltaScaleB;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phaseA / waveLength;\r\n        tone.phases[1] = phaseB / waveLength;\r\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\r\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\r\n        tone.expression = expression;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static pickedStringSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        // This algorithm is similar to the Karpluss-Strong algorithm in principle, but with an\r\n        // all-pass filter for dispersion and with more control over the impulse harmonics.\r\n        // The source code is processed as a string before being compiled, in order to\r\n        // handle the unison feature. If unison is disabled or set to none, then only one\r\n        // string voice is required, otherwise two string voices are required. We only want\r\n        // to compute the minimum possible number of string voices, so omit the code for\r\n        // processing extra ones if possible. Any line containing a \"#\" is duplicated for\r\n        // each required voice, replacing the \"#\" with the voice index.\r\n\r\n        const voiceCount: number = instrumentState.unisonVoices;\r\n        let pickedStringFunction: Function = Synth.pickedStringFunctionCache[voiceCount];\r\n        if (pickedStringFunction == undefined) {\r\n            let pickedStringSource: string = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\r\n\r\n\r\n            pickedStringSource += `\r\n\t\t\t\tconst Config = beepbox.Config;\r\n\t\t\t\tconst Synth = beepbox.Synth;\r\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\r\n\t\t\t\t\r\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\r\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\r\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\r\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\r\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\r\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\r\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\r\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\r\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\r\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\r\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\r\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\r\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\r\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\r\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\r\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\r\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\r\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\r\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\r\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\r\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\r\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\r\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\r\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\r\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\r\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\r\n\t\t\t\t\r\n\t\t\t\tlet expression = +tone.expression;\r\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\r\n\t\t\t\t\r\n\t\t\t\tconst filters = tone.noteFilters;\r\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\r\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n\t\t\t\tconst applyFilters = Synth.applyFilters;\r\n\t\t\t\t\r\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\r\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\r\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\r\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\r\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\r\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\r\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\r\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\r\n\t\t\t\t\t\r\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\r\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\r\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\r\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\r\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\r\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\r\n\t\t\t\t\t\r\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\r\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\r\n\t\t\t\t\tdelayIndex#++;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst inputSample = (`\r\n\r\n            const sampleList: string[] = [];\r\n            for (let voice: number = 0; voice < voiceCount; voice++) {\r\n                sampleList.push(\"fractionalDelaySample\" + voice + (voice == 1 ? \" * unisonSign\" : \"\"));\r\n            }\r\n\r\n            pickedStringSource += sampleList.join(\" + \");\r\n\r\n            pickedStringSource += `) * expression;\r\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\t\t\tinitialFilterInput1 = inputSample;\r\n\t\t\t\t\tdata[sampleIndex] += sample;\r\n\t\t\t\t\t\r\n\t\t\t\t\texpression += expressionDelta;\r\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\r\n\t\t\t\t\tallPassG# += allPassGDelta#;\r\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\r\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\r\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\r\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\r\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\r\n\t\t\t\tconst epsilon = (1.0e-24);\r\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\r\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\r\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\r\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\r\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\r\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\r\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\r\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\r\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\r\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\r\n\t\t\t\tpickedString#.allPassG = allPassG#;\r\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\r\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\r\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\r\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\r\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\r\n\t\t\t\t\r\n\t\t\t\ttone.expression = expression;\r\n\t\t\t\t\r\n\t\t\t\tsynth.sanitizeFilters(filters);\r\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\r\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\r\n\t\t\t}`\r\n\r\n            // Duplicate lines containing \"#\" for each voice and replace the \"#\" with the voice index.\r\n            pickedStringSource = pickedStringSource.replace(/^.*\\#.*$/mg, line => {\r\n                const lines = [];\r\n                for (let voice: number = 0; voice < voiceCount; voice++) {\r\n                    lines.push(line.replace(/\\#/g, String(voice)));\r\n                }\r\n                return lines.join(\"\\n\");\r\n            });\r\n\r\n            //console.log(pickedStringSource);\r\n            pickedStringFunction = new Function(\"Config\", \"Synth\", pickedStringSource)(Config, Synth);\r\n\t\t\tSynth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;\r\n        }\r\n\r\n        pickedStringFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\r\n    }\r\n\r\n    private static effectsSynth(synth: Synth, outputDataL: Float32Array, outputDataR: Float32Array, bufferIndex: number, runLength: number, instrumentState: InstrumentState): void {\r\n        // TODO: If automation is involved, don't assume sliders will stay at zero.\r\n        // @jummbus - ^ Correct, removed the non-zero checks as modulation can change them.\r\n\r\n        const usesDistortion: boolean = effectsIncludeDistortion(instrumentState.effects);\r\n        const usesBitcrusher: boolean = effectsIncludeBitcrusher(instrumentState.effects);\r\n        const usesEqFilter: boolean = instrumentState.eqFilterCount > 0;\r\n        const usesPanning: boolean = effectsIncludePanning(instrumentState.effects);\r\n        const usesChorus: boolean = effectsIncludeChorus(instrumentState.effects);\r\n        const usesEcho: boolean = effectsIncludeEcho(instrumentState.effects);\r\n        const usesReverb: boolean = effectsIncludeReverb(instrumentState.effects);\r\n        let signature: number = 0; if (usesDistortion) signature = signature | 1;\r\n        signature = signature << 1; if (usesBitcrusher) signature = signature | 1;\r\n        signature = signature << 1; if (usesEqFilter) signature = signature | 1;\r\n        signature = signature << 1; if (usesPanning) signature = signature | 1;\r\n        signature = signature << 1; if (usesChorus) signature = signature | 1;\r\n        signature = signature << 1; if (usesEcho) signature = signature | 1;\r\n        signature = signature << 1; if (usesReverb) signature = signature | 1;\r\n\r\n        let effectsFunction: Function = Synth.effectsFunctionCache[signature];\r\n        if (effectsFunction == undefined) {\r\n            let effectsSource: string = \"return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {\";\r\n\r\n            const usesDelays: boolean = usesChorus || usesReverb || usesEcho;\r\n\r\n            effectsSource += `\r\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\r\n\t\t\t\t\r\n\t\t\t\tlet mixVolume = +instrumentState.mixVolume;\r\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;`\r\n\r\n            if (usesDelays) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMult;\r\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;`\r\n            }\r\n\r\n            if (usesDistortion) {\r\n                // Distortion can sometimes create noticeable aliasing.\r\n                // It seems the established industry best practice for distortion antialiasing\r\n                // is to upsample the inputs (\"zero stuffing\" followed by a brick wall lowpass\r\n                // at the original nyquist frequency), perform the distortion, then downsample\r\n                // (the lowpass again followed by dropping in-between samples). This is\r\n                // \"mathematically correct\" in that it preserves only the intended frequencies,\r\n                // but it has several unfortunate tradeoffs depending on the choice of filter,\r\n                // introducing latency and/or time smearing, since no true brick wall filter\r\n                // exists. For the time being, I've opted to instead generate in-between input\r\n                // samples using fractional delay all-pass filters, and after distorting them,\r\n                // I \"downsample\" these with a simple weighted sum.\r\n\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\r\n\t\t\t\tlet distortion = instrumentState.distortion;\r\n\t\t\t\tconst distortionDelta = instrumentState.distortionDelta;\r\n\t\t\t\tlet distortionDrive = instrumentState.distortionDrive;\r\n\t\t\t\tconst distortionDriveDelta = instrumentState.distortionDriveDelta;\r\n\t\t\t\tconst distortionFractionalResolution = 4.0;\r\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\r\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\r\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\r\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\r\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\r\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\r\n\t\t\t\t\r\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\r\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\r\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\r\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\r\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;`\r\n            }\r\n\r\n            if (usesBitcrusher) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\r\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\r\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\r\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\r\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\r\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\r\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\r\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\r\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;`\r\n            }\r\n\r\n            if (usesEqFilter) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet filters = instrumentState.eqFilters;\r\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\r\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\r\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\r\n\t\t\t\tconst applyFilters = Synth.applyFilters;`\r\n            }\r\n\r\n            // The eq filter volume is also used to fade out the instrument state, so always include it.\r\n            effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolume;\r\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;`\r\n\r\n            if (usesPanning) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\r\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\r\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\r\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeL;\r\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeR;\r\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\r\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\r\n\t\t\t\tlet   panningOffsetL      = +instrumentState.panningOffsetL;\r\n\t\t\t\tlet   panningOffsetR      = +instrumentState.panningOffsetR;\r\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\r\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;`\r\n            }\r\n\r\n            if (usesChorus) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\r\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\r\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\r\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\r\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\r\n\t\t\t\t\r\n\t\t\t\tlet chorusVoiceMult = +instrumentState.chorusVoiceMult;\r\n\t\t\t\tconst chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;\r\n\t\t\t\tlet chorusCombinedMult = +instrumentState.chorusCombinedMult;\r\n\t\t\t\tconst chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\r\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\r\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\r\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\r\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\r\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\r\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\r\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\r\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\r\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\r\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\r\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\r\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\r\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\r\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\r\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\r\n\t\t\t\tchorusPhase += chorusAngle * runLength;\r\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\r\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\r\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\r\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\r\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\r\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\r\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\r\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\r\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\r\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\r\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\r\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;`\r\n            }\r\n\r\n            if (usesEcho) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet echoMult = +instrumentState.echoMult;\r\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\r\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\r\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\r\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\r\n\t\t\t\t\r\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\r\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\r\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\r\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\r\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\r\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\r\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\r\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\r\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\r\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\r\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;`\r\n            }\r\n\r\n            if (usesReverb) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\r\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\r\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\r\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\r\n\t\t\t\t\r\n\t\t\t\tlet reverb = +instrumentState.reverbMult;\r\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\r\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\r\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\r\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\r\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\r\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\r\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\r\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\r\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\r\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\r\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;`\r\n            }\r\n\r\n            effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\r\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\t\t\t\t\tlet sample = tempMonoInstrumentSampleBuffer[sampleIndex];\r\n\t\t\t\t\ttempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;`\r\n\r\n            if (usesDistortion) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\r\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\r\n\t\t\t\t\tsample = distortionNextOutput;\r\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\r\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\r\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\r\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\r\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\r\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\r\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\r\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\r\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\r\n\t\t\t\t\tsample *= distortionOversampleCompensation;\r\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\r\n\t\t\t\t\tdistortion += distortionDelta;\r\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;`\r\n            }\r\n\r\n            if (usesBitcrusher) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\r\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\r\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\r\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\r\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\r\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\r\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\r\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\r\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\r\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\r\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\r\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\r\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\r\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;`\r\n            }\r\n\r\n            if (usesEqFilter) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst inputSample = sample;\r\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\t\t\tinitialFilterInput1 = inputSample;`\r\n            }\r\n\r\n            // The eq filter volume is also used to fade out the instrument state, so always include it.\r\n            effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tsample *= eqFilterVolume;\r\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;`\r\n\r\n            if (usesPanning) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\r\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\r\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\r\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\r\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\r\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\r\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\r\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\r\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\r\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\r\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\r\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\r\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\r\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\r\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\r\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;`\r\n            } else {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet sampleL = sample;\r\n\t\t\t\t\tlet sampleR = sample;`\r\n            }\r\n\r\n            if (usesChorus) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\r\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\r\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\r\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\r\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\r\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\r\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\r\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\r\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\r\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\r\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\r\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\r\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\r\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\r\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\r\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\r\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\r\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\r\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\r\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\r\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\r\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\r\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\r\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\r\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;`\r\n            }\r\n\r\n            if (usesEcho) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\r\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\r\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\r\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\r\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\r\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\r\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\r\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\r\n\t\t\t\t\t\r\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\r\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\r\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\r\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\r\n\t\t\t\t\tsampleL += echoShelfSampleL;\r\n\t\t\t\t\tsampleR += echoShelfSampleR;\r\n\t\t\t\t\t\r\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\r\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\r\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\r\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\r\n\t\t\t\t\techoMult += echoMultDelta;\r\n                    `\r\n            }\r\n\r\n            if (usesReverb) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\r\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\r\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\r\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\r\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\r\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\r\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\r\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\r\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\r\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\r\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\r\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\r\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\r\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\r\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\r\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\r\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\r\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\r\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\r\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\r\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\r\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\r\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\r\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\r\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\r\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\r\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\r\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\r\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\r\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\r\n\t\t\t\t\treverb += reverbDelta;`\r\n            }\r\n\r\n            effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\r\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\r\n\t\t\t\t\tmixVolume += mixVolumeDelta;`\r\n\r\n            if (usesDelays) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;`\r\n            }\r\n\r\n            effectsSource += `\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.mixVolume = mixVolume;\r\n\t\t\t\tinstrumentState.eqFilterVolume = eqFilterVolume;\r\n\t\t\t\t\r\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\r\n\t\t\t\tconst epsilon = (1.0e-24);`\r\n\r\n            if (usesDelays) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.delayInputMult = delayInputMult;`\r\n            }\r\n\r\n            if (usesDistortion) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.distortion = distortion;\r\n\t\t\t\tinstrumentState.distortionDrive = distortionDrive;\r\n\t\t\t\t\r\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\r\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\r\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\r\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\r\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;`\r\n            }\r\n\r\n            if (usesBitcrusher) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\r\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\r\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\r\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\r\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;\r\n\t\t\t\tinstrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\r\n\t\t\t\tinstrumentState.bitcrusherScale = bitcrusherScale;\r\n\t\t\t\tinstrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;`\r\n\r\n            }\r\n\r\n            if (usesEqFilter) {\r\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\tsynth.sanitizeFilters(filters);\r\n\t\t\t\t// The filter input here is downstream from another filter so we\r\n\t\t\t\t// better make sure it's safe too.\r\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\r\n\t\t\t\t\tinitialFilterInput1 = 0.0;\r\n\t\t\t\t\tinitialFilterInput2 = 0.0;\r\n\t\t\t\t}\r\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\r\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\r\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\r\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;`\r\n            }\r\n\r\n            if (usesPanning) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tSynth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\r\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;\r\n\t\t\t\tinstrumentState.panningVolumeL = panningVolumeL;\r\n\t\t\t\tinstrumentState.panningVolumeR = panningVolumeR;\r\n\t\t\t\tinstrumentState.panningOffsetL = panningOffsetL;\r\n\t\t\t\tinstrumentState.panningOffsetR = panningOffsetR;`\r\n            }\r\n\r\n            if (usesChorus) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\r\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\r\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;\r\n\t\t\t\tinstrumentState.chorusVoiceMult = chorusVoiceMult;\r\n\t\t\t\tinstrumentState.chorusCombinedMult = chorusCombinedMult;`\r\n            }\r\n\r\n            if (usesEcho) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\r\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\r\n\t\t\t\tinstrumentState.echoMult = echoMult;\r\n\t\t\t\tinstrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;\r\n\t\t\t\t\r\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\r\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\r\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\r\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\r\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\r\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\r\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\r\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;`\r\n            }\r\n\r\n            if (usesReverb) {\r\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\r\n\t\t\t\tinstrumentState.reverbDelayPos = reverbDelayPos;\r\n\t\t\t\tinstrumentState.reverbMult = reverb;\r\n\t\t\t\t\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\r\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\r\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\r\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\r\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;`\r\n            }\r\n\r\n            effectsSource += \"}\";\r\n\r\n            //console.log(effectsSource);\r\n            effectsFunction = new Function(\"Config\", \"Synth\", effectsSource)(Config, Synth);\r\n            Synth.effectsFunctionCache[signature] = effectsFunction;\r\n        }\r\n\r\n        effectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\r\n    }\r\n\r\n    private static pulseWidthSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n\r\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\r\n        let phaseDeltaA: number = tone.phaseDeltas[0];\r\n        let phaseDeltaB: number = tone.phaseDeltas[1];\r\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\r\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let phaseA: number = (tone.phases[0] % 1);\r\n        let phaseB: number = (tone.phases[1] % 1);\r\n\r\n        let pulseWidth: number = tone.pulseWidth;\r\n        const pulseWidthDelta: number = tone.pulseWidthDelta;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\r\n            const sawPhaseA: number = phaseA % 1;\r\n            const sawPhaseB: number = (phaseA + pulseWidth) % 1;\r\n            const sawPhaseC: number = phaseB % 1;\r\n            const sawPhaseD: number = (phaseB + pulseWidth) % 1;\r\n\r\n            let pulseWaveA: number = sawPhaseB - sawPhaseA;\r\n            let pulseWaveB: number = sawPhaseD - sawPhaseC;\r\n\r\n            // This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \r\n            if (!instrumentState.aliases) {\r\n                if (sawPhaseA < phaseDeltaA) {\r\n                    var t = sawPhaseA / phaseDeltaA;\r\n                    pulseWaveA += (t + t - t * t - 1) * 0.5;\r\n                } else if (sawPhaseA > 1.0 - phaseDeltaA) {\r\n                    var t = (sawPhaseA - 1.0) / phaseDeltaA;\r\n                    pulseWaveA += (t + t + t * t + 1) * 0.5;\r\n                }\r\n                if (sawPhaseB < phaseDeltaA) {\r\n                    var t = sawPhaseB / phaseDeltaA;\r\n                    pulseWaveA -= (t + t - t * t - 1) * 0.5;\r\n                } else if (sawPhaseB > 1.0 - phaseDeltaA) {\r\n                    var t = (sawPhaseB - 1.0) / phaseDeltaA;\r\n                    pulseWaveA -= (t + t + t * t + 1) * 0.5;\r\n                }\r\n\r\n                if (sawPhaseC < phaseDeltaB) {\r\n                    var t = sawPhaseC / phaseDeltaB;\r\n                    pulseWaveB += (t + t - t * t - 1) * 0.5;\r\n                } else if (sawPhaseC > 1.0 - phaseDeltaB) {\r\n                    var t = (sawPhaseC - 1.0) / phaseDeltaB;\r\n                    pulseWaveB += (t + t + t * t + 1) * 0.5;\r\n                }\r\n                if (sawPhaseD < phaseDeltaB) {\r\n                    var t = sawPhaseD / phaseDeltaB;\r\n                    pulseWaveB -= (t + t - t * t - 1) * 0.5;\r\n                } else if (sawPhaseD > 1.0 - phaseDeltaB) {\r\n                    var t = (sawPhaseD - 1.0) / phaseDeltaB;\r\n                    pulseWaveB -= (t + t + t * t + 1) * 0.5;\r\n                }\r\n            }\r\n\r\n            const inputSample: number = pulseWaveA + pulseWaveB * unisonSign;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phaseA += phaseDeltaA;\r\n            phaseB += phaseDeltaB;\r\n            phaseDeltaA *= phaseDeltaScaleA;\r\n            phaseDeltaB *= phaseDeltaScaleB;\r\n            pulseWidth += pulseWidthDelta;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phaseA;\r\n        tone.phases[1] = phaseB;\r\n        tone.phaseDeltas[0] = phaseDeltaA;\r\n        tone.phaseDeltas[1] = phaseDeltaB;\r\n        tone.expression = expression;\r\n        tone.pulseWidth = pulseWidth;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static supersawSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\r\n\t\tconst data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n\t\tconst voiceCount: number = Config.supersawVoiceCount|0;\r\n\r\n\t\tlet phaseDelta: number = tone.phaseDeltas[0];\r\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScales[0];\r\n\t\tlet expression: number = +tone.expression;\r\n\t\tconst expressionDelta: number = +tone.expressionDelta;\r\n\t\tlet phases: number[] = tone.phases;\r\n\r\n\t\tlet dynamism: number = +tone.supersawDynamism;\r\n\t\tconst dynamismDelta: number = +tone.supersawDynamismDelta;\r\n\t\tconst unisonDetunes: number[] = tone.supersawUnisonDetunes;\r\n\t\tlet shape: number = +tone.supersawShape;\r\n\t\tconst shapeDelta: number = +tone.supersawShapeDelta;\r\n\t\tlet delayLength: number = +tone.supersawDelayLength;\r\n\t\tconst delayLengthDelta: number = +tone.supersawDelayLengthDelta;\r\n\t\tconst delayLine: Float32Array = tone.supersawDelayLine!;\r\n\t\tconst delayBufferMask: number = (delayLine.length - 1) >> 0;\r\n\t\tlet delayIndex: number = tone.supersawDelayIndex|0;\r\n\t\tdelayIndex = (delayIndex & delayBufferMask) + delayLine.length;\r\n\r\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n\t\tconst filterCount: number = tone.noteFilterCount|0;\r\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n\t\tconst applyFilters: Function = Synth.applyFilters;\r\n\r\n\t\tconst stopIndex: number = bufferIndex + runLength;\r\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\t\t\t// The phase initially starts at a zero crossing so apply\r\n\t\t\t// the delta before first sample to get a nonzero value.\r\n\t\t\tlet phase: number = (phases[0] + phaseDelta) % 1.0;\r\n\t\t\tlet supersawSample: number = phase - 0.5 * (1.0 + (voiceCount - 1.0) * dynamism);\r\n\r\n\t\t\t// This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \r\n            if (!instrumentState.aliases) {\r\n                if (phase < phaseDelta) {\r\n                    var t: number = phase / phaseDelta;\r\n                    supersawSample -= (t + t - t * t - 1) * 0.5;\r\n                } else if (phase > 1.0 - phaseDelta) {\r\n                    var t: number = (phase - 1.0) / phaseDelta;\r\n                    supersawSample -= (t + t + t * t + 1) * 0.5;\r\n                }\r\n            }\r\n\r\n\t\t\tphases[0] = phase;\r\n\r\n\t\t\tfor (let i: number = 1; i < voiceCount; i++) {\r\n\t\t\t\tconst detunedPhaseDelta: number = phaseDelta * unisonDetunes[i];\r\n\t\t\t\t// The phase initially starts at a zero crossing so apply\r\n\t\t\t\t// the delta before first sample to get a nonzero value.\r\n\t\t\t\tlet phase: number = (phases[i] + detunedPhaseDelta) % 1.0;\r\n\t\t\t\tsupersawSample += phase * dynamism;\r\n\r\n\t\t\t\t// This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \r\n                if (!instrumentState.aliases) {\r\n                    if (phase < detunedPhaseDelta) {\r\n                        const t: number = phase / detunedPhaseDelta;\r\n                        supersawSample -= (t + t - t * t - 1) * 0.5 * dynamism;\r\n                    } else if (phase > 1.0 - detunedPhaseDelta) {\r\n                        const t: number = (phase - 1.0) / detunedPhaseDelta;\r\n                        supersawSample -= (t + t + t * t + 1) * 0.5 * dynamism;\r\n                    }\r\n                }\r\n\r\n\t\t\t\tphases[i] = phase;\r\n\t\t\t}\r\n\r\n\t\t\tdelayLine[delayIndex & delayBufferMask] = supersawSample;\r\n\t\t\tconst delaySampleTime: number = delayIndex - delayLength;\r\n\t\t\tconst lowerIndex: number = delaySampleTime | 0;\r\n\t\t\tconst upperIndex: number = lowerIndex + 1;\r\n\t\t\tconst delayRatio: number = delaySampleTime - lowerIndex;\r\n\t\t\tconst prevDelaySample: number = delayLine[lowerIndex & delayBufferMask];\r\n\t\t\tconst nextDelaySample: number = delayLine[upperIndex & delayBufferMask];\r\n\t\t\tconst delaySample: number = prevDelaySample + (nextDelaySample - prevDelaySample) * delayRatio;\r\n\t\t\tdelayIndex++;\r\n\r\n\t\t\tconst inputSample: number = supersawSample - delaySample * shape;\r\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\tinitialFilterInput1 = inputSample;\r\n\r\n\t\t\tphaseDelta *= phaseDeltaScale;\r\n\t\t\tdynamism += dynamismDelta;\r\n\t\t\tshape += shapeDelta;\r\n\t\t\tdelayLength += delayLengthDelta;\r\n\r\n\t\t\tconst output: number = sample * expression;\r\n\t\t\texpression += expressionDelta;\r\n\r\n\t\t\tdata[sampleIndex] += output;\r\n\t\t}\r\n\r\n\t\ttone.phaseDeltas[0] = phaseDelta;\r\n\t\ttone.expression = expression;\r\n\t\ttone.supersawDynamism = dynamism;\r\n\t\ttone.supersawShape = shape;\r\n\t\ttone.supersawDelayLength = delayLength;\r\n\t\ttone.supersawDelayIndex = delayIndex;\r\n\r\n\t\tsynth.sanitizeFilters(filters);\r\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\r\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\r\n\t}\r\n\r\n    private static fmSourceTemplate: string[] = (`\r\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\r\n\t\tconst sineWave = Config.sineWave;\r\n\t\t\t\r\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\r\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * ` + Config.sineWaveLength + `;\r\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * ` + Config.sineWaveLength + `;\r\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\r\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\r\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\r\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\r\n        const operator#Wave      = tone.operatorWaves[#].samples;\r\n\t\tlet feedbackMult         = +tone.feedbackMult;\r\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\r\n        let expression = +tone.expression;\r\n\t\tconst expressionDelta = +tone.expressionDelta;\r\n\t\t\r\n\t\tconst filters = tone.noteFilters;\r\n\t\tconst filterCount = tone.noteFilterCount|0;\r\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n\t\tconst applyFilters = Synth.applyFilters;\r\n\t\t\r\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\r\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\r\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\r\n\t\t\t\t\r\n\t\t\tconst inputSample = fmOutput;\r\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\tinitialFilterInput1 = inputSample;\r\n\t\t\t\t\r\n\t\t\t\tfeedbackMult += feedbackDelta;\r\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\r\n\t\t\t\toperator#Phase += operator#PhaseDelta;\r\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\r\n\t\t\t\r\n\t\t\tconst output = sample * expression;\r\n\t\t\texpression += expressionDelta;\r\n\r\n\t\t\tdata[sampleIndex] += output;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\r\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / ` + Config.sineWaveLength + `;\r\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\r\n\t\t    tone.feedbackOutputs[#] = operator#Output;\r\n\t\t    tone.feedbackMult = feedbackMult;\r\n\t\t    tone.expression = expression;\r\n\t\t\t\r\n\t\tsynth.sanitizeFilters(filters);\r\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\r\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\r\n\t\t`).split(\"\\n\");\r\n\r\n    private static operatorSourceTemplate: string[] = (`\r\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\r\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\r\n\t\t\t\tconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\r\n                const operator#Sample   = operator#Wave[operator#Index];\r\n                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\r\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\r\n\t\t`).split(\"\\n\");\r\n\r\n        private static noiseSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\r\n            const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n            const wave: Float32Array = instrumentState.wave!;\r\n            \r\n            const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n            if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\r\n            let phaseDeltaA: number = tone.phaseDeltas[0];\r\n            let phaseDeltaB: number = tone.phaseDeltas[1];\r\n            const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\r\n            const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\r\n            let expression: number = +tone.expression;\r\n            const expressionDelta: number = +tone.expressionDelta;\r\n            let phaseA: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n            let phaseB: number = (tone.phases[1] % 1) * Config.chipNoiseLength;\r\n            if (tone.phases[0] == 0.0) {\r\n                // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n                phaseA = Math.random() * Config.chipNoiseLength;\r\n                if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) phaseB = phaseA;\r\n            }\r\n            if (tone.phases[1] == 0.0 && !(instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval)) {\r\n                // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n                phaseB = Math.random() * Config.chipNoiseLength;\r\n            }\r\n            const phaseMask: number = Config.chipNoiseLength - 1;\r\n            let noiseSampleA: number = +tone.noiseSampleA;\r\n            let noiseSampleB: number = +tone.noiseSampleB;\r\n    \r\n            const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n            const filterCount: number = tone.noteFilterCount | 0;\r\n            let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n            let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n            const applyFilters: Function = Synth.applyFilters;\r\n    \r\n            // This is for a \"legacy\" style simplified 1st order lowpass filter with\r\n            // a cutoff frequency that is relative to the tone's fundamental frequency.\r\n            const pitchRelativefilterA: number = Math.min(1.0, phaseDeltaA * instrumentState.noisePitchFilterMult);\r\n            const pitchRelativefilterB: number = Math.min(1.0, phaseDeltaB * instrumentState.noisePitchFilterMult);\r\n    \r\n            const stopIndex: number = bufferIndex + runLength;\r\n            for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n                const waveSampleA: number = wave[phaseA & phaseMask];\r\n                const waveSampleB: number = wave[phaseB & phaseMask];\r\n    \r\n                noiseSampleA += (waveSampleA - noiseSampleA) * pitchRelativefilterA;\r\n                noiseSampleB += (waveSampleB - noiseSampleB) * pitchRelativefilterB;\r\n    \r\n                const inputSample: number = noiseSampleA + noiseSampleB * unisonSign;\r\n                const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n                initialFilterInput2 = initialFilterInput1;\r\n                initialFilterInput1 = inputSample;\r\n    \r\n                phaseA += phaseDeltaA;\r\n                phaseB += phaseDeltaB;\r\n                phaseDeltaA *= phaseDeltaScaleA;\r\n                phaseDeltaB *= phaseDeltaScaleB;\r\n    \r\n                const output: number = sample * expression;\r\n                expression += expressionDelta;\r\n    \r\n                data[sampleIndex] += output;\r\n            }\r\n    \r\n            tone.phases[0] = phaseA / Config.chipNoiseLength;\r\n            tone.phases[1] = phaseB / Config.chipNoiseLength;\r\n            tone.phaseDeltas[0] = phaseDeltaA;\r\n            tone.phaseDeltas[1] = phaseDeltaB;\r\n            tone.expression = expression;\r\n            tone.noiseSampleA = noiseSampleA;\r\n            tone.noiseSampleB = noiseSampleB;\r\n    \r\n            synth.sanitizeFilters(filters);\r\n            tone.initialNoteFilterInput1 = initialFilterInput1;\r\n            tone.initialNoteFilterInput2 = initialFilterInput2;\r\n        }\r\n\r\n    private static spectrumSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        const wave: Float32Array = instrumentState.wave!;\r\n        const samplesInPeriod: number = (1 << 7);\r\n\r\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\r\n        let phaseDeltaA: number = tone.phaseDeltas[0] * samplesInPeriod;\r\n\t\tlet phaseDeltaB: number = tone.phaseDeltas[1] * samplesInPeriod;\r\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\r\n\t\tconst phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n        let noiseSampleA: number = +tone.noiseSampleA;\r\n\t\tlet noiseSampleB: number = +tone.noiseSampleB;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        let phaseA: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\r\n\t\tlet phaseB: number = (tone.phases[1] % 1) * Config.spectrumNoiseLength;\r\n        if (tone.phases[0] == 0.0) {\r\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n            phaseA = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDeltaA;\r\n            if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) phaseB = phaseA;\r\n        }\r\n        if (tone.phases[1] == 0.0 && !(instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval)) {\r\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n            phaseB = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDeltaB;\r\n        }\r\n        const phaseMask: number = Config.spectrumNoiseLength - 1;\r\n\r\n        // This is for a \"legacy\" style simplified 1st order lowpass filter with\r\n        // a cutoff frequency that is relative to the tone's fundamental frequency.\r\n        const pitchRelativefilterA: number = Math.min(1.0, phaseDeltaA);\r\n        const pitchRelativefilterB: number = Math.min(1.0, phaseDeltaB);\r\n\r\n        const stopIndex: number = bufferIndex + runLength;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n            const phaseAInt: number = phaseA | 0;\r\n\t\t\tconst phaseBInt: number = phaseB | 0;\r\n            const indexA: number = phaseAInt & phaseMask;\r\n\t\t\tconst indexB: number = phaseBInt & phaseMask;\r\n            let waveSampleA: number = wave[indexA];\r\n\t\t\tlet waveSampleB: number = wave[indexB];\r\n            const phaseRatioA: number = phaseA - phaseAInt;\r\n\t\t\tconst phaseRatioB: number = phaseB - phaseBInt;\r\n            waveSampleA += (wave[indexA + 1] - waveSampleA) * phaseRatioA;\r\n\t\t\twaveSampleB += (wave[indexB + 1] - waveSampleB) * phaseRatioB;\r\n\r\n            noiseSampleA += (waveSampleA - noiseSampleA) * pitchRelativefilterA;\r\n\t\t\tnoiseSampleB += (waveSampleB - noiseSampleB) * pitchRelativefilterB;\r\n\r\n\r\n            const inputSample: number = noiseSampleA + noiseSampleB * unisonSign;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phaseA += phaseDeltaA;\r\n\t\t\tphaseB += phaseDeltaB;\r\n            phaseDeltaA *= phaseDeltaScaleA;\r\n\t\t\tphaseDeltaB *= phaseDeltaScaleB;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phaseA / Config.spectrumNoiseLength;\r\n        tone.phases[1] = phaseB / Config.spectrumNoiseLength;\r\n        tone.phaseDeltas[0] = phaseDeltaA / samplesInPeriod;\r\n        tone.phaseDeltas[1] = phaseDeltaB / samplesInPeriod;\r\n        tone.expression = expression;\r\n        tone.noiseSampleA = noiseSampleA;\r\n        tone.noiseSampleB = noiseSampleB;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static drumsetSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\r\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\r\n        let wave: Float32Array = instrumentState.getDrumsetWave(tone.drumsetPitch!);\r\n        const referenceDelta: number = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch!);\r\n        let phaseDelta: number = tone.phaseDeltas[0] / referenceDelta;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\r\n        let expression: number = +tone.expression;\r\n        const expressionDelta: number = +tone.expressionDelta;\r\n\r\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\r\n        const filterCount: number = tone.noteFilterCount | 0;\r\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\r\n        const applyFilters: Function = Synth.applyFilters;\r\n\r\n        let phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\r\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n        if (tone.phases[0] == 0.0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\r\n        const phaseMask: number = Config.spectrumNoiseLength - 1;\r\n\r\n        const stopIndex: number = bufferIndex + runLength;\r\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n            const phaseInt: number = phase | 0;\r\n            const index: number = phaseInt & phaseMask;\r\n            let noiseSample: number = wave[index];\r\n            const phaseRatio: number = phase - phaseInt;\r\n            noiseSample += (wave[index + 1] - noiseSample) * phaseRatio;\r\n\r\n            const inputSample: number = noiseSample;\r\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;\r\n\r\n            phase += phaseDelta;\r\n            phaseDelta *= phaseDeltaScale;\r\n\r\n            const output: number = sample * expression;\r\n            expression += expressionDelta;\r\n\r\n            data[sampleIndex] += output;\r\n        }\r\n\r\n        tone.phases[0] = phase / Config.spectrumNoiseLength;\r\n        tone.phaseDeltas[0] = phaseDelta * referenceDelta;\r\n        tone.expression = expression;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }\r\n\r\n    private static modSynth(synth: Synth, stereoBufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrument: Instrument): void {\r\n        // Note: present modulator value is tone.expressionStarts[0].\r\n\r\n        if (!synth.song) return;\r\n\r\n        let mod: number = Config.modCount - 1 - tone.pitches[0];\r\n\r\n        // Flagged as invalid because unused by current settings, skip\r\n        if (instrument.invalidModulators[mod]) return;\r\n\r\n        let setting: number = instrument.modulators[mod];\r\n\r\n        // Generate list of used instruments\r\n        let usedInstruments: number[] = [];\r\n        if (Config.modulators[instrument.modulators[mod]].forSong) {\r\n            // Instrument doesn't matter for song, just push a random index to run the modsynth once\r\n            usedInstruments.push(0);\r\n        } else {\r\n            // All\r\n            if (instrument.modInstruments[mod] == synth.song.channels[instrument.modChannels[mod]].instruments.length) {\r\n                for (let i: number = 0; i < synth.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\r\n                    usedInstruments.push(i);\r\n                }\r\n            }\r\n            // Active\r\n            else if (instrument.modInstruments[mod] > synth.song.channels[instrument.modChannels[mod]].instruments.length) {\r\n                if (synth.song.getPattern(instrument.modChannels[mod], synth.bar) != null)\r\n                    usedInstruments = synth.song.getPattern(instrument.modChannels[mod], synth.bar)!.instruments;\r\n            } else {\r\n                usedInstruments.push(instrument.modInstruments[mod]);\r\n            }\r\n        }\r\n\r\n        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\r\n\r\n            synth.setModValue(tone.expression, tone.expression + tone.expressionDelta, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\r\n\r\n            // If mods are being held (for smoother playback while recording mods), use those values instead.\r\n            for (let i: number = 0; i < synth.heldMods.length; i++) {\r\n                if (Config.modulators[instrument.modulators[mod]].forSong) {\r\n                    if (synth.heldMods[i].setting == setting)\r\n                        synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\r\n                }\r\n                else if (synth.heldMods[i].channelIndex == instrument.modChannels[mod] && synth.heldMods[i].instrumentIndex == usedInstruments[instrumentIndex] && synth.heldMods[i].setting == setting) {\r\n                    synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\r\n                }\r\n            }\r\n\r\n            // Reset arps, but only at the start of the note\r\n            if (setting == Config.modulators.dictionary[\"reset arp\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\r\n                synth.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]].arpTime = 0;\r\n            }\r\n            // Denote next bar skip\r\n            else if (setting == Config.modulators.dictionary[\"next bar\"].index) {\r\n                synth.wantToSkip = true;\r\n            }\r\n            // Extra info for eq filter target needs to be set as well\r\n            else if (setting == Config.modulators.dictionary[\"eq filter\"].index) {\r\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\r\n\r\n                if (!tgtInstrument.eqFilterType) {\r\n\r\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\r\n\r\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\r\n\r\n                        let pinIdx: number = 0;\r\n                        const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\r\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\r\n                        // 0 to 1 based on distance to next morph\r\n                        //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\r\n                        let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\r\n\r\n                        // Compute the new settings to go to.\r\n                        if (tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx].size] != null) {\r\n                            tgtInstrument.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\r\n                        } else {\r\n                            // No mutation will occur to the filter object so we can safely return it without copying\r\n                            tgtInstrument.tmpEqFilterEnd = tgtInstrument.eqFilter;\r\n                        }\r\n\r\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\r\n                    else {\r\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\r\n                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                            if (tgtInstrument.tmpEqFilterEnd == tgtInstrument.eqSubFilters[i] && tgtInstrument.tmpEqFilterEnd != null) {\r\n                                tgtInstrument.tmpEqFilterEnd = new FilterSettings();\r\n                                tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqSubFilters[i]!.toJsonObject());\r\n                            }\r\n                        }\r\n                        if (tgtInstrument.tmpEqFilterEnd == null) {\r\n                            tgtInstrument.tmpEqFilterEnd = new FilterSettings();\r\n                            tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqFilter.toJsonObject());\r\n                        }\r\n\r\n                        if (tgtInstrument.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\r\n                            if (dotTarget % 2) { // X\r\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\r\n                            } else { // Y\r\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Extra info for note filter target needs to be set as well\r\n            else if (setting == Config.modulators.dictionary[\"note filter\"].index) {\r\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\r\n\r\n                if (!tgtInstrument.noteFilterType) {\r\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\r\n\r\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\r\n\r\n                        let pinIdx: number = 0;\r\n                        const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\r\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\r\n                        // 0 to 1 based on distance to next morph\r\n                        //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\r\n                        let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\r\n\r\n                        // Compute the new settings to go to.\r\n                        if (tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size] != null) {\r\n                            tgtInstrument.tmpNoteFilterEnd = FilterSettings.lerpFilters(tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\r\n                        } else {\r\n                            // No mutation will occur to the filter object so we can safely return it without copying\r\n                            tgtInstrument.tmpNoteFilterEnd = tgtInstrument.noteFilter;\r\n                        }\r\n\r\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\r\n                    else {\r\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\r\n\r\n                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\r\n                            if (tgtInstrument.tmpNoteFilterEnd == tgtInstrument.noteSubFilters[i] && tgtInstrument.tmpNoteFilterEnd != null) {\r\n                                tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\r\n                                tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\r\n                            }\r\n                        }\r\n                        if (tgtInstrument.tmpNoteFilterEnd == null) {\r\n                            tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\r\n                            tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteFilter.toJsonObject());\r\n                        }\r\n\r\n                        if (tgtInstrument.tmpNoteFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\r\n                            if (dotTarget % 2) { // X\r\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\r\n                            } else { // Y\r\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static findRandomZeroCrossing(wave: Float32Array, waveLength: number): number {\r\n        let phase: number = Math.random() * waveLength;\r\n        const phaseMask: number = waveLength - 1;\r\n\r\n        // Spectrum and drumset waves sounds best when they start at a zero crossing,\r\n        // otherwise they pop. Try to find a zero crossing.\r\n        let indexPrev: number = phase & phaseMask;\r\n        let wavePrev: number = wave[indexPrev];\r\n        const stride: number = 16;\r\n        for (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\r\n            const indexNext: number = (indexPrev + stride) & phaseMask;\r\n            const waveNext: number = wave[indexNext];\r\n            if (wavePrev * waveNext <= 0.0) {\r\n                // Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\r\n                for (let i: number = 0; i < stride; i++) {\r\n                    const innerIndexNext: number = (indexPrev + 1) & phaseMask;\r\n                    const innerWaveNext: number = wave[innerIndexNext];\r\n                    if (wavePrev * innerWaveNext <= 0.0) {\r\n                        // Found the zero crossing again! Now let's find the exact intersection.\r\n                        const slope: number = innerWaveNext - wavePrev;\r\n                        phase = indexPrev;\r\n                        if (Math.abs(slope) > 0.00000001) {\r\n                            phase += -wavePrev / slope;\r\n                        }\r\n                        phase = Math.max(0, phase) % waveLength;\r\n                        break;\r\n                    } else {\r\n                        indexPrev = innerIndexNext;\r\n                        wavePrev = innerWaveNext;\r\n                    }\r\n                }\r\n                break;\r\n            } else {\r\n                indexPrev = indexNext;\r\n                wavePrev = waveNext;\r\n            }\r\n        }\r\n\r\n        return phase;\r\n    }\r\n\r\n    public static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\r\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\r\n    }\r\n    public static volumeMultToInstrumentVolume(volumeMult: number): number {\r\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\r\n    }\r\n    public static noteSizeToVolumeMult(size: number): number {\r\n        return Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);\r\n    }\r\n    public static volumeMultToNoteSize(volumeMult: number): number {\r\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * Config.noteSizeMax;\r\n    }\r\n\r\n    public static fadeInSettingToSeconds(setting: number): number {\r\n        return 0.0125 * (0.95 * setting + 0.05 * setting * setting);\r\n    }\r\n    public static secondsToFadeInSetting(seconds: number): number {\r\n        return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\r\n    }\r\n    public static fadeOutSettingToTicks(setting: number): number {\r\n        return Config.fadeOutTicks[setting];\r\n    }\r\n    public static ticksToFadeOutSetting(ticks: number): number {\r\n        let lower: number = Config.fadeOutTicks[0];\r\n        if (ticks <= lower) return 0;\r\n        for (let i: number = 1; i < Config.fadeOutTicks.length; i++) {\r\n            let upper: number = Config.fadeOutTicks[i];\r\n            if (ticks <= upper) return (ticks < (lower + upper) / 2) ? i - 1 : i;\r\n            lower = upper;\r\n        }\r\n        return Config.fadeOutTicks.length - 1;\r\n    }\r\n\r\n    public static detuneToCents(detune: number): number {\r\n        // BeepBox formula, for reference:\r\n        // return detune * (Math.abs(detune) + 1) / 2;\r\n        return detune - Config.detuneCenter;\r\n    }\r\n    public static centsToDetune(cents: number): number {\r\n        // BeepBox formula, for reference:\r\n        // return Math.sign(cents) * (Math.sqrt(1 + 8 * Math.abs(cents)) - 1) / 2.0;\r\n        return cents + Config.detuneCenter;\r\n    }\r\n\r\n    public static getOperatorWave(waveform: number, pulseWidth: number) {\r\n        if (waveform != 2) {\r\n            return Config.operatorWaves[waveform];\r\n        }\r\n        else {\r\n            return Config.pwmOperatorWaves[pulseWidth];\r\n        }\r\n    }\r\n\r\n    private getSamplesPerTick(): number {\r\n        if (this.song == null) return 0;\r\n        let beatsPerMinute: number = this.song.getBeatsPerMinute();\r\n        if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\r\n            beatsPerMinute = this.getModValue(Config.modulators.dictionary[\"tempo\"].index);\r\n        }\r\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\r\n    }\r\n\r\n    private getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\r\n        const beatsPerSecond: number = beatsPerMinute / 60.0;\r\n        const partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\r\n        const tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\r\n        return this.samplesPerSecond / tickPerSecond;\r\n    }\r\n\r\n    public static fittingPowerOfTwo(x: number): number {\r\n        return 1 << (32 - Math.clz32(Math.ceil(x) - 1));\r\n    }\r\n\r\n    private sanitizeFilters(filters: DynamicBiquadFilter[]): void {\r\n        let reset: boolean = false;\r\n        for (const filter of filters) {\r\n            const output1: number = Math.abs(filter.output1);\r\n            const output2: number = Math.abs(filter.output2);\r\n            // If either is a large value, Infinity, or NaN, then just reset all filter history.\r\n            if (!(output1 < 100) || !(output2 < 100)) {\r\n                reset = true;\r\n                break;\r\n            }\r\n            if (output1 < epsilon) filter.output1 = 0.0;\r\n            if (output2 < epsilon) filter.output2 = 0.0;\r\n        }\r\n        if (reset) {\r\n            for (const filter of filters) {\r\n                filter.output1 = 0.0;\r\n                filter.output2 = 0.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static sanitizeDelayLine(delayLine: Float32Array, lastIndex: number, mask: number): void {\r\n        while (true) {\r\n            lastIndex--;\r\n            const index: number = lastIndex & mask;\r\n            const sample: number = Math.abs(delayLine[index]);\r\n            if (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon)) break;\r\n            delayLine[index] = 0.0;\r\n        }\r\n    }\r\n\r\n    public static applyFilters(sample: number, input1: number, input2: number, filterCount: number, filters: DynamicBiquadFilter[]): number {\r\n        for (let i: number = 0; i < filterCount; i++) {\r\n            const filter: DynamicBiquadFilter = filters[i];\r\n            const output1: number = filter.output1;\r\n            const output2: number = filter.output2;\r\n            const a1: number = filter.a1;\r\n            const a2: number = filter.a2;\r\n            const b0: number = filter.b0;\r\n            const b1: number = filter.b1;\r\n            const b2: number = filter.b2;\r\n            sample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;\r\n            filter.a1 = a1 + filter.a1Delta;\r\n            filter.a2 = a2 + filter.a2Delta;\r\n            if (filter.useMultiplicativeInputCoefficients) {\r\n                filter.b0 = b0 * filter.b0Delta;\r\n                filter.b1 = b1 * filter.b1Delta;\r\n                filter.b2 = b2 * filter.b2Delta;\r\n            } else {\r\n                filter.b0 = b0 + filter.b0Delta;\r\n                filter.b1 = b1 + filter.b1Delta;\r\n                filter.b2 = b2 + filter.b2Delta;\r\n            }\r\n            filter.output2 = output1;\r\n            filter.output1 = sample;\r\n            // Updating the input values is waste if the next filter doesn't exist...\r\n            input2 = output2;\r\n            input1 = output1;\r\n        }\r\n        return sample;\r\n    }\r\n}\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\nexport { Dictionary, DictionaryArray, FilterType, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };\r\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nimport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config } from \"../synth/SynthConfig\";\r\nimport { ColorConfig } from \"../editor/ColorConfig\";\r\nimport { NotePin, Note, Pattern, Instrument, Channel, Synth } from \"../synth/synth\";\r\nimport { oscilloscopeCanvas } from \"../global/Oscilloscope\";\r\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\r\n\r\n\tconst {a, button, div, h1, input, canvas} = HTML;\r\n\tconst {svg, circle, rect, path} = SVG;\r\n\r\n\tconst isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\r\n\r\n\tdocument.head.appendChild(HTML.style({type: \"text/css\"}, `\r\n\tbody {\r\n\t\tcolor: ${ColorConfig.primaryText};\r\n\t\tbackground: ${ColorConfig.editorBackground};\r\n\t}\r\n\th1 {\r\n\t\tfont-weight: bold;\r\n\t\tfont-size: 14px;\r\n\t\tline-height: 22px;\r\n\t\ttext-align: initial;\r\n\t\tmargin: 0;\r\n\t}\r\n\ta {\r\n\t\tfont-weight: bold;\r\n\t\tfont-size: 12px;\r\n\t\tline-height: 22px;\r\n\t\twhite-space: nowrap;\r\n\t\tcolor: ${ColorConfig.linkAccent};\r\n\t}\r\n\tbutton {\r\n\t\tmargin: 0;\r\n\t\tpadding: 0;\r\n\t\tposition: relative;\r\n\t\tborder: none;\r\n\t\tborder-radius: 5px;\r\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t\tcolor: ${ColorConfig.primaryText};\r\n\t\tcursor: pointer;\r\n\t\tfont-size: 14px;\r\n\t\tfont-family: inherit;\r\n\t}\r\n\tbutton:hover, button:focus {\r\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t}\r\n\t.playButton, .pauseButton {\r\n\t\tpadding-left: 24px;\r\n\t\tpadding-right: 6px;\r\n\t}\r\n\t.playButton::before {\r\n\t\tcontent: \"\";\r\n\t\tposition: absolute;\r\n\t\tleft: 6px;\r\n\t\ttop: 50%;\r\n\t\tmargin-top: -6px;\r\n\t\twidth: 12px;\r\n\t\theight: 12px;\r\n\t\tpointer-events: none;\r\n\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\r\n\t\t-webkit-mask-repeat: no-repeat;\r\n\t\t-webkit-mask-position: center;\r\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\r\n\t\tmask-repeat: no-repeat;\r\n\t\tmask-position: center;\r\n\t}\r\n\t.pauseButton::before {\r\n\t\tcontent: \"\";\r\n\t\tposition: absolute;\r\n\t\tleft: 6px;\r\n\t\ttop: 50%;\r\n\t\tmargin-top: -6px;\r\n\t\twidth: 12px;\r\n\t\theight: 12px;\r\n\t\tpointer-events: none;\r\n\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\r\n\t\t-webkit-mask-repeat: no-repeat;\r\n\t\t-webkit-mask-position: center;\r\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\r\n\t\tmask-repeat: no-repeat;\r\n\t\tmask-position: center;\r\n\t}\r\n\t\r\n\tinput[type=range] {\r\n\t\t-webkit-appearance: none;\r\n\t\tappearance: none;\r\n\t\theight: 16px;\r\n\t\tmargin: 0;\r\n\t\tcursor: pointer;\r\n\t\tbackground-color: ${ColorConfig.editorBackground};\r\n\t\ttouch-action: pan-y;\r\n\t}\r\n\tinput[type=range]:focus {\r\n\t\toutline: none;\r\n\t}\r\n\tinput[type=range]::-webkit-slider-runnable-track {\r\n\t\twidth: 100%;\r\n\t\theight: 4px;\r\n\t\tcursor: pointer;\r\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t}\r\n\tinput[type=range]::-webkit-slider-thumb {\r\n\t\theight: 16px;\r\n\t\twidth: 4px;\r\n\t\tborder-radius: 2px;\r\n\t\tbackground: ${ColorConfig.primaryText};\r\n\t\tcursor: pointer;\r\n\t\t-webkit-appearance: none;\r\n\t\tmargin-top: -6px;\r\n\t}\r\n\tinput[type=range]:focus::-webkit-slider-runnable-track, input[type=range]:hover::-webkit-slider-runnable-track {\r\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t}\r\n\tinput[type=range]::-moz-range-track {\r\n\t\twidth: 100%;\r\n\t\theight: 4px;\r\n\t\tcursor: pointer;\r\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t}\r\n\tinput[type=range]:focus::-moz-range-track, input[type=range]:hover::-moz-range-track  {\r\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t}\r\n\tinput[type=range]::-moz-range-thumb {\r\n\t\theight: 16px;\r\n\t\twidth: 4px;\r\n\t\tborder-radius: 2px;\r\n\t\tborder: none;\r\n\t\tbackground: ${ColorConfig.primaryText};\r\n\t\tcursor: pointer;\r\n\t}\r\n\tinput[type=range]::-ms-track {\r\n\t\twidth: 100%;\r\n\t\theight: 4px;\r\n\t\tcursor: pointer;\r\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t\tborder-color: transparent;\r\n\t}\r\n\tinput[type=range]:focus::-ms-track, input[type=range]:hover::-ms-track {\r\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t}\r\n\tinput[type=range]::-ms-thumb {\r\n\t\theight: 16px;\r\n\t\twidth: 4px;\r\n\t\tborder-radius: 2px;\r\n\t\tbackground: ${ColorConfig.primaryText};\r\n\t\tcursor: pointer;\r\n\t}\r\n`));\r\nconst colorTheme: string | null = getLocalStorage(\"colorTheme\");\r\nColorConfig.setTheme(colorTheme === null ? ColorConfig.defaultTheme : colorTheme);\r\n\r\nlet prevHash: string | null = null;\r\nlet id: string = ((Math.random() * 0xffffffff) >>> 0).toString(16);\r\nlet pauseButtonDisplayed: boolean = false;\r\nlet animationRequest: number | null;\r\nlet zoomEnabled: boolean = false;\r\nlet timelineWidth: number = 1;\r\nlet outVolumeHistoricTimer: number = 0;\r\nlet outVolumeHistoricCap: number = 0;\r\n\r\nconst synth: Synth = new Synth();\r\nconst oscilloscope: oscilloscopeCanvas = new oscilloscopeCanvas(canvas({ width: isMobile? 144:288, height: isMobile?32:64, style: `border:2px solid ${ColorConfig.uiWidgetBackground}; overflow: hidden;` , id: \"oscilloscopeAll\" }), isMobile?1:2);\r\nconst showOscilloscope: boolean = getLocalStorage(\"showOscilloscope\") != \"false\";\r\nif (!showOscilloscope) {\r\n\toscilloscope.canvas.style.display = \"none\";\r\n\tsynth.oscEnabled = false;\r\n}\r\nlet titleText: HTMLHeadingElement = h1({ style: \"flex-grow: 1; margin: 0 1px; margin-left: 10px; overflow: hidden;\" }, \"\");\r\n\tlet editLink: HTMLAnchorElement = a({target: \"_top\", style: \"margin: 0 4px;\"}, \"✎ Edit\");\r\n\tlet copyLink: HTMLAnchorElement = a({href: \"javascript:void(0)\", style: \"margin: 0 4px;\"}, \"⎘ Copy URL\");\r\n\tlet shareLink: HTMLAnchorElement = a({href: \"javascript:void(0)\", style: \"margin: 0 4px;\"}, \"⤳ Share\");\r\n\tlet fullscreenLink: HTMLAnchorElement = a({target: \"_top\", style: \"margin: 0 4px;\"}, \"⇱ Fullscreen\");\r\n\r\nlet draggingPlayhead: boolean = false;\r\n\tconst playButton: HTMLButtonElement = button({style: \"width: 100%; height: 100%; max-height: 50px;\"});\r\n\tconst playButtonContainer: HTMLDivElement = div({style: \"flex-shrink: 0; display: flex; padding: 2px; width: 80px; height: 100%; box-sizing: border-box; align-items: center;\"},\r\n\tplayButton,\r\n);\r\n\tconst loopIcon: SVGPathElement = path({d: \"M 4 2 L 4 0 L 7 3 L 4 6 L 4 4 Q 2 4 2 6 Q 2 8 4 8 L 4 10 Q 0 10 0 6 Q 0 2 4 2 M 8 10 L 8 12 L 5 9 L 8 6 L 8 8 Q 10 8 10 6 Q 10 4 8 4 L 8 2 Q 12 2 12 6 Q 12 10 8 10 z\"});\r\n\tconst loopButton: HTMLButtonElement = button({title: \"loop\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\"}, svg({width: 12, height: 12, viewBox: \"0 0 12 12\"},\r\n\tloopIcon,\r\n));\r\n\r\n\tconst volumeIcon: SVGSVGElement = svg({style: \"flex: 0 0 12px; margin: 0 1px; width: 12px; height: 12px;\", viewBox: \"0 0 12 12\"},\r\n\t\tpath({fill: ColorConfig.uiWidgetBackground, d: \"M 1 9 L 1 3 L 4 3 L 7 0 L 7 12 L 4 9 L 1 9 M 9 3 Q 12 6 9 9 L 8 8 Q 10.5 6 8 4 L 9 3 z\"}),\r\n);\r\nconst volumeSlider: HTMLInputElement = input({ title: \"volume\", type: \"range\", value: 75, min: 0, max: 75, step: 1, style: \"width: 12vw; max-width: 100px; margin: 0 1px;\" });\r\n\r\n\tconst zoomIcon: SVGSVGElement = svg({width: 12, height: 12, viewBox: \"0 0 12 12\"},\r\n\t\tcircle({cx: \"5\", cy: \"5\", r: \"4.5\", \"stroke-width\": \"1\", stroke: \"currentColor\", fill: \"none\"}),\r\n\t\tpath({stroke: \"currentColor\", \"stroke-width\": \"2\", d: \"M 8 8 L 11 11 M 5 2 L 5 8 M 2 5 L 8 5\", fill: \"none\"}),\r\n);\r\n\tconst zoomButton: HTMLButtonElement = button({title: \"zoom\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\"},\r\n\tzoomIcon,\r\n);\r\n\r\n\tconst timeline: SVGSVGElement = svg({style: \"min-width: 0; min-height: 0; touch-action: pan-y pinch-zoom;\"});\r\n\tconst playhead: HTMLDivElement = div({style: `position: absolute; left: 0; top: 0; width: 2px; height: 100%; background: ${ColorConfig.playhead}; pointer-events: none;`});\r\n\tconst timelineContainer: HTMLDivElement = div({style: \"display: flex; flex-grow: 1; flex-shrink: 1; position: relative;\"}, timeline, playhead);\r\n\tconst visualizationContainer: HTMLDivElement = div({style: \"display: flex; flex-grow: 1; flex-shrink: 1; height: 0; position: relative; align-items: center; overflow: hidden;\"}, timelineContainer);\r\n\tlet noteFlashElementsPerBar: (SVGPathElement[])[];\r\n\tlet currentNoteFlashElements: SVGPathElement[] = [];\r\n\tlet currentNoteFlashBar: number = -1;\r\n\tconst notesFlashWhenPlayed: boolean = getLocalStorage(\"notesFlashWhenPlayed\") == \"true\";\r\n\r\nconst outVolumeBarBg: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"90%\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetBackground });\r\nconst outVolumeBar: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", height: \"50%\", width: \"0%\", x: \"5%\", y: \"25%\", fill: \"url('#volumeGrad2')\" });\r\nconst outVolumeCap: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"2px\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetFocus });\r\nconst stop1: SVGStopElement = SVG.stop({ \"stop-color\": \"lime\", offset: \"60%\" });\r\nconst stop2: SVGStopElement = SVG.stop({ \"stop-color\": \"orange\", offset: \"90%\" });\r\nconst stop3: SVGStopElement = SVG.stop({ \"stop-color\": \"red\", offset: \"100%\" });\r\nconst gradient: SVGGradientElement = SVG.linearGradient({ id: \"volumeGrad2\", gradientUnits: \"userSpaceOnUse\" }, stop1, stop2, stop3);\r\nconst defs: SVGDefsElement = SVG.defs({}, gradient);\r\nconst volumeBarContainer: SVGSVGElement = SVG.svg({ style: `touch-action: none; overflow: hidden; margin: auto;`, width: \"160px\", height: \"10px\", preserveAspectRatio: \"none\" },\r\n\tdefs,\r\n\toutVolumeBarBg,\r\n\toutVolumeBar,\r\n\toutVolumeCap,\r\n);\r\ndocument.body.appendChild(visualizationContainer);\r\ndocument.body.appendChild(\r\n\t\tdiv({style: `flex-shrink: 0; height: 20vh; min-height: 22px; max-height: 70px; display: flex; align-items: center;`},\r\n\t\tplayButtonContainer,\r\n\t\tloopButton,\r\n\t\tvolumeIcon,\r\n\t\tvolumeSlider,\r\n\t\tzoomButton,\r\n\t\tvolumeBarContainer,\r\n\t\toscilloscope.canvas, //make it auto remove itself later\r\n\t\ttitleText,\r\n\t\teditLink,\r\n\t\tcopyLink,\r\n\t\tshareLink,\r\n\t\tfullscreenLink,\r\n\t),\r\n);\r\n\r\n// Some browsers have an option to \"block third-party cookies\" (it's enabled by\r\n// default in icognito Chrome windows) that throws an error on trying to access\r\n// localStorage from cross-domain iframe such as this song player, so wrap the\r\n// access in a try-catch block to ignore the error instead of interrupting\r\n// execution.\r\nfunction setLocalStorage(key: string, value: string): void {\r\n\ttry {\r\n\t\tlocalStorage.setItem(key, value);\r\n\t} catch (error) {\r\n\t\t// Ignore the error since we can't fix it.\r\n\t}\r\n}\r\nfunction getLocalStorage(key: string): string | null {\r\n\ttry {\r\n\t\treturn localStorage.getItem(key);\r\n\t} catch (error) {\r\n\t\t// Ignore the error since we can't fix it.\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nfunction removeFromUnorderedArray<T>(array: T[], index: number): void {\r\n\tif (array.length < 1) {\r\n\t\t// Don't need to do anything when `array` is empty.\r\n\t\treturn;\r\n\t}\r\n\tif (index === array.length - 1) {\r\n\t\t// Trivial case.\r\n\t\tarray.pop();\r\n\t} else if (index >= 0 && index < array.length - 1) {\r\n\t\t// The idea here is that we want to remove an element from the array\r\n\t\t// quickly, and the fastest way to do that is to use `array.pop()`. As\r\n\t\t// the name of this function says, we assume `array` to be unordered,\r\n\t\t// so this trick is okay to do.\r\n\t\tconst lastElement: T = array.pop()!;\r\n\t\tarray[index] = lastElement;\r\n\t}\r\n}\r\n\r\nfunction loadSong(songString: string, reuseParams: boolean): void {\r\n\tsynth.setSong(songString);\r\n\tsynth.snapToStart();\r\n\tconst updatedSongString: string = synth.song!.toBase64String();\r\n\teditLink.href = \"../\" + (OFFLINE ? \"index.html\" : \"\") + \"#\" + updatedSongString;\r\n\t//@jummbus - these lines convert old url vers loaded into the player to the new url ver. The problem is, if special chars are included,\r\n\t// they appear to get double-encoded (e.g. the '%' in %20 is encoded again), which breaks the link. Disabled for now until I have a chance\r\n\t// to look into it more.\r\n\t//const hashQueryParams = new URLSearchParams(reuseParams ? location.hash.slice(1) : \"\");\r\n\t//hashQueryParams.set(\"song\", updatedSongString);\r\n\t//location.hash = hashQueryParams.toString();\r\n}\r\n\r\nfunction hashUpdatedExternally(): void {\r\n\tlet myHash: string = location.hash;\r\n\tif (prevHash == myHash || myHash == \"\") return;\r\n\t\t\r\n\tprevHash = myHash;\r\n\t\t\r\n\tif (myHash.charAt(0) == \"#\") {\r\n\t\tmyHash = myHash.substring(1);\r\n\t}\r\n\t\t\r\n\t\r\n\tfullscreenLink.href = location.href;\r\n\r\n\t// @TODO: This can be moved back into splitting merely on & once samples\r\n\t// are reworked so that the URLs don't clash with the overall URL syntax\r\n\t// that's assumed to be respected here (and probably elsewhere...)\r\n\tfor (const parameter of myHash.split(/&(?=[a-z]+=)/g)) {\r\n\t\tlet equalsIndex: number = parameter.indexOf(\"=\");\r\n\t\tif (equalsIndex != -1) {\r\n\t\t\tlet paramName: string = parameter.substring(0, equalsIndex);\r\n\t\t\tlet value: string = parameter.substring(equalsIndex + 1);\r\n\t\t\tswitch (paramName) {\r\n\t\t\t\tcase \"song\":\r\n\t\t\t\t\tloadSong(value, true);\r\n\t\t\t\t\tif (synth.song) {\r\n\t\t\t\t\t\ttitleText.textContent = synth.song.title;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//case \"title\":\r\n\t\t\t\t//\ttitleText.textContent = decodeURIComponent(value);\r\n\t\t\t\t//\tbreak;\r\n\t\t\t\tcase \"loop\":\r\n\t\t\t\t\tsynth.loopRepeatCount = (value != \"1\") ? 0 : -1;\r\n\t\t\t\t\trenderLoopIcon();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tloadSong(myHash, false);\r\n\t\t}\r\n\t}\r\n\t\t\r\n\trenderTimeline();\r\n}\r\n\r\nfunction onWindowResize(): void {\r\n\trenderTimeline();\r\n}\r\n\r\nlet pauseIfAnotherPlayerStartsHandle: ReturnType<typeof setInterval> | null = null;\r\nfunction pauseIfAnotherPlayerStarts(): void {\r\n\tif (!synth.playing) {\r\n\t\tclearInterval(pauseIfAnotherPlayerStartsHandle!);\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst storedPlayerId: string | null = getLocalStorage(\"playerId\");\r\n\tif (storedPlayerId != null && storedPlayerId != id) {\r\n\t\tonTogglePlay();\r\n\t\trenderPlayhead();\r\n\t\tclearInterval(pauseIfAnotherPlayerStartsHandle!);\r\n\t}\r\n}\r\n\r\nfunction animate(): void {\r\n\tif (synth.playing) {\r\n\t\tanimationRequest = requestAnimationFrame(animate);\r\n\t\trenderPlayhead();\r\n\r\n\t\tvolumeUpdate();\r\n\t}\r\n\tif (pauseButtonDisplayed != synth.playing) {\r\n\t\trenderPlayButton();\r\n\t}\r\n\r\n}\r\n\r\nfunction volumeUpdate(): void {\r\n\tif (synth.song == null) {\r\n\t\toutVolumeCap.setAttribute(\"x\", \"5%\");\r\n\t\toutVolumeBar.setAttribute(\"width\", \"0%\");\r\n\t\treturn;\r\n}\r\n\toutVolumeHistoricTimer--;\r\n\tif (outVolumeHistoricTimer <= 0) {\r\n\t\toutVolumeHistoricCap -= 0.03;\r\n\t}\r\n\tif (synth.song.outVolumeCap > outVolumeHistoricCap) {\r\n\t\toutVolumeHistoricCap = synth.song.outVolumeCap;\r\n\t\toutVolumeHistoricTimer = 50;\r\n\t}\r\n\r\n\tanimateVolume(synth.song.outVolumeCap, outVolumeHistoricCap);\r\n\r\n\tif (!synth.playing) {\r\n\t\toutVolumeCap.setAttribute(\"x\", \"5%\");\r\n\t\toutVolumeBar.setAttribute(\"width\", \"0%\");\r\n\t}\r\n}\r\n\r\nfunction animateVolume(useOutVolumeCap: number, historicOutCap: number): void {\r\n\toutVolumeBar.setAttribute(\"width\", \"\" + Math.min(144, useOutVolumeCap * 144));\r\n\toutVolumeCap.setAttribute(\"x\", \"\" + (8 + Math.min(144, historicOutCap * 144)));\r\n}\r\n\r\nfunction onTogglePlay(): void {\r\n\tif (synth.song != null) {\r\n\t\tif (animationRequest != null) cancelAnimationFrame(animationRequest);\r\n\t\tanimationRequest = null;\r\n\t\tif (synth.playing) {\r\n\t\t\tsynth.pause();\r\n\t\t\tvolumeUpdate();\r\n\t\t} else {\r\n\t\t\tsynth.play();\r\n\t\t\tsetLocalStorage(\"playerId\", id);\r\n\t\t\tanimate();\r\n\t\t\tclearInterval(pauseIfAnotherPlayerStartsHandle!);\r\n\t\t\tpauseIfAnotherPlayerStartsHandle = setInterval(pauseIfAnotherPlayerStarts, 100);\r\n\t\t}\r\n\t}\r\n\trenderPlayButton();\r\n}\r\n\r\nfunction onToggleLoop(): void {\r\n\tif (synth.loopRepeatCount == -1) {\r\n\t\tsynth.loopRepeatCount = 0;\r\n\t} else {\r\n\t\tsynth.loopRepeatCount = -1;\r\n\t}\r\n\trenderLoopIcon();\r\n}\r\n\r\nfunction onVolumeChange(): void {\r\n\tsetLocalStorage(\"volume\", volumeSlider.value);\r\n\tsetSynthVolume();\r\n}\r\n\r\nfunction onToggleZoom(): void {\r\n\tzoomEnabled = !zoomEnabled;\r\n\trenderZoomIcon();\r\n\trenderTimeline();\r\n}\r\n\r\nfunction onTimelineMouseDown(event: MouseEvent): void {\r\n\tdraggingPlayhead = true;\r\n\tonTimelineMouseMove(event);\r\n}\r\n\r\nfunction onTimelineMouseMove(event: MouseEvent): void {\r\n\tif (!draggingPlayhead) return;\r\n\tevent.preventDefault();\r\n\tonTimelineCursorMove(event.clientX || event.pageX);\r\n}\r\n\r\nfunction onTimelineTouchDown(event: TouchEvent): void {\r\n\tdraggingPlayhead = true;\r\n\tonTimelineTouchMove(event);\r\n}\r\n\r\nfunction onTimelineTouchMove(event: TouchEvent): void {\r\n\tonTimelineCursorMove(event.touches[0].clientX);\r\n}\r\n\r\nfunction onTimelineCursorMove(mouseX: number): void {\r\n\tif (draggingPlayhead && synth.song != null) {\r\n\t\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\r\n\t\tsynth.playhead = synth.song.barCount * (mouseX - boundingRect.left) / (boundingRect.right - boundingRect.left);\r\n\t\tsynth.computeLatestModValues();\r\n\t\trenderPlayhead();\r\n\t}\r\n}\r\n\r\nfunction onTimelineCursorUp(): void {\r\n\tdraggingPlayhead = false;\r\n}\r\n\r\nfunction setSynthVolume(): void {\r\n\tconst volume: number = +volumeSlider.value;\r\n\tsynth.volume = Math.min(1.0, Math.pow(volume / 50.0, 0.5)) * Math.pow(2.0, (volume - 75.0) / 25.0);\r\n}\r\n\r\nfunction renderPlayhead(): void {\r\n\tif (synth.song != null) {\r\n\t\tlet pos: number = synth.playhead / synth.song.barCount;\r\n\t\tplayhead.style.left = (timelineWidth * pos) + \"px\";\r\n\t\t\t\r\n\t\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\r\n\t\tvisualizationContainer.scrollLeft = pos * (timelineWidth - boundingRect.width);\r\n\r\n\t\tif (notesFlashWhenPlayed) {\r\n\t\t\tconst playheadBar: number = Math.floor(synth.playhead);\r\n\t\t\tconst modPlayhead: number = synth.playhead - playheadBar;\r\n\t\t\tconst partsPerBar: number = synth.song.beatsPerBar * Config.partsPerBeat;\r\n\t\t\tconst noteFlashElementsForThisBar: SVGPathElement[] = noteFlashElementsPerBar[playheadBar];\r\n\r\n\t\t\tif (noteFlashElementsForThisBar != null && playheadBar !== currentNoteFlashBar) {\r\n\t\t\t\tfor (var i = currentNoteFlashElements.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tvar element: SVGPathElement = currentNoteFlashElements[i];\r\n\t\t\t\t\tconst outsideOfCurrentBar = Number(element.getAttribute(\"note-bar\")) !== playheadBar;\r\n\t\t\t\t\tconst isInvisible: boolean = element.style.opacity === \"0\";\r\n\t\t\t\t\tif (outsideOfCurrentBar && isInvisible) {\r\n\t\t\t\t\t\tremoveFromUnorderedArray(currentNoteFlashElements, i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (var i = 0; i < noteFlashElementsForThisBar.length; i++) {\r\n\t\t\t\t\tvar element: SVGPathElement = noteFlashElementsForThisBar[i];\r\n\t\t\t\t\tcurrentNoteFlashElements.push(element);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (currentNoteFlashElements != null) {\r\n\t\t\t\tfor (var i = 0; i < currentNoteFlashElements.length; i++) {\r\n\t\t\t\t\tvar element: SVGPathElement = currentNoteFlashElements[i];\r\n\t\t\t\t\tconst noteStart: number = Number(element.getAttribute(\"note-start\")) / partsPerBar;\r\n\t\t\t\t\tconst noteEnd: number = Number(element.getAttribute(\"note-end\")) / partsPerBar;\r\n\t\t\t\t\tconst noteBar: number = Number(element.getAttribute(\"note-bar\"));\r\n\t\t\t\t\tif ((modPlayhead >= noteStart) && (noteBar == playheadBar)) {\r\n\t\t\t\t\t\tconst dist: number = noteEnd - noteStart;\r\n\t\t\t\t\t\telement.style.opacity = String((1 - (((modPlayhead - noteStart) - (dist / 2)) / (dist / 2))));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.style.opacity = \"0\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcurrentNoteFlashBar = playheadBar;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction renderTimeline(): void {\r\n\ttimeline.innerHTML = \"\";\r\n\tif (synth.song == null) return;\r\n\t\t\r\n\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\r\n\t\t\r\n\tlet timelineHeight: number;\r\n\tlet windowOctaves: number;\r\n\tlet windowPitchCount: number;\r\n\t\t\r\n\tif (zoomEnabled) {\r\n\t\ttimelineHeight = boundingRect.height;\r\n\t\twindowOctaves = Math.max(1, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * 2))));\r\n\t\twindowPitchCount = windowOctaves * 12 + 1;\r\n\t\tconst semitoneHeight: number = (timelineHeight - 1) / windowPitchCount;\r\n\t\tconst targetBeatWidth: number = Math.max(8, semitoneHeight * 4);\r\n\t\ttimelineWidth = Math.max(boundingRect.width, targetBeatWidth * synth.song.barCount * synth.song.beatsPerBar);\r\n\t} else {\r\n\t\ttimelineWidth = boundingRect.width;\r\n\t\tconst targetSemitoneHeight: number = Math.max(1, timelineWidth / (synth.song.barCount * synth.song.beatsPerBar) / 6.0);\r\n\t\ttimelineHeight = Math.min(boundingRect.height, targetSemitoneHeight * (Config.maxPitch + 1) + 1);\r\n\t\twindowOctaves = Math.max(3, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * targetSemitoneHeight))));\r\n\t\twindowPitchCount = windowOctaves * 12 + 1;\r\n\t}\r\n\t\t\r\n\ttimelineContainer.style.width = timelineWidth + \"px\";\r\n\ttimelineContainer.style.height = timelineHeight + \"px\";\r\n\ttimeline.style.width = timelineWidth + \"px\";\r\n\ttimeline.style.height = timelineHeight + \"px\";\r\n\t\t\r\n\tconst barWidth: number = timelineWidth / synth.song.barCount;\r\n\tconst partWidth: number = barWidth / (synth.song.beatsPerBar * Config.partsPerBeat);\r\n\r\n\t\tconst wavePitchHeight: number = (timelineHeight-1) / windowPitchCount;\r\n\t\tconst drumPitchHeight: number =  (timelineHeight-1) / Config.drumCount;\r\n\t\t\r\n\tfor (let bar: number = 0; bar < synth.song.barCount + 1; bar++) {\r\n\t\tconst color: string = (bar == synth.song.loopStart || bar == synth.song.loopStart + synth.song.loopLength) ? ColorConfig.loopAccent : ColorConfig.uiWidgetBackground;\r\n\t\t\ttimeline.appendChild(rect({x: bar * barWidth - 1, y: 0, width: 2, height: timelineHeight, fill: color}));\r\n\t}\r\n\t\t\r\n\tfor (let octave: number = 0; octave <= windowOctaves; octave++) {\r\n\t\t\ttimeline.appendChild(rect({x: 0, y: octave * 12 * wavePitchHeight, width: timelineWidth, height: wavePitchHeight + 1, fill: ColorConfig.tonic, opacity: 0.75}));\r\n\t}\r\n\r\n\t// note flash colors\r\n\tlet noteFlashColor: string = \"#ffffff\";\r\n\tlet noteFlashColorSecondary: string = \"#ffffff77\";\r\n\tif (notesFlashWhenPlayed) {\r\n\t\tnoteFlashColor = ColorConfig.getComputed(\"--note-flash\") !== \"\" ? \"var(--note-flash)\" : \"#ffffff\";\r\n\t\tnoteFlashColorSecondary = ColorConfig.getComputed(\"--note-flash-secondary\") !== \"\" ? \"var(--note-flash-secondary)\" : \"#ffffff77\";\r\n\t}\r\n\r\n\tif (notesFlashWhenPlayed) {\r\n\t\tnoteFlashElementsPerBar = [];\r\n\t\tfor (let bar: number = 0; bar < synth.song.barCount; bar++) {\r\n\t\t\tnoteFlashElementsPerBar.push([]);\r\n\t\t}\r\n\t\tcurrentNoteFlashBar = -1;\r\n\t}\r\n\r\n\tfor (let channel: number = synth.song.channels.length - 1 - synth.song.modChannelCount; channel >= 0; channel--) {\r\n\r\n\t\tconst isNoise: boolean = synth.song.getChannelIsNoise(channel);\r\n\t\tconst pitchHeight: number = isNoise ? drumPitchHeight : wavePitchHeight;\r\n\t\t\t\r\n\t\tconst configuredOctaveScroll: number = synth.song.channels[channel].octave;\r\n\t\tconst newOctaveScroll: number = Math.max(0, Math.min(Config.pitchOctaves - windowOctaves, Math.ceil(configuredOctaveScroll - windowOctaves * 0.5)));\r\n\t\t\t\r\n\t\tconst offsetY: number = newOctaveScroll * pitchHeight * 12 + timelineHeight - pitchHeight * 0.5 - 0.5;\r\n\t\t\t\r\n\t\tfor (let bar: number = 0; bar < synth.song.barCount; bar++) {\r\n\t\t\tconst pattern: Pattern | null = synth.song.getPattern(channel, bar);\r\n\t\t\tif (pattern == null) continue;\r\n\t\t\tconst offsetX: number = bar * barWidth;\r\n\t\t\t\t\r\n\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\tconst note: Note = pattern.notes[i];\r\n\t\t\t\t\t\r\n\t\t\t\tfor (const pitch of note.pitches) {\r\n\t\t\t\t\tconst d: string = drawNote(pitch, note.start, note.pins, (pitchHeight + 1) / 2, offsetX, offsetY, partWidth, pitchHeight);\r\n\t\t\t\t\t\tconst noteElement: SVGPathElement = path({d: d, fill: ColorConfig.getChannelColor(synth.song, channel).primaryChannel});\r\n\t\t\t\t\tif (isNoise) noteElement.style.opacity = String(0.6);\r\n\t\t\t\t\ttimeline.appendChild(noteElement);\r\n\r\n\t\t\t\t\tif (notesFlashWhenPlayed) {\r\n\t\t\t\t\t\tconst dflash: string = drawNote(pitch, note.start, note.pins, (pitchHeight + 1) / 2, offsetX, offsetY, partWidth, pitchHeight);\r\n\t\t\t\t\t\t// const noteFlashColorSecondary = ColorConfig.getComputed(\"--note-flash-secondary\") !== \"\" ? \"var(--note-flash-secondary)\" : \"#ffffff77\";\r\n\t\t\t\t\t\t// const noteFlashColor = ColorConfig.getComputed(\"--note-flash\") !== \"\" ? \"var(--note-flash)\" : \"#ffffff77\";\r\n\t\t\t\t\t\tconst noteFlashElement: SVGPathElement = path({d: dflash, fill: (isNoise ? noteFlashColorSecondary : noteFlashColor)});\r\n\t\t\t\t\t\tnoteFlashElement.style.opacity = \"0\";\r\n\t\t\t\t\t\tnoteFlashElement.setAttribute('note-start', String(note.start));\r\n\t\t\t\t\t\tnoteFlashElement.setAttribute('note-end', String(\r\n\t\t\t\t\t\t\tnote.end\r\n\t\t\t\t\t\t\t));\r\n\t\t\t\t\t\tnoteFlashElement.setAttribute('note-bar', String(bar));\r\n\t\t\t\t\t\ttimeline.appendChild(noteFlashElement);\r\n\t\t\t\t\t\tconst noteFlashElementsForThisBar: SVGPathElement[] = noteFlashElementsPerBar[bar];\r\n\t\t\t\t\t\tnoteFlashElementsForThisBar.push(noteFlashElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\t\r\n\trenderPlayhead();\r\n}\r\n\r\nfunction drawNote(pitch: number, start: number, pins: NotePin[], radius: number, offsetX: number, offsetY: number, partWidth: number, pitchHeight: number): string {\r\n\tlet d: string = `M ${offsetX + partWidth * (start + pins[0].time)} ${offsetY - pitch * pitchHeight + radius * (pins[0].size / Config.noteSizeMax)} `; \r\n\tfor (let i: number = 0; i < pins.length; i++) {\r\n\t\tconst pin: NotePin = pins[i];\r\n\t\t\tconst x:   number = offsetX + partWidth * (start + pin.time);\r\n\t\tconst y: number = offsetY - pitchHeight * (pitch + pin.interval);\r\n\t\tconst expression: number = pin.size / Config.noteSizeMax;\r\n\t\td += `L ${x} ${y - radius * expression} `;\r\n\t}\r\n\tfor (let i: number = pins.length - 1; i >= 0; i--) {\r\n\t\tconst pin: NotePin = pins[i];\r\n\t\t\tconst x:   number = offsetX + partWidth * (start + pin.time);\r\n\t\tconst y: number = offsetY - pitchHeight * (pitch + pin.interval);\r\n\t\tconst expression: number = pin.size / Config.noteSizeMax;\r\n\t\td += `L ${x} ${y + radius * expression} `;\r\n\t}\r\n\treturn d;\r\n}\r\n\r\nfunction renderPlayButton(): void {\r\n\tif (synth.playing) {\r\n\t\tplayButton.classList.remove(\"playButton\");\r\n\t\tplayButton.classList.add(\"pauseButton\");\r\n\t\tplayButton.title = \"Pause (Space)\";\r\n\t\tplayButton.textContent = \"Pause\";\r\n\t} else {\r\n\t\tplayButton.classList.remove(\"pauseButton\");\r\n\t\tplayButton.classList.add(\"playButton\");\r\n\t\tplayButton.title = \"Play (Space)\";\r\n\t\tplayButton.textContent = \"Play\";\r\n\t}\r\n\tpauseButtonDisplayed = synth.playing;\r\n}\r\n\r\nfunction renderLoopIcon(): void {\r\n\tloopIcon.setAttribute(\"fill\", (synth.loopRepeatCount == -1) ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground);\r\n}\r\n\r\nfunction renderZoomIcon(): void {\r\n\tzoomIcon.style.color = zoomEnabled ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground;\r\n}\r\n\r\nfunction onKeyPressed(event: KeyboardEvent): void {\r\n\tswitch (event.keyCode) {\r\n\t\tcase 70: // first bar\r\n\t\t\tsynth.playhead = 0;\r\n\t\t\tsynth.computeLatestModValues();\r\n\t\t\trenderPlayhead();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t\tcase 32: // space\r\n\t\t\tonTogglePlay();\r\n\t\t\tsynth.computeLatestModValues();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t\tcase 219: // left brace\r\n\t\t\tsynth.goToPrevBar();\r\n\t\t\tsynth.computeLatestModValues();\r\n\t\t\trenderPlayhead();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t\tcase 221: // right brace\r\n\t\t\tsynth.goToNextBar();\r\n\t\t\tsynth.computeLatestModValues();\r\n\t\t\trenderPlayhead();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t\tcase 80: // p\r\n\t\t\tif (event.shiftKey) {\r\n\t\t\t\thashUpdatedExternally();\r\n\t\t\t\tlocation.href =\"../\" + (OFFLINE ? \"index.html\" : \"\") + \"#\" + synth.song!.toBase64String();\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\nfunction onCopyClicked(): void {\r\n\t// Set as any to allow compilation without clipboard types (since, uh, I didn't write this bit and don't know the proper types library) -jummbus\r\n\tlet nav: any;\r\n\tnav = navigator;\r\n\r\n\tif (nav.clipboard && nav.clipboard.writeText) {\r\n\t\tnav.clipboard.writeText(location.href).catch(() => {\r\n\t\t\twindow.prompt(\"Copy to clipboard:\", location.href);\r\n\t\t});\r\n\t\treturn;\r\n\t}\r\n\tconst textField: HTMLTextAreaElement = document.createElement(\"textarea\");\r\n\ttextField.textContent = location.href;\r\n\tdocument.body.appendChild(textField);\r\n\ttextField.select();\r\n\tconst succeeded: boolean = document.execCommand(\"copy\");\r\n\ttextField.remove();\r\n\tif (!succeeded) window.prompt(\"Copy this:\", location.href);\r\n}\r\n\r\nfunction onShareClicked(): void {\r\n\t(<any>navigator).share({ url: location.href });\r\n}\r\n\r\n\tif ( top !== self ) {\r\n\t// In an iframe.\r\n\tcopyLink.style.display = \"none\";\r\n\tshareLink.style.display = \"none\";\r\n} else {\r\n\t// Fullscreen.\r\n\tfullscreenLink.style.display = \"none\";\r\n\tif (!(\"share\" in navigator)) shareLink.style.display = \"none\";\r\n}\r\n\r\nif (getLocalStorage(\"volume\") != null) {\r\n\tvolumeSlider.value = getLocalStorage(\"volume\")!;\r\n}\r\nsetSynthVolume();\r\n\r\nwindow.addEventListener(\"resize\", onWindowResize);\r\nwindow.addEventListener(\"keydown\", onKeyPressed);\r\n\r\ntimeline.addEventListener(\"mousedown\", onTimelineMouseDown);\r\nwindow.addEventListener(\"mousemove\", onTimelineMouseMove);\r\nwindow.addEventListener(\"mouseup\", onTimelineCursorUp);\r\ntimeline.addEventListener(\"touchstart\", onTimelineTouchDown);\r\ntimeline.addEventListener(\"touchmove\", onTimelineTouchMove);\r\ntimeline.addEventListener(\"touchend\", onTimelineCursorUp);\r\ntimeline.addEventListener(\"touchcancel\", onTimelineCursorUp);\r\n\r\nplayButton.addEventListener(\"click\", onTogglePlay);\r\nloopButton.addEventListener(\"click\", onToggleLoop);\r\nvolumeSlider.addEventListener(\"input\", onVolumeChange);\r\nzoomButton.addEventListener(\"click\", onToggleZoom);\r\ncopyLink.addEventListener(\"click\", onCopyClicked);\r\nshareLink.addEventListener(\"click\", onShareClicked);\r\nwindow.addEventListener(\"hashchange\", hashUpdatedExternally);\r\n\r\nhashUpdatedExternally();\r\nrenderLoopIcon();\r\nrenderZoomIcon();\r\nrenderPlayButton();\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\n\texport {Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, NotePin, Note, Pattern, Instrument, Channel, Synth};\r\n","import { ColorConfig } from \"../editor/ColorConfig\";\r\nimport { events } from \"./Events\";\r\n\r\nexport class oscilloscopeCanvas {\r\n    public _EventUpdateCanvas:Function;\r\n\r\n    constructor(public readonly canvas: HTMLCanvasElement, readonly scale: number = 1) {\r\n        this._EventUpdateCanvas = function(directlinkL: Float32Array, directlinkR ?: Float32Array): void {\r\n            if(directlinkR) {\r\n                var ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n                ctx.fillStyle = ColorConfig.getComputed(\"--editor-background\");\r\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n                ctx.fillStyle = ColorConfig.getComputed(\"--oscilloscope-line-L\");\r\n                for (let i: number = directlinkL.length - 1; i >= directlinkL.length - 1 - (canvas.width/scale); i--) {\r\n                    let x = i - (directlinkL.length - 1) + (canvas.width/scale);\r\n                    let yl = (directlinkL[i] * (canvas.height/scale / 2) + (canvas.height/scale / 2));\r\n\r\n                    ctx.fillRect((x - 1)*scale, (yl - 1)*scale, 1*scale, 1.5*scale);\r\n                    if (x == 0) break;\r\n                }\r\n                ctx.fillStyle = ColorConfig.getComputed(\"--oscilloscope-line-R\"); //less ctx style calls = less expensive??? also avoiding uncached colors\r\n                for (let i: number = directlinkR.length - 1; i >= directlinkR.length - 1 - (canvas.width/scale); i--) {\r\n                    let x = i - (directlinkR.length - 1) + (canvas.width/scale);\r\n                    let yr = (directlinkR[i] * (canvas.height/scale / 2) + (canvas.height/scale / 2));\r\n                    \r\n                    ctx.fillRect((x - 1)*scale, (yr - 1)*scale, 1*scale, 1.5*scale);\r\n                    if (x == 0) break;\r\n                }\r\n            }\r\n        };\r\n        events.listen(\"oscilloscopeUpdate\", this._EventUpdateCanvas);\r\n    }\r\n\r\n    \r\n}\r\n"],"mappings":"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,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEnC,eAAkB,UAAWmC,SAAY,CAAC,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEnC,eAAkB,UAAWmC,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEnC,eAAkB,UAAWmC,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEnC,eAAkB,UAAWmC,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEnC,eAAkB,UAAWmC,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEnC,eAAkB,UAAWmC,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI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C,GAA8B9iC,MAA1B6iC,EAAqB,SACrB,IAAK,IAAIlO,EAAuB,EAAGA,EAAekO,EAAqB,SAAEtoD,OAAQo6C,IAAgB,CAC7F,MAAMyN,EAAqBS,EAAqB,SAAElO,GAClD,GAA8B,UAA1ByN,EAAoB,MAIpBloD,MAAMwc,QAAQ0rC,EAA2B,aAAI,CAC7C,MAAMW,EAA2BX,EAA2B,YAC5D,IAAK,IAAIngD,EAAY,EAAGA,EAAI8gD,EAAkBxoD,OAAQ0H,IAAK,CACvD,MAAM2oC,EAAwBmY,EAAkB9gD,GAChD,GAAiC,SAA7B2oC,EAAuB,KAGvB,SAEJ,GAAgC,MAA5BA,EAAuB,KAGvB,SAEJ,MAAMoY,EAAmBpY,EAAuB,KAE1CqY,EAAkB,CACpB,oBACA,qBACA,sBACA,mBACA,yBACA,uBACA,yBACA,4BACA,gCACA,qBACA,2BACA,uBACA,qBACA,+BACA,qBACA,6BACA,8BACA,0BACA,gCACA,+BACA,oBACA,6BACA,4BACA,6BACA,2BACA,yBACA,yBACA,2BACA,uBACA,yBACA,uBACA,yBACA,2BACA,6BACA,6BACA,2BACA,0BACA,uCACA,6BACA,gCACA,+BACA,0BACA,qBACA,0BACA,yBACA,wBACA,0BACA,mCACA,wCACA,kCACA,wCACA,kCACA,2BACA,4BACA,4BACA,4BACA,2BACA,4BACA,wCACA,yCACA,+BACA,8BACA,qCACA,0CACA,mCACA,uCACA,oCACA,4BACA,kCACA,4BAGEC,EAAqB,CACvB,oBACA,qBACA,sBACA,mBACA,yBACA,uBACA,yBACA,4BACA,gCACA,qBACA,2BACA,uBACA,qBACA,+BACA,qBACA,6BACA,8BACA,0BACA,gCACA,+BACA,oBACA,6BACA,4BACA,6BACA,2BACA,yBACA,yBACA,2BACA,uBACA,yBACA,uBACA,yBACA,2BACA,6BACA,6BACA,2BACA,0BACA,uCACA,6BACA,gCACA,+BACA,0BACA,qBACA,0BACA,yBACA,wBACA,0BACA,mCACA,wCACA,kCACA,wCACA,kCACA,2BACA,4BACA,4BACA,4BACA,2BACA,4BACA,wCACA,yCAC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"}